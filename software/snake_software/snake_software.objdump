
snake_software.elf:     file format elf32-littlenios2
snake_software.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0000d7a4 memsz 0x0000d7a4 flags r-x
    LOAD off    0x0000e7c4 vaddr 0x0008d7c4 paddr 0x0008f4f0 align 2**12
         filesz 0x00001d2c memsz 0x00001d2c flags rw-
    LOAD off    0x0001121c vaddr 0x0009121c paddr 0x0009121c align 2**12
         filesz 0x00000000 memsz 0x0000030c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000cfd8  000801b4  000801b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000638  0008d18c  0008d18c  0000e18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d2c  0008d7c4  0008f4f0  0000e7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000030c  0009121c  0009121c  0001121c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000104f0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cb8  00000000  00000000  00010518  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000015a8  00000000  00000000  000111d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002393f  00000000  00000000  00012778  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007aaa  00000000  00000000  000360b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00014470  00000000  00000000  0003db61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001b10  00000000  00000000  00051fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000229b  00000000  00000000  00053ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c1a4  00000000  00000000  00055d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00061f24  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  00061f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00065b94  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00065b97  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00065b9c  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  00065b9d  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  00065ba8  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00065bb3  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000c  00000000  00000000  00065bbe  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000032  00000000  00000000  00065bca  2**0
                  CONTENTS, READONLY
 25 .jdi          000041ce  00000000  00000000  00065bfc  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00028a54  00000000  00000000  00069dca  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b4 l    d  .text	00000000 .text
0008d18c l    d  .rodata	00000000 .rodata
0008d7c4 l    d  .rwdata	00000000 .rwdata
0009121c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 PS2.c
00000000 l    df *ABS*	00000000 alt_up_ps2_port.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 main.c
000806e0 l     F .text	00000030 moveLeft
00080710 l     F .text	00000030 moveRight
00080740 l     F .text	00000030 moveUp
00080770 l     F .text	00000030 moveDown
000807a0 l     F .text	00000110 movement
00000000 l    df *ABS*	00000000 ps2_keyboard.c
00000000 l    df *ABS*	00000000 snake.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00080f98 l     F .text	00000058 __sprint_r
0008d4f2 l     O .rodata	00000010 blanks.3452
0008d4e2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00083014 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00084a3c l     F .text	00000058 std
00084b48 l     F .text	00000008 __fp_lock
00084b50 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0008da90 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0008f4bc l     O .rwdata	00000004 charset
0008d528 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0008d670 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00088efc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0008a028 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0008a964 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008a9c4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008aac8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0008abec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008accc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008ae2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0008b05c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0008f4e0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0008b314 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008e44c l     O .rwdata	00001060 jtag_uart_0
0008b3ec l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008b62c l     F .text	00000228 altera_avalon_jtag_uart_irq
0008b854 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0008c0f4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0008c504 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0008c654 l     F .text	000000f8 alt_file_locked
0008c8d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0008cf74 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0008d128 l     F .text	00000040 alt_sim_halt
0008682c g     F .text	00000094 _mprec_log10
00086918 g     F .text	00000088 __any_on
000880d0 g     F .text	00000070 _isatty_r
0008d648 g     O .rodata	00000028 __mprec_tinytens
0008ae8c g     F .text	0000006c alt_main
00080e70 g     F .text	000000a0 _puts_r
00091298 g     O .bss	00000100 alt_irq
00088140 g     F .text	00000078 _lseek_r
0008f4f0 g       *ABS*	00000000 __flash_rwdata_start
00089a1c g     F .text	00000088 __eqdf2
00091528 g       *ABS*	00000000 __alt_heap_start
0008045c g     F .text	00000030 read_data_reg
00080df8 g     F .text	00000044 printf
00080000 g       *ABS*	00000000 __alt_mem_sram
00087b88 g     F .text	00000068 __sseek
00084aa4 g     F .text	000000a4 __sinit
00080428 g     F .text	00000034 read_CE_bit
000857b0 g     F .text	00000084 _setlocale_r
00084ba4 g     F .text	0000009c __sfmoreglue
0008af18 g     F .text	00000020 __malloc_unlock
000862a8 g     F .text	000000e0 memmove
0008d7c4 g     O .rwdata	00000198 key_table
00084b94 g     F .text	00000010 _cleanup
000869a0 g     F .text	000000bc _Balloc
00089b2c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000000c __reset
000809d8 g     F .text	00000078 get_multi_byte_make_code_index
00080020 g       *ABS*	00000000 __flash_exceptions_start
0008805c g     F .text	00000074 _fstat_r
00091254 g     O .bss	00000004 errno
00080d38 g     F .text	00000064 set_keyboard_rate
0009125c g     O .bss	00000004 alt_argv
000974ac g       *ABS*	00000000 _gp
00091228 g     O .bss	00000004 up
00080d9c g     F .text	0000005c reset_keyboard
0008e2cc g     O .rwdata	00000180 alt_fd_list
0008cafc g     F .text	00000094 alt_find_dev
00086208 g     F .text	000000a0 memcpy
00084b88 g     F .text	0000000c _cleanup_r
00089cc4 g     F .text	000000f8 __floatsidf
0008c5dc g     F .text	00000078 alt_io_redirect
00089c3c g     F .text	00000088 __ltdf2
00080318 g     F .text	0000004c clear_FIFO
0008d18c g       *ABS*	00000000 __DTOR_END__
00080f10 g     F .text	00000014 puts
000805c4 g     F .text	000000a8 read_data_byte_with_timeout
0008cadc g     F .text	00000020 altera_nios2_irq_init
0008677c g     F .text	000000b0 __ratio
0008ba6c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00080e3c g     F .text	00000034 _printf_r
0008a164 g     F .text	00000008 __udivsi3
0008ab28 g     F .text	000000c4 isatty
0008d558 g     O .rodata	000000c8 __mprec_tens
0008578c g     F .text	00000008 __locale_charset
00091248 g     O .bss	00000004 __malloc_top_pad
0008f4b8 g     O .rwdata	00000004 __mb_cur_max
00085794 g     F .text	0000000c _localeconv_r
00087104 g     F .text	0000003c __i2b
00085170 g     F .text	0000049c __sfvwrite_r
0008f4ac g     O .rwdata	00000004 right
00087b10 g     F .text	00000070 _sbrk_r
000881b8 g     F .text	00000078 _read_r
0008de90 g     O .rwdata	0000000c __lc_ctype
0008f4d8 g     O .rwdata	00000004 alt_max_fd
0008a664 g     F .text	00000138 __unpack_d
00087f38 g     F .text	00000110 _fclose_r
0008048c g     F .text	00000034 read_num_bytes_available
00084a08 g     F .text	00000034 fflush
0008d95c g     O .rwdata	00000066 ascii_codes
0009124c g     O .bss	00000004 __malloc_max_sbrked_mem
000803c4 g     F .text	00000034 read_RI_bit
000804ec g     F .text	00000070 write_data_byte
0008938c g     F .text	00000074 __adddf3
000801f0 g     F .text	00000058 getInput
0008665c g     F .text	00000120 __b2d
0008889c g     F .text	00000660 __umoddi3
0008ad38 g     F .text	000000f4 lseek
0008f4b4 g     O .rwdata	00000004 _global_impure_ptr
000874ac g     F .text	000005f4 _realloc_r
00091528 g       *ABS*	00000000 __bss_end
0008c40c g     F .text	000000f8 alt_iic_isr_register
0008c9d0 g     F .text	0000010c alt_tick
00088230 g     F .text	0000066c __udivdi3
0008d620 g     O .rodata	00000028 __mprec_bigtens
0008738c g     F .text	00000120 __s2b
00089e94 g     F .text	00000194 __floatunsidf
0008657c g     F .text	00000060 __mcmp
000804c0 g     F .text	0000002c read_data_byte
00084b70 g     F .text	00000018 __fp_lock_all
0008c3c4 g     F .text	00000048 alt_ic_irq_enabled
0008c938 g     F .text	00000098 alt_alarm_stop
000803f8 g     F .text	00000030 read_RE_bit
00091264 g     O .bss	00000004 alt_irq_active
00091224 g     O .bss	00000004 left
000800ec g     F .exceptions	000000c8 alt_irq_handler
0008e2a4 g     O .rwdata	00000028 alt_dev_null
00080364 g     F .text	00000030 write_ctrl_reg
0008c024 g     F .text	0000001c alt_dcache_flush_all
00086448 g     F .text	00000070 __hi0bits
00089dbc g     F .text	000000d8 __fixdfsi
0008f4f0 g       *ABS*	00000000 __ram_rwdata_end
0008da28 g     O .rwdata	00000066 multi_byte_make_code
0008f4d0 g     O .rwdata	00000008 alt_dev_list
0008b1f0 g     F .text	00000124 write
0008d7c4 g       *ABS*	00000000 __ram_rodata_end
0008a9f0 g     F .text	000000d8 fstat
0008726c g     F .text	00000120 __pow5mult
0008055c g     F .text	00000068 write_data_byte_with_ack
0009123c g     O .bss	00000004 __nlocale_changed
0008a16c g     F .text	00000008 __umodsi3
00091528 g       *ABS*	00000000 end
0008b56c g     F .text	000000c0 altera_avalon_jtag_uart_init
0008d188 g       *ABS*	00000000 __CTOR_LIST__
00100000 g       *ABS*	00000000 __alt_stack_pointer
0008a2d0 g     F .text	00000080 __clzsi2
0008bc90 g     F .text	00000240 altera_avalon_jtag_uart_write
00084a94 g     F .text	00000004 __sfp_lock_acquire
00086124 g     F .text	000000e4 memchr
00080ff0 g     F .text	00001ec4 ___vfprintf_internal_r
00084e5c g     F .text	00000314 _free_r
0008cf78 g     F .text	000001b0 __call_exitprocs
00091240 g     O .bss	00000004 __mlocale_changed
0008f4c4 g     O .rwdata	00000004 __malloc_sbrk_base
000801b4 g     F .text	0000003c _start
0009122c g     O .bss	00000004 down
00091268 g     O .bss	00000004 _alt_tick_rate
00086d64 g     F .text	0000014c __lshift
0009126c g     O .bss	00000004 _alt_nticks
0008af38 g     F .text	00000124 read
0008b3a8 g     F .text	00000044 alt_sys_init
0008ce40 g     F .text	00000134 __register_exitproc
00086eb0 g     F .text	00000254 __multiply
0008b904 g     F .text	00000074 altera_avalon_jtag_uart_close
0008a174 g     F .text	00000038 __mulsi3
0008d7c4 g       *ABS*	00000000 __ram_rwdata_start
0008d18c g       *ABS*	00000000 __ram_rodata_start
00091270 g     O .bss	00000028 __malloc_current_mallinfo
00086a5c g     F .text	0000017c __d2b
0008b424 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0008ccb0 g     F .text	000000d0 alt_get_fd
00080248 g     F .text	000000d0 get_mode
0008a79c g     F .text	000000c8 __fpcmp_parts_d
00087ec8 g     F .text	00000070 _close_r
00091238 g     O .bss	00000004 decode_mode
0008cdcc g     F .text	00000074 memcmp
0008b4d4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00091528 g       *ABS*	00000000 __alt_stack_base
0008b51c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00082ed8 g     F .text	0000013c __swsetup_r
000897c4 g     F .text	00000258 __divdf3
00084c40 g     F .text	000000f0 __sfp
000868c0 g     F .text	00000058 __copybits
0008de9c g     O .rwdata	00000408 __malloc_av_
00084aa0 g     F .text	00000004 __sinit_lock_release
00089400 g     F .text	000003c4 __muldf3
00087c6c g     F .text	00000060 __sread
0008cb90 g     F .text	00000120 alt_find_file
0008c040 g     F .text	000000b4 alt_dev_llist_insert
0008aef8 g     F .text	00000020 __malloc_lock
0008b134 g     F .text	000000bc sbrk
0008480c g     F .text	000001fc _fflush_r
00087e00 g     F .text	000000c8 _calloc_r
0009121c g       *ABS*	00000000 __bss_start
00086388 g     F .text	00000098 memset
0008094c g     F .text	0000008c main
00080a50 g     F .text	00000078 get_single_byte_make_code_index
00091260 g     O .bss	00000004 alt_envp
00091250 g     O .bss	00000004 __malloc_max_total_mem
0008066c g     F .text	00000074 wait_for_ack
0008b47c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00087b80 g     F .text	00000008 __sclose
00100000 g       *ABS*	00000000 __alt_heap_limit
00088048 g     F .text	00000014 fclose
00091398 g     O .bss	00000190 _atexit0
00083258 g     F .text	000015b4 _dtoa_r
000859e4 g     F .text	00000740 _malloc_r
0008f4dc g     O .rwdata	00000004 alt_errno
00091234 g     O .bss	00000001 key
000856d4 g     F .text	000000b8 _fwalk
0008a0a4 g     F .text	00000060 __divsi3
0008d67c g     O .rodata	00000014 __thenan_df
00080394 g     F .text	00000030 read_ctrl_reg
00084d30 g     F .text	0000012c _malloc_trim_r
0008d18c g       *ABS*	00000000 __CTOR_END__
00087ccc g     F .text	000000bc strcmp
0008d18c g       *ABS*	00000000 __flash_rodata_start
0008d18c g       *ABS*	00000000 __DTOR_LIST__
0009121c g     O .bss	00000004 xCoor
00089aa4 g     F .text	00000088 __nedf2
0008b374 g     F .text	00000034 alt_irq_init
0008b0bc g     F .text	00000078 alt_release_fd
0008d690 g     O .rodata	00000100 __clz_tab
00091244 g     O .bss	00000004 _PathLocale
0008cd80 g     F .text	00000014 atexit
00087d88 g     F .text	00000078 _write_r
00085834 g     F .text	0000001c setlocale
0008f4b0 g     O .rwdata	00000004 _impure_ptr
00091258 g     O .bss	00000004 alt_argc
0008c1b8 g     F .text	00000064 _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
000865dc g     F .text	00000080 __ulp
00087aa0 g     F .text	00000040 __isinfd
00084b58 g     F .text	00000018 __fp_unlock_all
0008f4c8 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
000857a0 g     F .text	00000010 localeconv
0008c238 g     F .text	00000050 alt_ic_isr_register
0008f4f0 g       *ABS*	00000000 _edata
00091528 g       *ABS*	00000000 _end
000801b4 g       *ABS*	00000000 __ram_exceptions_end
0008b978 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0008c324 g     F .text	000000a0 alt_ic_irq_disable
00087bf0 g     F .text	0000007c __swrite
0008f4c0 g     O .rwdata	00000004 __malloc_trim_threshold
0008cd94 g     F .text	00000038 exit
0008560c g     F .text	000000c8 _fwalk_reent
00086bd8 g     F .text	0000018c __mdiff
0008a104 g     F .text	00000060 __modsi3
00100000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00084a98 g     F .text	00000004 __sfp_lock_release
0008d168 g     F .text	00000020 _exit
00087ae0 g     F .text	00000030 __isnand
0008bed0 g     F .text	00000154 alt_alarm_start
0008a1ac g     F .text	00000124 __muldi3
00080ac8 g     F .text	000001d4 get_next_state
00085850 g     F .text	00000194 __smakebuf_r
00080f24 g     F .text	00000074 strlen
0008c74c g     F .text	0000018c open
00089bb4 g     F .text	00000088 __gedf2
0008c21c g     F .text	0000001c alt_icache_flush_all
00080c9c g     F .text	0000009c read_make_code
0008f4e4 g     O .rwdata	00000004 alt_priority_mask
0008c288 g     F .text	0000009c alt_ic_irq_enable
00082eb4 g     F .text	00000024 __vfprintf_internal
0008930c g     F .text	00000080 __subdf3
0008d9c2 g     O .rwdata	00000066 single_byte_make_code
000864b8 g     F .text	000000c4 __lo0bits
0008f4e8 g     O .rwdata	00000008 alt_alarm_list
0008c154 g     F .text	00000064 _do_ctors
00091230 g     O .bss	00000004 status
0008a864 g     F .text	00000100 close
00091220 g     O .bss	00000004 yCoor
0008ac4c g     F .text	00000080 alt_load
0008a350 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00084a9c g     F .text	00000004 __sinit_lock_acquire
00087140 g     F .text	0000012c __multadd
00086420 g     F .text	00000028 _Bfree
000808b0 g     F .text	0000009c read_make_code_with_timeout



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406d14 	ori	at,at,436
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800fc:	0005313a 	rdctl	r2,ipending
   80100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80110:	00800044 	movi	r2,1
   80114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	e0ffff17 	ldw	r3,-4(fp)
   8011c:	e0bffe17 	ldw	r2,-8(fp)
   80120:	1884703a 	and	r2,r3,r2
   80124:	1005003a 	cmpeq	r2,r2,zero
   80128:	1000161e 	bne	r2,zero,80184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	e0bffd17 	ldw	r2,-12(fp)
   80130:	00c00274 	movhi	r3,9
   80134:	18c4a604 	addi	r3,r3,4760
   80138:	100490fa 	slli	r2,r2,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	11400017 	ldw	r5,0(r2)
   80144:	e0bffd17 	ldw	r2,-12(fp)
   80148:	00c00274 	movhi	r3,9
   8014c:	18c4a604 	addi	r3,r3,4760
   80150:	100490fa 	slli	r2,r2,3
   80154:	10c5883a 	add	r2,r2,r3
   80158:	10800104 	addi	r2,r2,4
   8015c:	11000017 	ldw	r4,0(r2)
   80160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80164:	0005313a 	rdctl	r2,ipending
   80168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   8016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	1004c03a 	cmpne	r2,r2,zero
   8017c:	103fe31e 	bne	r2,zero,8010c <alt_irq_handler+0x20>
   80180:	00000706 	br	801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80184:	e0bffe17 	ldw	r2,-8(fp)
   80188:	1085883a 	add	r2,r2,r2
   8018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80190:	e0bffd17 	ldw	r2,-12(fp)
   80194:	10800044 	addi	r2,r2,1
   80198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   8019c:	003fde06 	br	80118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a0:	e037883a 	mov	sp,fp
   801a4:	dfc00117 	ldw	ra,4(sp)
   801a8:	df000017 	ldw	fp,0(sp)
   801ac:	dec00204 	addi	sp,sp,8
   801b0:	f800283a 	ret

Disassembly of section .text:

000801b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b4:	06c00434 	movhi	sp,16
    ori sp, sp, %lo(__alt_stack_pointer)
   801b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801bc:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   801c0:	d69d2b14 	ori	gp,gp,29868
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c4:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   801c8:	10848714 	ori	r2,r2,4636

    movhi r3, %hi(__bss_end)
   801cc:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   801d0:	18c54a14 	ori	r3,r3,5416

    beq r2, r3, 1f
   801d4:	10c00326 	beq	r2,r3,801e4 <_start+0x30>

0:
    stw zero, (r2)
   801d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e0:	10fffd36 	bltu	r2,r3,801d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e4:	008ac4c0 	call	8ac4c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801e8:	008ae8c0 	call	8ae8c <alt_main>

000801ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801ec:	003fff06 	br	801ec <alt_after_alt_main>

000801f0 <getInput>:
#include <io.h>
#include <system.h>
#include <stdio.h>

char* getInput()
{
   801f0:	defffd04 	addi	sp,sp,-12
   801f4:	dfc00215 	stw	ra,8(sp)
   801f8:	df000115 	stw	fp,4(sp)
   801fc:	df000104 	addi	fp,sp,4
	char* code;
	while(!IORD_8DIRECT(PS2_BASE, 0));
   80200:	00800434 	movhi	r2,16
   80204:	10841004 	addi	r2,r2,4160
   80208:	10800023 	ldbuio	r2,0(r2)
   8020c:	1005003a 	cmpeq	r2,r2,zero
   80210:	103ffb1e 	bne	r2,zero,80200 <getInput+0x10>
	code = IORD_8DIRECT(PS2_BASE,4);
   80214:	00800434 	movhi	r2,16
   80218:	10841104 	addi	r2,r2,4164
   8021c:	10800023 	ldbuio	r2,0(r2)
   80220:	e0bfff15 	stw	r2,-4(fp)
	printf("Key recieved: %x", code);
   80224:	01000274 	movhi	r4,9
   80228:	21346304 	addi	r4,r4,-11892
   8022c:	e17fff17 	ldw	r5,-4(fp)
   80230:	0080df80 	call	80df8 <printf>

}
   80234:	e037883a 	mov	sp,fp
   80238:	dfc00117 	ldw	ra,4(sp)
   8023c:	df000017 	ldw	fp,0(sp)
   80240:	dec00204 	addi	sp,sp,8
   80244:	f800283a 	ret

00080248 <get_mode>:
#include <nios2.h>
#include "alt_up_ps2_port.h"

PS2_DEVICE get_mode()
{
   80248:	defffb04 	addi	sp,sp,-20
   8024c:	dfc00415 	stw	ra,16(sp)
   80250:	df000315 	stw	fp,12(sp)
   80254:	df000304 	addi	fp,sp,12
  alt_u8 byte;
  //send the reset request, wait for ACK
  int status = write_data_byte_with_ack(0xff, DEFAULT_PS2_TIMEOUT_VAL);
   80258:	01003fc4 	movi	r4,255
   8025c:	014002f4 	movhi	r5,11
   80260:	296b9804 	addi	r5,r5,-20896
   80264:	008055c0 	call	8055c <write_data_byte_with_ack>
   80268:	e0bffd15 	stw	r2,-12(fp)
  if (status == PS2_SUCCESS) {
   8026c:	e0bffd17 	ldw	r2,-12(fp)
   80270:	1004c03a 	cmpne	r2,r2,zero
   80274:	1000201e 	bne	r2,zero,802f8 <get_mode+0xb0>
    // reset succeed, now try to get the BAT result, AA means passed
    status = read_data_byte_with_timeout(&byte, DEFAULT_PS2_TIMEOUT_VAL);
   80278:	e13ffe04 	addi	r4,fp,-8
   8027c:	014002f4 	movhi	r5,11
   80280:	296b9804 	addi	r5,r5,-20896
   80284:	00805c40 	call	805c4 <read_data_byte_with_timeout>
   80288:	e0bffd15 	stw	r2,-12(fp)
    if (status == PS2_SUCCESS && byte == 0xAA) {
   8028c:	e0bffd17 	ldw	r2,-12(fp)
   80290:	1004c03a 	cmpne	r2,r2,zero
   80294:	1000181e 	bne	r2,zero,802f8 <get_mode+0xb0>
   80298:	e0bffe03 	ldbu	r2,-8(fp)
   8029c:	10803fcc 	andi	r2,r2,255
   802a0:	10802a98 	cmpnei	r2,r2,170
   802a4:	1000141e 	bne	r2,zero,802f8 <get_mode+0xb0>
      //get the 2nd byte
      status = read_data_byte_with_timeout(&byte, DEFAULT_PS2_TIMEOUT_VAL);
   802a8:	e13ffe04 	addi	r4,fp,-8
   802ac:	014002f4 	movhi	r5,11
   802b0:	296b9804 	addi	r5,r5,-20896
   802b4:	00805c40 	call	805c4 <read_data_byte_with_timeout>
   802b8:	e0bffd15 	stw	r2,-12(fp)
      if (status == PS2_TIMEOUT) {
   802bc:	e0bffd17 	ldw	r2,-12(fp)
   802c0:	10bfffd8 	cmpnei	r2,r2,-1
   802c4:	1000031e 	bne	r2,zero,802d4 <get_mode+0x8c>
	//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
	return PS2_KEYBOARD;
   802c8:	00800044 	movi	r2,1
   802cc:	e0bfff15 	stw	r2,-4(fp)
   802d0:	00000b06 	br	80300 <get_mode+0xb8>
      } else if (status == PS2_SUCCESS && byte == 0x00) {
   802d4:	e0bffd17 	ldw	r2,-12(fp)
   802d8:	1004c03a 	cmpne	r2,r2,zero
   802dc:	1000061e 	bne	r2,zero,802f8 <get_mode+0xb0>
   802e0:	e0bffe03 	ldbu	r2,-8(fp)
   802e4:	10803fcc 	andi	r2,r2,255
   802e8:	1004c03a 	cmpne	r2,r2,zero
   802ec:	1000021e 	bne	r2,zero,802f8 <get_mode+0xb0>
	//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
	return PS2_MOUSE;
   802f0:	e03fff15 	stw	zero,-4(fp)
   802f4:	00000206 	br	80300 <get_mode+0xb8>
      }
    }
  }
  // when writing data to the PS/2 device, error occurs...
  return PS2_UNKNOWN;
   802f8:	00800084 	movi	r2,2
   802fc:	e0bfff15 	stw	r2,-4(fp)
   80300:	e0bfff17 	ldw	r2,-4(fp)
}
   80304:	e037883a 	mov	sp,fp
   80308:	dfc00117 	ldw	ra,4(sp)
   8030c:	df000017 	ldw	fp,0(sp)
   80310:	dec00204 	addi	sp,sp,8
   80314:	f800283a 	ret

00080318 <clear_FIFO>:

void clear_FIFO()
{
   80318:	defffc04 	addi	sp,sp,-16
   8031c:	dfc00315 	stw	ra,12(sp)
   80320:	df000215 	stw	fp,8(sp)
   80324:	df000204 	addi	fp,sp,8
  // The DATA byte of the data register will be automatically cleared after
  // a read, so we simply keep reading it until there are no available bytes
  alt_u16 num = 0;
   80328:	e03fff0d 	sth	zero,-4(fp)
  alt_u32 data_reg = 0;
   8032c:	e03ffe15 	stw	zero,-8(fp)
  do {
    // read the data register (the DATA byte is cleared)
    data_reg = read_data_reg();
   80330:	008045c0 	call	8045c <read_data_reg>
   80334:	e0bffe15 	stw	r2,-8(fp)
    // get the number of available bytes from the RAVAIL part of data register
    num = read_num_bytes_available(data_reg);
   80338:	e13ffe17 	ldw	r4,-8(fp)
   8033c:	008048c0 	call	8048c <read_num_bytes_available>
   80340:	e0bfff0d 	sth	r2,-4(fp)
  } while (num > 0);
   80344:	e0bfff0b 	ldhu	r2,-4(fp)
   80348:	1004c03a 	cmpne	r2,r2,zero
   8034c:	103ff81e 	bne	r2,zero,80330 <clear_FIFO+0x18>
}
   80350:	e037883a 	mov	sp,fp
   80354:	dfc00117 	ldw	ra,4(sp)
   80358:	df000017 	ldw	fp,0(sp)
   8035c:	dec00204 	addi	sp,sp,8
   80360:	f800283a 	ret

00080364 <write_ctrl_reg>:

////////////////////////////////////////////////////////////
// Control Register Operations
void write_ctrl_reg(alt_u32 ctrl_data)
{
   80364:	defffe04 	addi	sp,sp,-8
   80368:	df000115 	stw	fp,4(sp)
   8036c:	df000104 	addi	fp,sp,4
   80370:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALT_UP_PS2_PORT_CONTROL(PS2_BASE, ctrl_data);
   80374:	e0ffff17 	ldw	r3,-4(fp)
   80378:	00800434 	movhi	r2,16
   8037c:	10841104 	addi	r2,r2,4164
   80380:	10c00035 	stwio	r3,0(r2)
}
   80384:	e037883a 	mov	sp,fp
   80388:	df000017 	ldw	fp,0(sp)
   8038c:	dec00104 	addi	sp,sp,4
   80390:	f800283a 	ret

00080394 <read_ctrl_reg>:

alt_u32 read_ctrl_reg()
{
   80394:	defffe04 	addi	sp,sp,-8
   80398:	df000115 	stw	fp,4(sp)
   8039c:	df000104 	addi	fp,sp,4
  alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CONTROL(PS2_BASE);
   803a0:	00800434 	movhi	r2,16
   803a4:	10841104 	addi	r2,r2,4164
   803a8:	10800037 	ldwio	r2,0(r2)
   803ac:	e0bfff15 	stw	r2,-4(fp)
  return ctrl_reg;
   803b0:	e0bfff17 	ldw	r2,-4(fp)
}
   803b4:	e037883a 	mov	sp,fp
   803b8:	df000017 	ldw	fp,0(sp)
   803bc:	dec00104 	addi	sp,sp,4
   803c0:	f800283a 	ret

000803c4 <read_RI_bit>:

alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   803c4:	defffd04 	addi	sp,sp,-12
   803c8:	df000215 	stw	fp,8(sp)
   803cc:	df000204 	addi	fp,sp,8
   803d0:	e13fff15 	stw	r4,-4(fp)
  alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CONTROL_RI_MSK)
			>> ALT_UP_PS2_PORT_CONTROL_RI_OFST);
   803d4:	e0bfff17 	ldw	r2,-4(fp)
   803d8:	1080400c 	andi	r2,r2,256
   803dc:	1004d23a 	srli	r2,r2,8
   803e0:	e0bffe05 	stb	r2,-8(fp)
  return ri;
   803e4:	e0bffe03 	ldbu	r2,-8(fp)
}
   803e8:	e037883a 	mov	sp,fp
   803ec:	df000017 	ldw	fp,0(sp)
   803f0:	dec00104 	addi	sp,sp,4
   803f4:	f800283a 	ret

000803f8 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   803f8:	defffd04 	addi	sp,sp,-12
   803fc:	df000215 	stw	fp,8(sp)
   80400:	df000204 	addi	fp,sp,8
   80404:	e13fff15 	stw	r4,-4(fp)
  alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CONTROL_RE_MSK)
			>> ALT_UP_PS2_PORT_CONTROL_RE_OFST);
   80408:	e0bfff17 	ldw	r2,-4(fp)
   8040c:	1080004c 	andi	r2,r2,1
   80410:	e0bffe05 	stb	r2,-8(fp)
  return re;
   80414:	e0bffe03 	ldbu	r2,-8(fp)
}
   80418:	e037883a 	mov	sp,fp
   8041c:	df000017 	ldw	fp,0(sp)
   80420:	dec00104 	addi	sp,sp,4
   80424:	f800283a 	ret

00080428 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   80428:	defffd04 	addi	sp,sp,-12
   8042c:	df000215 	stw	fp,8(sp)
   80430:	df000204 	addi	fp,sp,8
   80434:	e13fff15 	stw	r4,-4(fp)
  alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CONTROL_CE_MSK)
			>> ALT_UP_PS2_PORT_CONTROL_CE_OFST);
   80438:	e0bfff17 	ldw	r2,-4(fp)
   8043c:	1081000c 	andi	r2,r2,1024
   80440:	1004d2ba 	srli	r2,r2,10
   80444:	e0bffe05 	stb	r2,-8(fp)
  return re;
   80448:	e0bffe03 	ldbu	r2,-8(fp)
}
   8044c:	e037883a 	mov	sp,fp
   80450:	df000017 	ldw	fp,0(sp)
   80454:	dec00104 	addi	sp,sp,4
   80458:	f800283a 	ret

0008045c <read_data_reg>:

////////////////////////////////////////////////////////////
// Data Register Operations

alt_u32 read_data_reg()
{
   8045c:	defffe04 	addi	sp,sp,-8
   80460:	df000115 	stw	fp,4(sp)
   80464:	df000104 	addi	fp,sp,4
  alt_u32 data_reg = IORD_ALT_UP_PS2_PORT_DATA(PS2_BASE);
   80468:	00800434 	movhi	r2,16
   8046c:	10841004 	addi	r2,r2,4160
   80470:	10800037 	ldwio	r2,0(r2)
   80474:	e0bfff15 	stw	r2,-4(fp)
  return data_reg;
   80478:	e0bfff17 	ldw	r2,-4(fp)
}
   8047c:	e037883a 	mov	sp,fp
   80480:	df000017 	ldw	fp,0(sp)
   80484:	dec00104 	addi	sp,sp,4
   80488:	f800283a 	ret

0008048c <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   8048c:	defffd04 	addi	sp,sp,-12
   80490:	df000215 	stw	fp,8(sp)
   80494:	df000204 	addi	fp,sp,8
   80498:	e13fff15 	stw	r4,-4(fp)
  alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK )
			     >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   8049c:	e0bfff17 	ldw	r2,-4(fp)
   804a0:	10bfffec 	andhi	r2,r2,65535
   804a4:	1004d43a 	srli	r2,r2,16
   804a8:	e0bffe0d 	sth	r2,-8(fp)
  return ravail;
   804ac:	e0bffe0b 	ldhu	r2,-8(fp)
}
   804b0:	e037883a 	mov	sp,fp
   804b4:	df000017 	ldw	fp,0(sp)
   804b8:	dec00104 	addi	sp,sp,4
   804bc:	f800283a 	ret

000804c0 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   804c0:	defffd04 	addi	sp,sp,-12
   804c4:	df000215 	stw	fp,8(sp)
   804c8:	df000204 	addi	fp,sp,8
   804cc:	e13fff15 	stw	r4,-4(fp)
  alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK)
			   >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   804d0:	e0bfff17 	ldw	r2,-4(fp)
   804d4:	e0bffe05 	stb	r2,-8(fp)
  return data;
   804d8:	e0bffe03 	ldbu	r2,-8(fp)
}
   804dc:	e037883a 	mov	sp,fp
   804e0:	df000017 	ldw	fp,0(sp)
   804e4:	dec00104 	addi	sp,sp,4
   804e8:	f800283a 	ret

000804ec <write_data_byte>:

int write_data_byte(alt_u8 byte)
{
   804ec:	defffb04 	addi	sp,sp,-20
   804f0:	dfc00415 	stw	ra,16(sp)
   804f4:	df000315 	stw	fp,12(sp)
   804f8:	df000304 	addi	fp,sp,12
   804fc:	e13ffe05 	stb	r4,-8(fp)
  //note: data are only located at the lower 8 bits
  //note: the software send command to the PS2 peripheral through the data
  //		register rather than the control register
  IOWR_ALT_UP_PS2_PORT_DATA(PS2_BASE, byte);
   80500:	e0fffe03 	ldbu	r3,-8(fp)
   80504:	00800434 	movhi	r2,16
   80508:	10841004 	addi	r2,r2,4160
   8050c:	10c00035 	stwio	r3,0(r2)
  alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_DATA(PS2_BASE);
   80510:	00800434 	movhi	r2,16
   80514:	10841004 	addi	r2,r2,4160
   80518:	10800037 	ldwio	r2,0(r2)
   8051c:	e0bffd15 	stw	r2,-12(fp)
  if ( read_CE_bit(ctrl_reg) ) {
   80520:	e13ffd17 	ldw	r4,-12(fp)
   80524:	00804280 	call	80428 <read_CE_bit>
   80528:	10803fcc 	andi	r2,r2,255
   8052c:	1005003a 	cmpeq	r2,r2,zero
   80530:	1000031e 	bne	r2,zero,80540 <write_data_byte+0x54>
    //CE bit is set --> error occurs on sending commands
    return PS2_ERROR;
   80534:	00bfff84 	movi	r2,-2
   80538:	e0bfff15 	stw	r2,-4(fp)
   8053c:	00000106 	br	80544 <write_data_byte+0x58>
  }
  return PS2_SUCCESS;
   80540:	e03fff15 	stw	zero,-4(fp)
   80544:	e0bfff17 	ldw	r2,-4(fp)
}
   80548:	e037883a 	mov	sp,fp
   8054c:	dfc00117 	ldw	ra,4(sp)
   80550:	df000017 	ldw	fp,0(sp)
   80554:	dec00204 	addi	sp,sp,8
   80558:	f800283a 	ret

0008055c <write_data_byte_with_ack>:

int write_data_byte_with_ack(alt_u8 byte, unsigned timeout)
{
   8055c:	defff904 	addi	sp,sp,-28
   80560:	dfc00615 	stw	ra,24(sp)
   80564:	df000515 	stw	fp,20(sp)
   80568:	df000504 	addi	fp,sp,20
   8056c:	e17ffe15 	stw	r5,-8(fp)
   80570:	e13ffd05 	stb	r4,-12(fp)
  //note: data are only located at the lower 8 bits
  //note: the software send command to the PS2 peripheral through the data
  //		register rather than the control register
  int send_status = write_data_byte(byte);
   80574:	e13ffd03 	ldbu	r4,-12(fp)
   80578:	00804ec0 	call	804ec <write_data_byte>
   8057c:	e0bffc15 	stw	r2,-16(fp)
  if ( send_status != PS2_SUCCESS ) {
   80580:	e0bffc17 	ldw	r2,-16(fp)
   80584:	1005003a 	cmpeq	r2,r2,zero
   80588:	1000031e 	bne	r2,zero,80598 <write_data_byte_with_ack+0x3c>
    // return on sending error
    return send_status;
   8058c:	e0bffc17 	ldw	r2,-16(fp)
   80590:	e0bfff15 	stw	r2,-4(fp)
   80594:	00000506 	br	805ac <write_data_byte_with_ack+0x50>
  }

  int ack_status = wait_for_ack(timeout);
   80598:	e13ffe17 	ldw	r4,-8(fp)
   8059c:	008066c0 	call	8066c <wait_for_ack>
   805a0:	e0bffb15 	stw	r2,-20(fp)
  return ack_status;
   805a4:	e0bffb17 	ldw	r2,-20(fp)
   805a8:	e0bfff15 	stw	r2,-4(fp)
   805ac:	e0bfff17 	ldw	r2,-4(fp)
}
   805b0:	e037883a 	mov	sp,fp
   805b4:	dfc00117 	ldw	ra,4(sp)
   805b8:	df000017 	ldw	fp,0(sp)
   805bc:	dec00204 	addi	sp,sp,8
   805c0:	f800283a 	ret

000805c4 <read_data_byte_with_timeout>:

int read_data_byte_with_timeout(alt_u8 *byte, alt_u32 time_out)
{
   805c4:	defff804 	addi	sp,sp,-32
   805c8:	dfc00715 	stw	ra,28(sp)
   805cc:	df000615 	stw	fp,24(sp)
   805d0:	df000604 	addi	fp,sp,24
   805d4:	e13ffd15 	stw	r4,-12(fp)
   805d8:	e17ffe15 	stw	r5,-8(fp)
  alt_u32 data_reg = 0; 
   805dc:	e03ffc15 	stw	zero,-16(fp)
  alt_u16 num = 0; 
   805e0:	e03ffb0d 	sth	zero,-20(fp)
  alt_u32 count = 0;
   805e4:	e03ffa15 	stw	zero,-24(fp)
   805e8:	00000006 	br	805ec <read_data_byte_with_timeout+0x28>
  for (;;) {
    count++;
   805ec:	e0bffa17 	ldw	r2,-24(fp)
   805f0:	10800044 	addi	r2,r2,1
   805f4:	e0bffa15 	stw	r2,-24(fp)
    data_reg = read_data_reg();
   805f8:	008045c0 	call	8045c <read_data_reg>
   805fc:	e0bffc15 	stw	r2,-16(fp)
    num = read_num_bytes_available(data_reg);
   80600:	e13ffc17 	ldw	r4,-16(fp)
   80604:	008048c0 	call	8048c <read_num_bytes_available>
   80608:	e0bffb0d 	sth	r2,-20(fp)
    if (num > 0) {
   8060c:	e0bffb0b 	ldhu	r2,-20(fp)
   80610:	1005003a 	cmpeq	r2,r2,zero
   80614:	1000071e 	bne	r2,zero,80634 <read_data_byte_with_timeout+0x70>
      *byte = read_data_byte(data_reg);
   80618:	e13ffc17 	ldw	r4,-16(fp)
   8061c:	00804c00 	call	804c0 <read_data_byte>
   80620:	1007883a 	mov	r3,r2
   80624:	e0bffd17 	ldw	r2,-12(fp)
   80628:	10c00005 	stb	r3,0(r2)
      return PS2_SUCCESS;
   8062c:	e03fff15 	stw	zero,-4(fp)
   80630:	00000806 	br	80654 <read_data_byte_with_timeout+0x90>
    }
    //timeout = 0 means to disable the timeout
    if ( time_out!= 0 && count > time_out) {
   80634:	e0bffe17 	ldw	r2,-8(fp)
   80638:	1005003a 	cmpeq	r2,r2,zero
   8063c:	103feb1e 	bne	r2,zero,805ec <read_data_byte_with_timeout+0x28>
   80640:	e0fffa17 	ldw	r3,-24(fp)
   80644:	e0bffe17 	ldw	r2,-8(fp)
   80648:	10ffe82e 	bgeu	r2,r3,805ec <read_data_byte_with_timeout+0x28>
      return PS2_TIMEOUT;
   8064c:	00bfffc4 	movi	r2,-1
   80650:	e0bfff15 	stw	r2,-4(fp)
    }
  }
   80654:	e0bfff17 	ldw	r2,-4(fp)
}
   80658:	e037883a 	mov	sp,fp
   8065c:	dfc00117 	ldw	ra,4(sp)
   80660:	df000017 	ldw	fp,0(sp)
   80664:	dec00204 	addi	sp,sp,8
   80668:	f800283a 	ret

0008066c <wait_for_ack>:

int wait_for_ack(unsigned timeout)
{
   8066c:	defffb04 	addi	sp,sp,-20
   80670:	dfc00415 	stw	ra,16(sp)
   80674:	df000315 	stw	fp,12(sp)
   80678:	df000304 	addi	fp,sp,12
   8067c:	e13ffe15 	stw	r4,-8(fp)
  alt_u8 ack = 0;
   80680:	e03ffd45 	stb	zero,-11(fp)
  alt_u8 data = 0;
   80684:	e03ffd85 	stb	zero,-10(fp)
  alt_u8 status = PS2_SUCCESS;
   80688:	e03ffd05 	stb	zero,-12(fp)
  for (;;) {
    status = read_data_byte_with_timeout(&data, timeout); 
   8068c:	e13ffd84 	addi	r4,fp,-10
   80690:	e17ffe17 	ldw	r5,-8(fp)
   80694:	00805c40 	call	805c4 <read_data_byte_with_timeout>
   80698:	e0bffd05 	stb	r2,-12(fp)
    if ( status == PS2_SUCCESS ) {
   8069c:	e0bffd03 	ldbu	r2,-12(fp)
   806a0:	1004c03a 	cmpne	r2,r2,zero
   806a4:	1000061e 	bne	r2,zero,806c0 <wait_for_ack+0x54>
      if (data == PS2_ACK)
   806a8:	e0bffd83 	ldbu	r2,-10(fp)
   806ac:	10803fcc 	andi	r2,r2,255
   806b0:	10803e98 	cmpnei	r2,r2,250
   806b4:	103ff51e 	bne	r2,zero,8068c <wait_for_ack+0x20>
	return PS2_SUCCESS;
   806b8:	e03fff15 	stw	zero,-4(fp)
   806bc:	00000206 	br	806c8 <wait_for_ack+0x5c>
    } else {
      return status;
   806c0:	e0bffd03 	ldbu	r2,-12(fp)
   806c4:	e0bfff15 	stw	r2,-4(fp)
   806c8:	e0bfff17 	ldw	r2,-4(fp)
    }
  }
  return PS2_TIMEOUT;
}
   806cc:	e037883a 	mov	sp,fp
   806d0:	dfc00117 	ldw	ra,4(sp)
   806d4:	df000017 	ldw	fp,0(sp)
   806d8:	dec00204 	addi	sp,sp,8
   806dc:	f800283a 	ret

000806e0 <moveLeft>:
}*/

/* should update snake when new direction is known*/

/* go left */
static void moveLeft(){
   806e0:	deffff04 	addi	sp,sp,-4
   806e4:	df000015 	stw	fp,0(sp)
   806e8:	d839883a 	mov	fp,sp
	right = 0;
   806ec:	d0200015 	stw	zero,-32768(gp)
	left = 1;
   806f0:	00800044 	movi	r2,1
   806f4:	d0a75e15 	stw	r2,-25224(gp)
	up = 0;
   806f8:	d0275f15 	stw	zero,-25220(gp)
	down = 0;
   806fc:	d0276015 	stw	zero,-25216(gp)
}
   80700:	e037883a 	mov	sp,fp
   80704:	df000017 	ldw	fp,0(sp)
   80708:	dec00104 	addi	sp,sp,4
   8070c:	f800283a 	ret

00080710 <moveRight>:

/* go right */
static void moveRight(){
   80710:	deffff04 	addi	sp,sp,-4
   80714:	df000015 	stw	fp,0(sp)
   80718:	d839883a 	mov	fp,sp
	right = 1;
   8071c:	00800044 	movi	r2,1
   80720:	d0a00015 	stw	r2,-32768(gp)
	left = 0;
   80724:	d0275e15 	stw	zero,-25224(gp)
	up = 0;
   80728:	d0275f15 	stw	zero,-25220(gp)
	down = 0;
   8072c:	d0276015 	stw	zero,-25216(gp)
}
   80730:	e037883a 	mov	sp,fp
   80734:	df000017 	ldw	fp,0(sp)
   80738:	dec00104 	addi	sp,sp,4
   8073c:	f800283a 	ret

00080740 <moveUp>:

/* go up */
static void moveUp(){
   80740:	deffff04 	addi	sp,sp,-4
   80744:	df000015 	stw	fp,0(sp)
   80748:	d839883a 	mov	fp,sp
	right = 0;
   8074c:	d0200015 	stw	zero,-32768(gp)
	left = 0;
   80750:	d0275e15 	stw	zero,-25224(gp)
	up = 1;
   80754:	00800044 	movi	r2,1
   80758:	d0a75f15 	stw	r2,-25220(gp)
	down = 0;
   8075c:	d0276015 	stw	zero,-25216(gp)
}
   80760:	e037883a 	mov	sp,fp
   80764:	df000017 	ldw	fp,0(sp)
   80768:	dec00104 	addi	sp,sp,4
   8076c:	f800283a 	ret

00080770 <moveDown>:

/* go down */
static void moveDown(){
   80770:	deffff04 	addi	sp,sp,-4
   80774:	df000015 	stw	fp,0(sp)
   80778:	d839883a 	mov	fp,sp
	right = 0;
   8077c:	d0200015 	stw	zero,-32768(gp)
	left = 0;
   80780:	d0275e15 	stw	zero,-25224(gp)
	up = 0;
   80784:	d0275f15 	stw	zero,-25220(gp)
	down = 1;
   80788:	00800044 	movi	r2,1
   8078c:	d0a76015 	stw	r2,-25216(gp)
}
   80790:	e037883a 	mov	sp,fp
   80794:	df000017 	ldw	fp,0(sp)
   80798:	dec00104 	addi	sp,sp,4
   8079c:	f800283a 	ret

000807a0 <movement>:
/* track snake movement */
static void movement(alt_u8 key){
   807a0:	defffc04 	addi	sp,sp,-16
   807a4:	dfc00315 	stw	ra,12(sp)
   807a8:	df000215 	stw	fp,8(sp)
   807ac:	df000204 	addi	fp,sp,8
   807b0:	e13ffe05 	stb	r4,-8(fp)
	/* put this case stmt in a function called setDirection()*/
	switch(key){
   807b4:	e0bffe03 	ldbu	r2,-8(fp)
   807b8:	e0bfff15 	stw	r2,-4(fp)
   807bc:	e0ffff17 	ldw	r3,-4(fp)
   807c0:	18801920 	cmpeqi	r2,r3,100
   807c4:	1000121e 	bne	r2,zero,80810 <movement+0x70>
   807c8:	e0ffff17 	ldw	r3,-4(fp)
   807cc:	18801948 	cmpgei	r2,r3,101
   807d0:	1000041e 	bne	r2,zero,807e4 <movement+0x44>
   807d4:	e0ffff17 	ldw	r3,-4(fp)
   807d8:	18801860 	cmpeqi	r2,r3,97
   807dc:	1000081e 	bne	r2,zero,80800 <movement+0x60>
   807e0:	00000e06 	br	8081c <movement+0x7c>
   807e4:	e0ffff17 	ldw	r3,-4(fp)
   807e8:	18801ce0 	cmpeqi	r2,r3,115
   807ec:	1000061e 	bne	r2,zero,80808 <movement+0x68>
   807f0:	e0ffff17 	ldw	r3,-4(fp)
   807f4:	18801de0 	cmpeqi	r2,r3,119
   807f8:	1000071e 	bne	r2,zero,80818 <movement+0x78>
   807fc:	00000706 	br	8081c <movement+0x7c>
		case 'a':
			moveLeft();
   80800:	00806e00 	call	806e0 <moveLeft>
			break;
   80804:	00000506 	br	8081c <movement+0x7c>
		case 's':
			moveDown();
   80808:	00807700 	call	80770 <moveDown>
			break;
   8080c:	00000306 	br	8081c <movement+0x7c>
		case 'd':
			moveRight();
   80810:	00807100 	call	80710 <moveRight>
			break;
   80814:	00000106 	br	8081c <movement+0x7c>
		case 'w':
			moveUp();
   80818:	00807400 	call	80740 <moveUp>
			break;
		default:
			break;
	}
	if(right){
   8081c:	d0a00017 	ldw	r2,-32768(gp)
   80820:	1005003a 	cmpeq	r2,r2,zero
   80824:	1000041e 	bne	r2,zero,80838 <movement+0x98>
		xCoor++;
   80828:	d0a75c17 	ldw	r2,-25232(gp)
   8082c:	10800044 	addi	r2,r2,1
   80830:	d0a75c15 	stw	r2,-25232(gp)
		if(xCoor >= RIGHT_BOUND){
   80834:	00001406 	br	80888 <movement+0xe8>
			/* collision */
		}
	}else if(left){
   80838:	d0a75e17 	ldw	r2,-25224(gp)
   8083c:	1005003a 	cmpeq	r2,r2,zero
   80840:	1000041e 	bne	r2,zero,80854 <movement+0xb4>
		xCoor--;
   80844:	d0a75c17 	ldw	r2,-25232(gp)
   80848:	10bfffc4 	addi	r2,r2,-1
   8084c:	d0a75c15 	stw	r2,-25232(gp)
		if(xCoor <= LEFT_BOUND){
   80850:	00000d06 	br	80888 <movement+0xe8>
			/* collision */
		}
	}else if(up){
   80854:	d0a75f17 	ldw	r2,-25220(gp)
   80858:	1005003a 	cmpeq	r2,r2,zero
   8085c:	1000041e 	bne	r2,zero,80870 <movement+0xd0>
		yCoor++;
   80860:	d0a75d17 	ldw	r2,-25228(gp)
   80864:	10800044 	addi	r2,r2,1
   80868:	d0a75d15 	stw	r2,-25228(gp)
		if(yCoor <= TOP_BOUND){
   8086c:	00000606 	br	80888 <movement+0xe8>
			/* collision */
		}
	}else if(down){
   80870:	d0a76017 	ldw	r2,-25216(gp)
   80874:	1005003a 	cmpeq	r2,r2,zero
   80878:	1000031e 	bne	r2,zero,80888 <movement+0xe8>
		yCoor--;
   8087c:	d0a75d17 	ldw	r2,-25228(gp)
   80880:	10bfffc4 	addi	r2,r2,-1
   80884:	d0a75d15 	stw	r2,-25228(gp)
		if(yCoor >= BOT_BOUND){
			/* collision */
		}
	}
	printf("x: %d y: %d\n", xCoor, yCoor);
   80888:	d1675c17 	ldw	r5,-25232(gp)
   8088c:	d1a75d17 	ldw	r6,-25228(gp)
   80890:	01000274 	movhi	r4,9
   80894:	21346804 	addi	r4,r4,-11872
   80898:	0080df80 	call	80df8 <printf>
	//usleep(500000);
}
   8089c:	e037883a 	mov	sp,fp
   808a0:	dfc00117 	ldw	ra,4(sp)
   808a4:	df000017 	ldw	fp,0(sp)
   808a8:	dec00204 	addi	sp,sp,8
   808ac:	f800283a 	ret

000808b0 <read_make_code_with_timeout>:
    STATE_DONE
  } DECODE_STATE;


/* "interrupt" */
int read_make_code_with_timeout(KB_CODE_TYPE *decode_mode, alt_u8 *buf) {
   808b0:	defff804 	addi	sp,sp,-32
   808b4:	dfc00715 	stw	ra,28(sp)
   808b8:	df000615 	stw	fp,24(sp)
   808bc:	df000604 	addi	fp,sp,24
   808c0:	e13ffd15 	stw	r4,-12(fp)
   808c4:	e17ffe15 	stw	r5,-8(fp)
	alt_u8 byte = 0;
   808c8:	e03ffc05 	stb	zero,-16(fp)
	int status_read =0;
   808cc:	e03ffb15 	stw	zero,-20(fp)
	*decode_mode = KB_INVALID_CODE;
   808d0:	e0fffd17 	ldw	r3,-12(fp)
   808d4:	00800184 	movi	r2,6
   808d8:	18800015 	stw	r2,0(r3)
	DECODE_STATE state = STATE_INIT;
   808dc:	e03ffa15 	stw	zero,-24(fp)
	do {
		status_read = read_data_byte_with_timeout(&byte, 10000);
   808e0:	e13ffc04 	addi	r4,fp,-16
   808e4:	0149c404 	movi	r5,10000
   808e8:	00805c40 	call	805c4 <read_data_byte_with_timeout>
   808ec:	e0bffb15 	stw	r2,-20(fp)
		//FIXME: When the user press the keyboard extremely fast, data may get
		//occasionally get lost

	    if (status_read == PS2_ERROR)
   808f0:	e0bffb17 	ldw	r2,-20(fp)
   808f4:	10bfff98 	cmpnei	r2,r2,-2
   808f8:	1000031e 	bne	r2,zero,80908 <read_make_code_with_timeout+0x58>
			return PS2_ERROR;
   808fc:	00bfff84 	movi	r2,-2
   80900:	e0bfff15 	stw	r2,-4(fp)
   80904:	00000b06 	br	80934 <read_make_code_with_timeout+0x84>

		state = get_next_state(state, byte, decode_mode, buf);
   80908:	e0bffc03 	ldbu	r2,-16(fp)
   8090c:	11403fcc 	andi	r5,r2,255
   80910:	e13ffa17 	ldw	r4,-24(fp)
   80914:	e1bffd17 	ldw	r6,-12(fp)
   80918:	e1fffe17 	ldw	r7,-8(fp)
   8091c:	0080ac80 	call	80ac8 <get_next_state>
   80920:	e0bffa15 	stw	r2,-24(fp)
  } while (state != STATE_DONE);
   80924:	e0bffa17 	ldw	r2,-24(fp)
   80928:	108000d8 	cmpnei	r2,r2,3
   8092c:	103fec1e 	bne	r2,zero,808e0 <read_make_code_with_timeout+0x30>

  return PS2_SUCCESS;
   80930:	e03fff15 	stw	zero,-4(fp)
   80934:	e0bfff17 	ldw	r2,-4(fp)
}
   80938:	e037883a 	mov	sp,fp
   8093c:	dfc00117 	ldw	ra,4(sp)
   80940:	df000017 	ldw	fp,0(sp)
   80944:	dec00204 	addi	sp,sp,8
   80948:	f800283a 	ret

0008094c <main>:

int main(){
   8094c:	defffc04 	addi	sp,sp,-16
   80950:	dfc00315 	stw	ra,12(sp)
   80954:	df000215 	stw	fp,8(sp)
   80958:	df000204 	addi	fp,sp,8

	alt_u8 key = 0;
   8095c:	e03ffe05 	stb	zero,-8(fp)
	/* Initialize the keyboard */
	printf("Pretty please wait three seconds to initialize keyboard\n");
   80960:	01000274 	movhi	r4,9
   80964:	21346c04 	addi	r4,r4,-11856
   80968:	0080f100 	call	80f10 <puts>
	clear_FIFO();
   8096c:	00803180 	call	80318 <clear_FIFO>
	switch (get_mode()) {
   80970:	00802480 	call	80248 <get_mode>
   80974:	e0bfff15 	stw	r2,-4(fp)
   80978:	e0ffff17 	ldw	r3,-4(fp)
   8097c:	1805003a 	cmpeq	r2,r3,zero
   80980:	1000041e 	bne	r2,zero,80994 <main+0x48>
   80984:	e0ffff17 	ldw	r3,-4(fp)
   80988:	18800060 	cmpeqi	r2,r3,1
   8098c:	1000081e 	bne	r2,zero,809b0 <main+0x64>
   80990:	00000406 	br	809a4 <main+0x58>
		case PS2_KEYBOARD:
			break;
		case PS2_MOUSE:
			printf("Error: Mouse detected on PS/2 port\n");
   80994:	01000274 	movhi	r4,9
   80998:	21347a04 	addi	r4,r4,-11800
   8099c:	0080f100 	call	80f10 <puts>
			break;
   809a0:	00000306 	br	809b0 <main+0x64>
		default:
			printf("Error: Unrecognized or no device on PS/2 port\n");
   809a4:	01000274 	movhi	r4,9
   809a8:	21348304 	addi	r4,r4,-11764
   809ac:	0080f100 	call	80f10 <puts>
	}
	//alt_irq_register(PS2_0_IRQ, NULL, (void*)kb_interrupt_handler);
	
	while(1){
		//WRITE_SPRITE(4, 0xFFFFFFF0);
		IOWR_32DIRECT(VGA_BASE, 4 * 4, 0x00000000);
   809b0:	00800434 	movhi	r2,16
   809b4:	10840404 	addi	r2,r2,4112
   809b8:	10000035 	stwio	zero,0(r2)

		printf("Head: %x", READ_SNAKE1_HEAD());
   809bc:	00800434 	movhi	r2,16
   809c0:	10840004 	addi	r2,r2,4096
   809c4:	11400037 	ldwio	r5,0(r2)
   809c8:	01000274 	movhi	r4,9
   809cc:	21348f04 	addi	r4,r4,-11716
   809d0:	0080df80 	call	80df8 <printf>
	}
   809d4:	003ff606 	br	809b0 <main+0x64>

000809d8 <get_multi_byte_make_code_index>:
    STATE_DONE 
  } DECODE_STATE;

//helper function for get_next_state
alt_u8 get_multi_byte_make_code_index(alt_u8 code)
{
   809d8:	defffc04 	addi	sp,sp,-16
   809dc:	df000315 	stw	fp,12(sp)
   809e0:	df000304 	addi	fp,sp,12
   809e4:	e13ffe05 	stb	r4,-8(fp)
  alt_u8 i;
  for (i = 0; i < NUM_SCAN_CODES; i++ ) {
   809e8:	e03ffd05 	stb	zero,-12(fp)
   809ec:	00000e06 	br	80a28 <get_multi_byte_make_code_index+0x50>
    if ( multi_byte_make_code[i] == code )
   809f0:	e0fffd03 	ldbu	r3,-12(fp)
   809f4:	00800274 	movhi	r2,9
   809f8:	10b68a04 	addi	r2,r2,-9688
   809fc:	10c5883a 	add	r2,r2,r3
   80a00:	10800003 	ldbu	r2,0(r2)
   80a04:	10c03fcc 	andi	r3,r2,255
   80a08:	e0bffe03 	ldbu	r2,-8(fp)
   80a0c:	1880031e 	bne	r3,r2,80a1c <get_multi_byte_make_code_index+0x44>
      return i;
   80a10:	e0bffd03 	ldbu	r2,-12(fp)
   80a14:	e0bfff15 	stw	r2,-4(fp)
   80a18:	00000806 	br	80a3c <get_multi_byte_make_code_index+0x64>

//helper function for get_next_state
alt_u8 get_multi_byte_make_code_index(alt_u8 code)
{
  alt_u8 i;
  for (i = 0; i < NUM_SCAN_CODES; i++ ) {
   80a1c:	e0bffd03 	ldbu	r2,-12(fp)
   80a20:	10800044 	addi	r2,r2,1
   80a24:	e0bffd05 	stb	r2,-12(fp)
   80a28:	e0bffd03 	ldbu	r2,-12(fp)
   80a2c:	108019b0 	cmpltui	r2,r2,102
   80a30:	103fef1e 	bne	r2,zero,809f0 <get_multi_byte_make_code_index+0x18>
    if ( multi_byte_make_code[i] == code )
      return i;
  }
  return NUM_SCAN_CODES;
   80a34:	00801984 	movi	r2,102
   80a38:	e0bfff15 	stw	r2,-4(fp)
   80a3c:	e0bfff17 	ldw	r2,-4(fp)
}
   80a40:	e037883a 	mov	sp,fp
   80a44:	df000017 	ldw	fp,0(sp)
   80a48:	dec00104 	addi	sp,sp,4
   80a4c:	f800283a 	ret

00080a50 <get_single_byte_make_code_index>:

//helper function for get_next_state
alt_u8 get_single_byte_make_code_index(alt_u8 code)
{
   80a50:	defffc04 	addi	sp,sp,-16
   80a54:	df000315 	stw	fp,12(sp)
   80a58:	df000304 	addi	fp,sp,12
   80a5c:	e13ffe05 	stb	r4,-8(fp)
  alt_u8 i;
  for (i = 0; i < NUM_SCAN_CODES; i++ ) {
   80a60:	e03ffd05 	stb	zero,-12(fp)
   80a64:	00000e06 	br	80aa0 <get_single_byte_make_code_index+0x50>
    if ( single_byte_make_code[i] == code )
   80a68:	e0fffd03 	ldbu	r3,-12(fp)
   80a6c:	00800274 	movhi	r2,9
   80a70:	10b67084 	addi	r2,r2,-9790
   80a74:	10c5883a 	add	r2,r2,r3
   80a78:	10800003 	ldbu	r2,0(r2)
   80a7c:	10c03fcc 	andi	r3,r2,255
   80a80:	e0bffe03 	ldbu	r2,-8(fp)
   80a84:	1880031e 	bne	r3,r2,80a94 <get_single_byte_make_code_index+0x44>
      return i;
   80a88:	e0bffd03 	ldbu	r2,-12(fp)
   80a8c:	e0bfff15 	stw	r2,-4(fp)
   80a90:	00000806 	br	80ab4 <get_single_byte_make_code_index+0x64>

//helper function for get_next_state
alt_u8 get_single_byte_make_code_index(alt_u8 code)
{
  alt_u8 i;
  for (i = 0; i < NUM_SCAN_CODES; i++ ) {
   80a94:	e0bffd03 	ldbu	r2,-12(fp)
   80a98:	10800044 	addi	r2,r2,1
   80a9c:	e0bffd05 	stb	r2,-12(fp)
   80aa0:	e0bffd03 	ldbu	r2,-12(fp)
   80aa4:	108019b0 	cmpltui	r2,r2,102
   80aa8:	103fef1e 	bne	r2,zero,80a68 <get_single_byte_make_code_index+0x18>
    if ( single_byte_make_code[i] == code )
      return i;
  }
  return NUM_SCAN_CODES;
   80aac:	00801984 	movi	r2,102
   80ab0:	e0bfff15 	stw	r2,-4(fp)
   80ab4:	e0bfff17 	ldw	r2,-4(fp)
}
   80ab8:	e037883a 	mov	sp,fp
   80abc:	df000017 	ldw	fp,0(sp)
   80ac0:	dec00104 	addi	sp,sp,4
   80ac4:	f800283a 	ret

00080ac8 <get_next_state>:

DECODE_STATE get_next_state(DECODE_STATE state, 
			    alt_u8 byte,
			    KB_CODE_TYPE *decode_mode,
			    alt_u8 *buf)
{
   80ac8:	defff704 	addi	sp,sp,-36
   80acc:	dfc00815 	stw	ra,32(sp)
   80ad0:	df000715 	stw	fp,28(sp)
   80ad4:	df000704 	addi	fp,sp,28
   80ad8:	e13ffb15 	stw	r4,-20(fp)
   80adc:	e1bffd15 	stw	r6,-12(fp)
   80ae0:	e1fffe15 	stw	r7,-8(fp)
   80ae4:	e17ffc05 	stb	r5,-16(fp)
  DECODE_STATE next_state = STATE_INIT;
   80ae8:	e03ffa15 	stw	zero,-24(fp)
  alt_u16 idx = NUM_SCAN_CODES;
   80aec:	00801984 	movi	r2,102
   80af0:	e0bff90d 	sth	r2,-28(fp)
  switch (state) {
   80af4:	e0bffb17 	ldw	r2,-20(fp)
   80af8:	e0bfff15 	stw	r2,-4(fp)
   80afc:	e0ffff17 	ldw	r3,-4(fp)
   80b00:	18800060 	cmpeqi	r2,r3,1
   80b04:	1000371e 	bne	r2,zero,80be4 <get_next_state+0x11c>
   80b08:	e0ffff17 	ldw	r3,-4(fp)
   80b0c:	18800070 	cmpltui	r2,r3,1
   80b10:	1000041e 	bne	r2,zero,80b24 <get_next_state+0x5c>
   80b14:	e0ffff17 	ldw	r3,-4(fp)
   80b18:	188000a0 	cmpeqi	r2,r3,2
   80b1c:	1000431e 	bne	r2,zero,80c2c <get_next_state+0x164>
   80b20:	00005406 	br	80c74 <get_next_state+0x1ac>
  case STATE_INIT:
    if ( byte == 0xE0 ) {
   80b24:	e0bffc03 	ldbu	r2,-16(fp)
   80b28:	10803818 	cmpnei	r2,r2,224
   80b2c:	1000031e 	bne	r2,zero,80b3c <get_next_state+0x74>
      next_state = STATE_LONG_BINARY_MAKE_CODE;
   80b30:	00800044 	movi	r2,1
   80b34:	e0bffa15 	stw	r2,-24(fp)
   80b38:	00005206 	br	80c84 <get_next_state+0x1bc>
    } else if (byte == 0xF0) {
   80b3c:	e0bffc03 	ldbu	r2,-16(fp)
   80b40:	10803c18 	cmpnei	r2,r2,240
   80b44:	1000031e 	bne	r2,zero,80b54 <get_next_state+0x8c>
      next_state = STATE_BREAK_CODE;
   80b48:	00800084 	movi	r2,2
   80b4c:	e0bffa15 	stw	r2,-24(fp)
   80b50:	00004c06 	br	80c84 <get_next_state+0x1bc>
    } else {
      idx = get_single_byte_make_code_index(byte);
   80b54:	e13ffc03 	ldbu	r4,-16(fp)
   80b58:	0080a500 	call	80a50 <get_single_byte_make_code_index>
   80b5c:	10803fcc 	andi	r2,r2,255
   80b60:	e0bff90d 	sth	r2,-28(fp)
      if ( (idx < 40 || idx == 68 || idx > 79) && ( idx != NUM_SCAN_CODES ) ) {
   80b64:	e0bff90b 	ldhu	r2,-28(fp)
   80b68:	10800a30 	cmpltui	r2,r2,40
   80b6c:	1000061e 	bne	r2,zero,80b88 <get_next_state+0xc0>
   80b70:	e0bff90b 	ldhu	r2,-28(fp)
   80b74:	10801120 	cmpeqi	r2,r2,68
   80b78:	1000031e 	bne	r2,zero,80b88 <get_next_state+0xc0>
   80b7c:	e0bff90b 	ldhu	r2,-28(fp)
   80b80:	10801430 	cmpltui	r2,r2,80
   80b84:	10000e1e 	bne	r2,zero,80bc0 <get_next_state+0xf8>
   80b88:	e0bff90b 	ldhu	r2,-28(fp)
   80b8c:	108019a0 	cmpeqi	r2,r2,102
   80b90:	10000b1e 	bne	r2,zero,80bc0 <get_next_state+0xf8>
	*decode_mode = KB_ASCII_MAKE_CODE;
   80b94:	e0fffd17 	ldw	r3,-12(fp)
   80b98:	00800044 	movi	r2,1
   80b9c:	18800015 	stw	r2,0(r3)
	*buf= ascii_codes[idx];
   80ba0:	e0fff90b 	ldhu	r3,-28(fp)
   80ba4:	00800274 	movhi	r2,9
   80ba8:	10b65704 	addi	r2,r2,-9892
   80bac:	10c5883a 	add	r2,r2,r3
   80bb0:	10c00003 	ldbu	r3,0(r2)
   80bb4:	e0bffe17 	ldw	r2,-8(fp)
   80bb8:	10c00005 	stb	r3,0(r2)
      next_state = STATE_LONG_BINARY_MAKE_CODE;
    } else if (byte == 0xF0) {
      next_state = STATE_BREAK_CODE;
    } else {
      idx = get_single_byte_make_code_index(byte);
      if ( (idx < 40 || idx == 68 || idx > 79) && ( idx != NUM_SCAN_CODES ) ) {
   80bbc:	00000606 	br	80bd8 <get_next_state+0x110>
	*decode_mode = KB_ASCII_MAKE_CODE;
	*buf= ascii_codes[idx];
      } else {
	*decode_mode = KB_BINARY_MAKE_CODE;
   80bc0:	e0fffd17 	ldw	r3,-12(fp)
   80bc4:	00800084 	movi	r2,2
   80bc8:	18800015 	stw	r2,0(r3)
	*buf = byte;
   80bcc:	e0fffe17 	ldw	r3,-8(fp)
   80bd0:	e0bffc03 	ldbu	r2,-16(fp)
   80bd4:	18800005 	stb	r2,0(r3)
      }
      next_state = STATE_DONE;
   80bd8:	008000c4 	movi	r2,3
   80bdc:	e0bffa15 	stw	r2,-24(fp)
    }
    break;
   80be0:	00002806 	br	80c84 <get_next_state+0x1bc>
  case STATE_LONG_BINARY_MAKE_CODE:
    if ( byte != 0xF0 && byte!= 0xE0) {
   80be4:	e0bffc03 	ldbu	r2,-16(fp)
   80be8:	10803c20 	cmpeqi	r2,r2,240
   80bec:	10000c1e 	bne	r2,zero,80c20 <get_next_state+0x158>
   80bf0:	e0bffc03 	ldbu	r2,-16(fp)
   80bf4:	10803820 	cmpeqi	r2,r2,224
   80bf8:	1000091e 	bne	r2,zero,80c20 <get_next_state+0x158>
      *decode_mode = KB_LONG_BINARY_MAKE_CODE;
   80bfc:	e0fffd17 	ldw	r3,-12(fp)
   80c00:	008000c4 	movi	r2,3
   80c04:	18800015 	stw	r2,0(r3)
      *buf = byte;
   80c08:	e0fffe17 	ldw	r3,-8(fp)
   80c0c:	e0bffc03 	ldbu	r2,-16(fp)
   80c10:	18800005 	stb	r2,0(r3)
      next_state = STATE_DONE;
   80c14:	008000c4 	movi	r2,3
   80c18:	e0bffa15 	stw	r2,-24(fp)
      }
      next_state = STATE_DONE;
    }
    break;
  case STATE_LONG_BINARY_MAKE_CODE:
    if ( byte != 0xF0 && byte!= 0xE0) {
   80c1c:	00001906 	br	80c84 <get_next_state+0x1bc>
      *decode_mode = KB_LONG_BINARY_MAKE_CODE;
      *buf = byte;
      next_state = STATE_DONE;
    } else {
      next_state = STATE_BREAK_CODE;
   80c20:	00800084 	movi	r2,2
   80c24:	e0bffa15 	stw	r2,-24(fp)
    }
    break;
   80c28:	00001606 	br	80c84 <get_next_state+0x1bc>
  case STATE_BREAK_CODE:
    if ( byte != 0xF0 && byte != 0xE0) {
   80c2c:	e0bffc03 	ldbu	r2,-16(fp)
   80c30:	10803c20 	cmpeqi	r2,r2,240
   80c34:	10000c1e 	bne	r2,zero,80c68 <get_next_state+0x1a0>
   80c38:	e0bffc03 	ldbu	r2,-16(fp)
   80c3c:	10803820 	cmpeqi	r2,r2,224
   80c40:	1000091e 	bne	r2,zero,80c68 <get_next_state+0x1a0>
      *decode_mode = KB_BREAK_CODE;
   80c44:	e0fffd17 	ldw	r3,-12(fp)
   80c48:	00800104 	movi	r2,4
   80c4c:	18800015 	stw	r2,0(r3)
      *buf = byte;
   80c50:	e0fffe17 	ldw	r3,-8(fp)
   80c54:	e0bffc03 	ldbu	r2,-16(fp)
   80c58:	18800005 	stb	r2,0(r3)
      next_state = STATE_DONE;
   80c5c:	008000c4 	movi	r2,3
   80c60:	e0bffa15 	stw	r2,-24(fp)
    } else {
      next_state = STATE_BREAK_CODE;
    }
    break;
  case STATE_BREAK_CODE:
    if ( byte != 0xF0 && byte != 0xE0) {
   80c64:	00000706 	br	80c84 <get_next_state+0x1bc>
      *decode_mode = KB_BREAK_CODE;
      *buf = byte;
      next_state = STATE_DONE;
    } else {
      next_state = STATE_BREAK_CODE;
   80c68:	00800084 	movi	r2,2
   80c6c:	e0bffa15 	stw	r2,-24(fp)
    }
    break;
   80c70:	00000406 	br	80c84 <get_next_state+0x1bc>
  default:
    *decode_mode = KB_INVALID_CODE;
   80c74:	e0fffd17 	ldw	r3,-12(fp)
   80c78:	00800184 	movi	r2,6
   80c7c:	18800015 	stw	r2,0(r3)
    next_state = STATE_INIT;
   80c80:	e03ffa15 	stw	zero,-24(fp)
  }
  return next_state;
   80c84:	e0bffa17 	ldw	r2,-24(fp)
}
   80c88:	e037883a 	mov	sp,fp
   80c8c:	dfc00117 	ldw	ra,4(sp)
   80c90:	df000017 	ldw	fp,0(sp)
   80c94:	dec00204 	addi	sp,sp,8
   80c98:	f800283a 	ret

00080c9c <read_make_code>:

int read_make_code(KB_CODE_TYPE *decode_mode, alt_u8 *buf)
{
   80c9c:	defff804 	addi	sp,sp,-32
   80ca0:	dfc00715 	stw	ra,28(sp)
   80ca4:	df000615 	stw	fp,24(sp)
   80ca8:	df000604 	addi	fp,sp,24
   80cac:	e13ffd15 	stw	r4,-12(fp)
   80cb0:	e17ffe15 	stw	r5,-8(fp)
  alt_u8 byte = 0;
   80cb4:	e03ffc05 	stb	zero,-16(fp)
  int status_read =0;
   80cb8:	e03ffb15 	stw	zero,-20(fp)
  *decode_mode = KB_INVALID_CODE;
   80cbc:	e0fffd17 	ldw	r3,-12(fp)
   80cc0:	00800184 	movi	r2,6
   80cc4:	18800015 	stw	r2,0(r3)
  DECODE_STATE state = STATE_INIT;
   80cc8:	e03ffa15 	stw	zero,-24(fp)
  do {
    status_read = read_data_byte_with_timeout(&byte, 0);
   80ccc:	e13ffc04 	addi	r4,fp,-16
   80cd0:	000b883a 	mov	r5,zero
   80cd4:	00805c40 	call	805c4 <read_data_byte_with_timeout>
   80cd8:	e0bffb15 	stw	r2,-20(fp)
    //FIXME: When the user press the keyboard extremely fast, data may get
    //occasionally get lost 

    if (status_read == PS2_ERROR)
   80cdc:	e0bffb17 	ldw	r2,-20(fp)
   80ce0:	10bfff98 	cmpnei	r2,r2,-2
   80ce4:	1000031e 	bne	r2,zero,80cf4 <read_make_code+0x58>
      return PS2_ERROR;
   80ce8:	00bfff84 	movi	r2,-2
   80cec:	e0bfff15 	stw	r2,-4(fp)
   80cf0:	00000b06 	br	80d20 <read_make_code+0x84>

    state = get_next_state(state, byte, decode_mode, buf);
   80cf4:	e0bffc03 	ldbu	r2,-16(fp)
   80cf8:	11403fcc 	andi	r5,r2,255
   80cfc:	e13ffa17 	ldw	r4,-24(fp)
   80d00:	e1bffd17 	ldw	r6,-12(fp)
   80d04:	e1fffe17 	ldw	r7,-8(fp)
   80d08:	0080ac80 	call	80ac8 <get_next_state>
   80d0c:	e0bffa15 	stw	r2,-24(fp)
  } while (state != STATE_DONE);
   80d10:	e0bffa17 	ldw	r2,-24(fp)
   80d14:	108000d8 	cmpnei	r2,r2,3
   80d18:	103fec1e 	bne	r2,zero,80ccc <read_make_code+0x30>

  return PS2_SUCCESS;
   80d1c:	e03fff15 	stw	zero,-4(fp)
   80d20:	e0bfff17 	ldw	r2,-4(fp)
}
   80d24:	e037883a 	mov	sp,fp
   80d28:	dfc00117 	ldw	ra,4(sp)
   80d2c:	df000017 	ldw	fp,0(sp)
   80d30:	dec00204 	addi	sp,sp,8
   80d34:	f800283a 	ret

00080d38 <set_keyboard_rate>:

alt_u32 set_keyboard_rate(alt_u8 rate)
{
   80d38:	defffb04 	addi	sp,sp,-20
   80d3c:	dfc00415 	stw	ra,16(sp)
   80d40:	df000315 	stw	fp,12(sp)
   80d44:	df000304 	addi	fp,sp,12
   80d48:	e13fff05 	stb	r4,-4(fp)
  alt_u8 byte;
  // send the set keyboard rate command
  int status_send = write_data_byte_with_ack(0xF3, DEFAULT_PS2_TIMEOUT_VAL);
   80d4c:	01003cc4 	movi	r4,243
   80d50:	014002f4 	movhi	r5,11
   80d54:	296b9804 	addi	r5,r5,-20896
   80d58:	008055c0 	call	8055c <write_data_byte_with_ack>
   80d5c:	e0bffd15 	stw	r2,-12(fp)
  if ( status_send == PS2_SUCCESS ) {
   80d60:	e0bffd17 	ldw	r2,-12(fp)
   80d64:	1004c03a 	cmpne	r2,r2,zero
   80d68:	1000061e 	bne	r2,zero,80d84 <set_keyboard_rate+0x4c>
    // we received ACK, so send out the desired rate now
    status_send = write_data_byte_with_ack(rate & 0x1F,
   80d6c:	e0bfff03 	ldbu	r2,-4(fp)
   80d70:	110007cc 	andi	r4,r2,31
   80d74:	014002f4 	movhi	r5,11
   80d78:	296b9804 	addi	r5,r5,-20896
   80d7c:	008055c0 	call	8055c <write_data_byte_with_ack>
   80d80:	e0bffd15 	stw	r2,-12(fp)
					   DEFAULT_PS2_TIMEOUT_VAL);
  }
  return status_send;
   80d84:	e0bffd17 	ldw	r2,-12(fp)
}
   80d88:	e037883a 	mov	sp,fp
   80d8c:	dfc00117 	ldw	ra,4(sp)
   80d90:	df000017 	ldw	fp,0(sp)
   80d94:	dec00204 	addi	sp,sp,8
   80d98:	f800283a 	ret

00080d9c <reset_keyboard>:

alt_u32 reset_keyboard()
{
   80d9c:	defffc04 	addi	sp,sp,-16
   80da0:	dfc00315 	stw	ra,12(sp)
   80da4:	df000215 	stw	fp,8(sp)
   80da8:	df000204 	addi	fp,sp,8
  alt_u8 byte;
  // send out the reset command
  int status = write_data_byte_with_ack(0xff, DEFAULT_PS2_TIMEOUT_VAL); 
   80dac:	01003fc4 	movi	r4,255
   80db0:	014002f4 	movhi	r5,11
   80db4:	296b9804 	addi	r5,r5,-20896
   80db8:	008055c0 	call	8055c <write_data_byte_with_ack>
   80dbc:	e0bffe15 	stw	r2,-8(fp)
  if ( status == PS2_SUCCESS) {
   80dc0:	e0bffe17 	ldw	r2,-8(fp)
   80dc4:	1004c03a 	cmpne	r2,r2,zero
   80dc8:	1000051e 	bne	r2,zero,80de0 <reset_keyboard+0x44>
    // received the ACK for reset, now check the BAT result
    status = read_data_byte_with_timeout(&byte, DEFAULT_PS2_TIMEOUT_VAL);
   80dcc:	e13fff04 	addi	r4,fp,-4
   80dd0:	014002f4 	movhi	r5,11
   80dd4:	296b9804 	addi	r5,r5,-20896
   80dd8:	00805c40 	call	805c4 <read_data_byte_with_timeout>
   80ddc:	e0bffe15 	stw	r2,-8(fp)
    } else {
      // BAT failed
      status == PS2_ERROR;
    }
  }	
  return status;
   80de0:	e0bffe17 	ldw	r2,-8(fp)
}
   80de4:	e037883a 	mov	sp,fp
   80de8:	dfc00117 	ldw	ra,4(sp)
   80dec:	df000017 	ldw	fp,0(sp)
   80df0:	dec00204 	addi	sp,sp,8
   80df4:	f800283a 	ret

00080df8 <printf>:
   80df8:	defffb04 	addi	sp,sp,-20
   80dfc:	dfc00115 	stw	ra,4(sp)
   80e00:	d9400215 	stw	r5,8(sp)
   80e04:	d9800315 	stw	r6,12(sp)
   80e08:	d9c00415 	stw	r7,16(sp)
   80e0c:	00800274 	movhi	r2,9
   80e10:	10bd2c04 	addi	r2,r2,-2896
   80e14:	10c00017 	ldw	r3,0(r2)
   80e18:	200b883a 	mov	r5,r4
   80e1c:	d8800204 	addi	r2,sp,8
   80e20:	19000217 	ldw	r4,8(r3)
   80e24:	100d883a 	mov	r6,r2
   80e28:	d8800015 	stw	r2,0(sp)
   80e2c:	0082eb40 	call	82eb4 <__vfprintf_internal>
   80e30:	dfc00117 	ldw	ra,4(sp)
   80e34:	dec00504 	addi	sp,sp,20
   80e38:	f800283a 	ret

00080e3c <_printf_r>:
   80e3c:	defffc04 	addi	sp,sp,-16
   80e40:	dfc00115 	stw	ra,4(sp)
   80e44:	d9800215 	stw	r6,8(sp)
   80e48:	d9c00315 	stw	r7,12(sp)
   80e4c:	280d883a 	mov	r6,r5
   80e50:	21400217 	ldw	r5,8(r4)
   80e54:	d8c00204 	addi	r3,sp,8
   80e58:	180f883a 	mov	r7,r3
   80e5c:	d8c00015 	stw	r3,0(sp)
   80e60:	0080ff00 	call	80ff0 <___vfprintf_internal_r>
   80e64:	dfc00117 	ldw	ra,4(sp)
   80e68:	dec00404 	addi	sp,sp,16
   80e6c:	f800283a 	ret

00080e70 <_puts_r>:
   80e70:	defff604 	addi	sp,sp,-40
   80e74:	dc400715 	stw	r17,28(sp)
   80e78:	2023883a 	mov	r17,r4
   80e7c:	2809883a 	mov	r4,r5
   80e80:	dfc00915 	stw	ra,36(sp)
   80e84:	dcc00815 	stw	r19,32(sp)
   80e88:	2827883a 	mov	r19,r5
   80e8c:	0080f240 	call	80f24 <strlen>
   80e90:	89400217 	ldw	r5,8(r17)
   80e94:	00c00274 	movhi	r3,9
   80e98:	18f52004 	addi	r3,r3,-11136
   80e9c:	01c00044 	movi	r7,1
   80ea0:	12000044 	addi	r8,r2,1
   80ea4:	d8c00515 	stw	r3,20(sp)
   80ea8:	d9c00615 	stw	r7,24(sp)
   80eac:	d8c00304 	addi	r3,sp,12
   80eb0:	01c00084 	movi	r7,2
   80eb4:	8809883a 	mov	r4,r17
   80eb8:	d80d883a 	mov	r6,sp
   80ebc:	d8c00015 	stw	r3,0(sp)
   80ec0:	dcc00315 	stw	r19,12(sp)
   80ec4:	da000215 	stw	r8,8(sp)
   80ec8:	d9c00115 	stw	r7,4(sp)
   80ecc:	d8800415 	stw	r2,16(sp)
   80ed0:	00851700 	call	85170 <__sfvwrite_r>
   80ed4:	00ffffc4 	movi	r3,-1
   80ed8:	10000626 	beq	r2,zero,80ef4 <_puts_r+0x84>
   80edc:	1805883a 	mov	r2,r3
   80ee0:	dfc00917 	ldw	ra,36(sp)
   80ee4:	dcc00817 	ldw	r19,32(sp)
   80ee8:	dc400717 	ldw	r17,28(sp)
   80eec:	dec00a04 	addi	sp,sp,40
   80ef0:	f800283a 	ret
   80ef4:	00c00284 	movi	r3,10
   80ef8:	1805883a 	mov	r2,r3
   80efc:	dfc00917 	ldw	ra,36(sp)
   80f00:	dcc00817 	ldw	r19,32(sp)
   80f04:	dc400717 	ldw	r17,28(sp)
   80f08:	dec00a04 	addi	sp,sp,40
   80f0c:	f800283a 	ret

00080f10 <puts>:
   80f10:	00800274 	movhi	r2,9
   80f14:	10bd2c04 	addi	r2,r2,-2896
   80f18:	200b883a 	mov	r5,r4
   80f1c:	11000017 	ldw	r4,0(r2)
   80f20:	0080e701 	jmpi	80e70 <_puts_r>

00080f24 <strlen>:
   80f24:	208000cc 	andi	r2,r4,3
   80f28:	2011883a 	mov	r8,r4
   80f2c:	1000161e 	bne	r2,zero,80f88 <strlen+0x64>
   80f30:	20c00017 	ldw	r3,0(r4)
   80f34:	017fbff4 	movhi	r5,65279
   80f38:	297fbfc4 	addi	r5,r5,-257
   80f3c:	01e02074 	movhi	r7,32897
   80f40:	39e02004 	addi	r7,r7,-32640
   80f44:	1945883a 	add	r2,r3,r5
   80f48:	11c4703a 	and	r2,r2,r7
   80f4c:	00c6303a 	nor	r3,zero,r3
   80f50:	1886703a 	and	r3,r3,r2
   80f54:	18000c1e 	bne	r3,zero,80f88 <strlen+0x64>
   80f58:	280d883a 	mov	r6,r5
   80f5c:	380b883a 	mov	r5,r7
   80f60:	21000104 	addi	r4,r4,4
   80f64:	20800017 	ldw	r2,0(r4)
   80f68:	1187883a 	add	r3,r2,r6
   80f6c:	1946703a 	and	r3,r3,r5
   80f70:	0084303a 	nor	r2,zero,r2
   80f74:	10c4703a 	and	r2,r2,r3
   80f78:	103ff926 	beq	r2,zero,80f60 <strlen+0x3c>
   80f7c:	20800007 	ldb	r2,0(r4)
   80f80:	10000326 	beq	r2,zero,80f90 <strlen+0x6c>
   80f84:	21000044 	addi	r4,r4,1
   80f88:	20800007 	ldb	r2,0(r4)
   80f8c:	103ffd1e 	bne	r2,zero,80f84 <strlen+0x60>
   80f90:	2205c83a 	sub	r2,r4,r8
   80f94:	f800283a 	ret

00080f98 <__sprint_r>:
   80f98:	30800217 	ldw	r2,8(r6)
   80f9c:	defffe04 	addi	sp,sp,-8
   80fa0:	dc000015 	stw	r16,0(sp)
   80fa4:	dfc00115 	stw	ra,4(sp)
   80fa8:	3021883a 	mov	r16,r6
   80fac:	0007883a 	mov	r3,zero
   80fb0:	1000061e 	bne	r2,zero,80fcc <__sprint_r+0x34>
   80fb4:	1805883a 	mov	r2,r3
   80fb8:	30000115 	stw	zero,4(r6)
   80fbc:	dfc00117 	ldw	ra,4(sp)
   80fc0:	dc000017 	ldw	r16,0(sp)
   80fc4:	dec00204 	addi	sp,sp,8
   80fc8:	f800283a 	ret
   80fcc:	00851700 	call	85170 <__sfvwrite_r>
   80fd0:	1007883a 	mov	r3,r2
   80fd4:	1805883a 	mov	r2,r3
   80fd8:	80000115 	stw	zero,4(r16)
   80fdc:	80000215 	stw	zero,8(r16)
   80fe0:	dfc00117 	ldw	ra,4(sp)
   80fe4:	dc000017 	ldw	r16,0(sp)
   80fe8:	dec00204 	addi	sp,sp,8
   80fec:	f800283a 	ret

00080ff0 <___vfprintf_internal_r>:
   80ff0:	defea404 	addi	sp,sp,-1392
   80ff4:	dd815815 	stw	r22,1376(sp)
   80ff8:	dc015215 	stw	r16,1352(sp)
   80ffc:	d9c15115 	stw	r7,1348(sp)
   81000:	dfc15b15 	stw	ra,1388(sp)
   81004:	df015a15 	stw	fp,1384(sp)
   81008:	ddc15915 	stw	r23,1380(sp)
   8100c:	dd415715 	stw	r21,1372(sp)
   81010:	dd015615 	stw	r20,1368(sp)
   81014:	dcc15515 	stw	r19,1364(sp)
   81018:	dc815415 	stw	r18,1360(sp)
   8101c:	dc415315 	stw	r17,1356(sp)
   81020:	282d883a 	mov	r22,r5
   81024:	3021883a 	mov	r16,r6
   81028:	d9014f15 	stw	r4,1340(sp)
   8102c:	00857940 	call	85794 <_localeconv_r>
   81030:	10800017 	ldw	r2,0(r2)
   81034:	d9c15117 	ldw	r7,1348(sp)
   81038:	d8814915 	stw	r2,1316(sp)
   8103c:	d8814f17 	ldw	r2,1340(sp)
   81040:	10000226 	beq	r2,zero,8104c <___vfprintf_internal_r+0x5c>
   81044:	10800e17 	ldw	r2,56(r2)
   81048:	10020d26 	beq	r2,zero,81880 <___vfprintf_internal_r+0x890>
   8104c:	b080030b 	ldhu	r2,12(r22)
   81050:	1080020c 	andi	r2,r2,8
   81054:	10020e26 	beq	r2,zero,81890 <___vfprintf_internal_r+0x8a0>
   81058:	b0800417 	ldw	r2,16(r22)
   8105c:	10020c26 	beq	r2,zero,81890 <___vfprintf_internal_r+0x8a0>
   81060:	b200030b 	ldhu	r8,12(r22)
   81064:	00800284 	movi	r2,10
   81068:	40c0068c 	andi	r3,r8,26
   8106c:	18802f1e 	bne	r3,r2,8112c <___vfprintf_internal_r+0x13c>
   81070:	b080038f 	ldh	r2,14(r22)
   81074:	10002d16 	blt	r2,zero,8112c <___vfprintf_internal_r+0x13c>
   81078:	b240038b 	ldhu	r9,14(r22)
   8107c:	b2800717 	ldw	r10,28(r22)
   81080:	b2c00917 	ldw	r11,36(r22)
   81084:	d9014f17 	ldw	r4,1340(sp)
   81088:	dc402904 	addi	r17,sp,164
   8108c:	d8804004 	addi	r2,sp,256
   81090:	00c10004 	movi	r3,1024
   81094:	423fff4c 	andi	r8,r8,65533
   81098:	800d883a 	mov	r6,r16
   8109c:	880b883a 	mov	r5,r17
   810a0:	da002c0d 	sth	r8,176(sp)
   810a4:	da402c8d 	sth	r9,178(sp)
   810a8:	da803015 	stw	r10,192(sp)
   810ac:	dac03215 	stw	r11,200(sp)
   810b0:	d8802d15 	stw	r2,180(sp)
   810b4:	d8c02e15 	stw	r3,184(sp)
   810b8:	d8802915 	stw	r2,164(sp)
   810bc:	d8c02b15 	stw	r3,172(sp)
   810c0:	d8002f15 	stw	zero,188(sp)
   810c4:	0080ff00 	call	80ff0 <___vfprintf_internal_r>
   810c8:	d8814b15 	stw	r2,1324(sp)
   810cc:	10000416 	blt	r2,zero,810e0 <___vfprintf_internal_r+0xf0>
   810d0:	d9014f17 	ldw	r4,1340(sp)
   810d4:	880b883a 	mov	r5,r17
   810d8:	008480c0 	call	8480c <_fflush_r>
   810dc:	1002321e 	bne	r2,zero,819a8 <___vfprintf_internal_r+0x9b8>
   810e0:	d8802c0b 	ldhu	r2,176(sp)
   810e4:	1080100c 	andi	r2,r2,64
   810e8:	10000326 	beq	r2,zero,810f8 <___vfprintf_internal_r+0x108>
   810ec:	b080030b 	ldhu	r2,12(r22)
   810f0:	10801014 	ori	r2,r2,64
   810f4:	b080030d 	sth	r2,12(r22)
   810f8:	d8814b17 	ldw	r2,1324(sp)
   810fc:	dfc15b17 	ldw	ra,1388(sp)
   81100:	df015a17 	ldw	fp,1384(sp)
   81104:	ddc15917 	ldw	r23,1380(sp)
   81108:	dd815817 	ldw	r22,1376(sp)
   8110c:	dd415717 	ldw	r21,1372(sp)
   81110:	dd015617 	ldw	r20,1368(sp)
   81114:	dcc15517 	ldw	r19,1364(sp)
   81118:	dc815417 	ldw	r18,1360(sp)
   8111c:	dc415317 	ldw	r17,1356(sp)
   81120:	dc015217 	ldw	r16,1352(sp)
   81124:	dec15c04 	addi	sp,sp,1392
   81128:	f800283a 	ret
   8112c:	0005883a 	mov	r2,zero
   81130:	0007883a 	mov	r3,zero
   81134:	dd401904 	addi	r21,sp,100
   81138:	d8814215 	stw	r2,1288(sp)
   8113c:	802f883a 	mov	r23,r16
   81140:	d8c14315 	stw	r3,1292(sp)
   81144:	d8014b15 	stw	zero,1324(sp)
   81148:	d8014815 	stw	zero,1312(sp)
   8114c:	d8014415 	stw	zero,1296(sp)
   81150:	d8014715 	stw	zero,1308(sp)
   81154:	dd400c15 	stw	r21,48(sp)
   81158:	d8000e15 	stw	zero,56(sp)
   8115c:	d8000d15 	stw	zero,52(sp)
   81160:	b8800007 	ldb	r2,0(r23)
   81164:	10001926 	beq	r2,zero,811cc <___vfprintf_internal_r+0x1dc>
   81168:	00c00944 	movi	r3,37
   8116c:	10c01726 	beq	r2,r3,811cc <___vfprintf_internal_r+0x1dc>
   81170:	b821883a 	mov	r16,r23
   81174:	00000106 	br	8117c <___vfprintf_internal_r+0x18c>
   81178:	10c00326 	beq	r2,r3,81188 <___vfprintf_internal_r+0x198>
   8117c:	84000044 	addi	r16,r16,1
   81180:	80800007 	ldb	r2,0(r16)
   81184:	103ffc1e 	bne	r2,zero,81178 <___vfprintf_internal_r+0x188>
   81188:	85e7c83a 	sub	r19,r16,r23
   8118c:	98000e26 	beq	r19,zero,811c8 <___vfprintf_internal_r+0x1d8>
   81190:	dc800e17 	ldw	r18,56(sp)
   81194:	dc400d17 	ldw	r17,52(sp)
   81198:	008001c4 	movi	r2,7
   8119c:	94e5883a 	add	r18,r18,r19
   811a0:	8c400044 	addi	r17,r17,1
   811a4:	adc00015 	stw	r23,0(r21)
   811a8:	dc800e15 	stw	r18,56(sp)
   811ac:	acc00115 	stw	r19,4(r21)
   811b0:	dc400d15 	stw	r17,52(sp)
   811b4:	14428b16 	blt	r2,r17,81be4 <___vfprintf_internal_r+0xbf4>
   811b8:	ad400204 	addi	r21,r21,8
   811bc:	d9014b17 	ldw	r4,1324(sp)
   811c0:	24c9883a 	add	r4,r4,r19
   811c4:	d9014b15 	stw	r4,1324(sp)
   811c8:	802f883a 	mov	r23,r16
   811cc:	b8800007 	ldb	r2,0(r23)
   811d0:	10013c26 	beq	r2,zero,816c4 <___vfprintf_internal_r+0x6d4>
   811d4:	bdc00044 	addi	r23,r23,1
   811d8:	d8000405 	stb	zero,16(sp)
   811dc:	b8c00007 	ldb	r3,0(r23)
   811e0:	04ffffc4 	movi	r19,-1
   811e4:	d8014c15 	stw	zero,1328(sp)
   811e8:	d8014a15 	stw	zero,1320(sp)
   811ec:	d8c14d15 	stw	r3,1332(sp)
   811f0:	bdc00044 	addi	r23,r23,1
   811f4:	d9414d17 	ldw	r5,1332(sp)
   811f8:	00801604 	movi	r2,88
   811fc:	28fff804 	addi	r3,r5,-32
   81200:	10c06036 	bltu	r2,r3,81384 <___vfprintf_internal_r+0x394>
   81204:	18c5883a 	add	r2,r3,r3
   81208:	1085883a 	add	r2,r2,r2
   8120c:	00c00234 	movhi	r3,8
   81210:	18c48804 	addi	r3,r3,4640
   81214:	10c5883a 	add	r2,r2,r3
   81218:	11000017 	ldw	r4,0(r2)
   8121c:	2000683a 	jmp	r4
   81220:	00082194 	movui	zero,8326
   81224:	00081384 	movi	zero,8270
   81228:	00081384 	movi	zero,8270
   8122c:	00082180 	call	8218 <__alt_mem_sram-0x77de8>
   81230:	00081384 	movi	zero,8270
   81234:	00081384 	movi	zero,8270
   81238:	00081384 	movi	zero,8270
   8123c:	00081384 	movi	zero,8270
   81240:	00081384 	movi	zero,8270
   81244:	00081384 	movi	zero,8270
   81248:	00081f60 	cmpeqi	zero,zero,8317
   8124c:	00082170 	cmpltui	zero,zero,8325
   81250:	00081384 	movi	zero,8270
   81254:	00081f78 	rdprs	zero,zero,8317
   81258:	00082218 	cmpnei	zero,zero,8328
   8125c:	00081384 	movi	zero,8270
   81260:	00082204 	movi	zero,8328
   81264:	000821c0 	call	821c <__alt_mem_sram-0x77de4>
   81268:	000821c0 	call	821c <__alt_mem_sram-0x77de4>
   8126c:	000821c0 	call	821c <__alt_mem_sram-0x77de4>
   81270:	000821c0 	call	821c <__alt_mem_sram-0x77de4>
   81274:	000821c0 	call	821c <__alt_mem_sram-0x77de4>
   81278:	000821c0 	call	821c <__alt_mem_sram-0x77de4>
   8127c:	000821c0 	call	821c <__alt_mem_sram-0x77de4>
   81280:	000821c0 	call	821c <__alt_mem_sram-0x77de4>
   81284:	000821c0 	call	821c <__alt_mem_sram-0x77de4>
   81288:	00081384 	movi	zero,8270
   8128c:	00081384 	movi	zero,8270
   81290:	00081384 	movi	zero,8270
   81294:	00081384 	movi	zero,8270
   81298:	00081384 	movi	zero,8270
   8129c:	00081384 	movi	zero,8270
   812a0:	00081384 	movi	zero,8270
   812a4:	00081384 	movi	zero,8270
   812a8:	00081384 	movi	zero,8270
   812ac:	00081384 	movi	zero,8270
   812b0:	000819dc 	xori	zero,zero,8295
   812b4:	00082048 	cmpgei	zero,zero,8321
   812b8:	00081384 	movi	zero,8270
   812bc:	00082048 	cmpgei	zero,zero,8321
   812c0:	00081384 	movi	zero,8270
   812c4:	00081384 	movi	zero,8270
   812c8:	00081384 	movi	zero,8270
   812cc:	00081384 	movi	zero,8270
   812d0:	000821ac 	andhi	zero,zero,8326
   812d4:	00081384 	movi	zero,8270
   812d8:	00081384 	movi	zero,8270
   812dc:	00081a90 	cmplti	zero,zero,8298
   812e0:	00081384 	movi	zero,8270
   812e4:	00081384 	movi	zero,8270
   812e8:	00081384 	movi	zero,8270
   812ec:	00081384 	movi	zero,8270
   812f0:	00081384 	movi	zero,8270
   812f4:	00081adc 	xori	zero,zero,8299
   812f8:	00081384 	movi	zero,8270
   812fc:	00081384 	movi	zero,8270
   81300:	000820fc 	xorhi	zero,zero,8323
   81304:	00081384 	movi	zero,8270
   81308:	00081384 	movi	zero,8270
   8130c:	00081384 	movi	zero,8270
   81310:	00081384 	movi	zero,8270
   81314:	00081384 	movi	zero,8270
   81318:	00081384 	movi	zero,8270
   8131c:	00081384 	movi	zero,8270
   81320:	00081384 	movi	zero,8270
   81324:	00081384 	movi	zero,8270
   81328:	00081384 	movi	zero,8270
   8132c:	000820d0 	cmplti	zero,zero,8323
   81330:	000819e8 	cmpgeui	zero,zero,8295
   81334:	00082048 	cmpgei	zero,zero,8321
   81338:	00082048 	cmpgei	zero,zero,8321
   8133c:	00082048 	cmpgei	zero,zero,8321
   81340:	00082034 	movhi	zero,8320
   81344:	000819e8 	cmpgeui	zero,zero,8295
   81348:	00081384 	movi	zero,8270
   8134c:	00081384 	movi	zero,8270
   81350:	00081fbc 	xorhi	zero,zero,8318
   81354:	00081384 	movi	zero,8270
   81358:	00081f8c 	andi	zero,zero,8318
   8135c:	00081a9c 	xori	zero,zero,8298
   81360:	00081fec 	andhi	zero,zero,8319
   81364:	00081fd8 	cmpnei	zero,zero,8319
   81368:	00081384 	movi	zero,8270
   8136c:	00082280 	call	8228 <__alt_mem_sram-0x77dd8>
   81370:	00081384 	movi	zero,8270
   81374:	00081ae8 	cmpgeui	zero,zero,8299
   81378:	00081384 	movi	zero,8270
   8137c:	00081384 	movi	zero,8270
   81380:	00082160 	cmpeqi	zero,zero,8325
   81384:	d9014d17 	ldw	r4,1332(sp)
   81388:	2000ce26 	beq	r4,zero,816c4 <___vfprintf_internal_r+0x6d4>
   8138c:	01400044 	movi	r5,1
   81390:	d9800f04 	addi	r6,sp,60
   81394:	d9c14015 	stw	r7,1280(sp)
   81398:	d9414515 	stw	r5,1300(sp)
   8139c:	d9814115 	stw	r6,1284(sp)
   813a0:	280f883a 	mov	r7,r5
   813a4:	d9000f05 	stb	r4,60(sp)
   813a8:	d8000405 	stb	zero,16(sp)
   813ac:	d8014615 	stw	zero,1304(sp)
   813b0:	d8c14c17 	ldw	r3,1328(sp)
   813b4:	1880008c 	andi	r2,r3,2
   813b8:	1005003a 	cmpeq	r2,r2,zero
   813bc:	d8815015 	stw	r2,1344(sp)
   813c0:	1000031e 	bne	r2,zero,813d0 <___vfprintf_internal_r+0x3e0>
   813c4:	d9014517 	ldw	r4,1300(sp)
   813c8:	21000084 	addi	r4,r4,2
   813cc:	d9014515 	stw	r4,1300(sp)
   813d0:	d9414c17 	ldw	r5,1328(sp)
   813d4:	2940210c 	andi	r5,r5,132
   813d8:	d9414e15 	stw	r5,1336(sp)
   813dc:	28002d1e 	bne	r5,zero,81494 <___vfprintf_internal_r+0x4a4>
   813e0:	d9814a17 	ldw	r6,1320(sp)
   813e4:	d8814517 	ldw	r2,1300(sp)
   813e8:	30a1c83a 	sub	r16,r6,r2
   813ec:	0400290e 	bge	zero,r16,81494 <___vfprintf_internal_r+0x4a4>
   813f0:	00800404 	movi	r2,16
   813f4:	14045e0e 	bge	r2,r16,82570 <___vfprintf_internal_r+0x1580>
   813f8:	dc800e17 	ldw	r18,56(sp)
   813fc:	dc400d17 	ldw	r17,52(sp)
   81400:	1027883a 	mov	r19,r2
   81404:	07000274 	movhi	fp,9
   81408:	e7353c84 	addi	fp,fp,-11022
   8140c:	050001c4 	movi	r20,7
   81410:	00000306 	br	81420 <___vfprintf_internal_r+0x430>
   81414:	843ffc04 	addi	r16,r16,-16
   81418:	ad400204 	addi	r21,r21,8
   8141c:	9c00130e 	bge	r19,r16,8146c <___vfprintf_internal_r+0x47c>
   81420:	94800404 	addi	r18,r18,16
   81424:	8c400044 	addi	r17,r17,1
   81428:	af000015 	stw	fp,0(r21)
   8142c:	acc00115 	stw	r19,4(r21)
   81430:	dc800e15 	stw	r18,56(sp)
   81434:	dc400d15 	stw	r17,52(sp)
   81438:	a47ff60e 	bge	r20,r17,81414 <___vfprintf_internal_r+0x424>
   8143c:	d9014f17 	ldw	r4,1340(sp)
   81440:	b00b883a 	mov	r5,r22
   81444:	d9800c04 	addi	r6,sp,48
   81448:	d9c15115 	stw	r7,1348(sp)
   8144c:	0080f980 	call	80f98 <__sprint_r>
   81450:	d9c15117 	ldw	r7,1348(sp)
   81454:	10009e1e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   81458:	843ffc04 	addi	r16,r16,-16
   8145c:	dc800e17 	ldw	r18,56(sp)
   81460:	dc400d17 	ldw	r17,52(sp)
   81464:	dd401904 	addi	r21,sp,100
   81468:	9c3fed16 	blt	r19,r16,81420 <___vfprintf_internal_r+0x430>
   8146c:	9425883a 	add	r18,r18,r16
   81470:	8c400044 	addi	r17,r17,1
   81474:	008001c4 	movi	r2,7
   81478:	af000015 	stw	fp,0(r21)
   8147c:	ac000115 	stw	r16,4(r21)
   81480:	dc800e15 	stw	r18,56(sp)
   81484:	dc400d15 	stw	r17,52(sp)
   81488:	1441f516 	blt	r2,r17,81c60 <___vfprintf_internal_r+0xc70>
   8148c:	ad400204 	addi	r21,r21,8
   81490:	00000206 	br	8149c <___vfprintf_internal_r+0x4ac>
   81494:	dc800e17 	ldw	r18,56(sp)
   81498:	dc400d17 	ldw	r17,52(sp)
   8149c:	d8800407 	ldb	r2,16(sp)
   814a0:	10000b26 	beq	r2,zero,814d0 <___vfprintf_internal_r+0x4e0>
   814a4:	00800044 	movi	r2,1
   814a8:	94800044 	addi	r18,r18,1
   814ac:	8c400044 	addi	r17,r17,1
   814b0:	a8800115 	stw	r2,4(r21)
   814b4:	d8c00404 	addi	r3,sp,16
   814b8:	008001c4 	movi	r2,7
   814bc:	a8c00015 	stw	r3,0(r21)
   814c0:	dc800e15 	stw	r18,56(sp)
   814c4:	dc400d15 	stw	r17,52(sp)
   814c8:	1441da16 	blt	r2,r17,81c34 <___vfprintf_internal_r+0xc44>
   814cc:	ad400204 	addi	r21,r21,8
   814d0:	d9015017 	ldw	r4,1344(sp)
   814d4:	20000b1e 	bne	r4,zero,81504 <___vfprintf_internal_r+0x514>
   814d8:	d8800444 	addi	r2,sp,17
   814dc:	94800084 	addi	r18,r18,2
   814e0:	8c400044 	addi	r17,r17,1
   814e4:	a8800015 	stw	r2,0(r21)
   814e8:	00c00084 	movi	r3,2
   814ec:	008001c4 	movi	r2,7
   814f0:	a8c00115 	stw	r3,4(r21)
   814f4:	dc800e15 	stw	r18,56(sp)
   814f8:	dc400d15 	stw	r17,52(sp)
   814fc:	1441c216 	blt	r2,r17,81c08 <___vfprintf_internal_r+0xc18>
   81500:	ad400204 	addi	r21,r21,8
   81504:	d9414e17 	ldw	r5,1336(sp)
   81508:	00802004 	movi	r2,128
   8150c:	2880b126 	beq	r5,r2,817d4 <___vfprintf_internal_r+0x7e4>
   81510:	d8c14617 	ldw	r3,1304(sp)
   81514:	19e1c83a 	sub	r16,r3,r7
   81518:	0400260e 	bge	zero,r16,815b4 <___vfprintf_internal_r+0x5c4>
   8151c:	00800404 	movi	r2,16
   81520:	1403cf0e 	bge	r2,r16,82460 <___vfprintf_internal_r+0x1470>
   81524:	1027883a 	mov	r19,r2
   81528:	07000274 	movhi	fp,9
   8152c:	e7353884 	addi	fp,fp,-11038
   81530:	050001c4 	movi	r20,7
   81534:	00000306 	br	81544 <___vfprintf_internal_r+0x554>
   81538:	843ffc04 	addi	r16,r16,-16
   8153c:	ad400204 	addi	r21,r21,8
   81540:	9c00130e 	bge	r19,r16,81590 <___vfprintf_internal_r+0x5a0>
   81544:	94800404 	addi	r18,r18,16
   81548:	8c400044 	addi	r17,r17,1
   8154c:	af000015 	stw	fp,0(r21)
   81550:	acc00115 	stw	r19,4(r21)
   81554:	dc800e15 	stw	r18,56(sp)
   81558:	dc400d15 	stw	r17,52(sp)
   8155c:	a47ff60e 	bge	r20,r17,81538 <___vfprintf_internal_r+0x548>
   81560:	d9014f17 	ldw	r4,1340(sp)
   81564:	b00b883a 	mov	r5,r22
   81568:	d9800c04 	addi	r6,sp,48
   8156c:	d9c15115 	stw	r7,1348(sp)
   81570:	0080f980 	call	80f98 <__sprint_r>
   81574:	d9c15117 	ldw	r7,1348(sp)
   81578:	1000551e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   8157c:	843ffc04 	addi	r16,r16,-16
   81580:	dc800e17 	ldw	r18,56(sp)
   81584:	dc400d17 	ldw	r17,52(sp)
   81588:	dd401904 	addi	r21,sp,100
   8158c:	9c3fed16 	blt	r19,r16,81544 <___vfprintf_internal_r+0x554>
   81590:	9425883a 	add	r18,r18,r16
   81594:	8c400044 	addi	r17,r17,1
   81598:	008001c4 	movi	r2,7
   8159c:	af000015 	stw	fp,0(r21)
   815a0:	ac000115 	stw	r16,4(r21)
   815a4:	dc800e15 	stw	r18,56(sp)
   815a8:	dc400d15 	stw	r17,52(sp)
   815ac:	14418216 	blt	r2,r17,81bb8 <___vfprintf_internal_r+0xbc8>
   815b0:	ad400204 	addi	r21,r21,8
   815b4:	d9014c17 	ldw	r4,1328(sp)
   815b8:	2080400c 	andi	r2,r4,256
   815bc:	10004a1e 	bne	r2,zero,816e8 <___vfprintf_internal_r+0x6f8>
   815c0:	d9414117 	ldw	r5,1284(sp)
   815c4:	91e5883a 	add	r18,r18,r7
   815c8:	8c400044 	addi	r17,r17,1
   815cc:	008001c4 	movi	r2,7
   815d0:	a9400015 	stw	r5,0(r21)
   815d4:	a9c00115 	stw	r7,4(r21)
   815d8:	dc800e15 	stw	r18,56(sp)
   815dc:	dc400d15 	stw	r17,52(sp)
   815e0:	14416716 	blt	r2,r17,81b80 <___vfprintf_internal_r+0xb90>
   815e4:	a8c00204 	addi	r3,r21,8
   815e8:	d9814c17 	ldw	r6,1328(sp)
   815ec:	3080010c 	andi	r2,r6,4
   815f0:	10002826 	beq	r2,zero,81694 <___vfprintf_internal_r+0x6a4>
   815f4:	d8814a17 	ldw	r2,1320(sp)
   815f8:	d9014517 	ldw	r4,1300(sp)
   815fc:	1121c83a 	sub	r16,r2,r4
   81600:	0400240e 	bge	zero,r16,81694 <___vfprintf_internal_r+0x6a4>
   81604:	00800404 	movi	r2,16
   81608:	1404550e 	bge	r2,r16,82760 <___vfprintf_internal_r+0x1770>
   8160c:	dc400d17 	ldw	r17,52(sp)
   81610:	1027883a 	mov	r19,r2
   81614:	07000274 	movhi	fp,9
   81618:	e7353c84 	addi	fp,fp,-11022
   8161c:	050001c4 	movi	r20,7
   81620:	00000306 	br	81630 <___vfprintf_internal_r+0x640>
   81624:	843ffc04 	addi	r16,r16,-16
   81628:	18c00204 	addi	r3,r3,8
   8162c:	9c00110e 	bge	r19,r16,81674 <___vfprintf_internal_r+0x684>
   81630:	94800404 	addi	r18,r18,16
   81634:	8c400044 	addi	r17,r17,1
   81638:	1f000015 	stw	fp,0(r3)
   8163c:	1cc00115 	stw	r19,4(r3)
   81640:	dc800e15 	stw	r18,56(sp)
   81644:	dc400d15 	stw	r17,52(sp)
   81648:	a47ff60e 	bge	r20,r17,81624 <___vfprintf_internal_r+0x634>
   8164c:	d9014f17 	ldw	r4,1340(sp)
   81650:	b00b883a 	mov	r5,r22
   81654:	d9800c04 	addi	r6,sp,48
   81658:	0080f980 	call	80f98 <__sprint_r>
   8165c:	10001c1e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   81660:	843ffc04 	addi	r16,r16,-16
   81664:	dc800e17 	ldw	r18,56(sp)
   81668:	dc400d17 	ldw	r17,52(sp)
   8166c:	d8c01904 	addi	r3,sp,100
   81670:	9c3fef16 	blt	r19,r16,81630 <___vfprintf_internal_r+0x640>
   81674:	9425883a 	add	r18,r18,r16
   81678:	8c400044 	addi	r17,r17,1
   8167c:	008001c4 	movi	r2,7
   81680:	1f000015 	stw	fp,0(r3)
   81684:	1c000115 	stw	r16,4(r3)
   81688:	dc800e15 	stw	r18,56(sp)
   8168c:	dc400d15 	stw	r17,52(sp)
   81690:	1440cb16 	blt	r2,r17,819c0 <___vfprintf_internal_r+0x9d0>
   81694:	d8814a17 	ldw	r2,1320(sp)
   81698:	d9414517 	ldw	r5,1300(sp)
   8169c:	1140010e 	bge	r2,r5,816a4 <___vfprintf_internal_r+0x6b4>
   816a0:	2805883a 	mov	r2,r5
   816a4:	d9814b17 	ldw	r6,1324(sp)
   816a8:	308d883a 	add	r6,r6,r2
   816ac:	d9814b15 	stw	r6,1324(sp)
   816b0:	90013b1e 	bne	r18,zero,81ba0 <___vfprintf_internal_r+0xbb0>
   816b4:	d9c14017 	ldw	r7,1280(sp)
   816b8:	dd401904 	addi	r21,sp,100
   816bc:	d8000d15 	stw	zero,52(sp)
   816c0:	003ea706 	br	81160 <___vfprintf_internal_r+0x170>
   816c4:	d8800e17 	ldw	r2,56(sp)
   816c8:	1005451e 	bne	r2,zero,82be0 <___vfprintf_internal_r+0x1bf0>
   816cc:	d8000d15 	stw	zero,52(sp)
   816d0:	b080030b 	ldhu	r2,12(r22)
   816d4:	1080100c 	andi	r2,r2,64
   816d8:	103e8726 	beq	r2,zero,810f8 <___vfprintf_internal_r+0x108>
   816dc:	00bfffc4 	movi	r2,-1
   816e0:	d8814b15 	stw	r2,1324(sp)
   816e4:	003e8406 	br	810f8 <___vfprintf_internal_r+0x108>
   816e8:	d9814d17 	ldw	r6,1332(sp)
   816ec:	00801944 	movi	r2,101
   816f0:	11806e16 	blt	r2,r6,818ac <___vfprintf_internal_r+0x8bc>
   816f4:	d9414717 	ldw	r5,1308(sp)
   816f8:	00c00044 	movi	r3,1
   816fc:	1943490e 	bge	r3,r5,82424 <___vfprintf_internal_r+0x1434>
   81700:	d8814117 	ldw	r2,1284(sp)
   81704:	94800044 	addi	r18,r18,1
   81708:	8c400044 	addi	r17,r17,1
   8170c:	a8800015 	stw	r2,0(r21)
   81710:	008001c4 	movi	r2,7
   81714:	a8c00115 	stw	r3,4(r21)
   81718:	dc800e15 	stw	r18,56(sp)
   8171c:	dc400d15 	stw	r17,52(sp)
   81720:	1441ca16 	blt	r2,r17,81e4c <___vfprintf_internal_r+0xe5c>
   81724:	a8c00204 	addi	r3,r21,8
   81728:	d9014917 	ldw	r4,1316(sp)
   8172c:	00800044 	movi	r2,1
   81730:	94800044 	addi	r18,r18,1
   81734:	8c400044 	addi	r17,r17,1
   81738:	18800115 	stw	r2,4(r3)
   8173c:	008001c4 	movi	r2,7
   81740:	19000015 	stw	r4,0(r3)
   81744:	dc800e15 	stw	r18,56(sp)
   81748:	dc400d15 	stw	r17,52(sp)
   8174c:	1441b616 	blt	r2,r17,81e28 <___vfprintf_internal_r+0xe38>
   81750:	1cc00204 	addi	r19,r3,8
   81754:	d9014217 	ldw	r4,1288(sp)
   81758:	d9414317 	ldw	r5,1292(sp)
   8175c:	000d883a 	mov	r6,zero
   81760:	000f883a 	mov	r7,zero
   81764:	0089aa40 	call	89aa4 <__nedf2>
   81768:	10017426 	beq	r2,zero,81d3c <___vfprintf_internal_r+0xd4c>
   8176c:	d9414717 	ldw	r5,1308(sp)
   81770:	d9814117 	ldw	r6,1284(sp)
   81774:	8c400044 	addi	r17,r17,1
   81778:	2c85883a 	add	r2,r5,r18
   8177c:	14bfffc4 	addi	r18,r2,-1
   81780:	28bfffc4 	addi	r2,r5,-1
   81784:	30c00044 	addi	r3,r6,1
   81788:	98800115 	stw	r2,4(r19)
   8178c:	008001c4 	movi	r2,7
   81790:	98c00015 	stw	r3,0(r19)
   81794:	dc800e15 	stw	r18,56(sp)
   81798:	dc400d15 	stw	r17,52(sp)
   8179c:	14418e16 	blt	r2,r17,81dd8 <___vfprintf_internal_r+0xde8>
   817a0:	9cc00204 	addi	r19,r19,8
   817a4:	d9414817 	ldw	r5,1312(sp)
   817a8:	d8800804 	addi	r2,sp,32
   817ac:	8c400044 	addi	r17,r17,1
   817b0:	9165883a 	add	r18,r18,r5
   817b4:	98800015 	stw	r2,0(r19)
   817b8:	008001c4 	movi	r2,7
   817bc:	99400115 	stw	r5,4(r19)
   817c0:	dc800e15 	stw	r18,56(sp)
   817c4:	dc400d15 	stw	r17,52(sp)
   817c8:	1440ed16 	blt	r2,r17,81b80 <___vfprintf_internal_r+0xb90>
   817cc:	98c00204 	addi	r3,r19,8
   817d0:	003f8506 	br	815e8 <___vfprintf_internal_r+0x5f8>
   817d4:	d9814a17 	ldw	r6,1320(sp)
   817d8:	d8814517 	ldw	r2,1300(sp)
   817dc:	30a1c83a 	sub	r16,r6,r2
   817e0:	043f4b0e 	bge	zero,r16,81510 <___vfprintf_internal_r+0x520>
   817e4:	00800404 	movi	r2,16
   817e8:	14043a0e 	bge	r2,r16,828d4 <___vfprintf_internal_r+0x18e4>
   817ec:	1027883a 	mov	r19,r2
   817f0:	07000274 	movhi	fp,9
   817f4:	e7353884 	addi	fp,fp,-11038
   817f8:	050001c4 	movi	r20,7
   817fc:	00000306 	br	8180c <___vfprintf_internal_r+0x81c>
   81800:	843ffc04 	addi	r16,r16,-16
   81804:	ad400204 	addi	r21,r21,8
   81808:	9c00130e 	bge	r19,r16,81858 <___vfprintf_internal_r+0x868>
   8180c:	94800404 	addi	r18,r18,16
   81810:	8c400044 	addi	r17,r17,1
   81814:	af000015 	stw	fp,0(r21)
   81818:	acc00115 	stw	r19,4(r21)
   8181c:	dc800e15 	stw	r18,56(sp)
   81820:	dc400d15 	stw	r17,52(sp)
   81824:	a47ff60e 	bge	r20,r17,81800 <___vfprintf_internal_r+0x810>
   81828:	d9014f17 	ldw	r4,1340(sp)
   8182c:	b00b883a 	mov	r5,r22
   81830:	d9800c04 	addi	r6,sp,48
   81834:	d9c15115 	stw	r7,1348(sp)
   81838:	0080f980 	call	80f98 <__sprint_r>
   8183c:	d9c15117 	ldw	r7,1348(sp)
   81840:	103fa31e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   81844:	843ffc04 	addi	r16,r16,-16
   81848:	dc800e17 	ldw	r18,56(sp)
   8184c:	dc400d17 	ldw	r17,52(sp)
   81850:	dd401904 	addi	r21,sp,100
   81854:	9c3fed16 	blt	r19,r16,8180c <___vfprintf_internal_r+0x81c>
   81858:	9425883a 	add	r18,r18,r16
   8185c:	8c400044 	addi	r17,r17,1
   81860:	008001c4 	movi	r2,7
   81864:	af000015 	stw	fp,0(r21)
   81868:	ac000115 	stw	r16,4(r21)
   8186c:	dc800e15 	stw	r18,56(sp)
   81870:	dc400d15 	stw	r17,52(sp)
   81874:	14416116 	blt	r2,r17,81dfc <___vfprintf_internal_r+0xe0c>
   81878:	ad400204 	addi	r21,r21,8
   8187c:	003f2406 	br	81510 <___vfprintf_internal_r+0x520>
   81880:	d9014f17 	ldw	r4,1340(sp)
   81884:	0084aa40 	call	84aa4 <__sinit>
   81888:	d9c15117 	ldw	r7,1348(sp)
   8188c:	003def06 	br	8104c <___vfprintf_internal_r+0x5c>
   81890:	d9014f17 	ldw	r4,1340(sp)
   81894:	b00b883a 	mov	r5,r22
   81898:	d9c15115 	stw	r7,1348(sp)
   8189c:	0082ed80 	call	82ed8 <__swsetup_r>
   818a0:	d9c15117 	ldw	r7,1348(sp)
   818a4:	103dee26 	beq	r2,zero,81060 <___vfprintf_internal_r+0x70>
   818a8:	003f8c06 	br	816dc <___vfprintf_internal_r+0x6ec>
   818ac:	d9014217 	ldw	r4,1288(sp)
   818b0:	d9414317 	ldw	r5,1292(sp)
   818b4:	000d883a 	mov	r6,zero
   818b8:	000f883a 	mov	r7,zero
   818bc:	0089a1c0 	call	89a1c <__eqdf2>
   818c0:	1000f21e 	bne	r2,zero,81c8c <___vfprintf_internal_r+0xc9c>
   818c4:	00800274 	movhi	r2,9
   818c8:	10b53804 	addi	r2,r2,-11040
   818cc:	94800044 	addi	r18,r18,1
   818d0:	8c400044 	addi	r17,r17,1
   818d4:	a8800015 	stw	r2,0(r21)
   818d8:	00c00044 	movi	r3,1
   818dc:	008001c4 	movi	r2,7
   818e0:	a8c00115 	stw	r3,4(r21)
   818e4:	dc800e15 	stw	r18,56(sp)
   818e8:	dc400d15 	stw	r17,52(sp)
   818ec:	14430016 	blt	r2,r17,824f0 <___vfprintf_internal_r+0x1500>
   818f0:	a8c00204 	addi	r3,r21,8
   818f4:	d8800517 	ldw	r2,20(sp)
   818f8:	d9014717 	ldw	r4,1308(sp)
   818fc:	11015c0e 	bge	r2,r4,81e70 <___vfprintf_internal_r+0xe80>
   81900:	dc400d17 	ldw	r17,52(sp)
   81904:	d9814917 	ldw	r6,1316(sp)
   81908:	00800044 	movi	r2,1
   8190c:	94800044 	addi	r18,r18,1
   81910:	8c400044 	addi	r17,r17,1
   81914:	18800115 	stw	r2,4(r3)
   81918:	008001c4 	movi	r2,7
   8191c:	19800015 	stw	r6,0(r3)
   81920:	dc800e15 	stw	r18,56(sp)
   81924:	dc400d15 	stw	r17,52(sp)
   81928:	14431616 	blt	r2,r17,82584 <___vfprintf_internal_r+0x1594>
   8192c:	18c00204 	addi	r3,r3,8
   81930:	d8814717 	ldw	r2,1308(sp)
   81934:	143fffc4 	addi	r16,r2,-1
   81938:	043f2b0e 	bge	zero,r16,815e8 <___vfprintf_internal_r+0x5f8>
   8193c:	00800404 	movi	r2,16
   81940:	1402a80e 	bge	r2,r16,823e4 <___vfprintf_internal_r+0x13f4>
   81944:	dc400d17 	ldw	r17,52(sp)
   81948:	1027883a 	mov	r19,r2
   8194c:	07000274 	movhi	fp,9
   81950:	e7353884 	addi	fp,fp,-11038
   81954:	050001c4 	movi	r20,7
   81958:	00000306 	br	81968 <___vfprintf_internal_r+0x978>
   8195c:	18c00204 	addi	r3,r3,8
   81960:	843ffc04 	addi	r16,r16,-16
   81964:	9c02a20e 	bge	r19,r16,823f0 <___vfprintf_internal_r+0x1400>
   81968:	94800404 	addi	r18,r18,16
   8196c:	8c400044 	addi	r17,r17,1
   81970:	1f000015 	stw	fp,0(r3)
   81974:	1cc00115 	stw	r19,4(r3)
   81978:	dc800e15 	stw	r18,56(sp)
   8197c:	dc400d15 	stw	r17,52(sp)
   81980:	a47ff60e 	bge	r20,r17,8195c <___vfprintf_internal_r+0x96c>
   81984:	d9014f17 	ldw	r4,1340(sp)
   81988:	b00b883a 	mov	r5,r22
   8198c:	d9800c04 	addi	r6,sp,48
   81990:	0080f980 	call	80f98 <__sprint_r>
   81994:	103f4e1e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   81998:	dc800e17 	ldw	r18,56(sp)
   8199c:	dc400d17 	ldw	r17,52(sp)
   819a0:	d8c01904 	addi	r3,sp,100
   819a4:	003fee06 	br	81960 <___vfprintf_internal_r+0x970>
   819a8:	d8802c0b 	ldhu	r2,176(sp)
   819ac:	00ffffc4 	movi	r3,-1
   819b0:	d8c14b15 	stw	r3,1324(sp)
   819b4:	1080100c 	andi	r2,r2,64
   819b8:	103dcc1e 	bne	r2,zero,810ec <___vfprintf_internal_r+0xfc>
   819bc:	003dce06 	br	810f8 <___vfprintf_internal_r+0x108>
   819c0:	d9014f17 	ldw	r4,1340(sp)
   819c4:	b00b883a 	mov	r5,r22
   819c8:	d9800c04 	addi	r6,sp,48
   819cc:	0080f980 	call	80f98 <__sprint_r>
   819d0:	103f3f1e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   819d4:	dc800e17 	ldw	r18,56(sp)
   819d8:	003f2e06 	br	81694 <___vfprintf_internal_r+0x6a4>
   819dc:	d9414c17 	ldw	r5,1328(sp)
   819e0:	29400414 	ori	r5,r5,16
   819e4:	d9414c15 	stw	r5,1328(sp)
   819e8:	d9814c17 	ldw	r6,1328(sp)
   819ec:	3080080c 	andi	r2,r6,32
   819f0:	10014f1e 	bne	r2,zero,81f30 <___vfprintf_internal_r+0xf40>
   819f4:	d8c14c17 	ldw	r3,1328(sp)
   819f8:	1880040c 	andi	r2,r3,16
   819fc:	1002f01e 	bne	r2,zero,825c0 <___vfprintf_internal_r+0x15d0>
   81a00:	d9014c17 	ldw	r4,1328(sp)
   81a04:	2080100c 	andi	r2,r4,64
   81a08:	1002ed26 	beq	r2,zero,825c0 <___vfprintf_internal_r+0x15d0>
   81a0c:	3880000f 	ldh	r2,0(r7)
   81a10:	39c00104 	addi	r7,r7,4
   81a14:	d9c14015 	stw	r7,1280(sp)
   81a18:	1023d7fa 	srai	r17,r2,31
   81a1c:	1021883a 	mov	r16,r2
   81a20:	88037816 	blt	r17,zero,82804 <___vfprintf_internal_r+0x1814>
   81a24:	01000044 	movi	r4,1
   81a28:	98000416 	blt	r19,zero,81a3c <___vfprintf_internal_r+0xa4c>
   81a2c:	d8c14c17 	ldw	r3,1328(sp)
   81a30:	00bfdfc4 	movi	r2,-129
   81a34:	1886703a 	and	r3,r3,r2
   81a38:	d8c14c15 	stw	r3,1328(sp)
   81a3c:	8444b03a 	or	r2,r16,r17
   81a40:	10022c1e 	bne	r2,zero,822f4 <___vfprintf_internal_r+0x1304>
   81a44:	98022b1e 	bne	r19,zero,822f4 <___vfprintf_internal_r+0x1304>
   81a48:	20803fcc 	andi	r2,r4,255
   81a4c:	1002a126 	beq	r2,zero,824d4 <___vfprintf_internal_r+0x14e4>
   81a50:	d8c01904 	addi	r3,sp,100
   81a54:	dd000f04 	addi	r20,sp,60
   81a58:	d8c14115 	stw	r3,1284(sp)
   81a5c:	d8c14117 	ldw	r3,1284(sp)
   81a60:	dcc14515 	stw	r19,1300(sp)
   81a64:	a0c5c83a 	sub	r2,r20,r3
   81a68:	11c00a04 	addi	r7,r2,40
   81a6c:	99c0010e 	bge	r19,r7,81a74 <___vfprintf_internal_r+0xa84>
   81a70:	d9c14515 	stw	r7,1300(sp)
   81a74:	dcc14615 	stw	r19,1304(sp)
   81a78:	d8800407 	ldb	r2,16(sp)
   81a7c:	103e4c26 	beq	r2,zero,813b0 <___vfprintf_internal_r+0x3c0>
   81a80:	d8814517 	ldw	r2,1300(sp)
   81a84:	10800044 	addi	r2,r2,1
   81a88:	d8814515 	stw	r2,1300(sp)
   81a8c:	003e4806 	br	813b0 <___vfprintf_internal_r+0x3c0>
   81a90:	d9814c17 	ldw	r6,1328(sp)
   81a94:	31800414 	ori	r6,r6,16
   81a98:	d9814c15 	stw	r6,1328(sp)
   81a9c:	d8c14c17 	ldw	r3,1328(sp)
   81aa0:	1880080c 	andi	r2,r3,32
   81aa4:	1001271e 	bne	r2,zero,81f44 <___vfprintf_internal_r+0xf54>
   81aa8:	d9414c17 	ldw	r5,1328(sp)
   81aac:	2880040c 	andi	r2,r5,16
   81ab0:	1002bc1e 	bne	r2,zero,825a4 <___vfprintf_internal_r+0x15b4>
   81ab4:	d9814c17 	ldw	r6,1328(sp)
   81ab8:	3080100c 	andi	r2,r6,64
   81abc:	1002b926 	beq	r2,zero,825a4 <___vfprintf_internal_r+0x15b4>
   81ac0:	3c00000b 	ldhu	r16,0(r7)
   81ac4:	0009883a 	mov	r4,zero
   81ac8:	39c00104 	addi	r7,r7,4
   81acc:	0023883a 	mov	r17,zero
   81ad0:	d9c14015 	stw	r7,1280(sp)
   81ad4:	d8000405 	stb	zero,16(sp)
   81ad8:	003fd306 	br	81a28 <___vfprintf_internal_r+0xa38>
   81adc:	d9014c17 	ldw	r4,1328(sp)
   81ae0:	21000414 	ori	r4,r4,16
   81ae4:	d9014c15 	stw	r4,1328(sp)
   81ae8:	d9414c17 	ldw	r5,1328(sp)
   81aec:	2880080c 	andi	r2,r5,32
   81af0:	1001081e 	bne	r2,zero,81f14 <___vfprintf_internal_r+0xf24>
   81af4:	d8c14c17 	ldw	r3,1328(sp)
   81af8:	1880040c 	andi	r2,r3,16
   81afc:	1002b61e 	bne	r2,zero,825d8 <___vfprintf_internal_r+0x15e8>
   81b00:	d9014c17 	ldw	r4,1328(sp)
   81b04:	2080100c 	andi	r2,r4,64
   81b08:	1002b326 	beq	r2,zero,825d8 <___vfprintf_internal_r+0x15e8>
   81b0c:	3c00000b 	ldhu	r16,0(r7)
   81b10:	01000044 	movi	r4,1
   81b14:	39c00104 	addi	r7,r7,4
   81b18:	0023883a 	mov	r17,zero
   81b1c:	d9c14015 	stw	r7,1280(sp)
   81b20:	d8000405 	stb	zero,16(sp)
   81b24:	003fc006 	br	81a28 <___vfprintf_internal_r+0xa38>
   81b28:	d9014f17 	ldw	r4,1340(sp)
   81b2c:	b00b883a 	mov	r5,r22
   81b30:	d9800c04 	addi	r6,sp,48
   81b34:	0080f980 	call	80f98 <__sprint_r>
   81b38:	103ee51e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   81b3c:	dc800e17 	ldw	r18,56(sp)
   81b40:	d8c01904 	addi	r3,sp,100
   81b44:	d9814c17 	ldw	r6,1328(sp)
   81b48:	3080004c 	andi	r2,r6,1
   81b4c:	1005003a 	cmpeq	r2,r2,zero
   81b50:	103ea51e 	bne	r2,zero,815e8 <___vfprintf_internal_r+0x5f8>
   81b54:	00800044 	movi	r2,1
   81b58:	dc400d17 	ldw	r17,52(sp)
   81b5c:	18800115 	stw	r2,4(r3)
   81b60:	d8814917 	ldw	r2,1316(sp)
   81b64:	94800044 	addi	r18,r18,1
   81b68:	8c400044 	addi	r17,r17,1
   81b6c:	18800015 	stw	r2,0(r3)
   81b70:	008001c4 	movi	r2,7
   81b74:	dc800e15 	stw	r18,56(sp)
   81b78:	dc400d15 	stw	r17,52(sp)
   81b7c:	1442240e 	bge	r2,r17,82410 <___vfprintf_internal_r+0x1420>
   81b80:	d9014f17 	ldw	r4,1340(sp)
   81b84:	b00b883a 	mov	r5,r22
   81b88:	d9800c04 	addi	r6,sp,48
   81b8c:	0080f980 	call	80f98 <__sprint_r>
   81b90:	103ecf1e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   81b94:	dc800e17 	ldw	r18,56(sp)
   81b98:	d8c01904 	addi	r3,sp,100
   81b9c:	003e9206 	br	815e8 <___vfprintf_internal_r+0x5f8>
   81ba0:	d9014f17 	ldw	r4,1340(sp)
   81ba4:	b00b883a 	mov	r5,r22
   81ba8:	d9800c04 	addi	r6,sp,48
   81bac:	0080f980 	call	80f98 <__sprint_r>
   81bb0:	103ec026 	beq	r2,zero,816b4 <___vfprintf_internal_r+0x6c4>
   81bb4:	003ec606 	br	816d0 <___vfprintf_internal_r+0x6e0>
   81bb8:	d9014f17 	ldw	r4,1340(sp)
   81bbc:	b00b883a 	mov	r5,r22
   81bc0:	d9800c04 	addi	r6,sp,48
   81bc4:	d9c15115 	stw	r7,1348(sp)
   81bc8:	0080f980 	call	80f98 <__sprint_r>
   81bcc:	d9c15117 	ldw	r7,1348(sp)
   81bd0:	103ebf1e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   81bd4:	dc800e17 	ldw	r18,56(sp)
   81bd8:	dc400d17 	ldw	r17,52(sp)
   81bdc:	dd401904 	addi	r21,sp,100
   81be0:	003e7406 	br	815b4 <___vfprintf_internal_r+0x5c4>
   81be4:	d9014f17 	ldw	r4,1340(sp)
   81be8:	b00b883a 	mov	r5,r22
   81bec:	d9800c04 	addi	r6,sp,48
   81bf0:	d9c15115 	stw	r7,1348(sp)
   81bf4:	0080f980 	call	80f98 <__sprint_r>
   81bf8:	d9c15117 	ldw	r7,1348(sp)
   81bfc:	103eb41e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   81c00:	dd401904 	addi	r21,sp,100
   81c04:	003d6d06 	br	811bc <___vfprintf_internal_r+0x1cc>
   81c08:	d9014f17 	ldw	r4,1340(sp)
   81c0c:	b00b883a 	mov	r5,r22
   81c10:	d9800c04 	addi	r6,sp,48
   81c14:	d9c15115 	stw	r7,1348(sp)
   81c18:	0080f980 	call	80f98 <__sprint_r>
   81c1c:	d9c15117 	ldw	r7,1348(sp)
   81c20:	103eab1e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   81c24:	dc800e17 	ldw	r18,56(sp)
   81c28:	dc400d17 	ldw	r17,52(sp)
   81c2c:	dd401904 	addi	r21,sp,100
   81c30:	003e3406 	br	81504 <___vfprintf_internal_r+0x514>
   81c34:	d9014f17 	ldw	r4,1340(sp)
   81c38:	b00b883a 	mov	r5,r22
   81c3c:	d9800c04 	addi	r6,sp,48
   81c40:	d9c15115 	stw	r7,1348(sp)
   81c44:	0080f980 	call	80f98 <__sprint_r>
   81c48:	d9c15117 	ldw	r7,1348(sp)
   81c4c:	103ea01e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   81c50:	dc800e17 	ldw	r18,56(sp)
   81c54:	dc400d17 	ldw	r17,52(sp)
   81c58:	dd401904 	addi	r21,sp,100
   81c5c:	003e1c06 	br	814d0 <___vfprintf_internal_r+0x4e0>
   81c60:	d9014f17 	ldw	r4,1340(sp)
   81c64:	b00b883a 	mov	r5,r22
   81c68:	d9800c04 	addi	r6,sp,48
   81c6c:	d9c15115 	stw	r7,1348(sp)
   81c70:	0080f980 	call	80f98 <__sprint_r>
   81c74:	d9c15117 	ldw	r7,1348(sp)
   81c78:	103e951e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   81c7c:	dc800e17 	ldw	r18,56(sp)
   81c80:	dc400d17 	ldw	r17,52(sp)
   81c84:	dd401904 	addi	r21,sp,100
   81c88:	003e0406 	br	8149c <___vfprintf_internal_r+0x4ac>
   81c8c:	d9000517 	ldw	r4,20(sp)
   81c90:	0102580e 	bge	zero,r4,825f4 <___vfprintf_internal_r+0x1604>
   81c94:	d9814717 	ldw	r6,1308(sp)
   81c98:	21807a16 	blt	r4,r6,81e84 <___vfprintf_internal_r+0xe94>
   81c9c:	d8814117 	ldw	r2,1284(sp)
   81ca0:	91a5883a 	add	r18,r18,r6
   81ca4:	8c400044 	addi	r17,r17,1
   81ca8:	a8800015 	stw	r2,0(r21)
   81cac:	008001c4 	movi	r2,7
   81cb0:	a9800115 	stw	r6,4(r21)
   81cb4:	dc800e15 	stw	r18,56(sp)
   81cb8:	dc400d15 	stw	r17,52(sp)
   81cbc:	1442fc16 	blt	r2,r17,828b0 <___vfprintf_internal_r+0x18c0>
   81cc0:	a8c00204 	addi	r3,r21,8
   81cc4:	d9414717 	ldw	r5,1308(sp)
   81cc8:	2161c83a 	sub	r16,r4,r5
   81ccc:	043f9d0e 	bge	zero,r16,81b44 <___vfprintf_internal_r+0xb54>
   81cd0:	00800404 	movi	r2,16
   81cd4:	1402190e 	bge	r2,r16,8253c <___vfprintf_internal_r+0x154c>
   81cd8:	dc400d17 	ldw	r17,52(sp)
   81cdc:	1027883a 	mov	r19,r2
   81ce0:	07000274 	movhi	fp,9
   81ce4:	e7353884 	addi	fp,fp,-11038
   81ce8:	050001c4 	movi	r20,7
   81cec:	00000306 	br	81cfc <___vfprintf_internal_r+0xd0c>
   81cf0:	18c00204 	addi	r3,r3,8
   81cf4:	843ffc04 	addi	r16,r16,-16
   81cf8:	9c02130e 	bge	r19,r16,82548 <___vfprintf_internal_r+0x1558>
   81cfc:	94800404 	addi	r18,r18,16
   81d00:	8c400044 	addi	r17,r17,1
   81d04:	1f000015 	stw	fp,0(r3)
   81d08:	1cc00115 	stw	r19,4(r3)
   81d0c:	dc800e15 	stw	r18,56(sp)
   81d10:	dc400d15 	stw	r17,52(sp)
   81d14:	a47ff60e 	bge	r20,r17,81cf0 <___vfprintf_internal_r+0xd00>
   81d18:	d9014f17 	ldw	r4,1340(sp)
   81d1c:	b00b883a 	mov	r5,r22
   81d20:	d9800c04 	addi	r6,sp,48
   81d24:	0080f980 	call	80f98 <__sprint_r>
   81d28:	103e691e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   81d2c:	dc800e17 	ldw	r18,56(sp)
   81d30:	dc400d17 	ldw	r17,52(sp)
   81d34:	d8c01904 	addi	r3,sp,100
   81d38:	003fee06 	br	81cf4 <___vfprintf_internal_r+0xd04>
   81d3c:	d8814717 	ldw	r2,1308(sp)
   81d40:	143fffc4 	addi	r16,r2,-1
   81d44:	043e970e 	bge	zero,r16,817a4 <___vfprintf_internal_r+0x7b4>
   81d48:	00800404 	movi	r2,16
   81d4c:	1400180e 	bge	r2,r16,81db0 <___vfprintf_internal_r+0xdc0>
   81d50:	1029883a 	mov	r20,r2
   81d54:	07000274 	movhi	fp,9
   81d58:	e7353884 	addi	fp,fp,-11038
   81d5c:	054001c4 	movi	r21,7
   81d60:	00000306 	br	81d70 <___vfprintf_internal_r+0xd80>
   81d64:	9cc00204 	addi	r19,r19,8
   81d68:	843ffc04 	addi	r16,r16,-16
   81d6c:	a400120e 	bge	r20,r16,81db8 <___vfprintf_internal_r+0xdc8>
   81d70:	94800404 	addi	r18,r18,16
   81d74:	8c400044 	addi	r17,r17,1
   81d78:	9f000015 	stw	fp,0(r19)
   81d7c:	9d000115 	stw	r20,4(r19)
   81d80:	dc800e15 	stw	r18,56(sp)
   81d84:	dc400d15 	stw	r17,52(sp)
   81d88:	ac7ff60e 	bge	r21,r17,81d64 <___vfprintf_internal_r+0xd74>
   81d8c:	d9014f17 	ldw	r4,1340(sp)
   81d90:	b00b883a 	mov	r5,r22
   81d94:	d9800c04 	addi	r6,sp,48
   81d98:	0080f980 	call	80f98 <__sprint_r>
   81d9c:	103e4c1e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   81da0:	dc800e17 	ldw	r18,56(sp)
   81da4:	dc400d17 	ldw	r17,52(sp)
   81da8:	dcc01904 	addi	r19,sp,100
   81dac:	003fee06 	br	81d68 <___vfprintf_internal_r+0xd78>
   81db0:	07000274 	movhi	fp,9
   81db4:	e7353884 	addi	fp,fp,-11038
   81db8:	9425883a 	add	r18,r18,r16
   81dbc:	8c400044 	addi	r17,r17,1
   81dc0:	008001c4 	movi	r2,7
   81dc4:	9f000015 	stw	fp,0(r19)
   81dc8:	9c000115 	stw	r16,4(r19)
   81dcc:	dc800e15 	stw	r18,56(sp)
   81dd0:	dc400d15 	stw	r17,52(sp)
   81dd4:	147e720e 	bge	r2,r17,817a0 <___vfprintf_internal_r+0x7b0>
   81dd8:	d9014f17 	ldw	r4,1340(sp)
   81ddc:	b00b883a 	mov	r5,r22
   81de0:	d9800c04 	addi	r6,sp,48
   81de4:	0080f980 	call	80f98 <__sprint_r>
   81de8:	103e391e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   81dec:	dc800e17 	ldw	r18,56(sp)
   81df0:	dc400d17 	ldw	r17,52(sp)
   81df4:	dcc01904 	addi	r19,sp,100
   81df8:	003e6a06 	br	817a4 <___vfprintf_internal_r+0x7b4>
   81dfc:	d9014f17 	ldw	r4,1340(sp)
   81e00:	b00b883a 	mov	r5,r22
   81e04:	d9800c04 	addi	r6,sp,48
   81e08:	d9c15115 	stw	r7,1348(sp)
   81e0c:	0080f980 	call	80f98 <__sprint_r>
   81e10:	d9c15117 	ldw	r7,1348(sp)
   81e14:	103e2e1e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   81e18:	dc800e17 	ldw	r18,56(sp)
   81e1c:	dc400d17 	ldw	r17,52(sp)
   81e20:	dd401904 	addi	r21,sp,100
   81e24:	003dba06 	br	81510 <___vfprintf_internal_r+0x520>
   81e28:	d9014f17 	ldw	r4,1340(sp)
   81e2c:	b00b883a 	mov	r5,r22
   81e30:	d9800c04 	addi	r6,sp,48
   81e34:	0080f980 	call	80f98 <__sprint_r>
   81e38:	103e251e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   81e3c:	dc800e17 	ldw	r18,56(sp)
   81e40:	dc400d17 	ldw	r17,52(sp)
   81e44:	dcc01904 	addi	r19,sp,100
   81e48:	003e4206 	br	81754 <___vfprintf_internal_r+0x764>
   81e4c:	d9014f17 	ldw	r4,1340(sp)
   81e50:	b00b883a 	mov	r5,r22
   81e54:	d9800c04 	addi	r6,sp,48
   81e58:	0080f980 	call	80f98 <__sprint_r>
   81e5c:	103e1c1e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   81e60:	dc800e17 	ldw	r18,56(sp)
   81e64:	dc400d17 	ldw	r17,52(sp)
   81e68:	d8c01904 	addi	r3,sp,100
   81e6c:	003e2e06 	br	81728 <___vfprintf_internal_r+0x738>
   81e70:	d9414c17 	ldw	r5,1328(sp)
   81e74:	2880004c 	andi	r2,r5,1
   81e78:	1005003a 	cmpeq	r2,r2,zero
   81e7c:	103dda1e 	bne	r2,zero,815e8 <___vfprintf_internal_r+0x5f8>
   81e80:	003e9f06 	br	81900 <___vfprintf_internal_r+0x910>
   81e84:	d8c14117 	ldw	r3,1284(sp)
   81e88:	9125883a 	add	r18,r18,r4
   81e8c:	8c400044 	addi	r17,r17,1
   81e90:	008001c4 	movi	r2,7
   81e94:	a8c00015 	stw	r3,0(r21)
   81e98:	a9000115 	stw	r4,4(r21)
   81e9c:	dc800e15 	stw	r18,56(sp)
   81ea0:	dc400d15 	stw	r17,52(sp)
   81ea4:	14426c16 	blt	r2,r17,82858 <___vfprintf_internal_r+0x1868>
   81ea8:	a8c00204 	addi	r3,r21,8
   81eac:	d9414917 	ldw	r5,1316(sp)
   81eb0:	00800044 	movi	r2,1
   81eb4:	94800044 	addi	r18,r18,1
   81eb8:	8c400044 	addi	r17,r17,1
   81ebc:	18800115 	stw	r2,4(r3)
   81ec0:	008001c4 	movi	r2,7
   81ec4:	19400015 	stw	r5,0(r3)
   81ec8:	dc800e15 	stw	r18,56(sp)
   81ecc:	dc400d15 	stw	r17,52(sp)
   81ed0:	2021883a 	mov	r16,r4
   81ed4:	14425616 	blt	r2,r17,82830 <___vfprintf_internal_r+0x1840>
   81ed8:	19400204 	addi	r5,r3,8
   81edc:	d9814717 	ldw	r6,1308(sp)
   81ee0:	8c400044 	addi	r17,r17,1
   81ee4:	dc400d15 	stw	r17,52(sp)
   81ee8:	3107c83a 	sub	r3,r6,r4
   81eec:	d9014117 	ldw	r4,1284(sp)
   81ef0:	90e5883a 	add	r18,r18,r3
   81ef4:	28c00115 	stw	r3,4(r5)
   81ef8:	8105883a 	add	r2,r16,r4
   81efc:	28800015 	stw	r2,0(r5)
   81f00:	008001c4 	movi	r2,7
   81f04:	dc800e15 	stw	r18,56(sp)
   81f08:	147f1d16 	blt	r2,r17,81b80 <___vfprintf_internal_r+0xb90>
   81f0c:	28c00204 	addi	r3,r5,8
   81f10:	003db506 	br	815e8 <___vfprintf_internal_r+0x5f8>
   81f14:	3c000017 	ldw	r16,0(r7)
   81f18:	3c400117 	ldw	r17,4(r7)
   81f1c:	39800204 	addi	r6,r7,8
   81f20:	01000044 	movi	r4,1
   81f24:	d9814015 	stw	r6,1280(sp)
   81f28:	d8000405 	stb	zero,16(sp)
   81f2c:	003ebe06 	br	81a28 <___vfprintf_internal_r+0xa38>
   81f30:	3c000017 	ldw	r16,0(r7)
   81f34:	3c400117 	ldw	r17,4(r7)
   81f38:	38800204 	addi	r2,r7,8
   81f3c:	d8814015 	stw	r2,1280(sp)
   81f40:	003eb706 	br	81a20 <___vfprintf_internal_r+0xa30>
   81f44:	3c000017 	ldw	r16,0(r7)
   81f48:	3c400117 	ldw	r17,4(r7)
   81f4c:	39000204 	addi	r4,r7,8
   81f50:	d9014015 	stw	r4,1280(sp)
   81f54:	0009883a 	mov	r4,zero
   81f58:	d8000405 	stb	zero,16(sp)
   81f5c:	003eb206 	br	81a28 <___vfprintf_internal_r+0xa38>
   81f60:	38c00017 	ldw	r3,0(r7)
   81f64:	39c00104 	addi	r7,r7,4
   81f68:	d8c14a15 	stw	r3,1320(sp)
   81f6c:	1800d70e 	bge	r3,zero,822cc <___vfprintf_internal_r+0x12dc>
   81f70:	00c7c83a 	sub	r3,zero,r3
   81f74:	d8c14a15 	stw	r3,1320(sp)
   81f78:	d9014c17 	ldw	r4,1328(sp)
   81f7c:	b8c00007 	ldb	r3,0(r23)
   81f80:	21000114 	ori	r4,r4,4
   81f84:	d9014c15 	stw	r4,1328(sp)
   81f88:	003c9806 	br	811ec <___vfprintf_internal_r+0x1fc>
   81f8c:	d9814c17 	ldw	r6,1328(sp)
   81f90:	3080080c 	andi	r2,r6,32
   81f94:	1001f626 	beq	r2,zero,82770 <___vfprintf_internal_r+0x1780>
   81f98:	d9014b17 	ldw	r4,1324(sp)
   81f9c:	38800017 	ldw	r2,0(r7)
   81fa0:	39c00104 	addi	r7,r7,4
   81fa4:	d9c14015 	stw	r7,1280(sp)
   81fa8:	2007d7fa 	srai	r3,r4,31
   81fac:	d9c14017 	ldw	r7,1280(sp)
   81fb0:	11000015 	stw	r4,0(r2)
   81fb4:	10c00115 	stw	r3,4(r2)
   81fb8:	003c6906 	br	81160 <___vfprintf_internal_r+0x170>
   81fbc:	b8c00007 	ldb	r3,0(r23)
   81fc0:	00801b04 	movi	r2,108
   81fc4:	18825526 	beq	r3,r2,8291c <___vfprintf_internal_r+0x192c>
   81fc8:	d9414c17 	ldw	r5,1328(sp)
   81fcc:	29400414 	ori	r5,r5,16
   81fd0:	d9414c15 	stw	r5,1328(sp)
   81fd4:	003c8506 	br	811ec <___vfprintf_internal_r+0x1fc>
   81fd8:	d9814c17 	ldw	r6,1328(sp)
   81fdc:	b8c00007 	ldb	r3,0(r23)
   81fe0:	31800814 	ori	r6,r6,32
   81fe4:	d9814c15 	stw	r6,1328(sp)
   81fe8:	003c8006 	br	811ec <___vfprintf_internal_r+0x1fc>
   81fec:	d8814c17 	ldw	r2,1328(sp)
   81ff0:	3c000017 	ldw	r16,0(r7)
   81ff4:	00c01e04 	movi	r3,120
   81ff8:	10800094 	ori	r2,r2,2
   81ffc:	d8814c15 	stw	r2,1328(sp)
   82000:	39c00104 	addi	r7,r7,4
   82004:	01400274 	movhi	r5,9
   82008:	29752104 	addi	r5,r5,-11132
   8200c:	00800c04 	movi	r2,48
   82010:	0023883a 	mov	r17,zero
   82014:	01000084 	movi	r4,2
   82018:	d9c14015 	stw	r7,1280(sp)
   8201c:	d8c14d15 	stw	r3,1332(sp)
   82020:	d9414415 	stw	r5,1296(sp)
   82024:	d8800445 	stb	r2,17(sp)
   82028:	d8c00485 	stb	r3,18(sp)
   8202c:	d8000405 	stb	zero,16(sp)
   82030:	003e7d06 	br	81a28 <___vfprintf_internal_r+0xa38>
   82034:	d8814c17 	ldw	r2,1328(sp)
   82038:	b8c00007 	ldb	r3,0(r23)
   8203c:	10801014 	ori	r2,r2,64
   82040:	d8814c15 	stw	r2,1328(sp)
   82044:	003c6906 	br	811ec <___vfprintf_internal_r+0x1fc>
   82048:	d9414c17 	ldw	r5,1328(sp)
   8204c:	2880020c 	andi	r2,r5,8
   82050:	1001e526 	beq	r2,zero,827e8 <___vfprintf_internal_r+0x17f8>
   82054:	39800017 	ldw	r6,0(r7)
   82058:	38800204 	addi	r2,r7,8
   8205c:	d8814015 	stw	r2,1280(sp)
   82060:	d9814215 	stw	r6,1288(sp)
   82064:	39c00117 	ldw	r7,4(r7)
   82068:	d9c14315 	stw	r7,1292(sp)
   8206c:	d9014217 	ldw	r4,1288(sp)
   82070:	d9414317 	ldw	r5,1292(sp)
   82074:	0087aa00 	call	87aa0 <__isinfd>
   82078:	10021d26 	beq	r2,zero,828f0 <___vfprintf_internal_r+0x1900>
   8207c:	d9014217 	ldw	r4,1288(sp)
   82080:	d9414317 	ldw	r5,1292(sp)
   82084:	000d883a 	mov	r6,zero
   82088:	000f883a 	mov	r7,zero
   8208c:	0089c3c0 	call	89c3c <__ltdf2>
   82090:	1002d016 	blt	r2,zero,82bd4 <___vfprintf_internal_r+0x1be4>
   82094:	d9414d17 	ldw	r5,1332(sp)
   82098:	008011c4 	movi	r2,71
   8209c:	11421016 	blt	r2,r5,828e0 <___vfprintf_internal_r+0x18f0>
   820a0:	01800274 	movhi	r6,9
   820a4:	31b52604 	addi	r6,r6,-11112
   820a8:	d9814115 	stw	r6,1284(sp)
   820ac:	d9014c17 	ldw	r4,1328(sp)
   820b0:	00c000c4 	movi	r3,3
   820b4:	00bfdfc4 	movi	r2,-129
   820b8:	2088703a 	and	r4,r4,r2
   820bc:	180f883a 	mov	r7,r3
   820c0:	d8c14515 	stw	r3,1300(sp)
   820c4:	d9014c15 	stw	r4,1328(sp)
   820c8:	d8014615 	stw	zero,1304(sp)
   820cc:	003e6a06 	br	81a78 <___vfprintf_internal_r+0xa88>
   820d0:	38800017 	ldw	r2,0(r7)
   820d4:	00c00044 	movi	r3,1
   820d8:	39c00104 	addi	r7,r7,4
   820dc:	d9c14015 	stw	r7,1280(sp)
   820e0:	d9000f04 	addi	r4,sp,60
   820e4:	180f883a 	mov	r7,r3
   820e8:	d8c14515 	stw	r3,1300(sp)
   820ec:	d9014115 	stw	r4,1284(sp)
   820f0:	d8800f05 	stb	r2,60(sp)
   820f4:	d8000405 	stb	zero,16(sp)
   820f8:	003cac06 	br	813ac <___vfprintf_internal_r+0x3bc>
   820fc:	01400274 	movhi	r5,9
   82100:	29752c04 	addi	r5,r5,-11088
   82104:	d9414415 	stw	r5,1296(sp)
   82108:	d9814c17 	ldw	r6,1328(sp)
   8210c:	3080080c 	andi	r2,r6,32
   82110:	1000ff26 	beq	r2,zero,82510 <___vfprintf_internal_r+0x1520>
   82114:	3c000017 	ldw	r16,0(r7)
   82118:	3c400117 	ldw	r17,4(r7)
   8211c:	38800204 	addi	r2,r7,8
   82120:	d8814015 	stw	r2,1280(sp)
   82124:	d9414c17 	ldw	r5,1328(sp)
   82128:	2880004c 	andi	r2,r5,1
   8212c:	1005003a 	cmpeq	r2,r2,zero
   82130:	1000b91e 	bne	r2,zero,82418 <___vfprintf_internal_r+0x1428>
   82134:	8444b03a 	or	r2,r16,r17
   82138:	1000b726 	beq	r2,zero,82418 <___vfprintf_internal_r+0x1428>
   8213c:	d9814d17 	ldw	r6,1332(sp)
   82140:	29400094 	ori	r5,r5,2
   82144:	00800c04 	movi	r2,48
   82148:	01000084 	movi	r4,2
   8214c:	d9414c15 	stw	r5,1328(sp)
   82150:	d8800445 	stb	r2,17(sp)
   82154:	d9800485 	stb	r6,18(sp)
   82158:	d8000405 	stb	zero,16(sp)
   8215c:	003e3206 	br	81a28 <___vfprintf_internal_r+0xa38>
   82160:	01800274 	movhi	r6,9
   82164:	31b52104 	addi	r6,r6,-11132
   82168:	d9814415 	stw	r6,1296(sp)
   8216c:	003fe606 	br	82108 <___vfprintf_internal_r+0x1118>
   82170:	00800ac4 	movi	r2,43
   82174:	d8800405 	stb	r2,16(sp)
   82178:	b8c00007 	ldb	r3,0(r23)
   8217c:	003c1b06 	br	811ec <___vfprintf_internal_r+0x1fc>
   82180:	d8814c17 	ldw	r2,1328(sp)
   82184:	b8c00007 	ldb	r3,0(r23)
   82188:	10800054 	ori	r2,r2,1
   8218c:	d8814c15 	stw	r2,1328(sp)
   82190:	003c1606 	br	811ec <___vfprintf_internal_r+0x1fc>
   82194:	d8800407 	ldb	r2,16(sp)
   82198:	10004c1e 	bne	r2,zero,822cc <___vfprintf_internal_r+0x12dc>
   8219c:	00800804 	movi	r2,32
   821a0:	d8800405 	stb	r2,16(sp)
   821a4:	b8c00007 	ldb	r3,0(r23)
   821a8:	003c1006 	br	811ec <___vfprintf_internal_r+0x1fc>
   821ac:	d9814c17 	ldw	r6,1328(sp)
   821b0:	b8c00007 	ldb	r3,0(r23)
   821b4:	31800214 	ori	r6,r6,8
   821b8:	d9814c15 	stw	r6,1328(sp)
   821bc:	003c0b06 	br	811ec <___vfprintf_internal_r+0x1fc>
   821c0:	0009883a 	mov	r4,zero
   821c4:	04000244 	movi	r16,9
   821c8:	01400284 	movi	r5,10
   821cc:	d9c15115 	stw	r7,1348(sp)
   821d0:	008a1740 	call	8a174 <__mulsi3>
   821d4:	b9000007 	ldb	r4,0(r23)
   821d8:	d8c14d17 	ldw	r3,1332(sp)
   821dc:	bdc00044 	addi	r23,r23,1
   821e0:	d9014d15 	stw	r4,1332(sp)
   821e4:	d9414d17 	ldw	r5,1332(sp)
   821e8:	1885883a 	add	r2,r3,r2
   821ec:	113ff404 	addi	r4,r2,-48
   821f0:	28bff404 	addi	r2,r5,-48
   821f4:	d9c15117 	ldw	r7,1348(sp)
   821f8:	80bff32e 	bgeu	r16,r2,821c8 <___vfprintf_internal_r+0x11d8>
   821fc:	d9014a15 	stw	r4,1320(sp)
   82200:	003bfc06 	br	811f4 <___vfprintf_internal_r+0x204>
   82204:	d8814c17 	ldw	r2,1328(sp)
   82208:	b8c00007 	ldb	r3,0(r23)
   8220c:	10802014 	ori	r2,r2,128
   82210:	d8814c15 	stw	r2,1328(sp)
   82214:	003bf506 	br	811ec <___vfprintf_internal_r+0x1fc>
   82218:	b8c00007 	ldb	r3,0(r23)
   8221c:	00800a84 	movi	r2,42
   82220:	bdc00044 	addi	r23,r23,1
   82224:	18831826 	beq	r3,r2,82e88 <___vfprintf_internal_r+0x1e98>
   82228:	d8c14d15 	stw	r3,1332(sp)
   8222c:	18bff404 	addi	r2,r3,-48
   82230:	00c00244 	movi	r3,9
   82234:	18827b36 	bltu	r3,r2,82c24 <___vfprintf_internal_r+0x1c34>
   82238:	1821883a 	mov	r16,r3
   8223c:	0009883a 	mov	r4,zero
   82240:	01400284 	movi	r5,10
   82244:	d9c15115 	stw	r7,1348(sp)
   82248:	008a1740 	call	8a174 <__mulsi3>
   8224c:	d9414d17 	ldw	r5,1332(sp)
   82250:	b9800007 	ldb	r6,0(r23)
   82254:	d9c15117 	ldw	r7,1348(sp)
   82258:	1145883a 	add	r2,r2,r5
   8225c:	113ff404 	addi	r4,r2,-48
   82260:	30bff404 	addi	r2,r6,-48
   82264:	d9814d15 	stw	r6,1332(sp)
   82268:	bdc00044 	addi	r23,r23,1
   8226c:	80bff42e 	bgeu	r16,r2,82240 <___vfprintf_internal_r+0x1250>
   82270:	2027883a 	mov	r19,r4
   82274:	203bdf0e 	bge	r4,zero,811f4 <___vfprintf_internal_r+0x204>
   82278:	04ffffc4 	movi	r19,-1
   8227c:	003bdd06 	br	811f4 <___vfprintf_internal_r+0x204>
   82280:	d8000405 	stb	zero,16(sp)
   82284:	39800017 	ldw	r6,0(r7)
   82288:	39c00104 	addi	r7,r7,4
   8228c:	d9c14015 	stw	r7,1280(sp)
   82290:	d9814115 	stw	r6,1284(sp)
   82294:	3001c926 	beq	r6,zero,829bc <___vfprintf_internal_r+0x19cc>
   82298:	98000e16 	blt	r19,zero,822d4 <___vfprintf_internal_r+0x12e4>
   8229c:	d9014117 	ldw	r4,1284(sp)
   822a0:	000b883a 	mov	r5,zero
   822a4:	980d883a 	mov	r6,r19
   822a8:	00861240 	call	86124 <memchr>
   822ac:	10025926 	beq	r2,zero,82c14 <___vfprintf_internal_r+0x1c24>
   822b0:	d8c14117 	ldw	r3,1284(sp)
   822b4:	10cfc83a 	sub	r7,r2,r3
   822b8:	99c19e16 	blt	r19,r7,82934 <___vfprintf_internal_r+0x1944>
   822bc:	d9c14515 	stw	r7,1300(sp)
   822c0:	38000916 	blt	r7,zero,822e8 <___vfprintf_internal_r+0x12f8>
   822c4:	d8014615 	stw	zero,1304(sp)
   822c8:	003deb06 	br	81a78 <___vfprintf_internal_r+0xa88>
   822cc:	b8c00007 	ldb	r3,0(r23)
   822d0:	003bc606 	br	811ec <___vfprintf_internal_r+0x1fc>
   822d4:	d9014117 	ldw	r4,1284(sp)
   822d8:	0080f240 	call	80f24 <strlen>
   822dc:	d8814515 	stw	r2,1300(sp)
   822e0:	100f883a 	mov	r7,r2
   822e4:	103ff70e 	bge	r2,zero,822c4 <___vfprintf_internal_r+0x12d4>
   822e8:	d8014515 	stw	zero,1300(sp)
   822ec:	d8014615 	stw	zero,1304(sp)
   822f0:	003de106 	br	81a78 <___vfprintf_internal_r+0xa88>
   822f4:	20c03fcc 	andi	r3,r4,255
   822f8:	00800044 	movi	r2,1
   822fc:	18802d26 	beq	r3,r2,823b4 <___vfprintf_internal_r+0x13c4>
   82300:	18800e36 	bltu	r3,r2,8233c <___vfprintf_internal_r+0x134c>
   82304:	00800084 	movi	r2,2
   82308:	1880fa26 	beq	r3,r2,826f4 <___vfprintf_internal_r+0x1704>
   8230c:	01000274 	movhi	r4,9
   82310:	21353104 	addi	r4,r4,-11068
   82314:	0080f240 	call	80f24 <strlen>
   82318:	100f883a 	mov	r7,r2
   8231c:	dcc14515 	stw	r19,1300(sp)
   82320:	9880010e 	bge	r19,r2,82328 <___vfprintf_internal_r+0x1338>
   82324:	d8814515 	stw	r2,1300(sp)
   82328:	00800274 	movhi	r2,9
   8232c:	10b53104 	addi	r2,r2,-11068
   82330:	dcc14615 	stw	r19,1304(sp)
   82334:	d8814115 	stw	r2,1284(sp)
   82338:	003dcf06 	br	81a78 <___vfprintf_internal_r+0xa88>
   8233c:	d9401904 	addi	r5,sp,100
   82340:	dd000f04 	addi	r20,sp,60
   82344:	d9414115 	stw	r5,1284(sp)
   82348:	880a977a 	slli	r5,r17,29
   8234c:	d9814117 	ldw	r6,1284(sp)
   82350:	8004d0fa 	srli	r2,r16,3
   82354:	8806d0fa 	srli	r3,r17,3
   82358:	810001cc 	andi	r4,r16,7
   8235c:	2884b03a 	or	r2,r5,r2
   82360:	31bfffc4 	addi	r6,r6,-1
   82364:	21000c04 	addi	r4,r4,48
   82368:	d9814115 	stw	r6,1284(sp)
   8236c:	10cab03a 	or	r5,r2,r3
   82370:	31000005 	stb	r4,0(r6)
   82374:	1021883a 	mov	r16,r2
   82378:	1823883a 	mov	r17,r3
   8237c:	283ff21e 	bne	r5,zero,82348 <___vfprintf_internal_r+0x1358>
   82380:	d8c14c17 	ldw	r3,1328(sp)
   82384:	1880004c 	andi	r2,r3,1
   82388:	1005003a 	cmpeq	r2,r2,zero
   8238c:	103db31e 	bne	r2,zero,81a5c <___vfprintf_internal_r+0xa6c>
   82390:	20803fcc 	andi	r2,r4,255
   82394:	1080201c 	xori	r2,r2,128
   82398:	10bfe004 	addi	r2,r2,-128
   8239c:	00c00c04 	movi	r3,48
   823a0:	10fdae26 	beq	r2,r3,81a5c <___vfprintf_internal_r+0xa6c>
   823a4:	31bfffc4 	addi	r6,r6,-1
   823a8:	d9814115 	stw	r6,1284(sp)
   823ac:	30c00005 	stb	r3,0(r6)
   823b0:	003daa06 	br	81a5c <___vfprintf_internal_r+0xa6c>
   823b4:	88800068 	cmpgeui	r2,r17,1
   823b8:	10002c1e 	bne	r2,zero,8246c <___vfprintf_internal_r+0x147c>
   823bc:	8800021e 	bne	r17,zero,823c8 <___vfprintf_internal_r+0x13d8>
   823c0:	00800244 	movi	r2,9
   823c4:	14002936 	bltu	r2,r16,8246c <___vfprintf_internal_r+0x147c>
   823c8:	d90018c4 	addi	r4,sp,99
   823cc:	dd000f04 	addi	r20,sp,60
   823d0:	d9014115 	stw	r4,1284(sp)
   823d4:	d9014117 	ldw	r4,1284(sp)
   823d8:	80800c04 	addi	r2,r16,48
   823dc:	20800005 	stb	r2,0(r4)
   823e0:	003d9e06 	br	81a5c <___vfprintf_internal_r+0xa6c>
   823e4:	dc400d17 	ldw	r17,52(sp)
   823e8:	07000274 	movhi	fp,9
   823ec:	e7353884 	addi	fp,fp,-11038
   823f0:	9425883a 	add	r18,r18,r16
   823f4:	8c400044 	addi	r17,r17,1
   823f8:	008001c4 	movi	r2,7
   823fc:	1f000015 	stw	fp,0(r3)
   82400:	1c000115 	stw	r16,4(r3)
   82404:	dc800e15 	stw	r18,56(sp)
   82408:	dc400d15 	stw	r17,52(sp)
   8240c:	147ddc16 	blt	r2,r17,81b80 <___vfprintf_internal_r+0xb90>
   82410:	18c00204 	addi	r3,r3,8
   82414:	003c7406 	br	815e8 <___vfprintf_internal_r+0x5f8>
   82418:	01000084 	movi	r4,2
   8241c:	d8000405 	stb	zero,16(sp)
   82420:	003d8106 	br	81a28 <___vfprintf_internal_r+0xa38>
   82424:	d9814c17 	ldw	r6,1328(sp)
   82428:	30c4703a 	and	r2,r6,r3
   8242c:	1005003a 	cmpeq	r2,r2,zero
   82430:	103cb326 	beq	r2,zero,81700 <___vfprintf_internal_r+0x710>
   82434:	d9014117 	ldw	r4,1284(sp)
   82438:	94800044 	addi	r18,r18,1
   8243c:	8c400044 	addi	r17,r17,1
   82440:	008001c4 	movi	r2,7
   82444:	a9000015 	stw	r4,0(r21)
   82448:	a8c00115 	stw	r3,4(r21)
   8244c:	dc800e15 	stw	r18,56(sp)
   82450:	dc400d15 	stw	r17,52(sp)
   82454:	147e6016 	blt	r2,r17,81dd8 <___vfprintf_internal_r+0xde8>
   82458:	acc00204 	addi	r19,r21,8
   8245c:	003cd106 	br	817a4 <___vfprintf_internal_r+0x7b4>
   82460:	07000274 	movhi	fp,9
   82464:	e7353884 	addi	fp,fp,-11038
   82468:	003c4906 	br	81590 <___vfprintf_internal_r+0x5a0>
   8246c:	dd000f04 	addi	r20,sp,60
   82470:	dc801904 	addi	r18,sp,100
   82474:	8009883a 	mov	r4,r16
   82478:	880b883a 	mov	r5,r17
   8247c:	01800284 	movi	r6,10
   82480:	000f883a 	mov	r7,zero
   82484:	008889c0 	call	8889c <__umoddi3>
   82488:	12000c04 	addi	r8,r2,48
   8248c:	94bfffc4 	addi	r18,r18,-1
   82490:	8009883a 	mov	r4,r16
   82494:	880b883a 	mov	r5,r17
   82498:	01800284 	movi	r6,10
   8249c:	000f883a 	mov	r7,zero
   824a0:	92000005 	stb	r8,0(r18)
   824a4:	00882300 	call	88230 <__udivdi3>
   824a8:	1009883a 	mov	r4,r2
   824ac:	1021883a 	mov	r16,r2
   824b0:	18800068 	cmpgeui	r2,r3,1
   824b4:	1823883a 	mov	r17,r3
   824b8:	103fee1e 	bne	r2,zero,82474 <___vfprintf_internal_r+0x1484>
   824bc:	1800021e 	bne	r3,zero,824c8 <___vfprintf_internal_r+0x14d8>
   824c0:	00800244 	movi	r2,9
   824c4:	113feb36 	bltu	r2,r4,82474 <___vfprintf_internal_r+0x1484>
   824c8:	94bfffc4 	addi	r18,r18,-1
   824cc:	dc814115 	stw	r18,1284(sp)
   824d0:	003fc006 	br	823d4 <___vfprintf_internal_r+0x13e4>
   824d4:	d9014c17 	ldw	r4,1328(sp)
   824d8:	2080004c 	andi	r2,r4,1
   824dc:	10009a1e 	bne	r2,zero,82748 <___vfprintf_internal_r+0x1758>
   824e0:	d9401904 	addi	r5,sp,100
   824e4:	dd000f04 	addi	r20,sp,60
   824e8:	d9414115 	stw	r5,1284(sp)
   824ec:	003d5b06 	br	81a5c <___vfprintf_internal_r+0xa6c>
   824f0:	d9014f17 	ldw	r4,1340(sp)
   824f4:	b00b883a 	mov	r5,r22
   824f8:	d9800c04 	addi	r6,sp,48
   824fc:	0080f980 	call	80f98 <__sprint_r>
   82500:	103c731e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   82504:	dc800e17 	ldw	r18,56(sp)
   82508:	d8c01904 	addi	r3,sp,100
   8250c:	003cf906 	br	818f4 <___vfprintf_internal_r+0x904>
   82510:	d8c14c17 	ldw	r3,1328(sp)
   82514:	1880040c 	andi	r2,r3,16
   82518:	1000711e 	bne	r2,zero,826e0 <___vfprintf_internal_r+0x16f0>
   8251c:	d9014c17 	ldw	r4,1328(sp)
   82520:	2080100c 	andi	r2,r4,64
   82524:	10006e26 	beq	r2,zero,826e0 <___vfprintf_internal_r+0x16f0>
   82528:	3c00000b 	ldhu	r16,0(r7)
   8252c:	0023883a 	mov	r17,zero
   82530:	39c00104 	addi	r7,r7,4
   82534:	d9c14015 	stw	r7,1280(sp)
   82538:	003efa06 	br	82124 <___vfprintf_internal_r+0x1134>
   8253c:	dc400d17 	ldw	r17,52(sp)
   82540:	07000274 	movhi	fp,9
   82544:	e7353884 	addi	fp,fp,-11038
   82548:	9425883a 	add	r18,r18,r16
   8254c:	8c400044 	addi	r17,r17,1
   82550:	008001c4 	movi	r2,7
   82554:	1f000015 	stw	fp,0(r3)
   82558:	1c000115 	stw	r16,4(r3)
   8255c:	dc800e15 	stw	r18,56(sp)
   82560:	dc400d15 	stw	r17,52(sp)
   82564:	147d7016 	blt	r2,r17,81b28 <___vfprintf_internal_r+0xb38>
   82568:	18c00204 	addi	r3,r3,8
   8256c:	003d7506 	br	81b44 <___vfprintf_internal_r+0xb54>
   82570:	dc800e17 	ldw	r18,56(sp)
   82574:	dc400d17 	ldw	r17,52(sp)
   82578:	07000274 	movhi	fp,9
   8257c:	e7353c84 	addi	fp,fp,-11022
   82580:	003bba06 	br	8146c <___vfprintf_internal_r+0x47c>
   82584:	d9014f17 	ldw	r4,1340(sp)
   82588:	b00b883a 	mov	r5,r22
   8258c:	d9800c04 	addi	r6,sp,48
   82590:	0080f980 	call	80f98 <__sprint_r>
   82594:	103c4e1e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   82598:	dc800e17 	ldw	r18,56(sp)
   8259c:	d8c01904 	addi	r3,sp,100
   825a0:	003ce306 	br	81930 <___vfprintf_internal_r+0x940>
   825a4:	3c000017 	ldw	r16,0(r7)
   825a8:	0009883a 	mov	r4,zero
   825ac:	39c00104 	addi	r7,r7,4
   825b0:	0023883a 	mov	r17,zero
   825b4:	d9c14015 	stw	r7,1280(sp)
   825b8:	d8000405 	stb	zero,16(sp)
   825bc:	003d1a06 	br	81a28 <___vfprintf_internal_r+0xa38>
   825c0:	38800017 	ldw	r2,0(r7)
   825c4:	39c00104 	addi	r7,r7,4
   825c8:	d9c14015 	stw	r7,1280(sp)
   825cc:	1023d7fa 	srai	r17,r2,31
   825d0:	1021883a 	mov	r16,r2
   825d4:	003d1206 	br	81a20 <___vfprintf_internal_r+0xa30>
   825d8:	3c000017 	ldw	r16,0(r7)
   825dc:	01000044 	movi	r4,1
   825e0:	39c00104 	addi	r7,r7,4
   825e4:	0023883a 	mov	r17,zero
   825e8:	d9c14015 	stw	r7,1280(sp)
   825ec:	d8000405 	stb	zero,16(sp)
   825f0:	003d0d06 	br	81a28 <___vfprintf_internal_r+0xa38>
   825f4:	00800274 	movhi	r2,9
   825f8:	10b53804 	addi	r2,r2,-11040
   825fc:	94800044 	addi	r18,r18,1
   82600:	8c400044 	addi	r17,r17,1
   82604:	a8800015 	stw	r2,0(r21)
   82608:	00c00044 	movi	r3,1
   8260c:	008001c4 	movi	r2,7
   82610:	a8c00115 	stw	r3,4(r21)
   82614:	dc800e15 	stw	r18,56(sp)
   82618:	dc400d15 	stw	r17,52(sp)
   8261c:	1440ca16 	blt	r2,r17,82948 <___vfprintf_internal_r+0x1958>
   82620:	a8c00204 	addi	r3,r21,8
   82624:	2000061e 	bne	r4,zero,82640 <___vfprintf_internal_r+0x1650>
   82628:	d9414717 	ldw	r5,1308(sp)
   8262c:	2800041e 	bne	r5,zero,82640 <___vfprintf_internal_r+0x1650>
   82630:	d9814c17 	ldw	r6,1328(sp)
   82634:	3080004c 	andi	r2,r6,1
   82638:	1005003a 	cmpeq	r2,r2,zero
   8263c:	103bea1e 	bne	r2,zero,815e8 <___vfprintf_internal_r+0x5f8>
   82640:	00800044 	movi	r2,1
   82644:	dc400d17 	ldw	r17,52(sp)
   82648:	18800115 	stw	r2,4(r3)
   8264c:	d8814917 	ldw	r2,1316(sp)
   82650:	94800044 	addi	r18,r18,1
   82654:	8c400044 	addi	r17,r17,1
   82658:	18800015 	stw	r2,0(r3)
   8265c:	008001c4 	movi	r2,7
   82660:	dc800e15 	stw	r18,56(sp)
   82664:	dc400d15 	stw	r17,52(sp)
   82668:	1440ca16 	blt	r2,r17,82994 <___vfprintf_internal_r+0x19a4>
   8266c:	18c00204 	addi	r3,r3,8
   82670:	0121c83a 	sub	r16,zero,r4
   82674:	0400500e 	bge	zero,r16,827b8 <___vfprintf_internal_r+0x17c8>
   82678:	00800404 	movi	r2,16
   8267c:	1400800e 	bge	r2,r16,82880 <___vfprintf_internal_r+0x1890>
   82680:	1027883a 	mov	r19,r2
   82684:	07000274 	movhi	fp,9
   82688:	e7353884 	addi	fp,fp,-11038
   8268c:	050001c4 	movi	r20,7
   82690:	00000306 	br	826a0 <___vfprintf_internal_r+0x16b0>
   82694:	18c00204 	addi	r3,r3,8
   82698:	843ffc04 	addi	r16,r16,-16
   8269c:	9c007a0e 	bge	r19,r16,82888 <___vfprintf_internal_r+0x1898>
   826a0:	94800404 	addi	r18,r18,16
   826a4:	8c400044 	addi	r17,r17,1
   826a8:	1f000015 	stw	fp,0(r3)
   826ac:	1cc00115 	stw	r19,4(r3)
   826b0:	dc800e15 	stw	r18,56(sp)
   826b4:	dc400d15 	stw	r17,52(sp)
   826b8:	a47ff60e 	bge	r20,r17,82694 <___vfprintf_internal_r+0x16a4>
   826bc:	d9014f17 	ldw	r4,1340(sp)
   826c0:	b00b883a 	mov	r5,r22
   826c4:	d9800c04 	addi	r6,sp,48
   826c8:	0080f980 	call	80f98 <__sprint_r>
   826cc:	103c001e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   826d0:	dc800e17 	ldw	r18,56(sp)
   826d4:	dc400d17 	ldw	r17,52(sp)
   826d8:	d8c01904 	addi	r3,sp,100
   826dc:	003fee06 	br	82698 <___vfprintf_internal_r+0x16a8>
   826e0:	3c000017 	ldw	r16,0(r7)
   826e4:	0023883a 	mov	r17,zero
   826e8:	39c00104 	addi	r7,r7,4
   826ec:	d9c14015 	stw	r7,1280(sp)
   826f0:	003e8c06 	br	82124 <___vfprintf_internal_r+0x1134>
   826f4:	d9401904 	addi	r5,sp,100
   826f8:	dd000f04 	addi	r20,sp,60
   826fc:	d9414115 	stw	r5,1284(sp)
   82700:	d9814417 	ldw	r6,1296(sp)
   82704:	880a973a 	slli	r5,r17,28
   82708:	8004d13a 	srli	r2,r16,4
   8270c:	810003cc 	andi	r4,r16,15
   82710:	3109883a 	add	r4,r6,r4
   82714:	2884b03a 	or	r2,r5,r2
   82718:	21400003 	ldbu	r5,0(r4)
   8271c:	d9014117 	ldw	r4,1284(sp)
   82720:	8806d13a 	srli	r3,r17,4
   82724:	1021883a 	mov	r16,r2
   82728:	213fffc4 	addi	r4,r4,-1
   8272c:	d9014115 	stw	r4,1284(sp)
   82730:	d9814117 	ldw	r6,1284(sp)
   82734:	10c8b03a 	or	r4,r2,r3
   82738:	1823883a 	mov	r17,r3
   8273c:	31400005 	stb	r5,0(r6)
   82740:	203fef1e 	bne	r4,zero,82700 <___vfprintf_internal_r+0x1710>
   82744:	003cc506 	br	81a5c <___vfprintf_internal_r+0xa6c>
   82748:	00800c04 	movi	r2,48
   8274c:	d98018c4 	addi	r6,sp,99
   82750:	dd000f04 	addi	r20,sp,60
   82754:	d88018c5 	stb	r2,99(sp)
   82758:	d9814115 	stw	r6,1284(sp)
   8275c:	003cbf06 	br	81a5c <___vfprintf_internal_r+0xa6c>
   82760:	dc400d17 	ldw	r17,52(sp)
   82764:	07000274 	movhi	fp,9
   82768:	e7353c84 	addi	fp,fp,-11022
   8276c:	003bc106 	br	81674 <___vfprintf_internal_r+0x684>
   82770:	d9414c17 	ldw	r5,1328(sp)
   82774:	2880040c 	andi	r2,r5,16
   82778:	10007c26 	beq	r2,zero,8296c <___vfprintf_internal_r+0x197c>
   8277c:	38800017 	ldw	r2,0(r7)
   82780:	39c00104 	addi	r7,r7,4
   82784:	d9c14015 	stw	r7,1280(sp)
   82788:	d9814b17 	ldw	r6,1324(sp)
   8278c:	d9c14017 	ldw	r7,1280(sp)
   82790:	11800015 	stw	r6,0(r2)
   82794:	003a7206 	br	81160 <___vfprintf_internal_r+0x170>
   82798:	d9014f17 	ldw	r4,1340(sp)
   8279c:	b00b883a 	mov	r5,r22
   827a0:	d9800c04 	addi	r6,sp,48
   827a4:	0080f980 	call	80f98 <__sprint_r>
   827a8:	103bc91e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   827ac:	dc800e17 	ldw	r18,56(sp)
   827b0:	dc400d17 	ldw	r17,52(sp)
   827b4:	d8c01904 	addi	r3,sp,100
   827b8:	d9014717 	ldw	r4,1308(sp)
   827bc:	d9414117 	ldw	r5,1284(sp)
   827c0:	8c400044 	addi	r17,r17,1
   827c4:	9125883a 	add	r18,r18,r4
   827c8:	008001c4 	movi	r2,7
   827cc:	19400015 	stw	r5,0(r3)
   827d0:	19000115 	stw	r4,4(r3)
   827d4:	dc800e15 	stw	r18,56(sp)
   827d8:	dc400d15 	stw	r17,52(sp)
   827dc:	147ce816 	blt	r2,r17,81b80 <___vfprintf_internal_r+0xb90>
   827e0:	18c00204 	addi	r3,r3,8
   827e4:	003b8006 	br	815e8 <___vfprintf_internal_r+0x5f8>
   827e8:	38c00017 	ldw	r3,0(r7)
   827ec:	39000204 	addi	r4,r7,8
   827f0:	d9014015 	stw	r4,1280(sp)
   827f4:	d8c14215 	stw	r3,1288(sp)
   827f8:	39c00117 	ldw	r7,4(r7)
   827fc:	d9c14315 	stw	r7,1292(sp)
   82800:	003e1a06 	br	8206c <___vfprintf_internal_r+0x107c>
   82804:	0005883a 	mov	r2,zero
   82808:	1409c83a 	sub	r4,r2,r16
   8280c:	1105803a 	cmpltu	r2,r2,r4
   82810:	044bc83a 	sub	r5,zero,r17
   82814:	2885c83a 	sub	r2,r5,r2
   82818:	2021883a 	mov	r16,r4
   8281c:	1023883a 	mov	r17,r2
   82820:	01000044 	movi	r4,1
   82824:	00800b44 	movi	r2,45
   82828:	d8800405 	stb	r2,16(sp)
   8282c:	003c7e06 	br	81a28 <___vfprintf_internal_r+0xa38>
   82830:	d9014f17 	ldw	r4,1340(sp)
   82834:	b00b883a 	mov	r5,r22
   82838:	d9800c04 	addi	r6,sp,48
   8283c:	0080f980 	call	80f98 <__sprint_r>
   82840:	103ba31e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   82844:	dc800e17 	ldw	r18,56(sp)
   82848:	dc400d17 	ldw	r17,52(sp)
   8284c:	d9000517 	ldw	r4,20(sp)
   82850:	d9401904 	addi	r5,sp,100
   82854:	003da106 	br	81edc <___vfprintf_internal_r+0xeec>
   82858:	d9014f17 	ldw	r4,1340(sp)
   8285c:	b00b883a 	mov	r5,r22
   82860:	d9800c04 	addi	r6,sp,48
   82864:	0080f980 	call	80f98 <__sprint_r>
   82868:	103b991e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   8286c:	dc800e17 	ldw	r18,56(sp)
   82870:	dc400d17 	ldw	r17,52(sp)
   82874:	d9000517 	ldw	r4,20(sp)
   82878:	d8c01904 	addi	r3,sp,100
   8287c:	003d8b06 	br	81eac <___vfprintf_internal_r+0xebc>
   82880:	07000274 	movhi	fp,9
   82884:	e7353884 	addi	fp,fp,-11038
   82888:	9425883a 	add	r18,r18,r16
   8288c:	8c400044 	addi	r17,r17,1
   82890:	008001c4 	movi	r2,7
   82894:	1f000015 	stw	fp,0(r3)
   82898:	1c000115 	stw	r16,4(r3)
   8289c:	dc800e15 	stw	r18,56(sp)
   828a0:	dc400d15 	stw	r17,52(sp)
   828a4:	147fbc16 	blt	r2,r17,82798 <___vfprintf_internal_r+0x17a8>
   828a8:	18c00204 	addi	r3,r3,8
   828ac:	003fc206 	br	827b8 <___vfprintf_internal_r+0x17c8>
   828b0:	d9014f17 	ldw	r4,1340(sp)
   828b4:	b00b883a 	mov	r5,r22
   828b8:	d9800c04 	addi	r6,sp,48
   828bc:	0080f980 	call	80f98 <__sprint_r>
   828c0:	103b831e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   828c4:	dc800e17 	ldw	r18,56(sp)
   828c8:	d9000517 	ldw	r4,20(sp)
   828cc:	d8c01904 	addi	r3,sp,100
   828d0:	003cfc06 	br	81cc4 <___vfprintf_internal_r+0xcd4>
   828d4:	07000274 	movhi	fp,9
   828d8:	e7353884 	addi	fp,fp,-11038
   828dc:	003bde06 	br	81858 <___vfprintf_internal_r+0x868>
   828e0:	00800274 	movhi	r2,9
   828e4:	10b52704 	addi	r2,r2,-11108
   828e8:	d8814115 	stw	r2,1284(sp)
   828ec:	003def06 	br	820ac <___vfprintf_internal_r+0x10bc>
   828f0:	d9014217 	ldw	r4,1288(sp)
   828f4:	d9414317 	ldw	r5,1292(sp)
   828f8:	0087ae00 	call	87ae0 <__isnand>
   828fc:	10003926 	beq	r2,zero,829e4 <___vfprintf_internal_r+0x19f4>
   82900:	d9414d17 	ldw	r5,1332(sp)
   82904:	008011c4 	movi	r2,71
   82908:	1140ce16 	blt	r2,r5,82c44 <___vfprintf_internal_r+0x1c54>
   8290c:	01800274 	movhi	r6,9
   82910:	31b52804 	addi	r6,r6,-11104
   82914:	d9814115 	stw	r6,1284(sp)
   82918:	003de406 	br	820ac <___vfprintf_internal_r+0x10bc>
   8291c:	d9014c17 	ldw	r4,1328(sp)
   82920:	bdc00044 	addi	r23,r23,1
   82924:	b8c00007 	ldb	r3,0(r23)
   82928:	21000814 	ori	r4,r4,32
   8292c:	d9014c15 	stw	r4,1328(sp)
   82930:	003a2e06 	br	811ec <___vfprintf_internal_r+0x1fc>
   82934:	dcc14515 	stw	r19,1300(sp)
   82938:	98011016 	blt	r19,zero,82d7c <___vfprintf_internal_r+0x1d8c>
   8293c:	980f883a 	mov	r7,r19
   82940:	d8014615 	stw	zero,1304(sp)
   82944:	003c4c06 	br	81a78 <___vfprintf_internal_r+0xa88>
   82948:	d9014f17 	ldw	r4,1340(sp)
   8294c:	b00b883a 	mov	r5,r22
   82950:	d9800c04 	addi	r6,sp,48
   82954:	0080f980 	call	80f98 <__sprint_r>
   82958:	103b5d1e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   8295c:	dc800e17 	ldw	r18,56(sp)
   82960:	d9000517 	ldw	r4,20(sp)
   82964:	d8c01904 	addi	r3,sp,100
   82968:	003f2e06 	br	82624 <___vfprintf_internal_r+0x1634>
   8296c:	d8c14c17 	ldw	r3,1328(sp)
   82970:	1880100c 	andi	r2,r3,64
   82974:	1000a026 	beq	r2,zero,82bf8 <___vfprintf_internal_r+0x1c08>
   82978:	38800017 	ldw	r2,0(r7)
   8297c:	39c00104 	addi	r7,r7,4
   82980:	d9c14015 	stw	r7,1280(sp)
   82984:	d9014b17 	ldw	r4,1324(sp)
   82988:	d9c14017 	ldw	r7,1280(sp)
   8298c:	1100000d 	sth	r4,0(r2)
   82990:	0039f306 	br	81160 <___vfprintf_internal_r+0x170>
   82994:	d9014f17 	ldw	r4,1340(sp)
   82998:	b00b883a 	mov	r5,r22
   8299c:	d9800c04 	addi	r6,sp,48
   829a0:	0080f980 	call	80f98 <__sprint_r>
   829a4:	103b4a1e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   829a8:	dc800e17 	ldw	r18,56(sp)
   829ac:	dc400d17 	ldw	r17,52(sp)
   829b0:	d9000517 	ldw	r4,20(sp)
   829b4:	d8c01904 	addi	r3,sp,100
   829b8:	003f2d06 	br	82670 <___vfprintf_internal_r+0x1680>
   829bc:	00800184 	movi	r2,6
   829c0:	14c09a36 	bltu	r2,r19,82c2c <___vfprintf_internal_r+0x1c3c>
   829c4:	dcc14515 	stw	r19,1300(sp)
   829c8:	9800010e 	bge	r19,zero,829d0 <___vfprintf_internal_r+0x19e0>
   829cc:	d8014515 	stw	zero,1300(sp)
   829d0:	00800274 	movhi	r2,9
   829d4:	10b52a04 	addi	r2,r2,-11096
   829d8:	980f883a 	mov	r7,r19
   829dc:	d8814115 	stw	r2,1284(sp)
   829e0:	003a7206 	br	813ac <___vfprintf_internal_r+0x3bc>
   829e4:	00bfffc4 	movi	r2,-1
   829e8:	9880e226 	beq	r19,r2,82d74 <___vfprintf_internal_r+0x1d84>
   829ec:	d9414d17 	ldw	r5,1332(sp)
   829f0:	008019c4 	movi	r2,103
   829f4:	2880dc26 	beq	r5,r2,82d68 <___vfprintf_internal_r+0x1d78>
   829f8:	008011c4 	movi	r2,71
   829fc:	2880da26 	beq	r5,r2,82d68 <___vfprintf_internal_r+0x1d78>
   82a00:	d9414c17 	ldw	r5,1328(sp)
   82a04:	d9014317 	ldw	r4,1292(sp)
   82a08:	d9814217 	ldw	r6,1288(sp)
   82a0c:	29404014 	ori	r5,r5,256
   82a10:	d9414c15 	stw	r5,1328(sp)
   82a14:	2000cc16 	blt	r4,zero,82d48 <___vfprintf_internal_r+0x1d58>
   82a18:	3021883a 	mov	r16,r6
   82a1c:	2023883a 	mov	r17,r4
   82a20:	0039883a 	mov	fp,zero
   82a24:	d9414d17 	ldw	r5,1332(sp)
   82a28:	00801984 	movi	r2,102
   82a2c:	2880b726 	beq	r5,r2,82d0c <___vfprintf_internal_r+0x1d1c>
   82a30:	00801184 	movi	r2,70
   82a34:	2880b526 	beq	r5,r2,82d0c <___vfprintf_internal_r+0x1d1c>
   82a38:	00801944 	movi	r2,101
   82a3c:	2880c826 	beq	r5,r2,82d60 <___vfprintf_internal_r+0x1d70>
   82a40:	00801144 	movi	r2,69
   82a44:	2880c626 	beq	r5,r2,82d60 <___vfprintf_internal_r+0x1d70>
   82a48:	9829883a 	mov	r20,r19
   82a4c:	d9014f17 	ldw	r4,1340(sp)
   82a50:	d8800504 	addi	r2,sp,20
   82a54:	880d883a 	mov	r6,r17
   82a58:	d8800115 	stw	r2,4(sp)
   82a5c:	d8c00604 	addi	r3,sp,24
   82a60:	d8800704 	addi	r2,sp,28
   82a64:	800b883a 	mov	r5,r16
   82a68:	01c00084 	movi	r7,2
   82a6c:	d8c00215 	stw	r3,8(sp)
   82a70:	d8800315 	stw	r2,12(sp)
   82a74:	dd000015 	stw	r20,0(sp)
   82a78:	00832580 	call	83258 <_dtoa_r>
   82a7c:	d9814d17 	ldw	r6,1332(sp)
   82a80:	d8814115 	stw	r2,1284(sp)
   82a84:	008019c4 	movi	r2,103
   82a88:	30809526 	beq	r6,r2,82ce0 <___vfprintf_internal_r+0x1cf0>
   82a8c:	d8c14d17 	ldw	r3,1332(sp)
   82a90:	008011c4 	movi	r2,71
   82a94:	18809226 	beq	r3,r2,82ce0 <___vfprintf_internal_r+0x1cf0>
   82a98:	d9414117 	ldw	r5,1284(sp)
   82a9c:	d9814d17 	ldw	r6,1332(sp)
   82aa0:	00801984 	movi	r2,102
   82aa4:	2d25883a 	add	r18,r5,r20
   82aa8:	30808626 	beq	r6,r2,82cc4 <___vfprintf_internal_r+0x1cd4>
   82aac:	00801184 	movi	r2,70
   82ab0:	30808426 	beq	r6,r2,82cc4 <___vfprintf_internal_r+0x1cd4>
   82ab4:	000d883a 	mov	r6,zero
   82ab8:	000f883a 	mov	r7,zero
   82abc:	880b883a 	mov	r5,r17
   82ac0:	8009883a 	mov	r4,r16
   82ac4:	0089a1c0 	call	89a1c <__eqdf2>
   82ac8:	1000751e 	bne	r2,zero,82ca0 <___vfprintf_internal_r+0x1cb0>
   82acc:	9005883a 	mov	r2,r18
   82ad0:	dc800715 	stw	r18,28(sp)
   82ad4:	d9014117 	ldw	r4,1284(sp)
   82ad8:	d9414d17 	ldw	r5,1332(sp)
   82adc:	00c019c4 	movi	r3,103
   82ae0:	1125c83a 	sub	r18,r2,r4
   82ae4:	28c06826 	beq	r5,r3,82c88 <___vfprintf_internal_r+0x1c98>
   82ae8:	008011c4 	movi	r2,71
   82aec:	28806626 	beq	r5,r2,82c88 <___vfprintf_internal_r+0x1c98>
   82af0:	d9000517 	ldw	r4,20(sp)
   82af4:	d8c14d17 	ldw	r3,1332(sp)
   82af8:	00801944 	movi	r2,101
   82afc:	10c05516 	blt	r2,r3,82c54 <___vfprintf_internal_r+0x1c64>
   82b00:	213fffc4 	addi	r4,r4,-1
   82b04:	d9000515 	stw	r4,20(sp)
   82b08:	d8c00805 	stb	r3,32(sp)
   82b0c:	2021883a 	mov	r16,r4
   82b10:	2000c116 	blt	r4,zero,82e18 <___vfprintf_internal_r+0x1e28>
   82b14:	00800ac4 	movi	r2,43
   82b18:	d8800845 	stb	r2,33(sp)
   82b1c:	00800244 	movi	r2,9
   82b20:	1400af0e 	bge	r2,r16,82de0 <___vfprintf_internal_r+0x1df0>
   82b24:	1027883a 	mov	r19,r2
   82b28:	dc400b84 	addi	r17,sp,46
   82b2c:	8009883a 	mov	r4,r16
   82b30:	01400284 	movi	r5,10
   82b34:	008a1040 	call	8a104 <__modsi3>
   82b38:	10800c04 	addi	r2,r2,48
   82b3c:	8c7fffc4 	addi	r17,r17,-1
   82b40:	8009883a 	mov	r4,r16
   82b44:	01400284 	movi	r5,10
   82b48:	88800005 	stb	r2,0(r17)
   82b4c:	008a0a40 	call	8a0a4 <__divsi3>
   82b50:	1021883a 	mov	r16,r2
   82b54:	98bff516 	blt	r19,r2,82b2c <___vfprintf_internal_r+0x1b3c>
   82b58:	10c00c04 	addi	r3,r2,48
   82b5c:	d88009c4 	addi	r2,sp,39
   82b60:	108001c4 	addi	r2,r2,7
   82b64:	897fffc4 	addi	r5,r17,-1
   82b68:	88ffffc5 	stb	r3,-1(r17)
   82b6c:	2880a72e 	bgeu	r5,r2,82e0c <___vfprintf_internal_r+0x1e1c>
   82b70:	1009883a 	mov	r4,r2
   82b74:	d9800804 	addi	r6,sp,32
   82b78:	d8c00884 	addi	r3,sp,34
   82b7c:	28800003 	ldbu	r2,0(r5)
   82b80:	29400044 	addi	r5,r5,1
   82b84:	18800005 	stb	r2,0(r3)
   82b88:	18c00044 	addi	r3,r3,1
   82b8c:	293ffb36 	bltu	r5,r4,82b7c <___vfprintf_internal_r+0x1b8c>
   82b90:	1987c83a 	sub	r3,r3,r6
   82b94:	00800044 	movi	r2,1
   82b98:	d8c14815 	stw	r3,1312(sp)
   82b9c:	90cf883a 	add	r7,r18,r3
   82ba0:	1480960e 	bge	r2,r18,82dfc <___vfprintf_internal_r+0x1e0c>
   82ba4:	39c00044 	addi	r7,r7,1
   82ba8:	d9c14515 	stw	r7,1300(sp)
   82bac:	38003416 	blt	r7,zero,82c80 <___vfprintf_internal_r+0x1c90>
   82bb0:	e0803fcc 	andi	r2,fp,255
   82bb4:	1080201c 	xori	r2,r2,128
   82bb8:	10bfe004 	addi	r2,r2,-128
   82bbc:	10004e26 	beq	r2,zero,82cf8 <___vfprintf_internal_r+0x1d08>
   82bc0:	00800b44 	movi	r2,45
   82bc4:	dc814715 	stw	r18,1308(sp)
   82bc8:	d8014615 	stw	zero,1304(sp)
   82bcc:	d8800405 	stb	r2,16(sp)
   82bd0:	003bab06 	br	81a80 <___vfprintf_internal_r+0xa90>
   82bd4:	00800b44 	movi	r2,45
   82bd8:	d8800405 	stb	r2,16(sp)
   82bdc:	003d2d06 	br	82094 <___vfprintf_internal_r+0x10a4>
   82be0:	d9014f17 	ldw	r4,1340(sp)
   82be4:	b00b883a 	mov	r5,r22
   82be8:	d9800c04 	addi	r6,sp,48
   82bec:	0080f980 	call	80f98 <__sprint_r>
   82bf0:	103ab71e 	bne	r2,zero,816d0 <___vfprintf_internal_r+0x6e0>
   82bf4:	003ab506 	br	816cc <___vfprintf_internal_r+0x6dc>
   82bf8:	38800017 	ldw	r2,0(r7)
   82bfc:	39c00104 	addi	r7,r7,4
   82c00:	d9c14015 	stw	r7,1280(sp)
   82c04:	d9414b17 	ldw	r5,1324(sp)
   82c08:	d9c14017 	ldw	r7,1280(sp)
   82c0c:	11400015 	stw	r5,0(r2)
   82c10:	00395306 	br	81160 <___vfprintf_internal_r+0x170>
   82c14:	980f883a 	mov	r7,r19
   82c18:	dcc14515 	stw	r19,1300(sp)
   82c1c:	d8014615 	stw	zero,1304(sp)
   82c20:	003b9506 	br	81a78 <___vfprintf_internal_r+0xa88>
   82c24:	0027883a 	mov	r19,zero
   82c28:	00397206 	br	811f4 <___vfprintf_internal_r+0x204>
   82c2c:	00c00274 	movhi	r3,9
   82c30:	18f52a04 	addi	r3,r3,-11096
   82c34:	100f883a 	mov	r7,r2
   82c38:	d8814515 	stw	r2,1300(sp)
   82c3c:	d8c14115 	stw	r3,1284(sp)
   82c40:	0039da06 	br	813ac <___vfprintf_internal_r+0x3bc>
   82c44:	00800274 	movhi	r2,9
   82c48:	10b52904 	addi	r2,r2,-11100
   82c4c:	d8814115 	stw	r2,1284(sp)
   82c50:	003d1606 	br	820ac <___vfprintf_internal_r+0x10bc>
   82c54:	d9414d17 	ldw	r5,1332(sp)
   82c58:	00801984 	movi	r2,102
   82c5c:	28804926 	beq	r5,r2,82d84 <___vfprintf_internal_r+0x1d94>
   82c60:	200f883a 	mov	r7,r4
   82c64:	24805716 	blt	r4,r18,82dc4 <___vfprintf_internal_r+0x1dd4>
   82c68:	d9414c17 	ldw	r5,1328(sp)
   82c6c:	2880004c 	andi	r2,r5,1
   82c70:	10000126 	beq	r2,zero,82c78 <___vfprintf_internal_r+0x1c88>
   82c74:	21c00044 	addi	r7,r4,1
   82c78:	d9c14515 	stw	r7,1300(sp)
   82c7c:	383fcc0e 	bge	r7,zero,82bb0 <___vfprintf_internal_r+0x1bc0>
   82c80:	d8014515 	stw	zero,1300(sp)
   82c84:	003fca06 	br	82bb0 <___vfprintf_internal_r+0x1bc0>
   82c88:	d9000517 	ldw	r4,20(sp)
   82c8c:	00bfff04 	movi	r2,-4
   82c90:	1100480e 	bge	r2,r4,82db4 <___vfprintf_internal_r+0x1dc4>
   82c94:	99004716 	blt	r19,r4,82db4 <___vfprintf_internal_r+0x1dc4>
   82c98:	d8c14d15 	stw	r3,1332(sp)
   82c9c:	003ff006 	br	82c60 <___vfprintf_internal_r+0x1c70>
   82ca0:	d8800717 	ldw	r2,28(sp)
   82ca4:	14bf8b2e 	bgeu	r2,r18,82ad4 <___vfprintf_internal_r+0x1ae4>
   82ca8:	9007883a 	mov	r3,r18
   82cac:	01000c04 	movi	r4,48
   82cb0:	11000005 	stb	r4,0(r2)
   82cb4:	10800044 	addi	r2,r2,1
   82cb8:	d8800715 	stw	r2,28(sp)
   82cbc:	18bffc1e 	bne	r3,r2,82cb0 <___vfprintf_internal_r+0x1cc0>
   82cc0:	003f8406 	br	82ad4 <___vfprintf_internal_r+0x1ae4>
   82cc4:	d8814117 	ldw	r2,1284(sp)
   82cc8:	10c00007 	ldb	r3,0(r2)
   82ccc:	00800c04 	movi	r2,48
   82cd0:	18805b26 	beq	r3,r2,82e40 <___vfprintf_internal_r+0x1e50>
   82cd4:	d9000517 	ldw	r4,20(sp)
   82cd8:	9125883a 	add	r18,r18,r4
   82cdc:	003f7506 	br	82ab4 <___vfprintf_internal_r+0x1ac4>
   82ce0:	d9014c17 	ldw	r4,1328(sp)
   82ce4:	2080004c 	andi	r2,r4,1
   82ce8:	1005003a 	cmpeq	r2,r2,zero
   82cec:	103f6a26 	beq	r2,zero,82a98 <___vfprintf_internal_r+0x1aa8>
   82cf0:	d8800717 	ldw	r2,28(sp)
   82cf4:	003f7706 	br	82ad4 <___vfprintf_internal_r+0x1ae4>
   82cf8:	d9c14515 	stw	r7,1300(sp)
   82cfc:	38004d16 	blt	r7,zero,82e34 <___vfprintf_internal_r+0x1e44>
   82d00:	dc814715 	stw	r18,1308(sp)
   82d04:	d8014615 	stw	zero,1304(sp)
   82d08:	003b5b06 	br	81a78 <___vfprintf_internal_r+0xa88>
   82d0c:	d9014f17 	ldw	r4,1340(sp)
   82d10:	d8800504 	addi	r2,sp,20
   82d14:	d8800115 	stw	r2,4(sp)
   82d18:	d8c00604 	addi	r3,sp,24
   82d1c:	d8800704 	addi	r2,sp,28
   82d20:	800b883a 	mov	r5,r16
   82d24:	880d883a 	mov	r6,r17
   82d28:	01c000c4 	movi	r7,3
   82d2c:	d8c00215 	stw	r3,8(sp)
   82d30:	d8800315 	stw	r2,12(sp)
   82d34:	dcc00015 	stw	r19,0(sp)
   82d38:	9829883a 	mov	r20,r19
   82d3c:	00832580 	call	83258 <_dtoa_r>
   82d40:	d8814115 	stw	r2,1284(sp)
   82d44:	003f5106 	br	82a8c <___vfprintf_internal_r+0x1a9c>
   82d48:	d8c14217 	ldw	r3,1288(sp)
   82d4c:	d9014317 	ldw	r4,1292(sp)
   82d50:	07000b44 	movi	fp,45
   82d54:	1821883a 	mov	r16,r3
   82d58:	2460003c 	xorhi	r17,r4,32768
   82d5c:	003f3106 	br	82a24 <___vfprintf_internal_r+0x1a34>
   82d60:	9d000044 	addi	r20,r19,1
   82d64:	003f3906 	br	82a4c <___vfprintf_internal_r+0x1a5c>
   82d68:	983f251e 	bne	r19,zero,82a00 <___vfprintf_internal_r+0x1a10>
   82d6c:	04c00044 	movi	r19,1
   82d70:	003f2306 	br	82a00 <___vfprintf_internal_r+0x1a10>
   82d74:	04c00184 	movi	r19,6
   82d78:	003f2106 	br	82a00 <___vfprintf_internal_r+0x1a10>
   82d7c:	d8014515 	stw	zero,1300(sp)
   82d80:	003eee06 	br	8293c <___vfprintf_internal_r+0x194c>
   82d84:	200f883a 	mov	r7,r4
   82d88:	0100370e 	bge	zero,r4,82e68 <___vfprintf_internal_r+0x1e78>
   82d8c:	9800031e 	bne	r19,zero,82d9c <___vfprintf_internal_r+0x1dac>
   82d90:	d9814c17 	ldw	r6,1328(sp)
   82d94:	3080004c 	andi	r2,r6,1
   82d98:	103fb726 	beq	r2,zero,82c78 <___vfprintf_internal_r+0x1c88>
   82d9c:	20800044 	addi	r2,r4,1
   82da0:	98a7883a 	add	r19,r19,r2
   82da4:	dcc14515 	stw	r19,1300(sp)
   82da8:	980f883a 	mov	r7,r19
   82dac:	983f800e 	bge	r19,zero,82bb0 <___vfprintf_internal_r+0x1bc0>
   82db0:	003fb306 	br	82c80 <___vfprintf_internal_r+0x1c90>
   82db4:	d9814d17 	ldw	r6,1332(sp)
   82db8:	31bfff84 	addi	r6,r6,-2
   82dbc:	d9814d15 	stw	r6,1332(sp)
   82dc0:	003f4c06 	br	82af4 <___vfprintf_internal_r+0x1b04>
   82dc4:	0100180e 	bge	zero,r4,82e28 <___vfprintf_internal_r+0x1e38>
   82dc8:	00800044 	movi	r2,1
   82dcc:	1485883a 	add	r2,r2,r18
   82dd0:	d8814515 	stw	r2,1300(sp)
   82dd4:	100f883a 	mov	r7,r2
   82dd8:	103f750e 	bge	r2,zero,82bb0 <___vfprintf_internal_r+0x1bc0>
   82ddc:	003fa806 	br	82c80 <___vfprintf_internal_r+0x1c90>
   82de0:	80c00c04 	addi	r3,r16,48
   82de4:	00800c04 	movi	r2,48
   82de8:	d8c008c5 	stb	r3,35(sp)
   82dec:	d9800804 	addi	r6,sp,32
   82df0:	d8c00904 	addi	r3,sp,36
   82df4:	d8800885 	stb	r2,34(sp)
   82df8:	003f6506 	br	82b90 <___vfprintf_internal_r+0x1ba0>
   82dfc:	d9014c17 	ldw	r4,1328(sp)
   82e00:	2084703a 	and	r2,r4,r2
   82e04:	103f9c26 	beq	r2,zero,82c78 <___vfprintf_internal_r+0x1c88>
   82e08:	003f6606 	br	82ba4 <___vfprintf_internal_r+0x1bb4>
   82e0c:	d9800804 	addi	r6,sp,32
   82e10:	d8c00884 	addi	r3,sp,34
   82e14:	003f5e06 	br	82b90 <___vfprintf_internal_r+0x1ba0>
   82e18:	00800b44 	movi	r2,45
   82e1c:	0121c83a 	sub	r16,zero,r4
   82e20:	d8800845 	stb	r2,33(sp)
   82e24:	003f3d06 	br	82b1c <___vfprintf_internal_r+0x1b2c>
   82e28:	00800084 	movi	r2,2
   82e2c:	1105c83a 	sub	r2,r2,r4
   82e30:	003fe606 	br	82dcc <___vfprintf_internal_r+0x1ddc>
   82e34:	d8014515 	stw	zero,1300(sp)
   82e38:	dc814715 	stw	r18,1308(sp)
   82e3c:	003fb106 	br	82d04 <___vfprintf_internal_r+0x1d14>
   82e40:	000d883a 	mov	r6,zero
   82e44:	000f883a 	mov	r7,zero
   82e48:	8009883a 	mov	r4,r16
   82e4c:	880b883a 	mov	r5,r17
   82e50:	0089aa40 	call	89aa4 <__nedf2>
   82e54:	103f9f26 	beq	r2,zero,82cd4 <___vfprintf_internal_r+0x1ce4>
   82e58:	00800044 	movi	r2,1
   82e5c:	1509c83a 	sub	r4,r2,r20
   82e60:	d9000515 	stw	r4,20(sp)
   82e64:	003f9b06 	br	82cd4 <___vfprintf_internal_r+0x1ce4>
   82e68:	98000d1e 	bne	r19,zero,82ea0 <___vfprintf_internal_r+0x1eb0>
   82e6c:	d8c14c17 	ldw	r3,1328(sp)
   82e70:	1880004c 	andi	r2,r3,1
   82e74:	10000a1e 	bne	r2,zero,82ea0 <___vfprintf_internal_r+0x1eb0>
   82e78:	01000044 	movi	r4,1
   82e7c:	200f883a 	mov	r7,r4
   82e80:	d9014515 	stw	r4,1300(sp)
   82e84:	003f4a06 	br	82bb0 <___vfprintf_internal_r+0x1bc0>
   82e88:	3cc00017 	ldw	r19,0(r7)
   82e8c:	39c00104 	addi	r7,r7,4
   82e90:	983d0e0e 	bge	r19,zero,822cc <___vfprintf_internal_r+0x12dc>
   82e94:	b8c00007 	ldb	r3,0(r23)
   82e98:	04ffffc4 	movi	r19,-1
   82e9c:	0038d306 	br	811ec <___vfprintf_internal_r+0x1fc>
   82ea0:	9cc00084 	addi	r19,r19,2
   82ea4:	dcc14515 	stw	r19,1300(sp)
   82ea8:	980f883a 	mov	r7,r19
   82eac:	983f400e 	bge	r19,zero,82bb0 <___vfprintf_internal_r+0x1bc0>
   82eb0:	003f7306 	br	82c80 <___vfprintf_internal_r+0x1c90>

00082eb4 <__vfprintf_internal>:
   82eb4:	00800274 	movhi	r2,9
   82eb8:	10bd2c04 	addi	r2,r2,-2896
   82ebc:	2013883a 	mov	r9,r4
   82ec0:	11000017 	ldw	r4,0(r2)
   82ec4:	2805883a 	mov	r2,r5
   82ec8:	300f883a 	mov	r7,r6
   82ecc:	480b883a 	mov	r5,r9
   82ed0:	100d883a 	mov	r6,r2
   82ed4:	0080ff01 	jmpi	80ff0 <___vfprintf_internal_r>

00082ed8 <__swsetup_r>:
   82ed8:	00800274 	movhi	r2,9
   82edc:	10bd2c04 	addi	r2,r2,-2896
   82ee0:	10c00017 	ldw	r3,0(r2)
   82ee4:	defffd04 	addi	sp,sp,-12
   82ee8:	dc400115 	stw	r17,4(sp)
   82eec:	dc000015 	stw	r16,0(sp)
   82ef0:	dfc00215 	stw	ra,8(sp)
   82ef4:	2023883a 	mov	r17,r4
   82ef8:	2821883a 	mov	r16,r5
   82efc:	18000226 	beq	r3,zero,82f08 <__swsetup_r+0x30>
   82f00:	18800e17 	ldw	r2,56(r3)
   82f04:	10001f26 	beq	r2,zero,82f84 <__swsetup_r+0xac>
   82f08:	8100030b 	ldhu	r4,12(r16)
   82f0c:	2080020c 	andi	r2,r4,8
   82f10:	10002826 	beq	r2,zero,82fb4 <__swsetup_r+0xdc>
   82f14:	81400417 	ldw	r5,16(r16)
   82f18:	28001d26 	beq	r5,zero,82f90 <__swsetup_r+0xb8>
   82f1c:	2080004c 	andi	r2,r4,1
   82f20:	1005003a 	cmpeq	r2,r2,zero
   82f24:	10000b26 	beq	r2,zero,82f54 <__swsetup_r+0x7c>
   82f28:	2080008c 	andi	r2,r4,2
   82f2c:	10001226 	beq	r2,zero,82f78 <__swsetup_r+0xa0>
   82f30:	0005883a 	mov	r2,zero
   82f34:	80800215 	stw	r2,8(r16)
   82f38:	28000b26 	beq	r5,zero,82f68 <__swsetup_r+0x90>
   82f3c:	0005883a 	mov	r2,zero
   82f40:	dfc00217 	ldw	ra,8(sp)
   82f44:	dc400117 	ldw	r17,4(sp)
   82f48:	dc000017 	ldw	r16,0(sp)
   82f4c:	dec00304 	addi	sp,sp,12
   82f50:	f800283a 	ret
   82f54:	80800517 	ldw	r2,20(r16)
   82f58:	80000215 	stw	zero,8(r16)
   82f5c:	0085c83a 	sub	r2,zero,r2
   82f60:	80800615 	stw	r2,24(r16)
   82f64:	283ff51e 	bne	r5,zero,82f3c <__swsetup_r+0x64>
   82f68:	2080200c 	andi	r2,r4,128
   82f6c:	103ff326 	beq	r2,zero,82f3c <__swsetup_r+0x64>
   82f70:	00bfffc4 	movi	r2,-1
   82f74:	003ff206 	br	82f40 <__swsetup_r+0x68>
   82f78:	80800517 	ldw	r2,20(r16)
   82f7c:	80800215 	stw	r2,8(r16)
   82f80:	003fed06 	br	82f38 <__swsetup_r+0x60>
   82f84:	1809883a 	mov	r4,r3
   82f88:	0084aa40 	call	84aa4 <__sinit>
   82f8c:	003fde06 	br	82f08 <__swsetup_r+0x30>
   82f90:	20c0a00c 	andi	r3,r4,640
   82f94:	00808004 	movi	r2,512
   82f98:	18bfe026 	beq	r3,r2,82f1c <__swsetup_r+0x44>
   82f9c:	8809883a 	mov	r4,r17
   82fa0:	800b883a 	mov	r5,r16
   82fa4:	00858500 	call	85850 <__smakebuf_r>
   82fa8:	8100030b 	ldhu	r4,12(r16)
   82fac:	81400417 	ldw	r5,16(r16)
   82fb0:	003fda06 	br	82f1c <__swsetup_r+0x44>
   82fb4:	2080040c 	andi	r2,r4,16
   82fb8:	103fed26 	beq	r2,zero,82f70 <__swsetup_r+0x98>
   82fbc:	2080010c 	andi	r2,r4,4
   82fc0:	10001226 	beq	r2,zero,8300c <__swsetup_r+0x134>
   82fc4:	81400c17 	ldw	r5,48(r16)
   82fc8:	28000526 	beq	r5,zero,82fe0 <__swsetup_r+0x108>
   82fcc:	80801004 	addi	r2,r16,64
   82fd0:	28800226 	beq	r5,r2,82fdc <__swsetup_r+0x104>
   82fd4:	8809883a 	mov	r4,r17
   82fd8:	0084e5c0 	call	84e5c <_free_r>
   82fdc:	80000c15 	stw	zero,48(r16)
   82fe0:	8080030b 	ldhu	r2,12(r16)
   82fe4:	81400417 	ldw	r5,16(r16)
   82fe8:	80000115 	stw	zero,4(r16)
   82fec:	10bff6cc 	andi	r2,r2,65499
   82ff0:	8080030d 	sth	r2,12(r16)
   82ff4:	81400015 	stw	r5,0(r16)
   82ff8:	8080030b 	ldhu	r2,12(r16)
   82ffc:	10800214 	ori	r2,r2,8
   83000:	113fffcc 	andi	r4,r2,65535
   83004:	8080030d 	sth	r2,12(r16)
   83008:	003fc306 	br	82f18 <__swsetup_r+0x40>
   8300c:	81400417 	ldw	r5,16(r16)
   83010:	003ff906 	br	82ff8 <__swsetup_r+0x120>

00083014 <quorem>:
   83014:	28c00417 	ldw	r3,16(r5)
   83018:	20800417 	ldw	r2,16(r4)
   8301c:	defff104 	addi	sp,sp,-60
   83020:	dfc00e15 	stw	ra,56(sp)
   83024:	df000d15 	stw	fp,52(sp)
   83028:	ddc00c15 	stw	r23,48(sp)
   8302c:	dd800b15 	stw	r22,44(sp)
   83030:	dd400a15 	stw	r21,40(sp)
   83034:	dd000915 	stw	r20,36(sp)
   83038:	dcc00815 	stw	r19,32(sp)
   8303c:	dc800715 	stw	r18,28(sp)
   83040:	dc400615 	stw	r17,24(sp)
   83044:	dc000515 	stw	r16,20(sp)
   83048:	d9000315 	stw	r4,12(sp)
   8304c:	d9400415 	stw	r5,16(sp)
   83050:	10c07f16 	blt	r2,r3,83250 <quorem+0x23c>
   83054:	1d3fffc4 	addi	r20,r3,-1
   83058:	d8c00417 	ldw	r3,16(sp)
   8305c:	d9000317 	ldw	r4,12(sp)
   83060:	a505883a 	add	r2,r20,r20
   83064:	1085883a 	add	r2,r2,r2
   83068:	1cc00504 	addi	r19,r3,20
   8306c:	25c00504 	addi	r23,r4,20
   83070:	98ad883a 	add	r22,r19,r2
   83074:	15c7883a 	add	r3,r2,r23
   83078:	b1400017 	ldw	r5,0(r22)
   8307c:	19000017 	ldw	r4,0(r3)
   83080:	d8c00015 	stw	r3,0(sp)
   83084:	29400044 	addi	r5,r5,1
   83088:	d9000215 	stw	r4,8(sp)
   8308c:	008a1640 	call	8a164 <__udivsi3>
   83090:	1039883a 	mov	fp,r2
   83094:	10003d1e 	bne	r2,zero,8318c <quorem+0x178>
   83098:	d9400417 	ldw	r5,16(sp)
   8309c:	d9000317 	ldw	r4,12(sp)
   830a0:	008657c0 	call	8657c <__mcmp>
   830a4:	10002c16 	blt	r2,zero,83158 <quorem+0x144>
   830a8:	e7000044 	addi	fp,fp,1
   830ac:	b80f883a 	mov	r7,r23
   830b0:	0011883a 	mov	r8,zero
   830b4:	0009883a 	mov	r4,zero
   830b8:	99400017 	ldw	r5,0(r19)
   830bc:	38c00017 	ldw	r3,0(r7)
   830c0:	9cc00104 	addi	r19,r19,4
   830c4:	28bfffcc 	andi	r2,r5,65535
   830c8:	2085883a 	add	r2,r4,r2
   830cc:	11bfffcc 	andi	r6,r2,65535
   830d0:	193fffcc 	andi	r4,r3,65535
   830d4:	1004d43a 	srli	r2,r2,16
   830d8:	280ad43a 	srli	r5,r5,16
   830dc:	2189c83a 	sub	r4,r4,r6
   830e0:	2209883a 	add	r4,r4,r8
   830e4:	1806d43a 	srli	r3,r3,16
   830e8:	288b883a 	add	r5,r5,r2
   830ec:	200dd43a 	srai	r6,r4,16
   830f0:	28bfffcc 	andi	r2,r5,65535
   830f4:	1887c83a 	sub	r3,r3,r2
   830f8:	1987883a 	add	r3,r3,r6
   830fc:	3900000d 	sth	r4,0(r7)
   83100:	38c0008d 	sth	r3,2(r7)
   83104:	2808d43a 	srli	r4,r5,16
   83108:	39c00104 	addi	r7,r7,4
   8310c:	1811d43a 	srai	r8,r3,16
   83110:	b4ffe92e 	bgeu	r22,r19,830b8 <quorem+0xa4>
   83114:	a505883a 	add	r2,r20,r20
   83118:	1085883a 	add	r2,r2,r2
   8311c:	b885883a 	add	r2,r23,r2
   83120:	10c00017 	ldw	r3,0(r2)
   83124:	18000c1e 	bne	r3,zero,83158 <quorem+0x144>
   83128:	113fff04 	addi	r4,r2,-4
   8312c:	b900082e 	bgeu	r23,r4,83150 <quorem+0x13c>
   83130:	10bfff17 	ldw	r2,-4(r2)
   83134:	10000326 	beq	r2,zero,83144 <quorem+0x130>
   83138:	00000506 	br	83150 <quorem+0x13c>
   8313c:	20800017 	ldw	r2,0(r4)
   83140:	1000031e 	bne	r2,zero,83150 <quorem+0x13c>
   83144:	213fff04 	addi	r4,r4,-4
   83148:	a53fffc4 	addi	r20,r20,-1
   8314c:	b93ffb36 	bltu	r23,r4,8313c <quorem+0x128>
   83150:	d9000317 	ldw	r4,12(sp)
   83154:	25000415 	stw	r20,16(r4)
   83158:	e005883a 	mov	r2,fp
   8315c:	dfc00e17 	ldw	ra,56(sp)
   83160:	df000d17 	ldw	fp,52(sp)
   83164:	ddc00c17 	ldw	r23,48(sp)
   83168:	dd800b17 	ldw	r22,44(sp)
   8316c:	dd400a17 	ldw	r21,40(sp)
   83170:	dd000917 	ldw	r20,36(sp)
   83174:	dcc00817 	ldw	r19,32(sp)
   83178:	dc800717 	ldw	r18,28(sp)
   8317c:	dc400617 	ldw	r17,24(sp)
   83180:	dc000517 	ldw	r16,20(sp)
   83184:	dec00f04 	addi	sp,sp,60
   83188:	f800283a 	ret
   8318c:	b823883a 	mov	r17,r23
   83190:	9825883a 	mov	r18,r19
   83194:	d8000115 	stw	zero,4(sp)
   83198:	002b883a 	mov	r21,zero
   8319c:	94000017 	ldw	r16,0(r18)
   831a0:	e009883a 	mov	r4,fp
   831a4:	94800104 	addi	r18,r18,4
   831a8:	817fffcc 	andi	r5,r16,65535
   831ac:	008a1740 	call	8a174 <__mulsi3>
   831b0:	800ad43a 	srli	r5,r16,16
   831b4:	e009883a 	mov	r4,fp
   831b8:	a8a1883a 	add	r16,r21,r2
   831bc:	008a1740 	call	8a174 <__mulsi3>
   831c0:	89000017 	ldw	r4,0(r17)
   831c4:	80ffffcc 	andi	r3,r16,65535
   831c8:	8020d43a 	srli	r16,r16,16
   831cc:	217fffcc 	andi	r5,r4,65535
   831d0:	28cbc83a 	sub	r5,r5,r3
   831d4:	d8c00117 	ldw	r3,4(sp)
   831d8:	2008d43a 	srli	r4,r4,16
   831dc:	1405883a 	add	r2,r2,r16
   831e0:	28cb883a 	add	r5,r5,r3
   831e4:	280dd43a 	srai	r6,r5,16
   831e8:	10ffffcc 	andi	r3,r2,65535
   831ec:	20c9c83a 	sub	r4,r4,r3
   831f0:	2189883a 	add	r4,r4,r6
   831f4:	8900008d 	sth	r4,2(r17)
   831f8:	2009d43a 	srai	r4,r4,16
   831fc:	8940000d 	sth	r5,0(r17)
   83200:	102ad43a 	srli	r21,r2,16
   83204:	8c400104 	addi	r17,r17,4
   83208:	d9000115 	stw	r4,4(sp)
   8320c:	b4bfe32e 	bgeu	r22,r18,8319c <quorem+0x188>
   83210:	d9000217 	ldw	r4,8(sp)
   83214:	203fa01e 	bne	r4,zero,83098 <quorem+0x84>
   83218:	d8800017 	ldw	r2,0(sp)
   8321c:	10ffff04 	addi	r3,r2,-4
   83220:	b8c0082e 	bgeu	r23,r3,83244 <quorem+0x230>
   83224:	10bfff17 	ldw	r2,-4(r2)
   83228:	10000326 	beq	r2,zero,83238 <quorem+0x224>
   8322c:	00000506 	br	83244 <quorem+0x230>
   83230:	18800017 	ldw	r2,0(r3)
   83234:	1000031e 	bne	r2,zero,83244 <quorem+0x230>
   83238:	18ffff04 	addi	r3,r3,-4
   8323c:	a53fffc4 	addi	r20,r20,-1
   83240:	b8fffb36 	bltu	r23,r3,83230 <quorem+0x21c>
   83244:	d8c00317 	ldw	r3,12(sp)
   83248:	1d000415 	stw	r20,16(r3)
   8324c:	003f9206 	br	83098 <quorem+0x84>
   83250:	0005883a 	mov	r2,zero
   83254:	003fc106 	br	8315c <quorem+0x148>

00083258 <_dtoa_r>:
   83258:	22001017 	ldw	r8,64(r4)
   8325c:	deffda04 	addi	sp,sp,-152
   83260:	dd402115 	stw	r21,132(sp)
   83264:	dd002015 	stw	r20,128(sp)
   83268:	dc801e15 	stw	r18,120(sp)
   8326c:	dc401d15 	stw	r17,116(sp)
   83270:	dfc02515 	stw	ra,148(sp)
   83274:	df002415 	stw	fp,144(sp)
   83278:	ddc02315 	stw	r23,140(sp)
   8327c:	dd802215 	stw	r22,136(sp)
   83280:	dcc01f15 	stw	r19,124(sp)
   83284:	dc001c15 	stw	r16,112(sp)
   83288:	d9001615 	stw	r4,88(sp)
   8328c:	3023883a 	mov	r17,r6
   83290:	2829883a 	mov	r20,r5
   83294:	d9c01715 	stw	r7,92(sp)
   83298:	dc802817 	ldw	r18,160(sp)
   8329c:	302b883a 	mov	r21,r6
   832a0:	40000a26 	beq	r8,zero,832cc <_dtoa_r+0x74>
   832a4:	20801117 	ldw	r2,68(r4)
   832a8:	400b883a 	mov	r5,r8
   832ac:	40800115 	stw	r2,4(r8)
   832b0:	20c01117 	ldw	r3,68(r4)
   832b4:	00800044 	movi	r2,1
   832b8:	10c4983a 	sll	r2,r2,r3
   832bc:	40800215 	stw	r2,8(r8)
   832c0:	00864200 	call	86420 <_Bfree>
   832c4:	d8c01617 	ldw	r3,88(sp)
   832c8:	18001015 	stw	zero,64(r3)
   832cc:	8800a316 	blt	r17,zero,8355c <_dtoa_r+0x304>
   832d0:	90000015 	stw	zero,0(r18)
   832d4:	a8dffc2c 	andhi	r3,r21,32752
   832d8:	009ffc34 	movhi	r2,32752
   832dc:	18809126 	beq	r3,r2,83524 <_dtoa_r+0x2cc>
   832e0:	000d883a 	mov	r6,zero
   832e4:	000f883a 	mov	r7,zero
   832e8:	a009883a 	mov	r4,r20
   832ec:	a80b883a 	mov	r5,r21
   832f0:	dd001215 	stw	r20,72(sp)
   832f4:	dd401315 	stw	r21,76(sp)
   832f8:	0089aa40 	call	89aa4 <__nedf2>
   832fc:	1000171e 	bne	r2,zero,8335c <_dtoa_r+0x104>
   83300:	d9802717 	ldw	r6,156(sp)
   83304:	00800044 	movi	r2,1
   83308:	30800015 	stw	r2,0(r6)
   8330c:	d8802917 	ldw	r2,164(sp)
   83310:	10029b26 	beq	r2,zero,83d80 <_dtoa_r+0xb28>
   83314:	d9002917 	ldw	r4,164(sp)
   83318:	00800274 	movhi	r2,9
   8331c:	10b53844 	addi	r2,r2,-11039
   83320:	10ffffc4 	addi	r3,r2,-1
   83324:	20800015 	stw	r2,0(r4)
   83328:	1805883a 	mov	r2,r3
   8332c:	dfc02517 	ldw	ra,148(sp)
   83330:	df002417 	ldw	fp,144(sp)
   83334:	ddc02317 	ldw	r23,140(sp)
   83338:	dd802217 	ldw	r22,136(sp)
   8333c:	dd402117 	ldw	r21,132(sp)
   83340:	dd002017 	ldw	r20,128(sp)
   83344:	dcc01f17 	ldw	r19,124(sp)
   83348:	dc801e17 	ldw	r18,120(sp)
   8334c:	dc401d17 	ldw	r17,116(sp)
   83350:	dc001c17 	ldw	r16,112(sp)
   83354:	dec02604 	addi	sp,sp,152
   83358:	f800283a 	ret
   8335c:	d9001617 	ldw	r4,88(sp)
   83360:	d9401217 	ldw	r5,72(sp)
   83364:	d8800104 	addi	r2,sp,4
   83368:	a80d883a 	mov	r6,r21
   8336c:	d9c00204 	addi	r7,sp,8
   83370:	d8800015 	stw	r2,0(sp)
   83374:	0086a5c0 	call	86a5c <__d2b>
   83378:	d8800715 	stw	r2,28(sp)
   8337c:	a804d53a 	srli	r2,r21,20
   83380:	1101ffcc 	andi	r4,r2,2047
   83384:	20008626 	beq	r4,zero,835a0 <_dtoa_r+0x348>
   83388:	d8c01217 	ldw	r3,72(sp)
   8338c:	00800434 	movhi	r2,16
   83390:	10bfffc4 	addi	r2,r2,-1
   83394:	ddc00117 	ldw	r23,4(sp)
   83398:	a884703a 	and	r2,r21,r2
   8339c:	1811883a 	mov	r8,r3
   833a0:	124ffc34 	orhi	r9,r2,16368
   833a4:	25bf0044 	addi	r22,r4,-1023
   833a8:	d8000815 	stw	zero,32(sp)
   833ac:	0005883a 	mov	r2,zero
   833b0:	00cffe34 	movhi	r3,16376
   833b4:	480b883a 	mov	r5,r9
   833b8:	4009883a 	mov	r4,r8
   833bc:	180f883a 	mov	r7,r3
   833c0:	100d883a 	mov	r6,r2
   833c4:	008930c0 	call	8930c <__subdf3>
   833c8:	0218dbf4 	movhi	r8,25455
   833cc:	4210d844 	addi	r8,r8,17249
   833d0:	024ff4f4 	movhi	r9,16339
   833d4:	4a61e9c4 	addi	r9,r9,-30809
   833d8:	480f883a 	mov	r7,r9
   833dc:	400d883a 	mov	r6,r8
   833e0:	180b883a 	mov	r5,r3
   833e4:	1009883a 	mov	r4,r2
   833e8:	00894000 	call	89400 <__muldf3>
   833ec:	0222d874 	movhi	r8,35681
   833f0:	42322cc4 	addi	r8,r8,-14157
   833f4:	024ff1f4 	movhi	r9,16327
   833f8:	4a628a04 	addi	r9,r9,-30168
   833fc:	480f883a 	mov	r7,r9
   83400:	400d883a 	mov	r6,r8
   83404:	180b883a 	mov	r5,r3
   83408:	1009883a 	mov	r4,r2
   8340c:	008938c0 	call	8938c <__adddf3>
   83410:	b009883a 	mov	r4,r22
   83414:	1021883a 	mov	r16,r2
   83418:	1823883a 	mov	r17,r3
   8341c:	0089cc40 	call	89cc4 <__floatsidf>
   83420:	021427f4 	movhi	r8,20639
   83424:	421e7ec4 	addi	r8,r8,31227
   83428:	024ff4f4 	movhi	r9,16339
   8342c:	4a5104c4 	addi	r9,r9,17427
   83430:	480f883a 	mov	r7,r9
   83434:	400d883a 	mov	r6,r8
   83438:	180b883a 	mov	r5,r3
   8343c:	1009883a 	mov	r4,r2
   83440:	00894000 	call	89400 <__muldf3>
   83444:	180f883a 	mov	r7,r3
   83448:	880b883a 	mov	r5,r17
   8344c:	100d883a 	mov	r6,r2
   83450:	8009883a 	mov	r4,r16
   83454:	008938c0 	call	8938c <__adddf3>
   83458:	1009883a 	mov	r4,r2
   8345c:	180b883a 	mov	r5,r3
   83460:	1021883a 	mov	r16,r2
   83464:	1823883a 	mov	r17,r3
   83468:	0089dbc0 	call	89dbc <__fixdfsi>
   8346c:	000d883a 	mov	r6,zero
   83470:	000f883a 	mov	r7,zero
   83474:	8009883a 	mov	r4,r16
   83478:	880b883a 	mov	r5,r17
   8347c:	d8800d15 	stw	r2,52(sp)
   83480:	0089c3c0 	call	89c3c <__ltdf2>
   83484:	10031716 	blt	r2,zero,840e4 <_dtoa_r+0xe8c>
   83488:	d8c00d17 	ldw	r3,52(sp)
   8348c:	00800584 	movi	r2,22
   83490:	10c1482e 	bgeu	r2,r3,839b4 <_dtoa_r+0x75c>
   83494:	01000044 	movi	r4,1
   83498:	d9000c15 	stw	r4,48(sp)
   8349c:	bd85c83a 	sub	r2,r23,r22
   834a0:	11bfffc4 	addi	r6,r2,-1
   834a4:	30030b16 	blt	r6,zero,840d4 <_dtoa_r+0xe7c>
   834a8:	d9800a15 	stw	r6,40(sp)
   834ac:	d8001115 	stw	zero,68(sp)
   834b0:	d8c00d17 	ldw	r3,52(sp)
   834b4:	1802ff16 	blt	r3,zero,840b4 <_dtoa_r+0xe5c>
   834b8:	d9000a17 	ldw	r4,40(sp)
   834bc:	d8c00915 	stw	r3,36(sp)
   834c0:	d8001015 	stw	zero,64(sp)
   834c4:	20c9883a 	add	r4,r4,r3
   834c8:	d9000a15 	stw	r4,40(sp)
   834cc:	d9001717 	ldw	r4,92(sp)
   834d0:	00800244 	movi	r2,9
   834d4:	11004636 	bltu	r2,r4,835f0 <_dtoa_r+0x398>
   834d8:	00800144 	movi	r2,5
   834dc:	11020416 	blt	r2,r4,83cf0 <_dtoa_r+0xa98>
   834e0:	04400044 	movi	r17,1
   834e4:	d8c01717 	ldw	r3,92(sp)
   834e8:	00800144 	movi	r2,5
   834ec:	10c1ed36 	bltu	r2,r3,83ca4 <_dtoa_r+0xa4c>
   834f0:	18c5883a 	add	r2,r3,r3
   834f4:	1085883a 	add	r2,r2,r2
   834f8:	00c00234 	movhi	r3,8
   834fc:	18cd4304 	addi	r3,r3,13580
   83500:	10c5883a 	add	r2,r2,r3
   83504:	11000017 	ldw	r4,0(r2)
   83508:	2000683a 	jmp	r4
   8350c:	000835f8 	rdprs	zero,zero,8407
   83510:	000835f8 	rdprs	zero,zero,8407
   83514:	00083ff8 	rdprs	zero,zero,8447
   83518:	00083fd0 	cmplti	zero,zero,8447
   8351c:	00084014 	movui	zero,8448
   83520:	00084020 	cmpeqi	zero,zero,8448
   83524:	d9002717 	ldw	r4,156(sp)
   83528:	0089c3c4 	movi	r2,9999
   8352c:	20800015 	stw	r2,0(r4)
   83530:	a0001026 	beq	r20,zero,83574 <_dtoa_r+0x31c>
   83534:	00c00274 	movhi	r3,9
   83538:	18f54404 	addi	r3,r3,-10992
   8353c:	d9802917 	ldw	r6,164(sp)
   83540:	303f7926 	beq	r6,zero,83328 <_dtoa_r+0xd0>
   83544:	188000c7 	ldb	r2,3(r3)
   83548:	190000c4 	addi	r4,r3,3
   8354c:	1000101e 	bne	r2,zero,83590 <_dtoa_r+0x338>
   83550:	d8802917 	ldw	r2,164(sp)
   83554:	11000015 	stw	r4,0(r2)
   83558:	003f7306 	br	83328 <_dtoa_r+0xd0>
   8355c:	00a00034 	movhi	r2,32768
   83560:	10bfffc4 	addi	r2,r2,-1
   83564:	00c00044 	movi	r3,1
   83568:	88aa703a 	and	r21,r17,r2
   8356c:	90c00015 	stw	r3,0(r18)
   83570:	003f5806 	br	832d4 <_dtoa_r+0x7c>
   83574:	00800434 	movhi	r2,16
   83578:	10bfffc4 	addi	r2,r2,-1
   8357c:	a884703a 	and	r2,r21,r2
   83580:	103fec1e 	bne	r2,zero,83534 <_dtoa_r+0x2dc>
   83584:	00c00274 	movhi	r3,9
   83588:	18f54104 	addi	r3,r3,-11004
   8358c:	003feb06 	br	8353c <_dtoa_r+0x2e4>
   83590:	d8802917 	ldw	r2,164(sp)
   83594:	19000204 	addi	r4,r3,8
   83598:	11000015 	stw	r4,0(r2)
   8359c:	003f6206 	br	83328 <_dtoa_r+0xd0>
   835a0:	ddc00117 	ldw	r23,4(sp)
   835a4:	d8800217 	ldw	r2,8(sp)
   835a8:	01000804 	movi	r4,32
   835ac:	b8c10c84 	addi	r3,r23,1074
   835b0:	18a3883a 	add	r17,r3,r2
   835b4:	2441b80e 	bge	r4,r17,83c98 <_dtoa_r+0xa40>
   835b8:	00c01004 	movi	r3,64
   835bc:	1c47c83a 	sub	r3,r3,r17
   835c0:	88bff804 	addi	r2,r17,-32
   835c4:	a8c6983a 	sll	r3,r21,r3
   835c8:	a084d83a 	srl	r2,r20,r2
   835cc:	1888b03a 	or	r4,r3,r2
   835d0:	0089e940 	call	89e94 <__floatunsidf>
   835d4:	1011883a 	mov	r8,r2
   835d8:	00bf8434 	movhi	r2,65040
   835dc:	01000044 	movi	r4,1
   835e0:	10d3883a 	add	r9,r2,r3
   835e4:	8dbef344 	addi	r22,r17,-1075
   835e8:	d9000815 	stw	r4,32(sp)
   835ec:	003f6f06 	br	833ac <_dtoa_r+0x154>
   835f0:	d8001715 	stw	zero,92(sp)
   835f4:	04400044 	movi	r17,1
   835f8:	00bfffc4 	movi	r2,-1
   835fc:	00c00044 	movi	r3,1
   83600:	d8800e15 	stw	r2,56(sp)
   83604:	d8002615 	stw	zero,152(sp)
   83608:	d8800f15 	stw	r2,60(sp)
   8360c:	d8c00b15 	stw	r3,44(sp)
   83610:	1021883a 	mov	r16,r2
   83614:	d8801617 	ldw	r2,88(sp)
   83618:	10001115 	stw	zero,68(r2)
   8361c:	d8801617 	ldw	r2,88(sp)
   83620:	11401117 	ldw	r5,68(r2)
   83624:	1009883a 	mov	r4,r2
   83628:	00869a00 	call	869a0 <_Balloc>
   8362c:	d8c01617 	ldw	r3,88(sp)
   83630:	d8800515 	stw	r2,20(sp)
   83634:	18801015 	stw	r2,64(r3)
   83638:	00800384 	movi	r2,14
   8363c:	14006836 	bltu	r2,r16,837e0 <_dtoa_r+0x588>
   83640:	8805003a 	cmpeq	r2,r17,zero
   83644:	1000661e 	bne	r2,zero,837e0 <_dtoa_r+0x588>
   83648:	d9000d17 	ldw	r4,52(sp)
   8364c:	0102300e 	bge	zero,r4,83f10 <_dtoa_r+0xcb8>
   83650:	208003cc 	andi	r2,r4,15
   83654:	100490fa 	slli	r2,r2,3
   83658:	2025d13a 	srai	r18,r4,4
   8365c:	00c00274 	movhi	r3,9
   83660:	18f55604 	addi	r3,r3,-10920
   83664:	10c5883a 	add	r2,r2,r3
   83668:	90c0040c 	andi	r3,r18,16
   8366c:	14000017 	ldw	r16,0(r2)
   83670:	14400117 	ldw	r17,4(r2)
   83674:	18036a1e 	bne	r3,zero,84420 <_dtoa_r+0x11c8>
   83678:	05800084 	movi	r22,2
   8367c:	90001026 	beq	r18,zero,836c0 <_dtoa_r+0x468>
   83680:	04c00274 	movhi	r19,9
   83684:	9cf58804 	addi	r19,r19,-10720
   83688:	9080004c 	andi	r2,r18,1
   8368c:	1005003a 	cmpeq	r2,r2,zero
   83690:	1000081e 	bne	r2,zero,836b4 <_dtoa_r+0x45c>
   83694:	99800017 	ldw	r6,0(r19)
   83698:	99c00117 	ldw	r7,4(r19)
   8369c:	880b883a 	mov	r5,r17
   836a0:	8009883a 	mov	r4,r16
   836a4:	00894000 	call	89400 <__muldf3>
   836a8:	1021883a 	mov	r16,r2
   836ac:	b5800044 	addi	r22,r22,1
   836b0:	1823883a 	mov	r17,r3
   836b4:	9025d07a 	srai	r18,r18,1
   836b8:	9cc00204 	addi	r19,r19,8
   836bc:	903ff21e 	bne	r18,zero,83688 <_dtoa_r+0x430>
   836c0:	a80b883a 	mov	r5,r21
   836c4:	a009883a 	mov	r4,r20
   836c8:	880f883a 	mov	r7,r17
   836cc:	800d883a 	mov	r6,r16
   836d0:	00897c40 	call	897c4 <__divdf3>
   836d4:	1029883a 	mov	r20,r2
   836d8:	182b883a 	mov	r21,r3
   836dc:	d8c00c17 	ldw	r3,48(sp)
   836e0:	1805003a 	cmpeq	r2,r3,zero
   836e4:	1000081e 	bne	r2,zero,83708 <_dtoa_r+0x4b0>
   836e8:	0005883a 	mov	r2,zero
   836ec:	00cffc34 	movhi	r3,16368
   836f0:	180f883a 	mov	r7,r3
   836f4:	a009883a 	mov	r4,r20
   836f8:	a80b883a 	mov	r5,r21
   836fc:	100d883a 	mov	r6,r2
   83700:	0089c3c0 	call	89c3c <__ltdf2>
   83704:	1003fe16 	blt	r2,zero,84700 <_dtoa_r+0x14a8>
   83708:	b009883a 	mov	r4,r22
   8370c:	0089cc40 	call	89cc4 <__floatsidf>
   83710:	180b883a 	mov	r5,r3
   83714:	1009883a 	mov	r4,r2
   83718:	a00d883a 	mov	r6,r20
   8371c:	a80f883a 	mov	r7,r21
   83720:	00894000 	call	89400 <__muldf3>
   83724:	0011883a 	mov	r8,zero
   83728:	02500734 	movhi	r9,16412
   8372c:	1009883a 	mov	r4,r2
   83730:	180b883a 	mov	r5,r3
   83734:	480f883a 	mov	r7,r9
   83738:	400d883a 	mov	r6,r8
   8373c:	008938c0 	call	8938c <__adddf3>
   83740:	d9000f17 	ldw	r4,60(sp)
   83744:	102d883a 	mov	r22,r2
   83748:	00bf3034 	movhi	r2,64704
   8374c:	18b9883a 	add	fp,r3,r2
   83750:	e02f883a 	mov	r23,fp
   83754:	20028f1e 	bne	r4,zero,84194 <_dtoa_r+0xf3c>
   83758:	0005883a 	mov	r2,zero
   8375c:	00d00534 	movhi	r3,16404
   83760:	a009883a 	mov	r4,r20
   83764:	a80b883a 	mov	r5,r21
   83768:	180f883a 	mov	r7,r3
   8376c:	100d883a 	mov	r6,r2
   83770:	008930c0 	call	8930c <__subdf3>
   83774:	1009883a 	mov	r4,r2
   83778:	e00f883a 	mov	r7,fp
   8377c:	180b883a 	mov	r5,r3
   83780:	b00d883a 	mov	r6,r22
   83784:	1025883a 	mov	r18,r2
   83788:	1827883a 	mov	r19,r3
   8378c:	0089b2c0 	call	89b2c <__gtdf2>
   83790:	00834f16 	blt	zero,r2,844d0 <_dtoa_r+0x1278>
   83794:	e0e0003c 	xorhi	r3,fp,32768
   83798:	9009883a 	mov	r4,r18
   8379c:	980b883a 	mov	r5,r19
   837a0:	180f883a 	mov	r7,r3
   837a4:	b00d883a 	mov	r6,r22
   837a8:	0089c3c0 	call	89c3c <__ltdf2>
   837ac:	1000080e 	bge	r2,zero,837d0 <_dtoa_r+0x578>
   837b0:	0027883a 	mov	r19,zero
   837b4:	0025883a 	mov	r18,zero
   837b8:	d8802617 	ldw	r2,152(sp)
   837bc:	df000517 	ldw	fp,20(sp)
   837c0:	d8000615 	stw	zero,24(sp)
   837c4:	0084303a 	nor	r2,zero,r2
   837c8:	d8800d15 	stw	r2,52(sp)
   837cc:	00019b06 	br	83e3c <_dtoa_r+0xbe4>
   837d0:	d9801217 	ldw	r6,72(sp)
   837d4:	d8801317 	ldw	r2,76(sp)
   837d8:	3029883a 	mov	r20,r6
   837dc:	102b883a 	mov	r21,r2
   837e0:	d8c00217 	ldw	r3,8(sp)
   837e4:	18008516 	blt	r3,zero,839fc <_dtoa_r+0x7a4>
   837e8:	d9000d17 	ldw	r4,52(sp)
   837ec:	00800384 	movi	r2,14
   837f0:	11008216 	blt	r2,r4,839fc <_dtoa_r+0x7a4>
   837f4:	200490fa 	slli	r2,r4,3
   837f8:	d9802617 	ldw	r6,152(sp)
   837fc:	00c00274 	movhi	r3,9
   83800:	18f55604 	addi	r3,r3,-10920
   83804:	10c5883a 	add	r2,r2,r3
   83808:	14800017 	ldw	r18,0(r2)
   8380c:	14c00117 	ldw	r19,4(r2)
   83810:	30031e16 	blt	r6,zero,8448c <_dtoa_r+0x1234>
   83814:	d9000517 	ldw	r4,20(sp)
   83818:	d8c00f17 	ldw	r3,60(sp)
   8381c:	a823883a 	mov	r17,r21
   83820:	a021883a 	mov	r16,r20
   83824:	192b883a 	add	r21,r3,r4
   83828:	2039883a 	mov	fp,r4
   8382c:	00000f06 	br	8386c <_dtoa_r+0x614>
   83830:	0005883a 	mov	r2,zero
   83834:	00d00934 	movhi	r3,16420
   83838:	5009883a 	mov	r4,r10
   8383c:	580b883a 	mov	r5,r11
   83840:	180f883a 	mov	r7,r3
   83844:	100d883a 	mov	r6,r2
   83848:	00894000 	call	89400 <__muldf3>
   8384c:	180b883a 	mov	r5,r3
   83850:	000d883a 	mov	r6,zero
   83854:	000f883a 	mov	r7,zero
   83858:	1009883a 	mov	r4,r2
   8385c:	1021883a 	mov	r16,r2
   83860:	1823883a 	mov	r17,r3
   83864:	0089aa40 	call	89aa4 <__nedf2>
   83868:	10004526 	beq	r2,zero,83980 <_dtoa_r+0x728>
   8386c:	900d883a 	mov	r6,r18
   83870:	980f883a 	mov	r7,r19
   83874:	8009883a 	mov	r4,r16
   83878:	880b883a 	mov	r5,r17
   8387c:	00897c40 	call	897c4 <__divdf3>
   83880:	180b883a 	mov	r5,r3
   83884:	1009883a 	mov	r4,r2
   83888:	0089dbc0 	call	89dbc <__fixdfsi>
   8388c:	1009883a 	mov	r4,r2
   83890:	1029883a 	mov	r20,r2
   83894:	0089cc40 	call	89cc4 <__floatsidf>
   83898:	180f883a 	mov	r7,r3
   8389c:	9009883a 	mov	r4,r18
   838a0:	980b883a 	mov	r5,r19
   838a4:	100d883a 	mov	r6,r2
   838a8:	00894000 	call	89400 <__muldf3>
   838ac:	180f883a 	mov	r7,r3
   838b0:	880b883a 	mov	r5,r17
   838b4:	8009883a 	mov	r4,r16
   838b8:	100d883a 	mov	r6,r2
   838bc:	008930c0 	call	8930c <__subdf3>
   838c0:	1015883a 	mov	r10,r2
   838c4:	a0800c04 	addi	r2,r20,48
   838c8:	e0800005 	stb	r2,0(fp)
   838cc:	e7000044 	addi	fp,fp,1
   838d0:	1817883a 	mov	r11,r3
   838d4:	e57fd61e 	bne	fp,r21,83830 <_dtoa_r+0x5d8>
   838d8:	500d883a 	mov	r6,r10
   838dc:	180f883a 	mov	r7,r3
   838e0:	5009883a 	mov	r4,r10
   838e4:	180b883a 	mov	r5,r3
   838e8:	008938c0 	call	8938c <__adddf3>
   838ec:	100d883a 	mov	r6,r2
   838f0:	9009883a 	mov	r4,r18
   838f4:	980b883a 	mov	r5,r19
   838f8:	180f883a 	mov	r7,r3
   838fc:	1021883a 	mov	r16,r2
   83900:	1823883a 	mov	r17,r3
   83904:	0089c3c0 	call	89c3c <__ltdf2>
   83908:	10000816 	blt	r2,zero,8392c <_dtoa_r+0x6d4>
   8390c:	980b883a 	mov	r5,r19
   83910:	800d883a 	mov	r6,r16
   83914:	880f883a 	mov	r7,r17
   83918:	9009883a 	mov	r4,r18
   8391c:	0089a1c0 	call	89a1c <__eqdf2>
   83920:	1000171e 	bne	r2,zero,83980 <_dtoa_r+0x728>
   83924:	a080004c 	andi	r2,r20,1
   83928:	10001526 	beq	r2,zero,83980 <_dtoa_r+0x728>
   8392c:	d8800d17 	ldw	r2,52(sp)
   83930:	d8800415 	stw	r2,16(sp)
   83934:	e009883a 	mov	r4,fp
   83938:	213fffc4 	addi	r4,r4,-1
   8393c:	20c00007 	ldb	r3,0(r4)
   83940:	00800e44 	movi	r2,57
   83944:	1880081e 	bne	r3,r2,83968 <_dtoa_r+0x710>
   83948:	d8800517 	ldw	r2,20(sp)
   8394c:	113ffa1e 	bne	r2,r4,83938 <_dtoa_r+0x6e0>
   83950:	d8c00417 	ldw	r3,16(sp)
   83954:	d9800517 	ldw	r6,20(sp)
   83958:	00800c04 	movi	r2,48
   8395c:	18c00044 	addi	r3,r3,1
   83960:	d8c00415 	stw	r3,16(sp)
   83964:	30800005 	stb	r2,0(r6)
   83968:	20800003 	ldbu	r2,0(r4)
   8396c:	d8c00417 	ldw	r3,16(sp)
   83970:	27000044 	addi	fp,r4,1
   83974:	10800044 	addi	r2,r2,1
   83978:	d8c00d15 	stw	r3,52(sp)
   8397c:	20800005 	stb	r2,0(r4)
   83980:	d9001617 	ldw	r4,88(sp)
   83984:	d9400717 	ldw	r5,28(sp)
   83988:	00864200 	call	86420 <_Bfree>
   8398c:	e0000005 	stb	zero,0(fp)
   83990:	d9800d17 	ldw	r6,52(sp)
   83994:	d8c02717 	ldw	r3,156(sp)
   83998:	d9002917 	ldw	r4,164(sp)
   8399c:	30800044 	addi	r2,r6,1
   839a0:	18800015 	stw	r2,0(r3)
   839a4:	20029c26 	beq	r4,zero,84418 <_dtoa_r+0x11c0>
   839a8:	d8c00517 	ldw	r3,20(sp)
   839ac:	27000015 	stw	fp,0(r4)
   839b0:	003e5d06 	br	83328 <_dtoa_r+0xd0>
   839b4:	d9800d17 	ldw	r6,52(sp)
   839b8:	00c00274 	movhi	r3,9
   839bc:	18f55604 	addi	r3,r3,-10920
   839c0:	d9001217 	ldw	r4,72(sp)
   839c4:	300490fa 	slli	r2,r6,3
   839c8:	d9401317 	ldw	r5,76(sp)
   839cc:	10c5883a 	add	r2,r2,r3
   839d0:	12000017 	ldw	r8,0(r2)
   839d4:	12400117 	ldw	r9,4(r2)
   839d8:	400d883a 	mov	r6,r8
   839dc:	480f883a 	mov	r7,r9
   839e0:	0089c3c0 	call	89c3c <__ltdf2>
   839e4:	1000030e 	bge	r2,zero,839f4 <_dtoa_r+0x79c>
   839e8:	d8800d17 	ldw	r2,52(sp)
   839ec:	10bfffc4 	addi	r2,r2,-1
   839f0:	d8800d15 	stw	r2,52(sp)
   839f4:	d8000c15 	stw	zero,48(sp)
   839f8:	003ea806 	br	8349c <_dtoa_r+0x244>
   839fc:	d9000b17 	ldw	r4,44(sp)
   83a00:	202cc03a 	cmpne	r22,r4,zero
   83a04:	b000c71e 	bne	r22,zero,83d24 <_dtoa_r+0xacc>
   83a08:	dc001117 	ldw	r16,68(sp)
   83a0c:	dc801017 	ldw	r18,64(sp)
   83a10:	0027883a 	mov	r19,zero
   83a14:	04000b0e 	bge	zero,r16,83a44 <_dtoa_r+0x7ec>
   83a18:	d8c00a17 	ldw	r3,40(sp)
   83a1c:	00c0090e 	bge	zero,r3,83a44 <_dtoa_r+0x7ec>
   83a20:	8005883a 	mov	r2,r16
   83a24:	1c011316 	blt	r3,r16,83e74 <_dtoa_r+0xc1c>
   83a28:	d9000a17 	ldw	r4,40(sp)
   83a2c:	d9801117 	ldw	r6,68(sp)
   83a30:	80a1c83a 	sub	r16,r16,r2
   83a34:	2089c83a 	sub	r4,r4,r2
   83a38:	308dc83a 	sub	r6,r6,r2
   83a3c:	d9000a15 	stw	r4,40(sp)
   83a40:	d9801115 	stw	r6,68(sp)
   83a44:	d8801017 	ldw	r2,64(sp)
   83a48:	0080150e 	bge	zero,r2,83aa0 <_dtoa_r+0x848>
   83a4c:	d8c00b17 	ldw	r3,44(sp)
   83a50:	1805003a 	cmpeq	r2,r3,zero
   83a54:	1001c91e 	bne	r2,zero,8417c <_dtoa_r+0xf24>
   83a58:	04800e0e 	bge	zero,r18,83a94 <_dtoa_r+0x83c>
   83a5c:	d9001617 	ldw	r4,88(sp)
   83a60:	980b883a 	mov	r5,r19
   83a64:	900d883a 	mov	r6,r18
   83a68:	008726c0 	call	8726c <__pow5mult>
   83a6c:	d9001617 	ldw	r4,88(sp)
   83a70:	d9800717 	ldw	r6,28(sp)
   83a74:	100b883a 	mov	r5,r2
   83a78:	1027883a 	mov	r19,r2
   83a7c:	0086eb00 	call	86eb0 <__multiply>
   83a80:	d9001617 	ldw	r4,88(sp)
   83a84:	d9400717 	ldw	r5,28(sp)
   83a88:	1023883a 	mov	r17,r2
   83a8c:	00864200 	call	86420 <_Bfree>
   83a90:	dc400715 	stw	r17,28(sp)
   83a94:	d9001017 	ldw	r4,64(sp)
   83a98:	248dc83a 	sub	r6,r4,r18
   83a9c:	30010e1e 	bne	r6,zero,83ed8 <_dtoa_r+0xc80>
   83aa0:	d9001617 	ldw	r4,88(sp)
   83aa4:	04400044 	movi	r17,1
   83aa8:	880b883a 	mov	r5,r17
   83aac:	00871040 	call	87104 <__i2b>
   83ab0:	d9800917 	ldw	r6,36(sp)
   83ab4:	1025883a 	mov	r18,r2
   83ab8:	0180040e 	bge	zero,r6,83acc <_dtoa_r+0x874>
   83abc:	d9001617 	ldw	r4,88(sp)
   83ac0:	100b883a 	mov	r5,r2
   83ac4:	008726c0 	call	8726c <__pow5mult>
   83ac8:	1025883a 	mov	r18,r2
   83acc:	d8801717 	ldw	r2,92(sp)
   83ad0:	8880f30e 	bge	r17,r2,83ea0 <_dtoa_r+0xc48>
   83ad4:	0023883a 	mov	r17,zero
   83ad8:	d9800917 	ldw	r6,36(sp)
   83adc:	30019e1e 	bne	r6,zero,84158 <_dtoa_r+0xf00>
   83ae0:	00c00044 	movi	r3,1
   83ae4:	d9000a17 	ldw	r4,40(sp)
   83ae8:	20c5883a 	add	r2,r4,r3
   83aec:	10c007cc 	andi	r3,r2,31
   83af0:	1800841e 	bne	r3,zero,83d04 <_dtoa_r+0xaac>
   83af4:	00800704 	movi	r2,28
   83af8:	d9000a17 	ldw	r4,40(sp)
   83afc:	d9801117 	ldw	r6,68(sp)
   83b00:	80a1883a 	add	r16,r16,r2
   83b04:	2089883a 	add	r4,r4,r2
   83b08:	308d883a 	add	r6,r6,r2
   83b0c:	d9000a15 	stw	r4,40(sp)
   83b10:	d9801115 	stw	r6,68(sp)
   83b14:	d8801117 	ldw	r2,68(sp)
   83b18:	0080050e 	bge	zero,r2,83b30 <_dtoa_r+0x8d8>
   83b1c:	d9400717 	ldw	r5,28(sp)
   83b20:	d9001617 	ldw	r4,88(sp)
   83b24:	100d883a 	mov	r6,r2
   83b28:	0086d640 	call	86d64 <__lshift>
   83b2c:	d8800715 	stw	r2,28(sp)
   83b30:	d8c00a17 	ldw	r3,40(sp)
   83b34:	00c0050e 	bge	zero,r3,83b4c <_dtoa_r+0x8f4>
   83b38:	d9001617 	ldw	r4,88(sp)
   83b3c:	900b883a 	mov	r5,r18
   83b40:	180d883a 	mov	r6,r3
   83b44:	0086d640 	call	86d64 <__lshift>
   83b48:	1025883a 	mov	r18,r2
   83b4c:	d9000c17 	ldw	r4,48(sp)
   83b50:	2005003a 	cmpeq	r2,r4,zero
   83b54:	10016f26 	beq	r2,zero,84114 <_dtoa_r+0xebc>
   83b58:	d9000f17 	ldw	r4,60(sp)
   83b5c:	0102170e 	bge	zero,r4,843bc <_dtoa_r+0x1164>
   83b60:	d9800b17 	ldw	r6,44(sp)
   83b64:	3005003a 	cmpeq	r2,r6,zero
   83b68:	1000881e 	bne	r2,zero,83d8c <_dtoa_r+0xb34>
   83b6c:	0400050e 	bge	zero,r16,83b84 <_dtoa_r+0x92c>
   83b70:	d9001617 	ldw	r4,88(sp)
   83b74:	980b883a 	mov	r5,r19
   83b78:	800d883a 	mov	r6,r16
   83b7c:	0086d640 	call	86d64 <__lshift>
   83b80:	1027883a 	mov	r19,r2
   83b84:	8804c03a 	cmpne	r2,r17,zero
   83b88:	1002541e 	bne	r2,zero,844dc <_dtoa_r+0x1284>
   83b8c:	980b883a 	mov	r5,r19
   83b90:	dd800517 	ldw	r22,20(sp)
   83b94:	dcc00615 	stw	r19,24(sp)
   83b98:	a700004c 	andi	fp,r20,1
   83b9c:	2827883a 	mov	r19,r5
   83ba0:	d9000717 	ldw	r4,28(sp)
   83ba4:	900b883a 	mov	r5,r18
   83ba8:	00830140 	call	83014 <quorem>
   83bac:	d9000717 	ldw	r4,28(sp)
   83bb0:	d9400617 	ldw	r5,24(sp)
   83bb4:	1023883a 	mov	r17,r2
   83bb8:	8dc00c04 	addi	r23,r17,48
   83bbc:	008657c0 	call	8657c <__mcmp>
   83bc0:	d9001617 	ldw	r4,88(sp)
   83bc4:	900b883a 	mov	r5,r18
   83bc8:	980d883a 	mov	r6,r19
   83bcc:	1029883a 	mov	r20,r2
   83bd0:	0086bd80 	call	86bd8 <__mdiff>
   83bd4:	102b883a 	mov	r21,r2
   83bd8:	10800317 	ldw	r2,12(r2)
   83bdc:	1001281e 	bne	r2,zero,84080 <_dtoa_r+0xe28>
   83be0:	d9000717 	ldw	r4,28(sp)
   83be4:	a80b883a 	mov	r5,r21
   83be8:	008657c0 	call	8657c <__mcmp>
   83bec:	d9001617 	ldw	r4,88(sp)
   83bf0:	1021883a 	mov	r16,r2
   83bf4:	a80b883a 	mov	r5,r21
   83bf8:	00864200 	call	86420 <_Bfree>
   83bfc:	8000041e 	bne	r16,zero,83c10 <_dtoa_r+0x9b8>
   83c00:	d8801717 	ldw	r2,92(sp)
   83c04:	1000021e 	bne	r2,zero,83c10 <_dtoa_r+0x9b8>
   83c08:	e004c03a 	cmpne	r2,fp,zero
   83c0c:	10011726 	beq	r2,zero,8406c <_dtoa_r+0xe14>
   83c10:	a0010616 	blt	r20,zero,8402c <_dtoa_r+0xdd4>
   83c14:	a000041e 	bne	r20,zero,83c28 <_dtoa_r+0x9d0>
   83c18:	d8c01717 	ldw	r3,92(sp)
   83c1c:	1800021e 	bne	r3,zero,83c28 <_dtoa_r+0x9d0>
   83c20:	e004c03a 	cmpne	r2,fp,zero
   83c24:	10010126 	beq	r2,zero,8402c <_dtoa_r+0xdd4>
   83c28:	04023d16 	blt	zero,r16,84520 <_dtoa_r+0x12c8>
   83c2c:	b5c00005 	stb	r23,0(r22)
   83c30:	d9800517 	ldw	r6,20(sp)
   83c34:	d9000f17 	ldw	r4,60(sp)
   83c38:	b5800044 	addi	r22,r22,1
   83c3c:	3105883a 	add	r2,r6,r4
   83c40:	b0806526 	beq	r22,r2,83dd8 <_dtoa_r+0xb80>
   83c44:	d9400717 	ldw	r5,28(sp)
   83c48:	d9001617 	ldw	r4,88(sp)
   83c4c:	01800284 	movi	r6,10
   83c50:	000f883a 	mov	r7,zero
   83c54:	00871400 	call	87140 <__multadd>
   83c58:	d8800715 	stw	r2,28(sp)
   83c5c:	d8800617 	ldw	r2,24(sp)
   83c60:	14c10c26 	beq	r2,r19,84094 <_dtoa_r+0xe3c>
   83c64:	d9400617 	ldw	r5,24(sp)
   83c68:	d9001617 	ldw	r4,88(sp)
   83c6c:	01800284 	movi	r6,10
   83c70:	000f883a 	mov	r7,zero
   83c74:	00871400 	call	87140 <__multadd>
   83c78:	d9001617 	ldw	r4,88(sp)
   83c7c:	980b883a 	mov	r5,r19
   83c80:	01800284 	movi	r6,10
   83c84:	000f883a 	mov	r7,zero
   83c88:	d8800615 	stw	r2,24(sp)
   83c8c:	00871400 	call	87140 <__multadd>
   83c90:	1027883a 	mov	r19,r2
   83c94:	003fc206 	br	83ba0 <_dtoa_r+0x948>
   83c98:	2445c83a 	sub	r2,r4,r17
   83c9c:	a088983a 	sll	r4,r20,r2
   83ca0:	003e4b06 	br	835d0 <_dtoa_r+0x378>
   83ca4:	01bfffc4 	movi	r6,-1
   83ca8:	00800044 	movi	r2,1
   83cac:	d9800e15 	stw	r6,56(sp)
   83cb0:	d9800f15 	stw	r6,60(sp)
   83cb4:	d8800b15 	stw	r2,44(sp)
   83cb8:	d8c01617 	ldw	r3,88(sp)
   83cbc:	008005c4 	movi	r2,23
   83cc0:	18001115 	stw	zero,68(r3)
   83cc4:	1580082e 	bgeu	r2,r22,83ce8 <_dtoa_r+0xa90>
   83cc8:	00c00104 	movi	r3,4
   83ccc:	0009883a 	mov	r4,zero
   83cd0:	18c7883a 	add	r3,r3,r3
   83cd4:	18800504 	addi	r2,r3,20
   83cd8:	21000044 	addi	r4,r4,1
   83cdc:	b0bffc2e 	bgeu	r22,r2,83cd0 <_dtoa_r+0xa78>
   83ce0:	d9801617 	ldw	r6,88(sp)
   83ce4:	31001115 	stw	r4,68(r6)
   83ce8:	dc000f17 	ldw	r16,60(sp)
   83cec:	003e4b06 	br	8361c <_dtoa_r+0x3c4>
   83cf0:	d9801717 	ldw	r6,92(sp)
   83cf4:	0023883a 	mov	r17,zero
   83cf8:	31bfff04 	addi	r6,r6,-4
   83cfc:	d9801715 	stw	r6,92(sp)
   83d00:	003df806 	br	834e4 <_dtoa_r+0x28c>
   83d04:	00800804 	movi	r2,32
   83d08:	10c9c83a 	sub	r4,r2,r3
   83d0c:	00c00104 	movi	r3,4
   83d10:	19005a16 	blt	r3,r4,83e7c <_dtoa_r+0xc24>
   83d14:	008000c4 	movi	r2,3
   83d18:	113f7e16 	blt	r2,r4,83b14 <_dtoa_r+0x8bc>
   83d1c:	20800704 	addi	r2,r4,28
   83d20:	003f7506 	br	83af8 <_dtoa_r+0x8a0>
   83d24:	d9801717 	ldw	r6,92(sp)
   83d28:	00800044 	movi	r2,1
   83d2c:	1180a10e 	bge	r2,r6,83fb4 <_dtoa_r+0xd5c>
   83d30:	d9800f17 	ldw	r6,60(sp)
   83d34:	d8c01017 	ldw	r3,64(sp)
   83d38:	30bfffc4 	addi	r2,r6,-1
   83d3c:	1881c616 	blt	r3,r2,84458 <_dtoa_r+0x1200>
   83d40:	18a5c83a 	sub	r18,r3,r2
   83d44:	d8800f17 	ldw	r2,60(sp)
   83d48:	10026216 	blt	r2,zero,846d4 <_dtoa_r+0x147c>
   83d4c:	dc001117 	ldw	r16,68(sp)
   83d50:	1007883a 	mov	r3,r2
   83d54:	d9800a17 	ldw	r6,40(sp)
   83d58:	d8801117 	ldw	r2,68(sp)
   83d5c:	d9001617 	ldw	r4,88(sp)
   83d60:	30cd883a 	add	r6,r6,r3
   83d64:	10c5883a 	add	r2,r2,r3
   83d68:	01400044 	movi	r5,1
   83d6c:	d9800a15 	stw	r6,40(sp)
   83d70:	d8801115 	stw	r2,68(sp)
   83d74:	00871040 	call	87104 <__i2b>
   83d78:	1027883a 	mov	r19,r2
   83d7c:	003f2506 	br	83a14 <_dtoa_r+0x7bc>
   83d80:	00c00274 	movhi	r3,9
   83d84:	18f53804 	addi	r3,r3,-11040
   83d88:	003d6706 	br	83328 <_dtoa_r+0xd0>
   83d8c:	dd800517 	ldw	r22,20(sp)
   83d90:	04000044 	movi	r16,1
   83d94:	00000706 	br	83db4 <_dtoa_r+0xb5c>
   83d98:	d9400717 	ldw	r5,28(sp)
   83d9c:	d9001617 	ldw	r4,88(sp)
   83da0:	01800284 	movi	r6,10
   83da4:	000f883a 	mov	r7,zero
   83da8:	00871400 	call	87140 <__multadd>
   83dac:	d8800715 	stw	r2,28(sp)
   83db0:	84000044 	addi	r16,r16,1
   83db4:	d9000717 	ldw	r4,28(sp)
   83db8:	900b883a 	mov	r5,r18
   83dbc:	00830140 	call	83014 <quorem>
   83dc0:	15c00c04 	addi	r23,r2,48
   83dc4:	b5c00005 	stb	r23,0(r22)
   83dc8:	d8c00f17 	ldw	r3,60(sp)
   83dcc:	b5800044 	addi	r22,r22,1
   83dd0:	80fff116 	blt	r16,r3,83d98 <_dtoa_r+0xb40>
   83dd4:	d8000615 	stw	zero,24(sp)
   83dd8:	d9400717 	ldw	r5,28(sp)
   83ddc:	d9001617 	ldw	r4,88(sp)
   83de0:	01800044 	movi	r6,1
   83de4:	0086d640 	call	86d64 <__lshift>
   83de8:	1009883a 	mov	r4,r2
   83dec:	900b883a 	mov	r5,r18
   83df0:	d8800715 	stw	r2,28(sp)
   83df4:	008657c0 	call	8657c <__mcmp>
   83df8:	00803c0e 	bge	zero,r2,83eec <_dtoa_r+0xc94>
   83dfc:	b009883a 	mov	r4,r22
   83e00:	213fffc4 	addi	r4,r4,-1
   83e04:	21400003 	ldbu	r5,0(r4)
   83e08:	00800e44 	movi	r2,57
   83e0c:	28c03fcc 	andi	r3,r5,255
   83e10:	18c0201c 	xori	r3,r3,128
   83e14:	18ffe004 	addi	r3,r3,-128
   83e18:	1881981e 	bne	r3,r2,8447c <_dtoa_r+0x1224>
   83e1c:	d9800517 	ldw	r6,20(sp)
   83e20:	21bff71e 	bne	r4,r6,83e00 <_dtoa_r+0xba8>
   83e24:	d8800d17 	ldw	r2,52(sp)
   83e28:	37000044 	addi	fp,r6,1
   83e2c:	10800044 	addi	r2,r2,1
   83e30:	d8800d15 	stw	r2,52(sp)
   83e34:	00800c44 	movi	r2,49
   83e38:	30800005 	stb	r2,0(r6)
   83e3c:	d9001617 	ldw	r4,88(sp)
   83e40:	900b883a 	mov	r5,r18
   83e44:	00864200 	call	86420 <_Bfree>
   83e48:	983ecd26 	beq	r19,zero,83980 <_dtoa_r+0x728>
   83e4c:	d8c00617 	ldw	r3,24(sp)
   83e50:	18000426 	beq	r3,zero,83e64 <_dtoa_r+0xc0c>
   83e54:	1cc00326 	beq	r3,r19,83e64 <_dtoa_r+0xc0c>
   83e58:	d9001617 	ldw	r4,88(sp)
   83e5c:	180b883a 	mov	r5,r3
   83e60:	00864200 	call	86420 <_Bfree>
   83e64:	d9001617 	ldw	r4,88(sp)
   83e68:	980b883a 	mov	r5,r19
   83e6c:	00864200 	call	86420 <_Bfree>
   83e70:	003ec306 	br	83980 <_dtoa_r+0x728>
   83e74:	1805883a 	mov	r2,r3
   83e78:	003eeb06 	br	83a28 <_dtoa_r+0x7d0>
   83e7c:	d9800a17 	ldw	r6,40(sp)
   83e80:	d8c01117 	ldw	r3,68(sp)
   83e84:	20bfff04 	addi	r2,r4,-4
   83e88:	308d883a 	add	r6,r6,r2
   83e8c:	1887883a 	add	r3,r3,r2
   83e90:	80a1883a 	add	r16,r16,r2
   83e94:	d9800a15 	stw	r6,40(sp)
   83e98:	d8c01115 	stw	r3,68(sp)
   83e9c:	003f1d06 	br	83b14 <_dtoa_r+0x8bc>
   83ea0:	a03f0c1e 	bne	r20,zero,83ad4 <_dtoa_r+0x87c>
   83ea4:	00800434 	movhi	r2,16
   83ea8:	10bfffc4 	addi	r2,r2,-1
   83eac:	a884703a 	and	r2,r21,r2
   83eb0:	103f081e 	bne	r2,zero,83ad4 <_dtoa_r+0x87c>
   83eb4:	a89ffc2c 	andhi	r2,r21,32752
   83eb8:	103f0626 	beq	r2,zero,83ad4 <_dtoa_r+0x87c>
   83ebc:	d8c01117 	ldw	r3,68(sp)
   83ec0:	d9000a17 	ldw	r4,40(sp)
   83ec4:	18c00044 	addi	r3,r3,1
   83ec8:	21000044 	addi	r4,r4,1
   83ecc:	d8c01115 	stw	r3,68(sp)
   83ed0:	d9000a15 	stw	r4,40(sp)
   83ed4:	003f0006 	br	83ad8 <_dtoa_r+0x880>
   83ed8:	d9400717 	ldw	r5,28(sp)
   83edc:	d9001617 	ldw	r4,88(sp)
   83ee0:	008726c0 	call	8726c <__pow5mult>
   83ee4:	d8800715 	stw	r2,28(sp)
   83ee8:	003eed06 	br	83aa0 <_dtoa_r+0x848>
   83eec:	1000021e 	bne	r2,zero,83ef8 <_dtoa_r+0xca0>
   83ef0:	b880004c 	andi	r2,r23,1
   83ef4:	103fc11e 	bne	r2,zero,83dfc <_dtoa_r+0xba4>
   83ef8:	b5bfffc4 	addi	r22,r22,-1
   83efc:	b0c00007 	ldb	r3,0(r22)
   83f00:	00800c04 	movi	r2,48
   83f04:	18bffc26 	beq	r3,r2,83ef8 <_dtoa_r+0xca0>
   83f08:	b7000044 	addi	fp,r22,1
   83f0c:	003fcb06 	br	83e3c <_dtoa_r+0xbe4>
   83f10:	d9800d17 	ldw	r6,52(sp)
   83f14:	018fc83a 	sub	r7,zero,r6
   83f18:	3801f726 	beq	r7,zero,846f8 <_dtoa_r+0x14a0>
   83f1c:	398003cc 	andi	r6,r7,15
   83f20:	300c90fa 	slli	r6,r6,3
   83f24:	01400274 	movhi	r5,9
   83f28:	29755604 	addi	r5,r5,-10920
   83f2c:	d9001217 	ldw	r4,72(sp)
   83f30:	314d883a 	add	r6,r6,r5
   83f34:	30c00117 	ldw	r3,4(r6)
   83f38:	30800017 	ldw	r2,0(r6)
   83f3c:	d9401317 	ldw	r5,76(sp)
   83f40:	3821d13a 	srai	r16,r7,4
   83f44:	100d883a 	mov	r6,r2
   83f48:	180f883a 	mov	r7,r3
   83f4c:	00894000 	call	89400 <__muldf3>
   83f50:	1011883a 	mov	r8,r2
   83f54:	1813883a 	mov	r9,r3
   83f58:	1029883a 	mov	r20,r2
   83f5c:	182b883a 	mov	r21,r3
   83f60:	8001e526 	beq	r16,zero,846f8 <_dtoa_r+0x14a0>
   83f64:	05800084 	movi	r22,2
   83f68:	04400274 	movhi	r17,9
   83f6c:	8c758804 	addi	r17,r17,-10720
   83f70:	8080004c 	andi	r2,r16,1
   83f74:	1005003a 	cmpeq	r2,r2,zero
   83f78:	1000081e 	bne	r2,zero,83f9c <_dtoa_r+0xd44>
   83f7c:	89800017 	ldw	r6,0(r17)
   83f80:	89c00117 	ldw	r7,4(r17)
   83f84:	480b883a 	mov	r5,r9
   83f88:	4009883a 	mov	r4,r8
   83f8c:	00894000 	call	89400 <__muldf3>
   83f90:	1011883a 	mov	r8,r2
   83f94:	b5800044 	addi	r22,r22,1
   83f98:	1813883a 	mov	r9,r3
   83f9c:	8021d07a 	srai	r16,r16,1
   83fa0:	8c400204 	addi	r17,r17,8
   83fa4:	803ff21e 	bne	r16,zero,83f70 <_dtoa_r+0xd18>
   83fa8:	4029883a 	mov	r20,r8
   83fac:	482b883a 	mov	r21,r9
   83fb0:	003dca06 	br	836dc <_dtoa_r+0x484>
   83fb4:	d9000817 	ldw	r4,32(sp)
   83fb8:	2005003a 	cmpeq	r2,r4,zero
   83fbc:	1001f61e 	bne	r2,zero,84798 <_dtoa_r+0x1540>
   83fc0:	dc001117 	ldw	r16,68(sp)
   83fc4:	dc801017 	ldw	r18,64(sp)
   83fc8:	18c10cc4 	addi	r3,r3,1075
   83fcc:	003f6106 	br	83d54 <_dtoa_r+0xafc>
   83fd0:	d8000b15 	stw	zero,44(sp)
   83fd4:	d9802617 	ldw	r6,152(sp)
   83fd8:	d8c00d17 	ldw	r3,52(sp)
   83fdc:	30800044 	addi	r2,r6,1
   83fe0:	18ad883a 	add	r22,r3,r2
   83fe4:	b13fffc4 	addi	r4,r22,-1
   83fe8:	d9000e15 	stw	r4,56(sp)
   83fec:	0581f60e 	bge	zero,r22,847c8 <_dtoa_r+0x1570>
   83ff0:	dd800f15 	stw	r22,60(sp)
   83ff4:	003f3006 	br	83cb8 <_dtoa_r+0xa60>
   83ff8:	d8000b15 	stw	zero,44(sp)
   83ffc:	d9002617 	ldw	r4,152(sp)
   84000:	0101eb0e 	bge	zero,r4,847b0 <_dtoa_r+0x1558>
   84004:	202d883a 	mov	r22,r4
   84008:	d9000e15 	stw	r4,56(sp)
   8400c:	d9000f15 	stw	r4,60(sp)
   84010:	003f2906 	br	83cb8 <_dtoa_r+0xa60>
   84014:	01800044 	movi	r6,1
   84018:	d9800b15 	stw	r6,44(sp)
   8401c:	003ff706 	br	83ffc <_dtoa_r+0xda4>
   84020:	01000044 	movi	r4,1
   84024:	d9000b15 	stw	r4,44(sp)
   84028:	003fea06 	br	83fd4 <_dtoa_r+0xd7c>
   8402c:	04000c0e 	bge	zero,r16,84060 <_dtoa_r+0xe08>
   84030:	d9400717 	ldw	r5,28(sp)
   84034:	d9001617 	ldw	r4,88(sp)
   84038:	01800044 	movi	r6,1
   8403c:	0086d640 	call	86d64 <__lshift>
   84040:	1009883a 	mov	r4,r2
   84044:	900b883a 	mov	r5,r18
   84048:	d8800715 	stw	r2,28(sp)
   8404c:	008657c0 	call	8657c <__mcmp>
   84050:	0081e00e 	bge	zero,r2,847d4 <_dtoa_r+0x157c>
   84054:	bdc00044 	addi	r23,r23,1
   84058:	00800e84 	movi	r2,58
   8405c:	b881a226 	beq	r23,r2,846e8 <_dtoa_r+0x1490>
   84060:	b7000044 	addi	fp,r22,1
   84064:	b5c00005 	stb	r23,0(r22)
   84068:	003f7406 	br	83e3c <_dtoa_r+0xbe4>
   8406c:	00800e44 	movi	r2,57
   84070:	b8819d26 	beq	r23,r2,846e8 <_dtoa_r+0x1490>
   84074:	053ffa0e 	bge	zero,r20,84060 <_dtoa_r+0xe08>
   84078:	8dc00c44 	addi	r23,r17,49
   8407c:	003ff806 	br	84060 <_dtoa_r+0xe08>
   84080:	d9001617 	ldw	r4,88(sp)
   84084:	a80b883a 	mov	r5,r21
   84088:	04000044 	movi	r16,1
   8408c:	00864200 	call	86420 <_Bfree>
   84090:	003edf06 	br	83c10 <_dtoa_r+0x9b8>
   84094:	d9001617 	ldw	r4,88(sp)
   84098:	980b883a 	mov	r5,r19
   8409c:	01800284 	movi	r6,10
   840a0:	000f883a 	mov	r7,zero
   840a4:	00871400 	call	87140 <__multadd>
   840a8:	1027883a 	mov	r19,r2
   840ac:	d8800615 	stw	r2,24(sp)
   840b0:	003ebb06 	br	83ba0 <_dtoa_r+0x948>
   840b4:	d9801117 	ldw	r6,68(sp)
   840b8:	d8800d17 	ldw	r2,52(sp)
   840bc:	d8000915 	stw	zero,36(sp)
   840c0:	308dc83a 	sub	r6,r6,r2
   840c4:	0087c83a 	sub	r3,zero,r2
   840c8:	d9801115 	stw	r6,68(sp)
   840cc:	d8c01015 	stw	r3,64(sp)
   840d0:	003cfe06 	br	834cc <_dtoa_r+0x274>
   840d4:	018dc83a 	sub	r6,zero,r6
   840d8:	d9801115 	stw	r6,68(sp)
   840dc:	d8000a15 	stw	zero,40(sp)
   840e0:	003cf306 	br	834b0 <_dtoa_r+0x258>
   840e4:	d9000d17 	ldw	r4,52(sp)
   840e8:	0089cc40 	call	89cc4 <__floatsidf>
   840ec:	880b883a 	mov	r5,r17
   840f0:	8009883a 	mov	r4,r16
   840f4:	180f883a 	mov	r7,r3
   840f8:	100d883a 	mov	r6,r2
   840fc:	0089aa40 	call	89aa4 <__nedf2>
   84100:	103ce126 	beq	r2,zero,83488 <_dtoa_r+0x230>
   84104:	d9800d17 	ldw	r6,52(sp)
   84108:	31bfffc4 	addi	r6,r6,-1
   8410c:	d9800d15 	stw	r6,52(sp)
   84110:	003cdd06 	br	83488 <_dtoa_r+0x230>
   84114:	d9000717 	ldw	r4,28(sp)
   84118:	900b883a 	mov	r5,r18
   8411c:	008657c0 	call	8657c <__mcmp>
   84120:	103e8d0e 	bge	r2,zero,83b58 <_dtoa_r+0x900>
   84124:	d9400717 	ldw	r5,28(sp)
   84128:	d9001617 	ldw	r4,88(sp)
   8412c:	01800284 	movi	r6,10
   84130:	000f883a 	mov	r7,zero
   84134:	00871400 	call	87140 <__multadd>
   84138:	d9800d17 	ldw	r6,52(sp)
   8413c:	d8800715 	stw	r2,28(sp)
   84140:	31bfffc4 	addi	r6,r6,-1
   84144:	d9800d15 	stw	r6,52(sp)
   84148:	b001a71e 	bne	r22,zero,847e8 <_dtoa_r+0x1590>
   8414c:	d8800e17 	ldw	r2,56(sp)
   84150:	d8800f15 	stw	r2,60(sp)
   84154:	003e8006 	br	83b58 <_dtoa_r+0x900>
   84158:	90800417 	ldw	r2,16(r18)
   8415c:	1085883a 	add	r2,r2,r2
   84160:	1085883a 	add	r2,r2,r2
   84164:	1485883a 	add	r2,r2,r18
   84168:	11000417 	ldw	r4,16(r2)
   8416c:	00864480 	call	86448 <__hi0bits>
   84170:	00c00804 	movi	r3,32
   84174:	1887c83a 	sub	r3,r3,r2
   84178:	003e5a06 	br	83ae4 <_dtoa_r+0x88c>
   8417c:	d9400717 	ldw	r5,28(sp)
   84180:	d9801017 	ldw	r6,64(sp)
   84184:	d9001617 	ldw	r4,88(sp)
   84188:	008726c0 	call	8726c <__pow5mult>
   8418c:	d8800715 	stw	r2,28(sp)
   84190:	003e4306 	br	83aa0 <_dtoa_r+0x848>
   84194:	d9800f17 	ldw	r6,60(sp)
   84198:	d8800d17 	ldw	r2,52(sp)
   8419c:	d9800315 	stw	r6,12(sp)
   841a0:	d8800415 	stw	r2,16(sp)
   841a4:	d8c00b17 	ldw	r3,44(sp)
   841a8:	1805003a 	cmpeq	r2,r3,zero
   841ac:	1000e21e 	bne	r2,zero,84538 <_dtoa_r+0x12e0>
   841b0:	d9000317 	ldw	r4,12(sp)
   841b4:	0005883a 	mov	r2,zero
   841b8:	00cff834 	movhi	r3,16352
   841bc:	200c90fa 	slli	r6,r4,3
   841c0:	01000274 	movhi	r4,9
   841c4:	21355604 	addi	r4,r4,-10920
   841c8:	180b883a 	mov	r5,r3
   841cc:	310d883a 	add	r6,r6,r4
   841d0:	327fff17 	ldw	r9,-4(r6)
   841d4:	323ffe17 	ldw	r8,-8(r6)
   841d8:	1009883a 	mov	r4,r2
   841dc:	480f883a 	mov	r7,r9
   841e0:	400d883a 	mov	r6,r8
   841e4:	00897c40 	call	897c4 <__divdf3>
   841e8:	180b883a 	mov	r5,r3
   841ec:	b00d883a 	mov	r6,r22
   841f0:	b80f883a 	mov	r7,r23
   841f4:	1009883a 	mov	r4,r2
   841f8:	008930c0 	call	8930c <__subdf3>
   841fc:	a80b883a 	mov	r5,r21
   84200:	a009883a 	mov	r4,r20
   84204:	d8c01915 	stw	r3,100(sp)
   84208:	d8801815 	stw	r2,96(sp)
   8420c:	0089dbc0 	call	89dbc <__fixdfsi>
   84210:	1009883a 	mov	r4,r2
   84214:	1027883a 	mov	r19,r2
   84218:	0089cc40 	call	89cc4 <__floatsidf>
   8421c:	a80b883a 	mov	r5,r21
   84220:	a009883a 	mov	r4,r20
   84224:	180f883a 	mov	r7,r3
   84228:	100d883a 	mov	r6,r2
   8422c:	008930c0 	call	8930c <__subdf3>
   84230:	d9801817 	ldw	r6,96(sp)
   84234:	1823883a 	mov	r17,r3
   84238:	d8801415 	stw	r2,80(sp)
   8423c:	302d883a 	mov	r22,r6
   84240:	d9800517 	ldw	r6,20(sp)
   84244:	9cc00c04 	addi	r19,r19,48
   84248:	dc401515 	stw	r17,84(sp)
   8424c:	d8c01917 	ldw	r3,100(sp)
   84250:	34c00005 	stb	r19,0(r6)
   84254:	d8800517 	ldw	r2,20(sp)
   84258:	d9401917 	ldw	r5,100(sp)
   8425c:	d9801417 	ldw	r6,80(sp)
   84260:	b009883a 	mov	r4,r22
   84264:	880f883a 	mov	r7,r17
   84268:	182f883a 	mov	r23,r3
   8426c:	17000044 	addi	fp,r2,1
   84270:	0089b2c0 	call	89b2c <__gtdf2>
   84274:	00804e16 	blt	zero,r2,843b0 <_dtoa_r+0x1158>
   84278:	d9801417 	ldw	r6,80(sp)
   8427c:	0005883a 	mov	r2,zero
   84280:	00cffc34 	movhi	r3,16368
   84284:	180b883a 	mov	r5,r3
   84288:	880f883a 	mov	r7,r17
   8428c:	1009883a 	mov	r4,r2
   84290:	008930c0 	call	8930c <__subdf3>
   84294:	d9401917 	ldw	r5,100(sp)
   84298:	180f883a 	mov	r7,r3
   8429c:	b009883a 	mov	r4,r22
   842a0:	100d883a 	mov	r6,r2
   842a4:	0089b2c0 	call	89b2c <__gtdf2>
   842a8:	00bda216 	blt	zero,r2,83934 <_dtoa_r+0x6dc>
   842ac:	d8c00317 	ldw	r3,12(sp)
   842b0:	00800044 	movi	r2,1
   842b4:	10c01216 	blt	r2,r3,84300 <_dtoa_r+0x10a8>
   842b8:	003d4506 	br	837d0 <_dtoa_r+0x578>
   842bc:	d9801417 	ldw	r6,80(sp)
   842c0:	0005883a 	mov	r2,zero
   842c4:	00cffc34 	movhi	r3,16368
   842c8:	180b883a 	mov	r5,r3
   842cc:	880f883a 	mov	r7,r17
   842d0:	1009883a 	mov	r4,r2
   842d4:	008930c0 	call	8930c <__subdf3>
   842d8:	d9c01b17 	ldw	r7,108(sp)
   842dc:	180b883a 	mov	r5,r3
   842e0:	1009883a 	mov	r4,r2
   842e4:	b00d883a 	mov	r6,r22
   842e8:	0089c3c0 	call	89c3c <__ltdf2>
   842ec:	103d9116 	blt	r2,zero,83934 <_dtoa_r+0x6dc>
   842f0:	d9800517 	ldw	r6,20(sp)
   842f4:	d9000317 	ldw	r4,12(sp)
   842f8:	3105883a 	add	r2,r6,r4
   842fc:	e0bd3426 	beq	fp,r2,837d0 <_dtoa_r+0x578>
   84300:	04500934 	movhi	r17,16420
   84304:	0021883a 	mov	r16,zero
   84308:	b80b883a 	mov	r5,r23
   8430c:	b009883a 	mov	r4,r22
   84310:	800d883a 	mov	r6,r16
   84314:	880f883a 	mov	r7,r17
   84318:	00894000 	call	89400 <__muldf3>
   8431c:	d9401517 	ldw	r5,84(sp)
   84320:	d9001417 	ldw	r4,80(sp)
   84324:	880f883a 	mov	r7,r17
   84328:	000d883a 	mov	r6,zero
   8432c:	d8801a15 	stw	r2,104(sp)
   84330:	d8c01b15 	stw	r3,108(sp)
   84334:	00894000 	call	89400 <__muldf3>
   84338:	180b883a 	mov	r5,r3
   8433c:	1009883a 	mov	r4,r2
   84340:	1823883a 	mov	r17,r3
   84344:	1021883a 	mov	r16,r2
   84348:	0089dbc0 	call	89dbc <__fixdfsi>
   8434c:	1009883a 	mov	r4,r2
   84350:	102b883a 	mov	r21,r2
   84354:	0089cc40 	call	89cc4 <__floatsidf>
   84358:	880b883a 	mov	r5,r17
   8435c:	8009883a 	mov	r4,r16
   84360:	180f883a 	mov	r7,r3
   84364:	100d883a 	mov	r6,r2
   84368:	008930c0 	call	8930c <__subdf3>
   8436c:	1021883a 	mov	r16,r2
   84370:	d9001b17 	ldw	r4,108(sp)
   84374:	1823883a 	mov	r17,r3
   84378:	dc001415 	stw	r16,80(sp)
   8437c:	ad400c04 	addi	r21,r21,48
   84380:	dc401515 	stw	r17,84(sp)
   84384:	d8801a17 	ldw	r2,104(sp)
   84388:	e5400005 	stb	r21,0(fp)
   8438c:	202f883a 	mov	r23,r4
   84390:	d9c01b17 	ldw	r7,108(sp)
   84394:	d9001417 	ldw	r4,80(sp)
   84398:	880b883a 	mov	r5,r17
   8439c:	100d883a 	mov	r6,r2
   843a0:	102d883a 	mov	r22,r2
   843a4:	e7000044 	addi	fp,fp,1
   843a8:	0089c3c0 	call	89c3c <__ltdf2>
   843ac:	103fc30e 	bge	r2,zero,842bc <_dtoa_r+0x1064>
   843b0:	d9000417 	ldw	r4,16(sp)
   843b4:	d9000d15 	stw	r4,52(sp)
   843b8:	003d7106 	br	83980 <_dtoa_r+0x728>
   843bc:	d9801717 	ldw	r6,92(sp)
   843c0:	00800084 	movi	r2,2
   843c4:	11bde60e 	bge	r2,r6,83b60 <_dtoa_r+0x908>
   843c8:	203cfb1e 	bne	r4,zero,837b8 <_dtoa_r+0x560>
   843cc:	d9001617 	ldw	r4,88(sp)
   843d0:	900b883a 	mov	r5,r18
   843d4:	01800144 	movi	r6,5
   843d8:	000f883a 	mov	r7,zero
   843dc:	00871400 	call	87140 <__multadd>
   843e0:	d9000717 	ldw	r4,28(sp)
   843e4:	100b883a 	mov	r5,r2
   843e8:	1025883a 	mov	r18,r2
   843ec:	008657c0 	call	8657c <__mcmp>
   843f0:	00bcf10e 	bge	zero,r2,837b8 <_dtoa_r+0x560>
   843f4:	d8c00d17 	ldw	r3,52(sp)
   843f8:	d9000517 	ldw	r4,20(sp)
   843fc:	d8000615 	stw	zero,24(sp)
   84400:	18c00044 	addi	r3,r3,1
   84404:	d8c00d15 	stw	r3,52(sp)
   84408:	00800c44 	movi	r2,49
   8440c:	27000044 	addi	fp,r4,1
   84410:	20800005 	stb	r2,0(r4)
   84414:	003e8906 	br	83e3c <_dtoa_r+0xbe4>
   84418:	d8c00517 	ldw	r3,20(sp)
   8441c:	003bc206 	br	83328 <_dtoa_r+0xd0>
   84420:	01800274 	movhi	r6,9
   84424:	31b58804 	addi	r6,r6,-10720
   84428:	30c00917 	ldw	r3,36(r6)
   8442c:	30800817 	ldw	r2,32(r6)
   84430:	d9001217 	ldw	r4,72(sp)
   84434:	d9401317 	ldw	r5,76(sp)
   84438:	180f883a 	mov	r7,r3
   8443c:	100d883a 	mov	r6,r2
   84440:	00897c40 	call	897c4 <__divdf3>
   84444:	948003cc 	andi	r18,r18,15
   84448:	058000c4 	movi	r22,3
   8444c:	1029883a 	mov	r20,r2
   84450:	182b883a 	mov	r21,r3
   84454:	003c8906 	br	8367c <_dtoa_r+0x424>
   84458:	d9001017 	ldw	r4,64(sp)
   8445c:	d9800917 	ldw	r6,36(sp)
   84460:	0025883a 	mov	r18,zero
   84464:	1105c83a 	sub	r2,r2,r4
   84468:	2089883a 	add	r4,r4,r2
   8446c:	308d883a 	add	r6,r6,r2
   84470:	d9001015 	stw	r4,64(sp)
   84474:	d9800915 	stw	r6,36(sp)
   84478:	003e3206 	br	83d44 <_dtoa_r+0xaec>
   8447c:	28800044 	addi	r2,r5,1
   84480:	27000044 	addi	fp,r4,1
   84484:	20800005 	stb	r2,0(r4)
   84488:	003e6c06 	br	83e3c <_dtoa_r+0xbe4>
   8448c:	d8800f17 	ldw	r2,60(sp)
   84490:	00bce016 	blt	zero,r2,83814 <_dtoa_r+0x5bc>
   84494:	d9800f17 	ldw	r6,60(sp)
   84498:	303cc51e 	bne	r6,zero,837b0 <_dtoa_r+0x558>
   8449c:	0005883a 	mov	r2,zero
   844a0:	00d00534 	movhi	r3,16404
   844a4:	980b883a 	mov	r5,r19
   844a8:	180f883a 	mov	r7,r3
   844ac:	9009883a 	mov	r4,r18
   844b0:	100d883a 	mov	r6,r2
   844b4:	00894000 	call	89400 <__muldf3>
   844b8:	180b883a 	mov	r5,r3
   844bc:	a80f883a 	mov	r7,r21
   844c0:	1009883a 	mov	r4,r2
   844c4:	a00d883a 	mov	r6,r20
   844c8:	0089bb40 	call	89bb4 <__gedf2>
   844cc:	103cb80e 	bge	r2,zero,837b0 <_dtoa_r+0x558>
   844d0:	0027883a 	mov	r19,zero
   844d4:	0025883a 	mov	r18,zero
   844d8:	003fc606 	br	843f4 <_dtoa_r+0x119c>
   844dc:	99400117 	ldw	r5,4(r19)
   844e0:	d9001617 	ldw	r4,88(sp)
   844e4:	00869a00 	call	869a0 <_Balloc>
   844e8:	99800417 	ldw	r6,16(r19)
   844ec:	11000304 	addi	r4,r2,12
   844f0:	99400304 	addi	r5,r19,12
   844f4:	318d883a 	add	r6,r6,r6
   844f8:	318d883a 	add	r6,r6,r6
   844fc:	31800204 	addi	r6,r6,8
   84500:	1023883a 	mov	r17,r2
   84504:	00862080 	call	86208 <memcpy>
   84508:	d9001617 	ldw	r4,88(sp)
   8450c:	880b883a 	mov	r5,r17
   84510:	01800044 	movi	r6,1
   84514:	0086d640 	call	86d64 <__lshift>
   84518:	100b883a 	mov	r5,r2
   8451c:	003d9c06 	br	83b90 <_dtoa_r+0x938>
   84520:	00800e44 	movi	r2,57
   84524:	b8807026 	beq	r23,r2,846e8 <_dtoa_r+0x1490>
   84528:	b8800044 	addi	r2,r23,1
   8452c:	b7000044 	addi	fp,r22,1
   84530:	b0800005 	stb	r2,0(r22)
   84534:	003e4106 	br	83e3c <_dtoa_r+0xbe4>
   84538:	d8800317 	ldw	r2,12(sp)
   8453c:	01800274 	movhi	r6,9
   84540:	31b55604 	addi	r6,r6,-10920
   84544:	b009883a 	mov	r4,r22
   84548:	100e90fa 	slli	r7,r2,3
   8454c:	b80b883a 	mov	r5,r23
   84550:	398f883a 	add	r7,r7,r6
   84554:	38bffe17 	ldw	r2,-8(r7)
   84558:	d9800517 	ldw	r6,20(sp)
   8455c:	38ffff17 	ldw	r3,-4(r7)
   84560:	37000044 	addi	fp,r6,1
   84564:	180f883a 	mov	r7,r3
   84568:	100d883a 	mov	r6,r2
   8456c:	00894000 	call	89400 <__muldf3>
   84570:	a80b883a 	mov	r5,r21
   84574:	a009883a 	mov	r4,r20
   84578:	182f883a 	mov	r23,r3
   8457c:	102d883a 	mov	r22,r2
   84580:	0089dbc0 	call	89dbc <__fixdfsi>
   84584:	1009883a 	mov	r4,r2
   84588:	1027883a 	mov	r19,r2
   8458c:	0089cc40 	call	89cc4 <__floatsidf>
   84590:	a80b883a 	mov	r5,r21
   84594:	a009883a 	mov	r4,r20
   84598:	180f883a 	mov	r7,r3
   8459c:	100d883a 	mov	r6,r2
   845a0:	008930c0 	call	8930c <__subdf3>
   845a4:	180b883a 	mov	r5,r3
   845a8:	d8c00517 	ldw	r3,20(sp)
   845ac:	9cc00c04 	addi	r19,r19,48
   845b0:	1009883a 	mov	r4,r2
   845b4:	1cc00005 	stb	r19,0(r3)
   845b8:	2021883a 	mov	r16,r4
   845bc:	d9000317 	ldw	r4,12(sp)
   845c0:	00800044 	movi	r2,1
   845c4:	2823883a 	mov	r17,r5
   845c8:	20802226 	beq	r4,r2,84654 <_dtoa_r+0x13fc>
   845cc:	1029883a 	mov	r20,r2
   845d0:	0005883a 	mov	r2,zero
   845d4:	00d00934 	movhi	r3,16420
   845d8:	180f883a 	mov	r7,r3
   845dc:	100d883a 	mov	r6,r2
   845e0:	880b883a 	mov	r5,r17
   845e4:	8009883a 	mov	r4,r16
   845e8:	00894000 	call	89400 <__muldf3>
   845ec:	180b883a 	mov	r5,r3
   845f0:	1009883a 	mov	r4,r2
   845f4:	1823883a 	mov	r17,r3
   845f8:	1021883a 	mov	r16,r2
   845fc:	0089dbc0 	call	89dbc <__fixdfsi>
   84600:	1009883a 	mov	r4,r2
   84604:	102b883a 	mov	r21,r2
   84608:	0089cc40 	call	89cc4 <__floatsidf>
   8460c:	880b883a 	mov	r5,r17
   84610:	8009883a 	mov	r4,r16
   84614:	180f883a 	mov	r7,r3
   84618:	100d883a 	mov	r6,r2
   8461c:	008930c0 	call	8930c <__subdf3>
   84620:	180b883a 	mov	r5,r3
   84624:	d8c00517 	ldw	r3,20(sp)
   84628:	1009883a 	mov	r4,r2
   8462c:	ad400c04 	addi	r21,r21,48
   84630:	1d05883a 	add	r2,r3,r20
   84634:	15400005 	stb	r21,0(r2)
   84638:	2021883a 	mov	r16,r4
   8463c:	d9000317 	ldw	r4,12(sp)
   84640:	a5000044 	addi	r20,r20,1
   84644:	2823883a 	mov	r17,r5
   84648:	a13fe11e 	bne	r20,r4,845d0 <_dtoa_r+0x1378>
   8464c:	e505883a 	add	r2,fp,r20
   84650:	173fffc4 	addi	fp,r2,-1
   84654:	0025883a 	mov	r18,zero
   84658:	04cff834 	movhi	r19,16352
   8465c:	b009883a 	mov	r4,r22
   84660:	b80b883a 	mov	r5,r23
   84664:	900d883a 	mov	r6,r18
   84668:	980f883a 	mov	r7,r19
   8466c:	008938c0 	call	8938c <__adddf3>
   84670:	180b883a 	mov	r5,r3
   84674:	1009883a 	mov	r4,r2
   84678:	800d883a 	mov	r6,r16
   8467c:	880f883a 	mov	r7,r17
   84680:	0089c3c0 	call	89c3c <__ltdf2>
   84684:	103cab16 	blt	r2,zero,83934 <_dtoa_r+0x6dc>
   84688:	0009883a 	mov	r4,zero
   8468c:	980b883a 	mov	r5,r19
   84690:	b80f883a 	mov	r7,r23
   84694:	b00d883a 	mov	r6,r22
   84698:	008930c0 	call	8930c <__subdf3>
   8469c:	180b883a 	mov	r5,r3
   846a0:	880f883a 	mov	r7,r17
   846a4:	1009883a 	mov	r4,r2
   846a8:	800d883a 	mov	r6,r16
   846ac:	0089b2c0 	call	89b2c <__gtdf2>
   846b0:	00bc470e 	bge	zero,r2,837d0 <_dtoa_r+0x578>
   846b4:	00c00c04 	movi	r3,48
   846b8:	e73fffc4 	addi	fp,fp,-1
   846bc:	e0800007 	ldb	r2,0(fp)
   846c0:	10fffd26 	beq	r2,r3,846b8 <_dtoa_r+0x1460>
   846c4:	d9800417 	ldw	r6,16(sp)
   846c8:	e7000044 	addi	fp,fp,1
   846cc:	d9800d15 	stw	r6,52(sp)
   846d0:	003cab06 	br	83980 <_dtoa_r+0x728>
   846d4:	d8c00f17 	ldw	r3,60(sp)
   846d8:	d9001117 	ldw	r4,68(sp)
   846dc:	20e1c83a 	sub	r16,r4,r3
   846e0:	0007883a 	mov	r3,zero
   846e4:	003d9b06 	br	83d54 <_dtoa_r+0xafc>
   846e8:	00800e44 	movi	r2,57
   846ec:	b0800005 	stb	r2,0(r22)
   846f0:	b5800044 	addi	r22,r22,1
   846f4:	003dc106 	br	83dfc <_dtoa_r+0xba4>
   846f8:	05800084 	movi	r22,2
   846fc:	003bf706 	br	836dc <_dtoa_r+0x484>
   84700:	d9000f17 	ldw	r4,60(sp)
   84704:	013c000e 	bge	zero,r4,83708 <_dtoa_r+0x4b0>
   84708:	d9800e17 	ldw	r6,56(sp)
   8470c:	01bc300e 	bge	zero,r6,837d0 <_dtoa_r+0x578>
   84710:	0005883a 	mov	r2,zero
   84714:	00d00934 	movhi	r3,16420
   84718:	a80b883a 	mov	r5,r21
   8471c:	180f883a 	mov	r7,r3
   84720:	a009883a 	mov	r4,r20
   84724:	100d883a 	mov	r6,r2
   84728:	00894000 	call	89400 <__muldf3>
   8472c:	b1000044 	addi	r4,r22,1
   84730:	1021883a 	mov	r16,r2
   84734:	1823883a 	mov	r17,r3
   84738:	0089cc40 	call	89cc4 <__floatsidf>
   8473c:	880b883a 	mov	r5,r17
   84740:	8009883a 	mov	r4,r16
   84744:	180f883a 	mov	r7,r3
   84748:	100d883a 	mov	r6,r2
   8474c:	00894000 	call	89400 <__muldf3>
   84750:	0011883a 	mov	r8,zero
   84754:	02500734 	movhi	r9,16412
   84758:	180b883a 	mov	r5,r3
   8475c:	480f883a 	mov	r7,r9
   84760:	1009883a 	mov	r4,r2
   84764:	400d883a 	mov	r6,r8
   84768:	008938c0 	call	8938c <__adddf3>
   8476c:	102d883a 	mov	r22,r2
   84770:	00bf3034 	movhi	r2,64704
   84774:	10ef883a 	add	r23,r2,r3
   84778:	d8800d17 	ldw	r2,52(sp)
   8477c:	d8c00e17 	ldw	r3,56(sp)
   84780:	8029883a 	mov	r20,r16
   84784:	10bfffc4 	addi	r2,r2,-1
   84788:	882b883a 	mov	r21,r17
   8478c:	d8800415 	stw	r2,16(sp)
   84790:	d8c00315 	stw	r3,12(sp)
   84794:	003e8306 	br	841a4 <_dtoa_r+0xf4c>
   84798:	d8800117 	ldw	r2,4(sp)
   8479c:	dc001117 	ldw	r16,68(sp)
   847a0:	dc801017 	ldw	r18,64(sp)
   847a4:	00c00d84 	movi	r3,54
   847a8:	1887c83a 	sub	r3,r3,r2
   847ac:	003d6906 	br	83d54 <_dtoa_r+0xafc>
   847b0:	01800044 	movi	r6,1
   847b4:	3021883a 	mov	r16,r6
   847b8:	d9800f15 	stw	r6,60(sp)
   847bc:	d9802615 	stw	r6,152(sp)
   847c0:	d9800e15 	stw	r6,56(sp)
   847c4:	003b9306 	br	83614 <_dtoa_r+0x3bc>
   847c8:	b021883a 	mov	r16,r22
   847cc:	dd800f15 	stw	r22,60(sp)
   847d0:	003b9006 	br	83614 <_dtoa_r+0x3bc>
   847d4:	103e221e 	bne	r2,zero,84060 <_dtoa_r+0xe08>
   847d8:	b880004c 	andi	r2,r23,1
   847dc:	1005003a 	cmpeq	r2,r2,zero
   847e0:	103e1f1e 	bne	r2,zero,84060 <_dtoa_r+0xe08>
   847e4:	003e1b06 	br	84054 <_dtoa_r+0xdfc>
   847e8:	d9001617 	ldw	r4,88(sp)
   847ec:	980b883a 	mov	r5,r19
   847f0:	01800284 	movi	r6,10
   847f4:	000f883a 	mov	r7,zero
   847f8:	00871400 	call	87140 <__multadd>
   847fc:	d8c00e17 	ldw	r3,56(sp)
   84800:	1027883a 	mov	r19,r2
   84804:	d8c00f15 	stw	r3,60(sp)
   84808:	003cd306 	br	83b58 <_dtoa_r+0x900>

0008480c <_fflush_r>:
   8480c:	defffb04 	addi	sp,sp,-20
   84810:	dcc00315 	stw	r19,12(sp)
   84814:	dc800215 	stw	r18,8(sp)
   84818:	dfc00415 	stw	ra,16(sp)
   8481c:	dc400115 	stw	r17,4(sp)
   84820:	dc000015 	stw	r16,0(sp)
   84824:	2027883a 	mov	r19,r4
   84828:	2825883a 	mov	r18,r5
   8482c:	20000226 	beq	r4,zero,84838 <_fflush_r+0x2c>
   84830:	20800e17 	ldw	r2,56(r4)
   84834:	10005626 	beq	r2,zero,84990 <_fflush_r+0x184>
   84838:	9100030b 	ldhu	r4,12(r18)
   8483c:	20ffffcc 	andi	r3,r4,65535
   84840:	18e0001c 	xori	r3,r3,32768
   84844:	18e00004 	addi	r3,r3,-32768
   84848:	1880020c 	andi	r2,r3,8
   8484c:	1000261e 	bne	r2,zero,848e8 <_fflush_r+0xdc>
   84850:	90c00117 	ldw	r3,4(r18)
   84854:	20820014 	ori	r2,r4,2048
   84858:	9080030d 	sth	r2,12(r18)
   8485c:	1009883a 	mov	r4,r2
   84860:	00c0400e 	bge	zero,r3,84964 <_fflush_r+0x158>
   84864:	92000a17 	ldw	r8,40(r18)
   84868:	40004026 	beq	r8,zero,8496c <_fflush_r+0x160>
   8486c:	2084000c 	andi	r2,r4,4096
   84870:	10005326 	beq	r2,zero,849c0 <_fflush_r+0x1b4>
   84874:	94001417 	ldw	r16,80(r18)
   84878:	9080030b 	ldhu	r2,12(r18)
   8487c:	1080010c 	andi	r2,r2,4
   84880:	1000481e 	bne	r2,zero,849a4 <_fflush_r+0x198>
   84884:	91400717 	ldw	r5,28(r18)
   84888:	9809883a 	mov	r4,r19
   8488c:	800d883a 	mov	r6,r16
   84890:	000f883a 	mov	r7,zero
   84894:	403ee83a 	callr	r8
   84898:	8080261e 	bne	r16,r2,84934 <_fflush_r+0x128>
   8489c:	9080030b 	ldhu	r2,12(r18)
   848a0:	91000417 	ldw	r4,16(r18)
   848a4:	90000115 	stw	zero,4(r18)
   848a8:	10bdffcc 	andi	r2,r2,63487
   848ac:	10ffffcc 	andi	r3,r2,65535
   848b0:	18c4000c 	andi	r3,r3,4096
   848b4:	9080030d 	sth	r2,12(r18)
   848b8:	91000015 	stw	r4,0(r18)
   848bc:	18002b26 	beq	r3,zero,8496c <_fflush_r+0x160>
   848c0:	0007883a 	mov	r3,zero
   848c4:	1805883a 	mov	r2,r3
   848c8:	94001415 	stw	r16,80(r18)
   848cc:	dfc00417 	ldw	ra,16(sp)
   848d0:	dcc00317 	ldw	r19,12(sp)
   848d4:	dc800217 	ldw	r18,8(sp)
   848d8:	dc400117 	ldw	r17,4(sp)
   848dc:	dc000017 	ldw	r16,0(sp)
   848e0:	dec00504 	addi	sp,sp,20
   848e4:	f800283a 	ret
   848e8:	94400417 	ldw	r17,16(r18)
   848ec:	88001f26 	beq	r17,zero,8496c <_fflush_r+0x160>
   848f0:	90800017 	ldw	r2,0(r18)
   848f4:	18c000cc 	andi	r3,r3,3
   848f8:	94400015 	stw	r17,0(r18)
   848fc:	1461c83a 	sub	r16,r2,r17
   84900:	18002526 	beq	r3,zero,84998 <_fflush_r+0x18c>
   84904:	0005883a 	mov	r2,zero
   84908:	90800215 	stw	r2,8(r18)
   8490c:	0400170e 	bge	zero,r16,8496c <_fflush_r+0x160>
   84910:	90c00917 	ldw	r3,36(r18)
   84914:	91400717 	ldw	r5,28(r18)
   84918:	880d883a 	mov	r6,r17
   8491c:	800f883a 	mov	r7,r16
   84920:	9809883a 	mov	r4,r19
   84924:	183ee83a 	callr	r3
   84928:	88a3883a 	add	r17,r17,r2
   8492c:	80a1c83a 	sub	r16,r16,r2
   84930:	00bff616 	blt	zero,r2,8490c <_fflush_r+0x100>
   84934:	9080030b 	ldhu	r2,12(r18)
   84938:	00ffffc4 	movi	r3,-1
   8493c:	10801014 	ori	r2,r2,64
   84940:	9080030d 	sth	r2,12(r18)
   84944:	1805883a 	mov	r2,r3
   84948:	dfc00417 	ldw	ra,16(sp)
   8494c:	dcc00317 	ldw	r19,12(sp)
   84950:	dc800217 	ldw	r18,8(sp)
   84954:	dc400117 	ldw	r17,4(sp)
   84958:	dc000017 	ldw	r16,0(sp)
   8495c:	dec00504 	addi	sp,sp,20
   84960:	f800283a 	ret
   84964:	90800f17 	ldw	r2,60(r18)
   84968:	00bfbe16 	blt	zero,r2,84864 <_fflush_r+0x58>
   8496c:	0007883a 	mov	r3,zero
   84970:	1805883a 	mov	r2,r3
   84974:	dfc00417 	ldw	ra,16(sp)
   84978:	dcc00317 	ldw	r19,12(sp)
   8497c:	dc800217 	ldw	r18,8(sp)
   84980:	dc400117 	ldw	r17,4(sp)
   84984:	dc000017 	ldw	r16,0(sp)
   84988:	dec00504 	addi	sp,sp,20
   8498c:	f800283a 	ret
   84990:	0084aa40 	call	84aa4 <__sinit>
   84994:	003fa806 	br	84838 <_fflush_r+0x2c>
   84998:	90800517 	ldw	r2,20(r18)
   8499c:	90800215 	stw	r2,8(r18)
   849a0:	003fda06 	br	8490c <_fflush_r+0x100>
   849a4:	90800117 	ldw	r2,4(r18)
   849a8:	90c00c17 	ldw	r3,48(r18)
   849ac:	80a1c83a 	sub	r16,r16,r2
   849b0:	183fb426 	beq	r3,zero,84884 <_fflush_r+0x78>
   849b4:	90800f17 	ldw	r2,60(r18)
   849b8:	80a1c83a 	sub	r16,r16,r2
   849bc:	003fb106 	br	84884 <_fflush_r+0x78>
   849c0:	91400717 	ldw	r5,28(r18)
   849c4:	9809883a 	mov	r4,r19
   849c8:	000d883a 	mov	r6,zero
   849cc:	01c00044 	movi	r7,1
   849d0:	403ee83a 	callr	r8
   849d4:	1021883a 	mov	r16,r2
   849d8:	00bfffc4 	movi	r2,-1
   849dc:	80800226 	beq	r16,r2,849e8 <_fflush_r+0x1dc>
   849e0:	92000a17 	ldw	r8,40(r18)
   849e4:	003fa406 	br	84878 <_fflush_r+0x6c>
   849e8:	98c00017 	ldw	r3,0(r19)
   849ec:	00800744 	movi	r2,29
   849f0:	18bfde26 	beq	r3,r2,8496c <_fflush_r+0x160>
   849f4:	9080030b 	ldhu	r2,12(r18)
   849f8:	8007883a 	mov	r3,r16
   849fc:	10801014 	ori	r2,r2,64
   84a00:	9080030d 	sth	r2,12(r18)
   84a04:	003fcf06 	br	84944 <_fflush_r+0x138>

00084a08 <fflush>:
   84a08:	01400234 	movhi	r5,8
   84a0c:	29520304 	addi	r5,r5,18444
   84a10:	2007883a 	mov	r3,r4
   84a14:	20000526 	beq	r4,zero,84a2c <fflush+0x24>
   84a18:	00800274 	movhi	r2,9
   84a1c:	10bd2c04 	addi	r2,r2,-2896
   84a20:	11000017 	ldw	r4,0(r2)
   84a24:	180b883a 	mov	r5,r3
   84a28:	008480c1 	jmpi	8480c <_fflush_r>
   84a2c:	00800274 	movhi	r2,9
   84a30:	10bd2d04 	addi	r2,r2,-2892
   84a34:	11000017 	ldw	r4,0(r2)
   84a38:	008560c1 	jmpi	8560c <_fwalk_reent>

00084a3c <std>:
   84a3c:	00800234 	movhi	r2,8
   84a40:	109ee004 	addi	r2,r2,31616
   84a44:	20800b15 	stw	r2,44(r4)
   84a48:	00800234 	movhi	r2,8
   84a4c:	109f1b04 	addi	r2,r2,31852
   84a50:	20800815 	stw	r2,32(r4)
   84a54:	00c00234 	movhi	r3,8
   84a58:	18defc04 	addi	r3,r3,31728
   84a5c:	00800234 	movhi	r2,8
   84a60:	109ee204 	addi	r2,r2,31624
   84a64:	2140030d 	sth	r5,12(r4)
   84a68:	2180038d 	sth	r6,14(r4)
   84a6c:	20c00915 	stw	r3,36(r4)
   84a70:	20800a15 	stw	r2,40(r4)
   84a74:	20000015 	stw	zero,0(r4)
   84a78:	20000115 	stw	zero,4(r4)
   84a7c:	20000215 	stw	zero,8(r4)
   84a80:	20000415 	stw	zero,16(r4)
   84a84:	20000515 	stw	zero,20(r4)
   84a88:	20000615 	stw	zero,24(r4)
   84a8c:	21000715 	stw	r4,28(r4)
   84a90:	f800283a 	ret

00084a94 <__sfp_lock_acquire>:
   84a94:	f800283a 	ret

00084a98 <__sfp_lock_release>:
   84a98:	f800283a 	ret

00084a9c <__sinit_lock_acquire>:
   84a9c:	f800283a 	ret

00084aa0 <__sinit_lock_release>:
   84aa0:	f800283a 	ret

00084aa4 <__sinit>:
   84aa4:	20800e17 	ldw	r2,56(r4)
   84aa8:	defffd04 	addi	sp,sp,-12
   84aac:	dc400115 	stw	r17,4(sp)
   84ab0:	dc000015 	stw	r16,0(sp)
   84ab4:	dfc00215 	stw	ra,8(sp)
   84ab8:	04400044 	movi	r17,1
   84abc:	01400104 	movi	r5,4
   84ac0:	000d883a 	mov	r6,zero
   84ac4:	2021883a 	mov	r16,r4
   84ac8:	2200bb04 	addi	r8,r4,748
   84acc:	200f883a 	mov	r7,r4
   84ad0:	10000526 	beq	r2,zero,84ae8 <__sinit+0x44>
   84ad4:	dfc00217 	ldw	ra,8(sp)
   84ad8:	dc400117 	ldw	r17,4(sp)
   84adc:	dc000017 	ldw	r16,0(sp)
   84ae0:	dec00304 	addi	sp,sp,12
   84ae4:	f800283a 	ret
   84ae8:	21000117 	ldw	r4,4(r4)
   84aec:	00800234 	movhi	r2,8
   84af0:	1092e204 	addi	r2,r2,19336
   84af4:	00c000c4 	movi	r3,3
   84af8:	80800f15 	stw	r2,60(r16)
   84afc:	80c0b915 	stw	r3,740(r16)
   84b00:	8200ba15 	stw	r8,744(r16)
   84b04:	84400e15 	stw	r17,56(r16)
   84b08:	8000b815 	stw	zero,736(r16)
   84b0c:	0084a3c0 	call	84a3c <std>
   84b10:	81000217 	ldw	r4,8(r16)
   84b14:	880d883a 	mov	r6,r17
   84b18:	800f883a 	mov	r7,r16
   84b1c:	01400284 	movi	r5,10
   84b20:	0084a3c0 	call	84a3c <std>
   84b24:	81000317 	ldw	r4,12(r16)
   84b28:	800f883a 	mov	r7,r16
   84b2c:	01400484 	movi	r5,18
   84b30:	01800084 	movi	r6,2
   84b34:	dfc00217 	ldw	ra,8(sp)
   84b38:	dc400117 	ldw	r17,4(sp)
   84b3c:	dc000017 	ldw	r16,0(sp)
   84b40:	dec00304 	addi	sp,sp,12
   84b44:	0084a3c1 	jmpi	84a3c <std>

00084b48 <__fp_lock>:
   84b48:	0005883a 	mov	r2,zero
   84b4c:	f800283a 	ret

00084b50 <__fp_unlock>:
   84b50:	0005883a 	mov	r2,zero
   84b54:	f800283a 	ret

00084b58 <__fp_unlock_all>:
   84b58:	00800274 	movhi	r2,9
   84b5c:	10bd2c04 	addi	r2,r2,-2896
   84b60:	11000017 	ldw	r4,0(r2)
   84b64:	01400234 	movhi	r5,8
   84b68:	2952d404 	addi	r5,r5,19280
   84b6c:	00856d41 	jmpi	856d4 <_fwalk>

00084b70 <__fp_lock_all>:
   84b70:	00800274 	movhi	r2,9
   84b74:	10bd2c04 	addi	r2,r2,-2896
   84b78:	11000017 	ldw	r4,0(r2)
   84b7c:	01400234 	movhi	r5,8
   84b80:	2952d204 	addi	r5,r5,19272
   84b84:	00856d41 	jmpi	856d4 <_fwalk>

00084b88 <_cleanup_r>:
   84b88:	01400274 	movhi	r5,9
   84b8c:	29601204 	addi	r5,r5,-32696
   84b90:	00856d41 	jmpi	856d4 <_fwalk>

00084b94 <_cleanup>:
   84b94:	00800274 	movhi	r2,9
   84b98:	10bd2d04 	addi	r2,r2,-2892
   84b9c:	11000017 	ldw	r4,0(r2)
   84ba0:	0084b881 	jmpi	84b88 <_cleanup_r>

00084ba4 <__sfmoreglue>:
   84ba4:	defffc04 	addi	sp,sp,-16
   84ba8:	dc000015 	stw	r16,0(sp)
   84bac:	2821883a 	mov	r16,r5
   84bb0:	dc400115 	stw	r17,4(sp)
   84bb4:	01401704 	movi	r5,92
   84bb8:	2023883a 	mov	r17,r4
   84bbc:	8009883a 	mov	r4,r16
   84bc0:	dfc00315 	stw	ra,12(sp)
   84bc4:	dcc00215 	stw	r19,8(sp)
   84bc8:	008a1740 	call	8a174 <__mulsi3>
   84bcc:	11400304 	addi	r5,r2,12
   84bd0:	8809883a 	mov	r4,r17
   84bd4:	1027883a 	mov	r19,r2
   84bd8:	00859e40 	call	859e4 <_malloc_r>
   84bdc:	10c00304 	addi	r3,r2,12
   84be0:	1023883a 	mov	r17,r2
   84be4:	1809883a 	mov	r4,r3
   84be8:	980d883a 	mov	r6,r19
   84bec:	000b883a 	mov	r5,zero
   84bf0:	10000b26 	beq	r2,zero,84c20 <__sfmoreglue+0x7c>
   84bf4:	14000115 	stw	r16,4(r2)
   84bf8:	10c00215 	stw	r3,8(r2)
   84bfc:	10000015 	stw	zero,0(r2)
   84c00:	00863880 	call	86388 <memset>
   84c04:	8805883a 	mov	r2,r17
   84c08:	dfc00317 	ldw	ra,12(sp)
   84c0c:	dcc00217 	ldw	r19,8(sp)
   84c10:	dc400117 	ldw	r17,4(sp)
   84c14:	dc000017 	ldw	r16,0(sp)
   84c18:	dec00404 	addi	sp,sp,16
   84c1c:	f800283a 	ret
   84c20:	0023883a 	mov	r17,zero
   84c24:	8805883a 	mov	r2,r17
   84c28:	dfc00317 	ldw	ra,12(sp)
   84c2c:	dcc00217 	ldw	r19,8(sp)
   84c30:	dc400117 	ldw	r17,4(sp)
   84c34:	dc000017 	ldw	r16,0(sp)
   84c38:	dec00404 	addi	sp,sp,16
   84c3c:	f800283a 	ret

00084c40 <__sfp>:
   84c40:	defffd04 	addi	sp,sp,-12
   84c44:	00800274 	movhi	r2,9
   84c48:	10bd2d04 	addi	r2,r2,-2892
   84c4c:	dc000015 	stw	r16,0(sp)
   84c50:	14000017 	ldw	r16,0(r2)
   84c54:	dc400115 	stw	r17,4(sp)
   84c58:	dfc00215 	stw	ra,8(sp)
   84c5c:	80800e17 	ldw	r2,56(r16)
   84c60:	2023883a 	mov	r17,r4
   84c64:	10002626 	beq	r2,zero,84d00 <__sfp+0xc0>
   84c68:	8400b804 	addi	r16,r16,736
   84c6c:	80800117 	ldw	r2,4(r16)
   84c70:	81000217 	ldw	r4,8(r16)
   84c74:	10ffffc4 	addi	r3,r2,-1
   84c78:	18000916 	blt	r3,zero,84ca0 <__sfp+0x60>
   84c7c:	2080030f 	ldh	r2,12(r4)
   84c80:	10000b26 	beq	r2,zero,84cb0 <__sfp+0x70>
   84c84:	017fffc4 	movi	r5,-1
   84c88:	00000206 	br	84c94 <__sfp+0x54>
   84c8c:	2080030f 	ldh	r2,12(r4)
   84c90:	10000726 	beq	r2,zero,84cb0 <__sfp+0x70>
   84c94:	18ffffc4 	addi	r3,r3,-1
   84c98:	21001704 	addi	r4,r4,92
   84c9c:	197ffb1e 	bne	r3,r5,84c8c <__sfp+0x4c>
   84ca0:	80800017 	ldw	r2,0(r16)
   84ca4:	10001926 	beq	r2,zero,84d0c <__sfp+0xcc>
   84ca8:	1021883a 	mov	r16,r2
   84cac:	003fef06 	br	84c6c <__sfp+0x2c>
   84cb0:	00bfffc4 	movi	r2,-1
   84cb4:	00c00044 	movi	r3,1
   84cb8:	2080038d 	sth	r2,14(r4)
   84cbc:	20c0030d 	sth	r3,12(r4)
   84cc0:	20000015 	stw	zero,0(r4)
   84cc4:	20000215 	stw	zero,8(r4)
   84cc8:	20000115 	stw	zero,4(r4)
   84ccc:	20000415 	stw	zero,16(r4)
   84cd0:	20000515 	stw	zero,20(r4)
   84cd4:	20000615 	stw	zero,24(r4)
   84cd8:	20000c15 	stw	zero,48(r4)
   84cdc:	20000d15 	stw	zero,52(r4)
   84ce0:	20001115 	stw	zero,68(r4)
   84ce4:	20001215 	stw	zero,72(r4)
   84ce8:	2005883a 	mov	r2,r4
   84cec:	dfc00217 	ldw	ra,8(sp)
   84cf0:	dc400117 	ldw	r17,4(sp)
   84cf4:	dc000017 	ldw	r16,0(sp)
   84cf8:	dec00304 	addi	sp,sp,12
   84cfc:	f800283a 	ret
   84d00:	8009883a 	mov	r4,r16
   84d04:	0084aa40 	call	84aa4 <__sinit>
   84d08:	003fd706 	br	84c68 <__sfp+0x28>
   84d0c:	8809883a 	mov	r4,r17
   84d10:	01400104 	movi	r5,4
   84d14:	0084ba40 	call	84ba4 <__sfmoreglue>
   84d18:	80800015 	stw	r2,0(r16)
   84d1c:	103fe21e 	bne	r2,zero,84ca8 <__sfp+0x68>
   84d20:	00800304 	movi	r2,12
   84d24:	0009883a 	mov	r4,zero
   84d28:	88800015 	stw	r2,0(r17)
   84d2c:	003fee06 	br	84ce8 <__sfp+0xa8>

00084d30 <_malloc_trim_r>:
   84d30:	defffb04 	addi	sp,sp,-20
   84d34:	dcc00315 	stw	r19,12(sp)
   84d38:	04c00274 	movhi	r19,9
   84d3c:	9cf7a704 	addi	r19,r19,-8548
   84d40:	dc800215 	stw	r18,8(sp)
   84d44:	dc400115 	stw	r17,4(sp)
   84d48:	dc000015 	stw	r16,0(sp)
   84d4c:	2823883a 	mov	r17,r5
   84d50:	2025883a 	mov	r18,r4
   84d54:	dfc00415 	stw	ra,16(sp)
   84d58:	008aef80 	call	8aef8 <__malloc_lock>
   84d5c:	98800217 	ldw	r2,8(r19)
   84d60:	9009883a 	mov	r4,r18
   84d64:	000b883a 	mov	r5,zero
   84d68:	10c00117 	ldw	r3,4(r2)
   84d6c:	00bfff04 	movi	r2,-4
   84d70:	18a0703a 	and	r16,r3,r2
   84d74:	8463c83a 	sub	r17,r16,r17
   84d78:	8c43fbc4 	addi	r17,r17,4079
   84d7c:	8822d33a 	srli	r17,r17,12
   84d80:	0083ffc4 	movi	r2,4095
   84d84:	8c7fffc4 	addi	r17,r17,-1
   84d88:	8822933a 	slli	r17,r17,12
   84d8c:	1440060e 	bge	r2,r17,84da8 <_malloc_trim_r+0x78>
   84d90:	0087b100 	call	87b10 <_sbrk_r>
   84d94:	98c00217 	ldw	r3,8(r19)
   84d98:	9009883a 	mov	r4,r18
   84d9c:	044bc83a 	sub	r5,zero,r17
   84da0:	80c7883a 	add	r3,r16,r3
   84da4:	10c00926 	beq	r2,r3,84dcc <_malloc_trim_r+0x9c>
   84da8:	008af180 	call	8af18 <__malloc_unlock>
   84dac:	0005883a 	mov	r2,zero
   84db0:	dfc00417 	ldw	ra,16(sp)
   84db4:	dcc00317 	ldw	r19,12(sp)
   84db8:	dc800217 	ldw	r18,8(sp)
   84dbc:	dc400117 	ldw	r17,4(sp)
   84dc0:	dc000017 	ldw	r16,0(sp)
   84dc4:	dec00504 	addi	sp,sp,20
   84dc8:	f800283a 	ret
   84dcc:	9009883a 	mov	r4,r18
   84dd0:	0087b100 	call	87b10 <_sbrk_r>
   84dd4:	844dc83a 	sub	r6,r16,r17
   84dd8:	00ffffc4 	movi	r3,-1
   84ddc:	9009883a 	mov	r4,r18
   84de0:	000b883a 	mov	r5,zero
   84de4:	01c00274 	movhi	r7,9
   84de8:	39c49c04 	addi	r7,r7,4720
   84dec:	31800054 	ori	r6,r6,1
   84df0:	10c00926 	beq	r2,r3,84e18 <_malloc_trim_r+0xe8>
   84df4:	38800017 	ldw	r2,0(r7)
   84df8:	98c00217 	ldw	r3,8(r19)
   84dfc:	9009883a 	mov	r4,r18
   84e00:	1445c83a 	sub	r2,r2,r17
   84e04:	38800015 	stw	r2,0(r7)
   84e08:	19800115 	stw	r6,4(r3)
   84e0c:	008af180 	call	8af18 <__malloc_unlock>
   84e10:	00800044 	movi	r2,1
   84e14:	003fe606 	br	84db0 <_malloc_trim_r+0x80>
   84e18:	0087b100 	call	87b10 <_sbrk_r>
   84e1c:	99800217 	ldw	r6,8(r19)
   84e20:	100f883a 	mov	r7,r2
   84e24:	9009883a 	mov	r4,r18
   84e28:	1187c83a 	sub	r3,r2,r6
   84e2c:	008003c4 	movi	r2,15
   84e30:	19400054 	ori	r5,r3,1
   84e34:	10ffdc0e 	bge	r2,r3,84da8 <_malloc_trim_r+0x78>
   84e38:	00800274 	movhi	r2,9
   84e3c:	10bd3104 	addi	r2,r2,-2876
   84e40:	10c00017 	ldw	r3,0(r2)
   84e44:	00800274 	movhi	r2,9
   84e48:	10849c04 	addi	r2,r2,4720
   84e4c:	31400115 	stw	r5,4(r6)
   84e50:	38c7c83a 	sub	r3,r7,r3
   84e54:	10c00015 	stw	r3,0(r2)
   84e58:	003fd306 	br	84da8 <_malloc_trim_r+0x78>

00084e5c <_free_r>:
   84e5c:	defffd04 	addi	sp,sp,-12
   84e60:	dc400115 	stw	r17,4(sp)
   84e64:	dc000015 	stw	r16,0(sp)
   84e68:	dfc00215 	stw	ra,8(sp)
   84e6c:	2821883a 	mov	r16,r5
   84e70:	2023883a 	mov	r17,r4
   84e74:	28005a26 	beq	r5,zero,84fe0 <_free_r+0x184>
   84e78:	008aef80 	call	8aef8 <__malloc_lock>
   84e7c:	823ffe04 	addi	r8,r16,-8
   84e80:	41400117 	ldw	r5,4(r8)
   84e84:	00bfff84 	movi	r2,-2
   84e88:	02800274 	movhi	r10,9
   84e8c:	52b7a704 	addi	r10,r10,-8548
   84e90:	288e703a 	and	r7,r5,r2
   84e94:	41cd883a 	add	r6,r8,r7
   84e98:	30c00117 	ldw	r3,4(r6)
   84e9c:	51000217 	ldw	r4,8(r10)
   84ea0:	00bfff04 	movi	r2,-4
   84ea4:	1892703a 	and	r9,r3,r2
   84ea8:	5017883a 	mov	r11,r10
   84eac:	31006726 	beq	r6,r4,8504c <_free_r+0x1f0>
   84eb0:	2880004c 	andi	r2,r5,1
   84eb4:	1005003a 	cmpeq	r2,r2,zero
   84eb8:	32400115 	stw	r9,4(r6)
   84ebc:	10001a1e 	bne	r2,zero,84f28 <_free_r+0xcc>
   84ec0:	000b883a 	mov	r5,zero
   84ec4:	3247883a 	add	r3,r6,r9
   84ec8:	18800117 	ldw	r2,4(r3)
   84ecc:	1080004c 	andi	r2,r2,1
   84ed0:	1000231e 	bne	r2,zero,84f60 <_free_r+0x104>
   84ed4:	280ac03a 	cmpne	r5,r5,zero
   84ed8:	3a4f883a 	add	r7,r7,r9
   84edc:	2800451e 	bne	r5,zero,84ff4 <_free_r+0x198>
   84ee0:	31000217 	ldw	r4,8(r6)
   84ee4:	00800274 	movhi	r2,9
   84ee8:	10b7a904 	addi	r2,r2,-8540
   84eec:	20807b26 	beq	r4,r2,850dc <_free_r+0x280>
   84ef0:	30800317 	ldw	r2,12(r6)
   84ef4:	3a07883a 	add	r3,r7,r8
   84ef8:	19c00015 	stw	r7,0(r3)
   84efc:	11000215 	stw	r4,8(r2)
   84f00:	20800315 	stw	r2,12(r4)
   84f04:	38800054 	ori	r2,r7,1
   84f08:	40800115 	stw	r2,4(r8)
   84f0c:	28001a26 	beq	r5,zero,84f78 <_free_r+0x11c>
   84f10:	8809883a 	mov	r4,r17
   84f14:	dfc00217 	ldw	ra,8(sp)
   84f18:	dc400117 	ldw	r17,4(sp)
   84f1c:	dc000017 	ldw	r16,0(sp)
   84f20:	dec00304 	addi	sp,sp,12
   84f24:	008af181 	jmpi	8af18 <__malloc_unlock>
   84f28:	80bffe17 	ldw	r2,-8(r16)
   84f2c:	50c00204 	addi	r3,r10,8
   84f30:	4091c83a 	sub	r8,r8,r2
   84f34:	41000217 	ldw	r4,8(r8)
   84f38:	388f883a 	add	r7,r7,r2
   84f3c:	20c06126 	beq	r4,r3,850c4 <_free_r+0x268>
   84f40:	40800317 	ldw	r2,12(r8)
   84f44:	3247883a 	add	r3,r6,r9
   84f48:	000b883a 	mov	r5,zero
   84f4c:	11000215 	stw	r4,8(r2)
   84f50:	20800315 	stw	r2,12(r4)
   84f54:	18800117 	ldw	r2,4(r3)
   84f58:	1080004c 	andi	r2,r2,1
   84f5c:	103fdd26 	beq	r2,zero,84ed4 <_free_r+0x78>
   84f60:	38800054 	ori	r2,r7,1
   84f64:	3a07883a 	add	r3,r7,r8
   84f68:	280ac03a 	cmpne	r5,r5,zero
   84f6c:	40800115 	stw	r2,4(r8)
   84f70:	19c00015 	stw	r7,0(r3)
   84f74:	283fe61e 	bne	r5,zero,84f10 <_free_r+0xb4>
   84f78:	00807fc4 	movi	r2,511
   84f7c:	11c01f2e 	bgeu	r2,r7,84ffc <_free_r+0x1a0>
   84f80:	3806d27a 	srli	r3,r7,9
   84f84:	1800481e 	bne	r3,zero,850a8 <_free_r+0x24c>
   84f88:	3804d0fa 	srli	r2,r7,3
   84f8c:	100690fa 	slli	r3,r2,3
   84f90:	1acd883a 	add	r6,r3,r11
   84f94:	31400217 	ldw	r5,8(r6)
   84f98:	31405926 	beq	r6,r5,85100 <_free_r+0x2a4>
   84f9c:	28800117 	ldw	r2,4(r5)
   84fa0:	00ffff04 	movi	r3,-4
   84fa4:	10c4703a 	and	r2,r2,r3
   84fa8:	3880022e 	bgeu	r7,r2,84fb4 <_free_r+0x158>
   84fac:	29400217 	ldw	r5,8(r5)
   84fb0:	317ffa1e 	bne	r6,r5,84f9c <_free_r+0x140>
   84fb4:	29800317 	ldw	r6,12(r5)
   84fb8:	41800315 	stw	r6,12(r8)
   84fbc:	41400215 	stw	r5,8(r8)
   84fc0:	8809883a 	mov	r4,r17
   84fc4:	2a000315 	stw	r8,12(r5)
   84fc8:	32000215 	stw	r8,8(r6)
   84fcc:	dfc00217 	ldw	ra,8(sp)
   84fd0:	dc400117 	ldw	r17,4(sp)
   84fd4:	dc000017 	ldw	r16,0(sp)
   84fd8:	dec00304 	addi	sp,sp,12
   84fdc:	008af181 	jmpi	8af18 <__malloc_unlock>
   84fe0:	dfc00217 	ldw	ra,8(sp)
   84fe4:	dc400117 	ldw	r17,4(sp)
   84fe8:	dc000017 	ldw	r16,0(sp)
   84fec:	dec00304 	addi	sp,sp,12
   84ff0:	f800283a 	ret
   84ff4:	31000217 	ldw	r4,8(r6)
   84ff8:	003fbd06 	br	84ef0 <_free_r+0x94>
   84ffc:	3806d0fa 	srli	r3,r7,3
   85000:	00800044 	movi	r2,1
   85004:	51400117 	ldw	r5,4(r10)
   85008:	180890fa 	slli	r4,r3,3
   8500c:	1807d0ba 	srai	r3,r3,2
   85010:	22c9883a 	add	r4,r4,r11
   85014:	21800217 	ldw	r6,8(r4)
   85018:	10c4983a 	sll	r2,r2,r3
   8501c:	41000315 	stw	r4,12(r8)
   85020:	41800215 	stw	r6,8(r8)
   85024:	288ab03a 	or	r5,r5,r2
   85028:	22000215 	stw	r8,8(r4)
   8502c:	8809883a 	mov	r4,r17
   85030:	51400115 	stw	r5,4(r10)
   85034:	32000315 	stw	r8,12(r6)
   85038:	dfc00217 	ldw	ra,8(sp)
   8503c:	dc400117 	ldw	r17,4(sp)
   85040:	dc000017 	ldw	r16,0(sp)
   85044:	dec00304 	addi	sp,sp,12
   85048:	008af181 	jmpi	8af18 <__malloc_unlock>
   8504c:	2880004c 	andi	r2,r5,1
   85050:	3a4d883a 	add	r6,r7,r9
   85054:	1000071e 	bne	r2,zero,85074 <_free_r+0x218>
   85058:	80bffe17 	ldw	r2,-8(r16)
   8505c:	4091c83a 	sub	r8,r8,r2
   85060:	41000317 	ldw	r4,12(r8)
   85064:	40c00217 	ldw	r3,8(r8)
   85068:	308d883a 	add	r6,r6,r2
   8506c:	20c00215 	stw	r3,8(r4)
   85070:	19000315 	stw	r4,12(r3)
   85074:	00800274 	movhi	r2,9
   85078:	10bd3004 	addi	r2,r2,-2880
   8507c:	11000017 	ldw	r4,0(r2)
   85080:	30c00054 	ori	r3,r6,1
   85084:	52000215 	stw	r8,8(r10)
   85088:	40c00115 	stw	r3,4(r8)
   8508c:	313fa036 	bltu	r6,r4,84f10 <_free_r+0xb4>
   85090:	00800274 	movhi	r2,9
   85094:	10849204 	addi	r2,r2,4680
   85098:	11400017 	ldw	r5,0(r2)
   8509c:	8809883a 	mov	r4,r17
   850a0:	0084d300 	call	84d30 <_malloc_trim_r>
   850a4:	003f9a06 	br	84f10 <_free_r+0xb4>
   850a8:	00800104 	movi	r2,4
   850ac:	10c0072e 	bgeu	r2,r3,850cc <_free_r+0x270>
   850b0:	00800504 	movi	r2,20
   850b4:	10c01936 	bltu	r2,r3,8511c <_free_r+0x2c0>
   850b8:	188016c4 	addi	r2,r3,91
   850bc:	100690fa 	slli	r3,r2,3
   850c0:	003fb306 	br	84f90 <_free_r+0x134>
   850c4:	01400044 	movi	r5,1
   850c8:	003f7e06 	br	84ec4 <_free_r+0x68>
   850cc:	3804d1ba 	srli	r2,r7,6
   850d0:	10800e04 	addi	r2,r2,56
   850d4:	100690fa 	slli	r3,r2,3
   850d8:	003fad06 	br	84f90 <_free_r+0x134>
   850dc:	22000315 	stw	r8,12(r4)
   850e0:	22000215 	stw	r8,8(r4)
   850e4:	3a05883a 	add	r2,r7,r8
   850e8:	38c00054 	ori	r3,r7,1
   850ec:	11c00015 	stw	r7,0(r2)
   850f0:	41000215 	stw	r4,8(r8)
   850f4:	40c00115 	stw	r3,4(r8)
   850f8:	41000315 	stw	r4,12(r8)
   850fc:	003f8406 	br	84f10 <_free_r+0xb4>
   85100:	1005d0ba 	srai	r2,r2,2
   85104:	00c00044 	movi	r3,1
   85108:	51000117 	ldw	r4,4(r10)
   8510c:	1886983a 	sll	r3,r3,r2
   85110:	20c8b03a 	or	r4,r4,r3
   85114:	51000115 	stw	r4,4(r10)
   85118:	003fa706 	br	84fb8 <_free_r+0x15c>
   8511c:	00801504 	movi	r2,84
   85120:	10c00436 	bltu	r2,r3,85134 <_free_r+0x2d8>
   85124:	3804d33a 	srli	r2,r7,12
   85128:	10801b84 	addi	r2,r2,110
   8512c:	100690fa 	slli	r3,r2,3
   85130:	003f9706 	br	84f90 <_free_r+0x134>
   85134:	00805504 	movi	r2,340
   85138:	10c00436 	bltu	r2,r3,8514c <_free_r+0x2f0>
   8513c:	3804d3fa 	srli	r2,r7,15
   85140:	10801dc4 	addi	r2,r2,119
   85144:	100690fa 	slli	r3,r2,3
   85148:	003f9106 	br	84f90 <_free_r+0x134>
   8514c:	00815504 	movi	r2,1364
   85150:	10c0032e 	bgeu	r2,r3,85160 <_free_r+0x304>
   85154:	00801f84 	movi	r2,126
   85158:	00c0fc04 	movi	r3,1008
   8515c:	003f8c06 	br	84f90 <_free_r+0x134>
   85160:	3804d4ba 	srli	r2,r7,18
   85164:	10801f04 	addi	r2,r2,124
   85168:	100690fa 	slli	r3,r2,3
   8516c:	003f8806 	br	84f90 <_free_r+0x134>

00085170 <__sfvwrite_r>:
   85170:	30800217 	ldw	r2,8(r6)
   85174:	defff504 	addi	sp,sp,-44
   85178:	df000915 	stw	fp,36(sp)
   8517c:	dd800715 	stw	r22,28(sp)
   85180:	dc800315 	stw	r18,12(sp)
   85184:	dfc00a15 	stw	ra,40(sp)
   85188:	ddc00815 	stw	r23,32(sp)
   8518c:	dd400615 	stw	r21,24(sp)
   85190:	dd000515 	stw	r20,20(sp)
   85194:	dcc00415 	stw	r19,16(sp)
   85198:	dc400215 	stw	r17,8(sp)
   8519c:	dc000115 	stw	r16,4(sp)
   851a0:	302d883a 	mov	r22,r6
   851a4:	2039883a 	mov	fp,r4
   851a8:	2825883a 	mov	r18,r5
   851ac:	10001c26 	beq	r2,zero,85220 <__sfvwrite_r+0xb0>
   851b0:	29c0030b 	ldhu	r7,12(r5)
   851b4:	3880020c 	andi	r2,r7,8
   851b8:	10002726 	beq	r2,zero,85258 <__sfvwrite_r+0xe8>
   851bc:	28800417 	ldw	r2,16(r5)
   851c0:	10002526 	beq	r2,zero,85258 <__sfvwrite_r+0xe8>
   851c4:	3880008c 	andi	r2,r7,2
   851c8:	b5400017 	ldw	r21,0(r22)
   851cc:	10002826 	beq	r2,zero,85270 <__sfvwrite_r+0x100>
   851d0:	0021883a 	mov	r16,zero
   851d4:	0023883a 	mov	r17,zero
   851d8:	880d883a 	mov	r6,r17
   851dc:	e009883a 	mov	r4,fp
   851e0:	00810004 	movi	r2,1024
   851e4:	80006e26 	beq	r16,zero,853a0 <__sfvwrite_r+0x230>
   851e8:	800f883a 	mov	r7,r16
   851ec:	91400717 	ldw	r5,28(r18)
   851f0:	1400012e 	bgeu	r2,r16,851f8 <__sfvwrite_r+0x88>
   851f4:	100f883a 	mov	r7,r2
   851f8:	90c00917 	ldw	r3,36(r18)
   851fc:	183ee83a 	callr	r3
   85200:	1007883a 	mov	r3,r2
   85204:	80a1c83a 	sub	r16,r16,r2
   85208:	88a3883a 	add	r17,r17,r2
   8520c:	00806d0e 	bge	zero,r2,853c4 <__sfvwrite_r+0x254>
   85210:	b0800217 	ldw	r2,8(r22)
   85214:	10c5c83a 	sub	r2,r2,r3
   85218:	b0800215 	stw	r2,8(r22)
   8521c:	103fee1e 	bne	r2,zero,851d8 <__sfvwrite_r+0x68>
   85220:	0009883a 	mov	r4,zero
   85224:	2005883a 	mov	r2,r4
   85228:	dfc00a17 	ldw	ra,40(sp)
   8522c:	df000917 	ldw	fp,36(sp)
   85230:	ddc00817 	ldw	r23,32(sp)
   85234:	dd800717 	ldw	r22,28(sp)
   85238:	dd400617 	ldw	r21,24(sp)
   8523c:	dd000517 	ldw	r20,20(sp)
   85240:	dcc00417 	ldw	r19,16(sp)
   85244:	dc800317 	ldw	r18,12(sp)
   85248:	dc400217 	ldw	r17,8(sp)
   8524c:	dc000117 	ldw	r16,4(sp)
   85250:	dec00b04 	addi	sp,sp,44
   85254:	f800283a 	ret
   85258:	0082ed80 	call	82ed8 <__swsetup_r>
   8525c:	1000e41e 	bne	r2,zero,855f0 <__sfvwrite_r+0x480>
   85260:	91c0030b 	ldhu	r7,12(r18)
   85264:	b5400017 	ldw	r21,0(r22)
   85268:	3880008c 	andi	r2,r7,2
   8526c:	103fd81e 	bne	r2,zero,851d0 <__sfvwrite_r+0x60>
   85270:	3880004c 	andi	r2,r7,1
   85274:	1005003a 	cmpeq	r2,r2,zero
   85278:	10005726 	beq	r2,zero,853d8 <__sfvwrite_r+0x268>
   8527c:	0029883a 	mov	r20,zero
   85280:	002f883a 	mov	r23,zero
   85284:	a0004226 	beq	r20,zero,85390 <__sfvwrite_r+0x220>
   85288:	3880800c 	andi	r2,r7,512
   8528c:	94000217 	ldw	r16,8(r18)
   85290:	10008b26 	beq	r2,zero,854c0 <__sfvwrite_r+0x350>
   85294:	800d883a 	mov	r6,r16
   85298:	a400a536 	bltu	r20,r16,85530 <__sfvwrite_r+0x3c0>
   8529c:	3881200c 	andi	r2,r7,1152
   852a0:	10002726 	beq	r2,zero,85340 <__sfvwrite_r+0x1d0>
   852a4:	90800517 	ldw	r2,20(r18)
   852a8:	92000417 	ldw	r8,16(r18)
   852ac:	91400017 	ldw	r5,0(r18)
   852b0:	1087883a 	add	r3,r2,r2
   852b4:	1887883a 	add	r3,r3,r2
   852b8:	1808d7fa 	srli	r4,r3,31
   852bc:	2a21c83a 	sub	r16,r5,r8
   852c0:	80800044 	addi	r2,r16,1
   852c4:	20c9883a 	add	r4,r4,r3
   852c8:	2027d07a 	srai	r19,r4,1
   852cc:	a085883a 	add	r2,r20,r2
   852d0:	980d883a 	mov	r6,r19
   852d4:	9880022e 	bgeu	r19,r2,852e0 <__sfvwrite_r+0x170>
   852d8:	1027883a 	mov	r19,r2
   852dc:	100d883a 	mov	r6,r2
   852e0:	3881000c 	andi	r2,r7,1024
   852e4:	1000b826 	beq	r2,zero,855c8 <__sfvwrite_r+0x458>
   852e8:	300b883a 	mov	r5,r6
   852ec:	e009883a 	mov	r4,fp
   852f0:	00859e40 	call	859e4 <_malloc_r>
   852f4:	10003126 	beq	r2,zero,853bc <__sfvwrite_r+0x24c>
   852f8:	91400417 	ldw	r5,16(r18)
   852fc:	1009883a 	mov	r4,r2
   85300:	800d883a 	mov	r6,r16
   85304:	1023883a 	mov	r17,r2
   85308:	00862080 	call	86208 <memcpy>
   8530c:	90c0030b 	ldhu	r3,12(r18)
   85310:	00beffc4 	movi	r2,-1025
   85314:	1886703a 	and	r3,r3,r2
   85318:	18c02014 	ori	r3,r3,128
   8531c:	90c0030d 	sth	r3,12(r18)
   85320:	9c07c83a 	sub	r3,r19,r16
   85324:	8c05883a 	add	r2,r17,r16
   85328:	a00d883a 	mov	r6,r20
   8532c:	a021883a 	mov	r16,r20
   85330:	90800015 	stw	r2,0(r18)
   85334:	90c00215 	stw	r3,8(r18)
   85338:	94400415 	stw	r17,16(r18)
   8533c:	94c00515 	stw	r19,20(r18)
   85340:	91000017 	ldw	r4,0(r18)
   85344:	b80b883a 	mov	r5,r23
   85348:	a023883a 	mov	r17,r20
   8534c:	00862a80 	call	862a8 <memmove>
   85350:	90c00217 	ldw	r3,8(r18)
   85354:	90800017 	ldw	r2,0(r18)
   85358:	a027883a 	mov	r19,r20
   8535c:	1c07c83a 	sub	r3,r3,r16
   85360:	1405883a 	add	r2,r2,r16
   85364:	90c00215 	stw	r3,8(r18)
   85368:	a021883a 	mov	r16,r20
   8536c:	90800015 	stw	r2,0(r18)
   85370:	b0800217 	ldw	r2,8(r22)
   85374:	1405c83a 	sub	r2,r2,r16
   85378:	b0800215 	stw	r2,8(r22)
   8537c:	103fa826 	beq	r2,zero,85220 <__sfvwrite_r+0xb0>
   85380:	a469c83a 	sub	r20,r20,r17
   85384:	91c0030b 	ldhu	r7,12(r18)
   85388:	bcef883a 	add	r23,r23,r19
   8538c:	a03fbe1e 	bne	r20,zero,85288 <__sfvwrite_r+0x118>
   85390:	adc00017 	ldw	r23,0(r21)
   85394:	ad000117 	ldw	r20,4(r21)
   85398:	ad400204 	addi	r21,r21,8
   8539c:	003fb906 	br	85284 <__sfvwrite_r+0x114>
   853a0:	ac400017 	ldw	r17,0(r21)
   853a4:	ac000117 	ldw	r16,4(r21)
   853a8:	ad400204 	addi	r21,r21,8
   853ac:	003f8a06 	br	851d8 <__sfvwrite_r+0x68>
   853b0:	91400417 	ldw	r5,16(r18)
   853b4:	e009883a 	mov	r4,fp
   853b8:	0084e5c0 	call	84e5c <_free_r>
   853bc:	00800304 	movi	r2,12
   853c0:	e0800015 	stw	r2,0(fp)
   853c4:	9080030b 	ldhu	r2,12(r18)
   853c8:	013fffc4 	movi	r4,-1
   853cc:	10801014 	ori	r2,r2,64
   853d0:	9080030d 	sth	r2,12(r18)
   853d4:	003f9306 	br	85224 <__sfvwrite_r+0xb4>
   853d8:	0027883a 	mov	r19,zero
   853dc:	002f883a 	mov	r23,zero
   853e0:	d8000015 	stw	zero,0(sp)
   853e4:	0029883a 	mov	r20,zero
   853e8:	98001e26 	beq	r19,zero,85464 <__sfvwrite_r+0x2f4>
   853ec:	d8c00017 	ldw	r3,0(sp)
   853f0:	1804c03a 	cmpne	r2,r3,zero
   853f4:	10005e26 	beq	r2,zero,85570 <__sfvwrite_r+0x400>
   853f8:	9821883a 	mov	r16,r19
   853fc:	a4c0012e 	bgeu	r20,r19,85404 <__sfvwrite_r+0x294>
   85400:	a021883a 	mov	r16,r20
   85404:	91000017 	ldw	r4,0(r18)
   85408:	90800417 	ldw	r2,16(r18)
   8540c:	91800217 	ldw	r6,8(r18)
   85410:	91c00517 	ldw	r7,20(r18)
   85414:	1100022e 	bgeu	r2,r4,85420 <__sfvwrite_r+0x2b0>
   85418:	31e3883a 	add	r17,r6,r7
   8541c:	8c001616 	blt	r17,r16,85478 <__sfvwrite_r+0x308>
   85420:	81c03816 	blt	r16,r7,85504 <__sfvwrite_r+0x394>
   85424:	90c00917 	ldw	r3,36(r18)
   85428:	91400717 	ldw	r5,28(r18)
   8542c:	e009883a 	mov	r4,fp
   85430:	b80d883a 	mov	r6,r23
   85434:	183ee83a 	callr	r3
   85438:	1023883a 	mov	r17,r2
   8543c:	00bfe10e 	bge	zero,r2,853c4 <__sfvwrite_r+0x254>
   85440:	a469c83a 	sub	r20,r20,r17
   85444:	a0001826 	beq	r20,zero,854a8 <__sfvwrite_r+0x338>
   85448:	b0800217 	ldw	r2,8(r22)
   8544c:	1445c83a 	sub	r2,r2,r17
   85450:	b0800215 	stw	r2,8(r22)
   85454:	103f7226 	beq	r2,zero,85220 <__sfvwrite_r+0xb0>
   85458:	9c67c83a 	sub	r19,r19,r17
   8545c:	bc6f883a 	add	r23,r23,r17
   85460:	983fe21e 	bne	r19,zero,853ec <__sfvwrite_r+0x27c>
   85464:	adc00017 	ldw	r23,0(r21)
   85468:	acc00117 	ldw	r19,4(r21)
   8546c:	ad400204 	addi	r21,r21,8
   85470:	d8000015 	stw	zero,0(sp)
   85474:	003fdc06 	br	853e8 <__sfvwrite_r+0x278>
   85478:	b80b883a 	mov	r5,r23
   8547c:	880d883a 	mov	r6,r17
   85480:	00862a80 	call	862a8 <memmove>
   85484:	90c00017 	ldw	r3,0(r18)
   85488:	e009883a 	mov	r4,fp
   8548c:	900b883a 	mov	r5,r18
   85490:	1c47883a 	add	r3,r3,r17
   85494:	90c00015 	stw	r3,0(r18)
   85498:	008480c0 	call	8480c <_fflush_r>
   8549c:	103fc91e 	bne	r2,zero,853c4 <__sfvwrite_r+0x254>
   854a0:	a469c83a 	sub	r20,r20,r17
   854a4:	a03fe81e 	bne	r20,zero,85448 <__sfvwrite_r+0x2d8>
   854a8:	e009883a 	mov	r4,fp
   854ac:	900b883a 	mov	r5,r18
   854b0:	008480c0 	call	8480c <_fflush_r>
   854b4:	103fc31e 	bne	r2,zero,853c4 <__sfvwrite_r+0x254>
   854b8:	d8000015 	stw	zero,0(sp)
   854bc:	003fe206 	br	85448 <__sfvwrite_r+0x2d8>
   854c0:	91000017 	ldw	r4,0(r18)
   854c4:	90800417 	ldw	r2,16(r18)
   854c8:	1100022e 	bgeu	r2,r4,854d4 <__sfvwrite_r+0x364>
   854cc:	8023883a 	mov	r17,r16
   854d0:	85003136 	bltu	r16,r20,85598 <__sfvwrite_r+0x428>
   854d4:	91c00517 	ldw	r7,20(r18)
   854d8:	a1c01836 	bltu	r20,r7,8553c <__sfvwrite_r+0x3cc>
   854dc:	90c00917 	ldw	r3,36(r18)
   854e0:	91400717 	ldw	r5,28(r18)
   854e4:	e009883a 	mov	r4,fp
   854e8:	b80d883a 	mov	r6,r23
   854ec:	183ee83a 	callr	r3
   854f0:	1021883a 	mov	r16,r2
   854f4:	00bfb30e 	bge	zero,r2,853c4 <__sfvwrite_r+0x254>
   854f8:	1023883a 	mov	r17,r2
   854fc:	1027883a 	mov	r19,r2
   85500:	003f9b06 	br	85370 <__sfvwrite_r+0x200>
   85504:	b80b883a 	mov	r5,r23
   85508:	800d883a 	mov	r6,r16
   8550c:	00862a80 	call	862a8 <memmove>
   85510:	90c00217 	ldw	r3,8(r18)
   85514:	90800017 	ldw	r2,0(r18)
   85518:	8023883a 	mov	r17,r16
   8551c:	1c07c83a 	sub	r3,r3,r16
   85520:	1405883a 	add	r2,r2,r16
   85524:	90c00215 	stw	r3,8(r18)
   85528:	90800015 	stw	r2,0(r18)
   8552c:	003fc406 	br	85440 <__sfvwrite_r+0x2d0>
   85530:	a00d883a 	mov	r6,r20
   85534:	a021883a 	mov	r16,r20
   85538:	003f8106 	br	85340 <__sfvwrite_r+0x1d0>
   8553c:	b80b883a 	mov	r5,r23
   85540:	a00d883a 	mov	r6,r20
   85544:	00862a80 	call	862a8 <memmove>
   85548:	90c00217 	ldw	r3,8(r18)
   8554c:	90800017 	ldw	r2,0(r18)
   85550:	a021883a 	mov	r16,r20
   85554:	1d07c83a 	sub	r3,r3,r20
   85558:	1505883a 	add	r2,r2,r20
   8555c:	a023883a 	mov	r17,r20
   85560:	a027883a 	mov	r19,r20
   85564:	90c00215 	stw	r3,8(r18)
   85568:	90800015 	stw	r2,0(r18)
   8556c:	003f8006 	br	85370 <__sfvwrite_r+0x200>
   85570:	b809883a 	mov	r4,r23
   85574:	01400284 	movi	r5,10
   85578:	980d883a 	mov	r6,r19
   8557c:	00861240 	call	86124 <memchr>
   85580:	10001726 	beq	r2,zero,855e0 <__sfvwrite_r+0x470>
   85584:	15c5c83a 	sub	r2,r2,r23
   85588:	15000044 	addi	r20,r2,1
   8558c:	00800044 	movi	r2,1
   85590:	d8800015 	stw	r2,0(sp)
   85594:	003f9806 	br	853f8 <__sfvwrite_r+0x288>
   85598:	b80b883a 	mov	r5,r23
   8559c:	800d883a 	mov	r6,r16
   855a0:	00862a80 	call	862a8 <memmove>
   855a4:	90c00017 	ldw	r3,0(r18)
   855a8:	e009883a 	mov	r4,fp
   855ac:	900b883a 	mov	r5,r18
   855b0:	1c07883a 	add	r3,r3,r16
   855b4:	90c00015 	stw	r3,0(r18)
   855b8:	8027883a 	mov	r19,r16
   855bc:	008480c0 	call	8480c <_fflush_r>
   855c0:	103f6b26 	beq	r2,zero,85370 <__sfvwrite_r+0x200>
   855c4:	003f7f06 	br	853c4 <__sfvwrite_r+0x254>
   855c8:	400b883a 	mov	r5,r8
   855cc:	e009883a 	mov	r4,fp
   855d0:	00874ac0 	call	874ac <_realloc_r>
   855d4:	103f7626 	beq	r2,zero,853b0 <__sfvwrite_r+0x240>
   855d8:	1023883a 	mov	r17,r2
   855dc:	003f5006 	br	85320 <__sfvwrite_r+0x1b0>
   855e0:	00c00044 	movi	r3,1
   855e4:	9d000044 	addi	r20,r19,1
   855e8:	d8c00015 	stw	r3,0(sp)
   855ec:	003f8206 	br	853f8 <__sfvwrite_r+0x288>
   855f0:	9080030b 	ldhu	r2,12(r18)
   855f4:	00c00244 	movi	r3,9
   855f8:	013fffc4 	movi	r4,-1
   855fc:	10801014 	ori	r2,r2,64
   85600:	9080030d 	sth	r2,12(r18)
   85604:	e0c00015 	stw	r3,0(fp)
   85608:	003f0606 	br	85224 <__sfvwrite_r+0xb4>

0008560c <_fwalk_reent>:
   8560c:	defff704 	addi	sp,sp,-36
   85610:	dcc00315 	stw	r19,12(sp)
   85614:	24c0b804 	addi	r19,r4,736
   85618:	dd800615 	stw	r22,24(sp)
   8561c:	dd400515 	stw	r21,20(sp)
   85620:	dfc00815 	stw	ra,32(sp)
   85624:	ddc00715 	stw	r23,28(sp)
   85628:	dd000415 	stw	r20,16(sp)
   8562c:	dc800215 	stw	r18,8(sp)
   85630:	dc400115 	stw	r17,4(sp)
   85634:	dc000015 	stw	r16,0(sp)
   85638:	202b883a 	mov	r21,r4
   8563c:	282d883a 	mov	r22,r5
   85640:	0084a940 	call	84a94 <__sfp_lock_acquire>
   85644:	98002126 	beq	r19,zero,856cc <_fwalk_reent+0xc0>
   85648:	002f883a 	mov	r23,zero
   8564c:	9c800117 	ldw	r18,4(r19)
   85650:	9c000217 	ldw	r16,8(r19)
   85654:	90bfffc4 	addi	r2,r18,-1
   85658:	10000d16 	blt	r2,zero,85690 <_fwalk_reent+0x84>
   8565c:	0023883a 	mov	r17,zero
   85660:	053fffc4 	movi	r20,-1
   85664:	8080030f 	ldh	r2,12(r16)
   85668:	8c400044 	addi	r17,r17,1
   8566c:	10000626 	beq	r2,zero,85688 <_fwalk_reent+0x7c>
   85670:	8080038f 	ldh	r2,14(r16)
   85674:	800b883a 	mov	r5,r16
   85678:	a809883a 	mov	r4,r21
   8567c:	15000226 	beq	r2,r20,85688 <_fwalk_reent+0x7c>
   85680:	b03ee83a 	callr	r22
   85684:	b8aeb03a 	or	r23,r23,r2
   85688:	84001704 	addi	r16,r16,92
   8568c:	947ff51e 	bne	r18,r17,85664 <_fwalk_reent+0x58>
   85690:	9cc00017 	ldw	r19,0(r19)
   85694:	983fed1e 	bne	r19,zero,8564c <_fwalk_reent+0x40>
   85698:	0084a980 	call	84a98 <__sfp_lock_release>
   8569c:	b805883a 	mov	r2,r23
   856a0:	dfc00817 	ldw	ra,32(sp)
   856a4:	ddc00717 	ldw	r23,28(sp)
   856a8:	dd800617 	ldw	r22,24(sp)
   856ac:	dd400517 	ldw	r21,20(sp)
   856b0:	dd000417 	ldw	r20,16(sp)
   856b4:	dcc00317 	ldw	r19,12(sp)
   856b8:	dc800217 	ldw	r18,8(sp)
   856bc:	dc400117 	ldw	r17,4(sp)
   856c0:	dc000017 	ldw	r16,0(sp)
   856c4:	dec00904 	addi	sp,sp,36
   856c8:	f800283a 	ret
   856cc:	002f883a 	mov	r23,zero
   856d0:	003ff106 	br	85698 <_fwalk_reent+0x8c>

000856d4 <_fwalk>:
   856d4:	defff804 	addi	sp,sp,-32
   856d8:	dcc00315 	stw	r19,12(sp)
   856dc:	24c0b804 	addi	r19,r4,736
   856e0:	dd400515 	stw	r21,20(sp)
   856e4:	dfc00715 	stw	ra,28(sp)
   856e8:	dd800615 	stw	r22,24(sp)
   856ec:	dd000415 	stw	r20,16(sp)
   856f0:	dc800215 	stw	r18,8(sp)
   856f4:	dc400115 	stw	r17,4(sp)
   856f8:	dc000015 	stw	r16,0(sp)
   856fc:	282b883a 	mov	r21,r5
   85700:	0084a940 	call	84a94 <__sfp_lock_acquire>
   85704:	98001f26 	beq	r19,zero,85784 <_fwalk+0xb0>
   85708:	002d883a 	mov	r22,zero
   8570c:	9c800117 	ldw	r18,4(r19)
   85710:	9c000217 	ldw	r16,8(r19)
   85714:	90bfffc4 	addi	r2,r18,-1
   85718:	10000c16 	blt	r2,zero,8574c <_fwalk+0x78>
   8571c:	0023883a 	mov	r17,zero
   85720:	053fffc4 	movi	r20,-1
   85724:	8080030f 	ldh	r2,12(r16)
   85728:	8c400044 	addi	r17,r17,1
   8572c:	10000526 	beq	r2,zero,85744 <_fwalk+0x70>
   85730:	8080038f 	ldh	r2,14(r16)
   85734:	8009883a 	mov	r4,r16
   85738:	15000226 	beq	r2,r20,85744 <_fwalk+0x70>
   8573c:	a83ee83a 	callr	r21
   85740:	b0acb03a 	or	r22,r22,r2
   85744:	84001704 	addi	r16,r16,92
   85748:	947ff61e 	bne	r18,r17,85724 <_fwalk+0x50>
   8574c:	9cc00017 	ldw	r19,0(r19)
   85750:	983fee1e 	bne	r19,zero,8570c <_fwalk+0x38>
   85754:	0084a980 	call	84a98 <__sfp_lock_release>
   85758:	b005883a 	mov	r2,r22
   8575c:	dfc00717 	ldw	ra,28(sp)
   85760:	dd800617 	ldw	r22,24(sp)
   85764:	dd400517 	ldw	r21,20(sp)
   85768:	dd000417 	ldw	r20,16(sp)
   8576c:	dcc00317 	ldw	r19,12(sp)
   85770:	dc800217 	ldw	r18,8(sp)
   85774:	dc400117 	ldw	r17,4(sp)
   85778:	dc000017 	ldw	r16,0(sp)
   8577c:	dec00804 	addi	sp,sp,32
   85780:	f800283a 	ret
   85784:	002d883a 	mov	r22,zero
   85788:	003ff206 	br	85754 <_fwalk+0x80>

0008578c <__locale_charset>:
   8578c:	d0a00417 	ldw	r2,-32752(gp)
   85790:	f800283a 	ret

00085794 <_localeconv_r>:
   85794:	00800274 	movhi	r2,9
   85798:	10b54a04 	addi	r2,r2,-10968
   8579c:	f800283a 	ret

000857a0 <localeconv>:
   857a0:	00800274 	movhi	r2,9
   857a4:	10bd2c04 	addi	r2,r2,-2896
   857a8:	11000017 	ldw	r4,0(r2)
   857ac:	00857941 	jmpi	85794 <_localeconv_r>

000857b0 <_setlocale_r>:
   857b0:	defffc04 	addi	sp,sp,-16
   857b4:	00c00274 	movhi	r3,9
   857b8:	18f54504 	addi	r3,r3,-10988
   857bc:	dc800215 	stw	r18,8(sp)
   857c0:	dc400115 	stw	r17,4(sp)
   857c4:	dc000015 	stw	r16,0(sp)
   857c8:	2023883a 	mov	r17,r4
   857cc:	2825883a 	mov	r18,r5
   857d0:	dfc00315 	stw	ra,12(sp)
   857d4:	3021883a 	mov	r16,r6
   857d8:	3009883a 	mov	r4,r6
   857dc:	180b883a 	mov	r5,r3
   857e0:	30000926 	beq	r6,zero,85808 <_setlocale_r+0x58>
   857e4:	0087ccc0 	call	87ccc <strcmp>
   857e8:	8009883a 	mov	r4,r16
   857ec:	01400274 	movhi	r5,9
   857f0:	29753004 	addi	r5,r5,-11072
   857f4:	10000b1e 	bne	r2,zero,85824 <_setlocale_r+0x74>
   857f8:	8c000d15 	stw	r16,52(r17)
   857fc:	8c800c15 	stw	r18,48(r17)
   85800:	00c00274 	movhi	r3,9
   85804:	18f54504 	addi	r3,r3,-10988
   85808:	1805883a 	mov	r2,r3
   8580c:	dfc00317 	ldw	ra,12(sp)
   85810:	dc800217 	ldw	r18,8(sp)
   85814:	dc400117 	ldw	r17,4(sp)
   85818:	dc000017 	ldw	r16,0(sp)
   8581c:	dec00404 	addi	sp,sp,16
   85820:	f800283a 	ret
   85824:	0087ccc0 	call	87ccc <strcmp>
   85828:	0007883a 	mov	r3,zero
   8582c:	103ff226 	beq	r2,zero,857f8 <_setlocale_r+0x48>
   85830:	003ff506 	br	85808 <_setlocale_r+0x58>

00085834 <setlocale>:
   85834:	01800274 	movhi	r6,9
   85838:	31bd2c04 	addi	r6,r6,-2896
   8583c:	2007883a 	mov	r3,r4
   85840:	31000017 	ldw	r4,0(r6)
   85844:	280d883a 	mov	r6,r5
   85848:	180b883a 	mov	r5,r3
   8584c:	00857b01 	jmpi	857b0 <_setlocale_r>

00085850 <__smakebuf_r>:
   85850:	2880030b 	ldhu	r2,12(r5)
   85854:	deffed04 	addi	sp,sp,-76
   85858:	dc401015 	stw	r17,64(sp)
   8585c:	1080008c 	andi	r2,r2,2
   85860:	dc000f15 	stw	r16,60(sp)
   85864:	dfc01215 	stw	ra,72(sp)
   85868:	dc801115 	stw	r18,68(sp)
   8586c:	2821883a 	mov	r16,r5
   85870:	2023883a 	mov	r17,r4
   85874:	10000b26 	beq	r2,zero,858a4 <__smakebuf_r+0x54>
   85878:	28c010c4 	addi	r3,r5,67
   8587c:	00800044 	movi	r2,1
   85880:	28800515 	stw	r2,20(r5)
   85884:	28c00415 	stw	r3,16(r5)
   85888:	28c00015 	stw	r3,0(r5)
   8588c:	dfc01217 	ldw	ra,72(sp)
   85890:	dc801117 	ldw	r18,68(sp)
   85894:	dc401017 	ldw	r17,64(sp)
   85898:	dc000f17 	ldw	r16,60(sp)
   8589c:	dec01304 	addi	sp,sp,76
   858a0:	f800283a 	ret
   858a4:	2940038f 	ldh	r5,14(r5)
   858a8:	28002116 	blt	r5,zero,85930 <__smakebuf_r+0xe0>
   858ac:	d80d883a 	mov	r6,sp
   858b0:	008805c0 	call	8805c <_fstat_r>
   858b4:	10001e16 	blt	r2,zero,85930 <__smakebuf_r+0xe0>
   858b8:	d8800117 	ldw	r2,4(sp)
   858bc:	00e00014 	movui	r3,32768
   858c0:	113c000c 	andi	r4,r2,61440
   858c4:	20c03126 	beq	r4,r3,8598c <__smakebuf_r+0x13c>
   858c8:	8080030b 	ldhu	r2,12(r16)
   858cc:	00c80004 	movi	r3,8192
   858d0:	10820014 	ori	r2,r2,2048
   858d4:	8080030d 	sth	r2,12(r16)
   858d8:	20c01e26 	beq	r4,r3,85954 <__smakebuf_r+0x104>
   858dc:	04810004 	movi	r18,1024
   858e0:	8809883a 	mov	r4,r17
   858e4:	900b883a 	mov	r5,r18
   858e8:	00859e40 	call	859e4 <_malloc_r>
   858ec:	1009883a 	mov	r4,r2
   858f0:	10003126 	beq	r2,zero,859b8 <__smakebuf_r+0x168>
   858f4:	80c0030b 	ldhu	r3,12(r16)
   858f8:	00800234 	movhi	r2,8
   858fc:	1092e204 	addi	r2,r2,19336
   85900:	88800f15 	stw	r2,60(r17)
   85904:	18c02014 	ori	r3,r3,128
   85908:	84800515 	stw	r18,20(r16)
   8590c:	80c0030d 	sth	r3,12(r16)
   85910:	81000415 	stw	r4,16(r16)
   85914:	81000015 	stw	r4,0(r16)
   85918:	dfc01217 	ldw	ra,72(sp)
   8591c:	dc801117 	ldw	r18,68(sp)
   85920:	dc401017 	ldw	r17,64(sp)
   85924:	dc000f17 	ldw	r16,60(sp)
   85928:	dec01304 	addi	sp,sp,76
   8592c:	f800283a 	ret
   85930:	80c0030b 	ldhu	r3,12(r16)
   85934:	1880200c 	andi	r2,r3,128
   85938:	10000426 	beq	r2,zero,8594c <__smakebuf_r+0xfc>
   8593c:	04801004 	movi	r18,64
   85940:	18820014 	ori	r2,r3,2048
   85944:	8080030d 	sth	r2,12(r16)
   85948:	003fe506 	br	858e0 <__smakebuf_r+0x90>
   8594c:	04810004 	movi	r18,1024
   85950:	003ffb06 	br	85940 <__smakebuf_r+0xf0>
   85954:	8140038f 	ldh	r5,14(r16)
   85958:	8809883a 	mov	r4,r17
   8595c:	00880d00 	call	880d0 <_isatty_r>
   85960:	103fde26 	beq	r2,zero,858dc <__smakebuf_r+0x8c>
   85964:	8080030b 	ldhu	r2,12(r16)
   85968:	80c010c4 	addi	r3,r16,67
   8596c:	04810004 	movi	r18,1024
   85970:	10800054 	ori	r2,r2,1
   85974:	8080030d 	sth	r2,12(r16)
   85978:	00800044 	movi	r2,1
   8597c:	80c00415 	stw	r3,16(r16)
   85980:	80800515 	stw	r2,20(r16)
   85984:	80c00015 	stw	r3,0(r16)
   85988:	003fd506 	br	858e0 <__smakebuf_r+0x90>
   8598c:	80c00a17 	ldw	r3,40(r16)
   85990:	00800234 	movhi	r2,8
   85994:	109ee204 	addi	r2,r2,31624
   85998:	18bfcb1e 	bne	r3,r2,858c8 <__smakebuf_r+0x78>
   8599c:	8080030b 	ldhu	r2,12(r16)
   859a0:	00c10004 	movi	r3,1024
   859a4:	1825883a 	mov	r18,r3
   859a8:	10c4b03a 	or	r2,r2,r3
   859ac:	8080030d 	sth	r2,12(r16)
   859b0:	80c01315 	stw	r3,76(r16)
   859b4:	003fca06 	br	858e0 <__smakebuf_r+0x90>
   859b8:	8100030b 	ldhu	r4,12(r16)
   859bc:	2080800c 	andi	r2,r4,512
   859c0:	103fb21e 	bne	r2,zero,8588c <__smakebuf_r+0x3c>
   859c4:	80c010c4 	addi	r3,r16,67
   859c8:	21000094 	ori	r4,r4,2
   859cc:	00800044 	movi	r2,1
   859d0:	80800515 	stw	r2,20(r16)
   859d4:	8100030d 	sth	r4,12(r16)
   859d8:	80c00415 	stw	r3,16(r16)
   859dc:	80c00015 	stw	r3,0(r16)
   859e0:	003faa06 	br	8588c <__smakebuf_r+0x3c>

000859e4 <_malloc_r>:
   859e4:	defff604 	addi	sp,sp,-40
   859e8:	28c002c4 	addi	r3,r5,11
   859ec:	00800584 	movi	r2,22
   859f0:	dc800215 	stw	r18,8(sp)
   859f4:	dfc00915 	stw	ra,36(sp)
   859f8:	df000815 	stw	fp,32(sp)
   859fc:	ddc00715 	stw	r23,28(sp)
   85a00:	dd800615 	stw	r22,24(sp)
   85a04:	dd400515 	stw	r21,20(sp)
   85a08:	dd000415 	stw	r20,16(sp)
   85a0c:	dcc00315 	stw	r19,12(sp)
   85a10:	dc400115 	stw	r17,4(sp)
   85a14:	dc000015 	stw	r16,0(sp)
   85a18:	2025883a 	mov	r18,r4
   85a1c:	10c01236 	bltu	r2,r3,85a68 <_malloc_r+0x84>
   85a20:	04400404 	movi	r17,16
   85a24:	8940142e 	bgeu	r17,r5,85a78 <_malloc_r+0x94>
   85a28:	00800304 	movi	r2,12
   85a2c:	0007883a 	mov	r3,zero
   85a30:	90800015 	stw	r2,0(r18)
   85a34:	1805883a 	mov	r2,r3
   85a38:	dfc00917 	ldw	ra,36(sp)
   85a3c:	df000817 	ldw	fp,32(sp)
   85a40:	ddc00717 	ldw	r23,28(sp)
   85a44:	dd800617 	ldw	r22,24(sp)
   85a48:	dd400517 	ldw	r21,20(sp)
   85a4c:	dd000417 	ldw	r20,16(sp)
   85a50:	dcc00317 	ldw	r19,12(sp)
   85a54:	dc800217 	ldw	r18,8(sp)
   85a58:	dc400117 	ldw	r17,4(sp)
   85a5c:	dc000017 	ldw	r16,0(sp)
   85a60:	dec00a04 	addi	sp,sp,40
   85a64:	f800283a 	ret
   85a68:	00bffe04 	movi	r2,-8
   85a6c:	18a2703a 	and	r17,r3,r2
   85a70:	883fed16 	blt	r17,zero,85a28 <_malloc_r+0x44>
   85a74:	897fec36 	bltu	r17,r5,85a28 <_malloc_r+0x44>
   85a78:	9009883a 	mov	r4,r18
   85a7c:	008aef80 	call	8aef8 <__malloc_lock>
   85a80:	00807dc4 	movi	r2,503
   85a84:	14402b2e 	bgeu	r2,r17,85b34 <_malloc_r+0x150>
   85a88:	8806d27a 	srli	r3,r17,9
   85a8c:	18003f1e 	bne	r3,zero,85b8c <_malloc_r+0x1a8>
   85a90:	880cd0fa 	srli	r6,r17,3
   85a94:	300490fa 	slli	r2,r6,3
   85a98:	02c00274 	movhi	r11,9
   85a9c:	5af7a704 	addi	r11,r11,-8548
   85aa0:	12cb883a 	add	r5,r2,r11
   85aa4:	2c000317 	ldw	r16,12(r5)
   85aa8:	580f883a 	mov	r7,r11
   85aac:	2c00041e 	bne	r5,r16,85ac0 <_malloc_r+0xdc>
   85ab0:	00000a06 	br	85adc <_malloc_r+0xf8>
   85ab4:	1800860e 	bge	r3,zero,85cd0 <_malloc_r+0x2ec>
   85ab8:	84000317 	ldw	r16,12(r16)
   85abc:	2c000726 	beq	r5,r16,85adc <_malloc_r+0xf8>
   85ac0:	80800117 	ldw	r2,4(r16)
   85ac4:	00ffff04 	movi	r3,-4
   85ac8:	10c8703a 	and	r4,r2,r3
   85acc:	2447c83a 	sub	r3,r4,r17
   85ad0:	008003c4 	movi	r2,15
   85ad4:	10fff70e 	bge	r2,r3,85ab4 <_malloc_r+0xd0>
   85ad8:	31bfffc4 	addi	r6,r6,-1
   85adc:	32400044 	addi	r9,r6,1
   85ae0:	02800274 	movhi	r10,9
   85ae4:	52b7a904 	addi	r10,r10,-8540
   85ae8:	54000217 	ldw	r16,8(r10)
   85aec:	8280a026 	beq	r16,r10,85d70 <_malloc_r+0x38c>
   85af0:	80800117 	ldw	r2,4(r16)
   85af4:	00ffff04 	movi	r3,-4
   85af8:	10ca703a 	and	r5,r2,r3
   85afc:	2c4dc83a 	sub	r6,r5,r17
   85b00:	008003c4 	movi	r2,15
   85b04:	11808316 	blt	r2,r6,85d14 <_malloc_r+0x330>
   85b08:	52800315 	stw	r10,12(r10)
   85b0c:	52800215 	stw	r10,8(r10)
   85b10:	30002916 	blt	r6,zero,85bb8 <_malloc_r+0x1d4>
   85b14:	8147883a 	add	r3,r16,r5
   85b18:	18800117 	ldw	r2,4(r3)
   85b1c:	9009883a 	mov	r4,r18
   85b20:	10800054 	ori	r2,r2,1
   85b24:	18800115 	stw	r2,4(r3)
   85b28:	008af180 	call	8af18 <__malloc_unlock>
   85b2c:	80c00204 	addi	r3,r16,8
   85b30:	003fc006 	br	85a34 <_malloc_r+0x50>
   85b34:	02c00274 	movhi	r11,9
   85b38:	5af7a704 	addi	r11,r11,-8548
   85b3c:	8ac5883a 	add	r2,r17,r11
   85b40:	14000317 	ldw	r16,12(r2)
   85b44:	580f883a 	mov	r7,r11
   85b48:	8806d0fa 	srli	r3,r17,3
   85b4c:	14006c26 	beq	r2,r16,85d00 <_malloc_r+0x31c>
   85b50:	80c00117 	ldw	r3,4(r16)
   85b54:	00bfff04 	movi	r2,-4
   85b58:	81800317 	ldw	r6,12(r16)
   85b5c:	1886703a 	and	r3,r3,r2
   85b60:	80c7883a 	add	r3,r16,r3
   85b64:	18800117 	ldw	r2,4(r3)
   85b68:	81400217 	ldw	r5,8(r16)
   85b6c:	9009883a 	mov	r4,r18
   85b70:	10800054 	ori	r2,r2,1
   85b74:	18800115 	stw	r2,4(r3)
   85b78:	31400215 	stw	r5,8(r6)
   85b7c:	29800315 	stw	r6,12(r5)
   85b80:	008af180 	call	8af18 <__malloc_unlock>
   85b84:	80c00204 	addi	r3,r16,8
   85b88:	003faa06 	br	85a34 <_malloc_r+0x50>
   85b8c:	00800104 	movi	r2,4
   85b90:	10c0052e 	bgeu	r2,r3,85ba8 <_malloc_r+0x1c4>
   85b94:	00800504 	movi	r2,20
   85b98:	10c07836 	bltu	r2,r3,85d7c <_malloc_r+0x398>
   85b9c:	198016c4 	addi	r6,r3,91
   85ba0:	300490fa 	slli	r2,r6,3
   85ba4:	003fbc06 	br	85a98 <_malloc_r+0xb4>
   85ba8:	8804d1ba 	srli	r2,r17,6
   85bac:	11800e04 	addi	r6,r2,56
   85bb0:	300490fa 	slli	r2,r6,3
   85bb4:	003fb806 	br	85a98 <_malloc_r+0xb4>
   85bb8:	00807fc4 	movi	r2,511
   85bbc:	1140bb36 	bltu	r2,r5,85eac <_malloc_r+0x4c8>
   85bc0:	2806d0fa 	srli	r3,r5,3
   85bc4:	573ffe04 	addi	fp,r10,-8
   85bc8:	00800044 	movi	r2,1
   85bcc:	180890fa 	slli	r4,r3,3
   85bd0:	1807d0ba 	srai	r3,r3,2
   85bd4:	e1c00117 	ldw	r7,4(fp)
   85bd8:	5909883a 	add	r4,r11,r4
   85bdc:	21400217 	ldw	r5,8(r4)
   85be0:	10c4983a 	sll	r2,r2,r3
   85be4:	81000315 	stw	r4,12(r16)
   85be8:	81400215 	stw	r5,8(r16)
   85bec:	388eb03a 	or	r7,r7,r2
   85bf0:	2c000315 	stw	r16,12(r5)
   85bf4:	24000215 	stw	r16,8(r4)
   85bf8:	e1c00115 	stw	r7,4(fp)
   85bfc:	4807883a 	mov	r3,r9
   85c00:	4800cd16 	blt	r9,zero,85f38 <_malloc_r+0x554>
   85c04:	1807d0ba 	srai	r3,r3,2
   85c08:	00800044 	movi	r2,1
   85c0c:	10c8983a 	sll	r4,r2,r3
   85c10:	39004436 	bltu	r7,r4,85d24 <_malloc_r+0x340>
   85c14:	21c4703a 	and	r2,r4,r7
   85c18:	10000a1e 	bne	r2,zero,85c44 <_malloc_r+0x260>
   85c1c:	2109883a 	add	r4,r4,r4
   85c20:	00bfff04 	movi	r2,-4
   85c24:	4884703a 	and	r2,r9,r2
   85c28:	3906703a 	and	r3,r7,r4
   85c2c:	12400104 	addi	r9,r2,4
   85c30:	1800041e 	bne	r3,zero,85c44 <_malloc_r+0x260>
   85c34:	2109883a 	add	r4,r4,r4
   85c38:	3904703a 	and	r2,r7,r4
   85c3c:	4a400104 	addi	r9,r9,4
   85c40:	103ffc26 	beq	r2,zero,85c34 <_malloc_r+0x250>
   85c44:	480490fa 	slli	r2,r9,3
   85c48:	4819883a 	mov	r12,r9
   85c4c:	023fff04 	movi	r8,-4
   85c50:	589b883a 	add	r13,r11,r2
   85c54:	6807883a 	mov	r3,r13
   85c58:	014003c4 	movi	r5,15
   85c5c:	1c000317 	ldw	r16,12(r3)
   85c60:	1c00041e 	bne	r3,r16,85c74 <_malloc_r+0x290>
   85c64:	0000a706 	br	85f04 <_malloc_r+0x520>
   85c68:	3000ab0e 	bge	r6,zero,85f18 <_malloc_r+0x534>
   85c6c:	84000317 	ldw	r16,12(r16)
   85c70:	1c00a426 	beq	r3,r16,85f04 <_malloc_r+0x520>
   85c74:	80800117 	ldw	r2,4(r16)
   85c78:	1204703a 	and	r2,r2,r8
   85c7c:	144dc83a 	sub	r6,r2,r17
   85c80:	29bff90e 	bge	r5,r6,85c68 <_malloc_r+0x284>
   85c84:	81000317 	ldw	r4,12(r16)
   85c88:	80c00217 	ldw	r3,8(r16)
   85c8c:	89400054 	ori	r5,r17,1
   85c90:	8445883a 	add	r2,r16,r17
   85c94:	20c00215 	stw	r3,8(r4)
   85c98:	19000315 	stw	r4,12(r3)
   85c9c:	81400115 	stw	r5,4(r16)
   85ca0:	1187883a 	add	r3,r2,r6
   85ca4:	31000054 	ori	r4,r6,1
   85ca8:	50800315 	stw	r2,12(r10)
   85cac:	50800215 	stw	r2,8(r10)
   85cb0:	19800015 	stw	r6,0(r3)
   85cb4:	11000115 	stw	r4,4(r2)
   85cb8:	12800215 	stw	r10,8(r2)
   85cbc:	12800315 	stw	r10,12(r2)
   85cc0:	9009883a 	mov	r4,r18
   85cc4:	008af180 	call	8af18 <__malloc_unlock>
   85cc8:	80c00204 	addi	r3,r16,8
   85ccc:	003f5906 	br	85a34 <_malloc_r+0x50>
   85cd0:	8109883a 	add	r4,r16,r4
   85cd4:	20800117 	ldw	r2,4(r4)
   85cd8:	80c00217 	ldw	r3,8(r16)
   85cdc:	81400317 	ldw	r5,12(r16)
   85ce0:	10800054 	ori	r2,r2,1
   85ce4:	20800115 	stw	r2,4(r4)
   85ce8:	28c00215 	stw	r3,8(r5)
   85cec:	19400315 	stw	r5,12(r3)
   85cf0:	9009883a 	mov	r4,r18
   85cf4:	008af180 	call	8af18 <__malloc_unlock>
   85cf8:	80c00204 	addi	r3,r16,8
   85cfc:	003f4d06 	br	85a34 <_malloc_r+0x50>
   85d00:	80800204 	addi	r2,r16,8
   85d04:	14000317 	ldw	r16,12(r2)
   85d08:	143f911e 	bne	r2,r16,85b50 <_malloc_r+0x16c>
   85d0c:	1a400084 	addi	r9,r3,2
   85d10:	003f7306 	br	85ae0 <_malloc_r+0xfc>
   85d14:	88c00054 	ori	r3,r17,1
   85d18:	8445883a 	add	r2,r16,r17
   85d1c:	80c00115 	stw	r3,4(r16)
   85d20:	003fdf06 	br	85ca0 <_malloc_r+0x2bc>
   85d24:	e4000217 	ldw	r16,8(fp)
   85d28:	00bfff04 	movi	r2,-4
   85d2c:	80c00117 	ldw	r3,4(r16)
   85d30:	802d883a 	mov	r22,r16
   85d34:	18aa703a 	and	r21,r3,r2
   85d38:	ac401636 	bltu	r21,r17,85d94 <_malloc_r+0x3b0>
   85d3c:	ac49c83a 	sub	r4,r21,r17
   85d40:	008003c4 	movi	r2,15
   85d44:	1100130e 	bge	r2,r4,85d94 <_malloc_r+0x3b0>
   85d48:	88800054 	ori	r2,r17,1
   85d4c:	8447883a 	add	r3,r16,r17
   85d50:	80800115 	stw	r2,4(r16)
   85d54:	20800054 	ori	r2,r4,1
   85d58:	18800115 	stw	r2,4(r3)
   85d5c:	e0c00215 	stw	r3,8(fp)
   85d60:	9009883a 	mov	r4,r18
   85d64:	008af180 	call	8af18 <__malloc_unlock>
   85d68:	80c00204 	addi	r3,r16,8
   85d6c:	003f3106 	br	85a34 <_malloc_r+0x50>
   85d70:	39c00117 	ldw	r7,4(r7)
   85d74:	573ffe04 	addi	fp,r10,-8
   85d78:	003fa006 	br	85bfc <_malloc_r+0x218>
   85d7c:	00801504 	movi	r2,84
   85d80:	10c06736 	bltu	r2,r3,85f20 <_malloc_r+0x53c>
   85d84:	8804d33a 	srli	r2,r17,12
   85d88:	11801b84 	addi	r6,r2,110
   85d8c:	300490fa 	slli	r2,r6,3
   85d90:	003f4106 	br	85a98 <_malloc_r+0xb4>
   85d94:	d0a76717 	ldw	r2,-25188(gp)
   85d98:	d0e00617 	ldw	r3,-32744(gp)
   85d9c:	053fffc4 	movi	r20,-1
   85da0:	10800404 	addi	r2,r2,16
   85da4:	88a7883a 	add	r19,r17,r2
   85da8:	1d000326 	beq	r3,r20,85db8 <_malloc_r+0x3d4>
   85dac:	98c3ffc4 	addi	r3,r19,4095
   85db0:	00bc0004 	movi	r2,-4096
   85db4:	18a6703a 	and	r19,r3,r2
   85db8:	9009883a 	mov	r4,r18
   85dbc:	980b883a 	mov	r5,r19
   85dc0:	0087b100 	call	87b10 <_sbrk_r>
   85dc4:	1009883a 	mov	r4,r2
   85dc8:	15000426 	beq	r2,r20,85ddc <_malloc_r+0x3f8>
   85dcc:	854b883a 	add	r5,r16,r21
   85dd0:	1029883a 	mov	r20,r2
   85dd4:	11405a2e 	bgeu	r2,r5,85f40 <_malloc_r+0x55c>
   85dd8:	87000c26 	beq	r16,fp,85e0c <_malloc_r+0x428>
   85ddc:	e4000217 	ldw	r16,8(fp)
   85de0:	80c00117 	ldw	r3,4(r16)
   85de4:	00bfff04 	movi	r2,-4
   85de8:	1884703a 	and	r2,r3,r2
   85dec:	14400336 	bltu	r2,r17,85dfc <_malloc_r+0x418>
   85df0:	1449c83a 	sub	r4,r2,r17
   85df4:	008003c4 	movi	r2,15
   85df8:	113fd316 	blt	r2,r4,85d48 <_malloc_r+0x364>
   85dfc:	9009883a 	mov	r4,r18
   85e00:	008af180 	call	8af18 <__malloc_unlock>
   85e04:	0007883a 	mov	r3,zero
   85e08:	003f0a06 	br	85a34 <_malloc_r+0x50>
   85e0c:	05c00274 	movhi	r23,9
   85e10:	bdc49c04 	addi	r23,r23,4720
   85e14:	b8800017 	ldw	r2,0(r23)
   85e18:	988d883a 	add	r6,r19,r2
   85e1c:	b9800015 	stw	r6,0(r23)
   85e20:	d0e00617 	ldw	r3,-32744(gp)
   85e24:	00bfffc4 	movi	r2,-1
   85e28:	18808e26 	beq	r3,r2,86064 <_malloc_r+0x680>
   85e2c:	2145c83a 	sub	r2,r4,r5
   85e30:	3085883a 	add	r2,r6,r2
   85e34:	b8800015 	stw	r2,0(r23)
   85e38:	20c001cc 	andi	r3,r4,7
   85e3c:	18005f1e 	bne	r3,zero,85fbc <_malloc_r+0x5d8>
   85e40:	000b883a 	mov	r5,zero
   85e44:	a4c5883a 	add	r2,r20,r19
   85e48:	1083ffcc 	andi	r2,r2,4095
   85e4c:	00c40004 	movi	r3,4096
   85e50:	1887c83a 	sub	r3,r3,r2
   85e54:	28e7883a 	add	r19,r5,r3
   85e58:	9009883a 	mov	r4,r18
   85e5c:	980b883a 	mov	r5,r19
   85e60:	0087b100 	call	87b10 <_sbrk_r>
   85e64:	1007883a 	mov	r3,r2
   85e68:	00bfffc4 	movi	r2,-1
   85e6c:	18807a26 	beq	r3,r2,86058 <_malloc_r+0x674>
   85e70:	1d05c83a 	sub	r2,r3,r20
   85e74:	9885883a 	add	r2,r19,r2
   85e78:	10c00054 	ori	r3,r2,1
   85e7c:	b8800017 	ldw	r2,0(r23)
   85e80:	a021883a 	mov	r16,r20
   85e84:	a0c00115 	stw	r3,4(r20)
   85e88:	9885883a 	add	r2,r19,r2
   85e8c:	b8800015 	stw	r2,0(r23)
   85e90:	e5000215 	stw	r20,8(fp)
   85e94:	b7003626 	beq	r22,fp,85f70 <_malloc_r+0x58c>
   85e98:	018003c4 	movi	r6,15
   85e9c:	35404b36 	bltu	r6,r21,85fcc <_malloc_r+0x5e8>
   85ea0:	00800044 	movi	r2,1
   85ea4:	a0800115 	stw	r2,4(r20)
   85ea8:	003fcd06 	br	85de0 <_malloc_r+0x3fc>
   85eac:	2808d27a 	srli	r4,r5,9
   85eb0:	2000371e 	bne	r4,zero,85f90 <_malloc_r+0x5ac>
   85eb4:	2808d0fa 	srli	r4,r5,3
   85eb8:	200690fa 	slli	r3,r4,3
   85ebc:	1ad1883a 	add	r8,r3,r11
   85ec0:	41800217 	ldw	r6,8(r8)
   85ec4:	41805b26 	beq	r8,r6,86034 <_malloc_r+0x650>
   85ec8:	30800117 	ldw	r2,4(r6)
   85ecc:	00ffff04 	movi	r3,-4
   85ed0:	10c4703a 	and	r2,r2,r3
   85ed4:	2880022e 	bgeu	r5,r2,85ee0 <_malloc_r+0x4fc>
   85ed8:	31800217 	ldw	r6,8(r6)
   85edc:	41bffa1e 	bne	r8,r6,85ec8 <_malloc_r+0x4e4>
   85ee0:	32000317 	ldw	r8,12(r6)
   85ee4:	39c00117 	ldw	r7,4(r7)
   85ee8:	82000315 	stw	r8,12(r16)
   85eec:	81800215 	stw	r6,8(r16)
   85ef0:	07000274 	movhi	fp,9
   85ef4:	e737a704 	addi	fp,fp,-8548
   85ef8:	34000315 	stw	r16,12(r6)
   85efc:	44000215 	stw	r16,8(r8)
   85f00:	003f3e06 	br	85bfc <_malloc_r+0x218>
   85f04:	63000044 	addi	r12,r12,1
   85f08:	608000cc 	andi	r2,r12,3
   85f0c:	10005d26 	beq	r2,zero,86084 <_malloc_r+0x6a0>
   85f10:	18c00204 	addi	r3,r3,8
   85f14:	003f5106 	br	85c5c <_malloc_r+0x278>
   85f18:	8089883a 	add	r4,r16,r2
   85f1c:	003f6d06 	br	85cd4 <_malloc_r+0x2f0>
   85f20:	00805504 	movi	r2,340
   85f24:	10c02036 	bltu	r2,r3,85fa8 <_malloc_r+0x5c4>
   85f28:	8804d3fa 	srli	r2,r17,15
   85f2c:	11801dc4 	addi	r6,r2,119
   85f30:	300490fa 	slli	r2,r6,3
   85f34:	003ed806 	br	85a98 <_malloc_r+0xb4>
   85f38:	48c000c4 	addi	r3,r9,3
   85f3c:	003f3106 	br	85c04 <_malloc_r+0x220>
   85f40:	05c00274 	movhi	r23,9
   85f44:	bdc49c04 	addi	r23,r23,4720
   85f48:	b8800017 	ldw	r2,0(r23)
   85f4c:	988d883a 	add	r6,r19,r2
   85f50:	b9800015 	stw	r6,0(r23)
   85f54:	293fb21e 	bne	r5,r4,85e20 <_malloc_r+0x43c>
   85f58:	2083ffcc 	andi	r2,r4,4095
   85f5c:	103fb01e 	bne	r2,zero,85e20 <_malloc_r+0x43c>
   85f60:	e4000217 	ldw	r16,8(fp)
   85f64:	9d45883a 	add	r2,r19,r21
   85f68:	10800054 	ori	r2,r2,1
   85f6c:	80800115 	stw	r2,4(r16)
   85f70:	b8c00017 	ldw	r3,0(r23)
   85f74:	d0a76817 	ldw	r2,-25184(gp)
   85f78:	10c0012e 	bgeu	r2,r3,85f80 <_malloc_r+0x59c>
   85f7c:	d0e76815 	stw	r3,-25184(gp)
   85f80:	d0a76917 	ldw	r2,-25180(gp)
   85f84:	10ff962e 	bgeu	r2,r3,85de0 <_malloc_r+0x3fc>
   85f88:	d0e76915 	stw	r3,-25180(gp)
   85f8c:	003f9406 	br	85de0 <_malloc_r+0x3fc>
   85f90:	00800104 	movi	r2,4
   85f94:	11001e36 	bltu	r2,r4,86010 <_malloc_r+0x62c>
   85f98:	2804d1ba 	srli	r2,r5,6
   85f9c:	11000e04 	addi	r4,r2,56
   85fa0:	200690fa 	slli	r3,r4,3
   85fa4:	003fc506 	br	85ebc <_malloc_r+0x4d8>
   85fa8:	00815504 	movi	r2,1364
   85fac:	10c01d2e 	bgeu	r2,r3,86024 <_malloc_r+0x640>
   85fb0:	01801f84 	movi	r6,126
   85fb4:	0080fc04 	movi	r2,1008
   85fb8:	003eb706 	br	85a98 <_malloc_r+0xb4>
   85fbc:	00800204 	movi	r2,8
   85fc0:	10cbc83a 	sub	r5,r2,r3
   85fc4:	2169883a 	add	r20,r4,r5
   85fc8:	003f9e06 	br	85e44 <_malloc_r+0x460>
   85fcc:	00bffe04 	movi	r2,-8
   85fd0:	a93ffd04 	addi	r4,r21,-12
   85fd4:	2088703a 	and	r4,r4,r2
   85fd8:	b10b883a 	add	r5,r22,r4
   85fdc:	00c00144 	movi	r3,5
   85fe0:	28c00215 	stw	r3,8(r5)
   85fe4:	28c00115 	stw	r3,4(r5)
   85fe8:	b0800117 	ldw	r2,4(r22)
   85fec:	1080004c 	andi	r2,r2,1
   85ff0:	2084b03a 	or	r2,r4,r2
   85ff4:	b0800115 	stw	r2,4(r22)
   85ff8:	313fdd2e 	bgeu	r6,r4,85f70 <_malloc_r+0x58c>
   85ffc:	b1400204 	addi	r5,r22,8
   86000:	9009883a 	mov	r4,r18
   86004:	0084e5c0 	call	84e5c <_free_r>
   86008:	e4000217 	ldw	r16,8(fp)
   8600c:	003fd806 	br	85f70 <_malloc_r+0x58c>
   86010:	00800504 	movi	r2,20
   86014:	11001536 	bltu	r2,r4,8606c <_malloc_r+0x688>
   86018:	210016c4 	addi	r4,r4,91
   8601c:	200690fa 	slli	r3,r4,3
   86020:	003fa606 	br	85ebc <_malloc_r+0x4d8>
   86024:	8804d4ba 	srli	r2,r17,18
   86028:	11801f04 	addi	r6,r2,124
   8602c:	300490fa 	slli	r2,r6,3
   86030:	003e9906 	br	85a98 <_malloc_r+0xb4>
   86034:	2009d0ba 	srai	r4,r4,2
   86038:	01400274 	movhi	r5,9
   8603c:	2977a704 	addi	r5,r5,-8548
   86040:	00c00044 	movi	r3,1
   86044:	28800117 	ldw	r2,4(r5)
   86048:	1906983a 	sll	r3,r3,r4
   8604c:	10c4b03a 	or	r2,r2,r3
   86050:	28800115 	stw	r2,4(r5)
   86054:	003fa306 	br	85ee4 <_malloc_r+0x500>
   86058:	0027883a 	mov	r19,zero
   8605c:	00c00044 	movi	r3,1
   86060:	003f8606 	br	85e7c <_malloc_r+0x498>
   86064:	d1200615 	stw	r4,-32744(gp)
   86068:	003f7306 	br	85e38 <_malloc_r+0x454>
   8606c:	00801504 	movi	r2,84
   86070:	11001936 	bltu	r2,r4,860d8 <_malloc_r+0x6f4>
   86074:	2804d33a 	srli	r2,r5,12
   86078:	11001b84 	addi	r4,r2,110
   8607c:	200690fa 	slli	r3,r4,3
   86080:	003f8e06 	br	85ebc <_malloc_r+0x4d8>
   86084:	480b883a 	mov	r5,r9
   86088:	6807883a 	mov	r3,r13
   8608c:	288000cc 	andi	r2,r5,3
   86090:	18fffe04 	addi	r3,r3,-8
   86094:	297fffc4 	addi	r5,r5,-1
   86098:	10001526 	beq	r2,zero,860f0 <_malloc_r+0x70c>
   8609c:	18800217 	ldw	r2,8(r3)
   860a0:	10fffa26 	beq	r2,r3,8608c <_malloc_r+0x6a8>
   860a4:	2109883a 	add	r4,r4,r4
   860a8:	393f1e36 	bltu	r7,r4,85d24 <_malloc_r+0x340>
   860ac:	203f1d26 	beq	r4,zero,85d24 <_malloc_r+0x340>
   860b0:	21c4703a 	and	r2,r4,r7
   860b4:	10000226 	beq	r2,zero,860c0 <_malloc_r+0x6dc>
   860b8:	6013883a 	mov	r9,r12
   860bc:	003ee106 	br	85c44 <_malloc_r+0x260>
   860c0:	2109883a 	add	r4,r4,r4
   860c4:	3904703a 	and	r2,r7,r4
   860c8:	63000104 	addi	r12,r12,4
   860cc:	103ffc26 	beq	r2,zero,860c0 <_malloc_r+0x6dc>
   860d0:	6013883a 	mov	r9,r12
   860d4:	003edb06 	br	85c44 <_malloc_r+0x260>
   860d8:	00805504 	movi	r2,340
   860dc:	11000836 	bltu	r2,r4,86100 <_malloc_r+0x71c>
   860e0:	2804d3fa 	srli	r2,r5,15
   860e4:	11001dc4 	addi	r4,r2,119
   860e8:	200690fa 	slli	r3,r4,3
   860ec:	003f7306 	br	85ebc <_malloc_r+0x4d8>
   860f0:	0104303a 	nor	r2,zero,r4
   860f4:	388e703a 	and	r7,r7,r2
   860f8:	e1c00115 	stw	r7,4(fp)
   860fc:	003fe906 	br	860a4 <_malloc_r+0x6c0>
   86100:	00815504 	movi	r2,1364
   86104:	1100032e 	bgeu	r2,r4,86114 <_malloc_r+0x730>
   86108:	01001f84 	movi	r4,126
   8610c:	00c0fc04 	movi	r3,1008
   86110:	003f6a06 	br	85ebc <_malloc_r+0x4d8>
   86114:	2804d4ba 	srli	r2,r5,18
   86118:	11001f04 	addi	r4,r2,124
   8611c:	200690fa 	slli	r3,r4,3
   86120:	003f6606 	br	85ebc <_malloc_r+0x4d8>

00086124 <memchr>:
   86124:	008000c4 	movi	r2,3
   86128:	29403fcc 	andi	r5,r5,255
   8612c:	2007883a 	mov	r3,r4
   86130:	1180022e 	bgeu	r2,r6,8613c <memchr+0x18>
   86134:	2084703a 	and	r2,r4,r2
   86138:	10000b26 	beq	r2,zero,86168 <memchr+0x44>
   8613c:	313fffc4 	addi	r4,r6,-1
   86140:	3000051e 	bne	r6,zero,86158 <memchr+0x34>
   86144:	00002c06 	br	861f8 <memchr+0xd4>
   86148:	213fffc4 	addi	r4,r4,-1
   8614c:	00bfffc4 	movi	r2,-1
   86150:	18c00044 	addi	r3,r3,1
   86154:	20802826 	beq	r4,r2,861f8 <memchr+0xd4>
   86158:	18800003 	ldbu	r2,0(r3)
   8615c:	28bffa1e 	bne	r5,r2,86148 <memchr+0x24>
   86160:	1805883a 	mov	r2,r3
   86164:	f800283a 	ret
   86168:	0011883a 	mov	r8,zero
   8616c:	0007883a 	mov	r3,zero
   86170:	01c00104 	movi	r7,4
   86174:	4004923a 	slli	r2,r8,8
   86178:	18c00044 	addi	r3,r3,1
   8617c:	1151883a 	add	r8,r2,r5
   86180:	19fffc1e 	bne	r3,r7,86174 <memchr+0x50>
   86184:	02bfbff4 	movhi	r10,65279
   86188:	52bfbfc4 	addi	r10,r10,-257
   8618c:	02602074 	movhi	r9,32897
   86190:	4a602004 	addi	r9,r9,-32640
   86194:	02c000c4 	movi	r11,3
   86198:	20800017 	ldw	r2,0(r4)
   8619c:	31bfff04 	addi	r6,r6,-4
   861a0:	200f883a 	mov	r7,r4
   861a4:	1204f03a 	xor	r2,r2,r8
   861a8:	1287883a 	add	r3,r2,r10
   861ac:	1a46703a 	and	r3,r3,r9
   861b0:	0084303a 	nor	r2,zero,r2
   861b4:	10c4703a 	and	r2,r2,r3
   861b8:	10000b26 	beq	r2,zero,861e8 <memchr+0xc4>
   861bc:	20800003 	ldbu	r2,0(r4)
   861c0:	28800f26 	beq	r5,r2,86200 <memchr+0xdc>
   861c4:	20800043 	ldbu	r2,1(r4)
   861c8:	21c00044 	addi	r7,r4,1
   861cc:	28800c26 	beq	r5,r2,86200 <memchr+0xdc>
   861d0:	20800083 	ldbu	r2,2(r4)
   861d4:	21c00084 	addi	r7,r4,2
   861d8:	28800926 	beq	r5,r2,86200 <memchr+0xdc>
   861dc:	208000c3 	ldbu	r2,3(r4)
   861e0:	21c000c4 	addi	r7,r4,3
   861e4:	28800626 	beq	r5,r2,86200 <memchr+0xdc>
   861e8:	21000104 	addi	r4,r4,4
   861ec:	59bfea36 	bltu	r11,r6,86198 <memchr+0x74>
   861f0:	2007883a 	mov	r3,r4
   861f4:	003fd106 	br	8613c <memchr+0x18>
   861f8:	0005883a 	mov	r2,zero
   861fc:	f800283a 	ret
   86200:	3805883a 	mov	r2,r7
   86204:	f800283a 	ret

00086208 <memcpy>:
   86208:	01c003c4 	movi	r7,15
   8620c:	2007883a 	mov	r3,r4
   86210:	3980032e 	bgeu	r7,r6,86220 <memcpy+0x18>
   86214:	2904b03a 	or	r2,r5,r4
   86218:	108000cc 	andi	r2,r2,3
   8621c:	10000926 	beq	r2,zero,86244 <memcpy+0x3c>
   86220:	30000626 	beq	r6,zero,8623c <memcpy+0x34>
   86224:	30cd883a 	add	r6,r6,r3
   86228:	28800003 	ldbu	r2,0(r5)
   8622c:	29400044 	addi	r5,r5,1
   86230:	18800005 	stb	r2,0(r3)
   86234:	18c00044 	addi	r3,r3,1
   86238:	30fffb1e 	bne	r6,r3,86228 <memcpy+0x20>
   8623c:	2005883a 	mov	r2,r4
   86240:	f800283a 	ret
   86244:	3811883a 	mov	r8,r7
   86248:	200f883a 	mov	r7,r4
   8624c:	28c00017 	ldw	r3,0(r5)
   86250:	31bffc04 	addi	r6,r6,-16
   86254:	38c00015 	stw	r3,0(r7)
   86258:	28800117 	ldw	r2,4(r5)
   8625c:	38800115 	stw	r2,4(r7)
   86260:	28c00217 	ldw	r3,8(r5)
   86264:	38c00215 	stw	r3,8(r7)
   86268:	28800317 	ldw	r2,12(r5)
   8626c:	29400404 	addi	r5,r5,16
   86270:	38800315 	stw	r2,12(r7)
   86274:	39c00404 	addi	r7,r7,16
   86278:	41bff436 	bltu	r8,r6,8624c <memcpy+0x44>
   8627c:	008000c4 	movi	r2,3
   86280:	1180072e 	bgeu	r2,r6,862a0 <memcpy+0x98>
   86284:	1007883a 	mov	r3,r2
   86288:	28800017 	ldw	r2,0(r5)
   8628c:	31bfff04 	addi	r6,r6,-4
   86290:	29400104 	addi	r5,r5,4
   86294:	38800015 	stw	r2,0(r7)
   86298:	39c00104 	addi	r7,r7,4
   8629c:	19bffa36 	bltu	r3,r6,86288 <memcpy+0x80>
   862a0:	3807883a 	mov	r3,r7
   862a4:	003fde06 	br	86220 <memcpy+0x18>

000862a8 <memmove>:
   862a8:	2807883a 	mov	r3,r5
   862ac:	2011883a 	mov	r8,r4
   862b0:	29000c2e 	bgeu	r5,r4,862e4 <memmove+0x3c>
   862b4:	298f883a 	add	r7,r5,r6
   862b8:	21c00a2e 	bgeu	r4,r7,862e4 <memmove+0x3c>
   862bc:	30000726 	beq	r6,zero,862dc <memmove+0x34>
   862c0:	2187883a 	add	r3,r4,r6
   862c4:	198dc83a 	sub	r6,r3,r6
   862c8:	39ffffc4 	addi	r7,r7,-1
   862cc:	38800003 	ldbu	r2,0(r7)
   862d0:	18ffffc4 	addi	r3,r3,-1
   862d4:	18800005 	stb	r2,0(r3)
   862d8:	19bffb1e 	bne	r3,r6,862c8 <memmove+0x20>
   862dc:	2005883a 	mov	r2,r4
   862e0:	f800283a 	ret
   862e4:	01c003c4 	movi	r7,15
   862e8:	39800a36 	bltu	r7,r6,86314 <memmove+0x6c>
   862ec:	303ffb26 	beq	r6,zero,862dc <memmove+0x34>
   862f0:	400f883a 	mov	r7,r8
   862f4:	320d883a 	add	r6,r6,r8
   862f8:	28800003 	ldbu	r2,0(r5)
   862fc:	29400044 	addi	r5,r5,1
   86300:	38800005 	stb	r2,0(r7)
   86304:	39c00044 	addi	r7,r7,1
   86308:	39bffb1e 	bne	r7,r6,862f8 <memmove+0x50>
   8630c:	2005883a 	mov	r2,r4
   86310:	f800283a 	ret
   86314:	1904b03a 	or	r2,r3,r4
   86318:	108000cc 	andi	r2,r2,3
   8631c:	103ff31e 	bne	r2,zero,862ec <memmove+0x44>
   86320:	3811883a 	mov	r8,r7
   86324:	180b883a 	mov	r5,r3
   86328:	200f883a 	mov	r7,r4
   8632c:	28c00017 	ldw	r3,0(r5)
   86330:	31bffc04 	addi	r6,r6,-16
   86334:	38c00015 	stw	r3,0(r7)
   86338:	28800117 	ldw	r2,4(r5)
   8633c:	38800115 	stw	r2,4(r7)
   86340:	28c00217 	ldw	r3,8(r5)
   86344:	38c00215 	stw	r3,8(r7)
   86348:	28800317 	ldw	r2,12(r5)
   8634c:	29400404 	addi	r5,r5,16
   86350:	38800315 	stw	r2,12(r7)
   86354:	39c00404 	addi	r7,r7,16
   86358:	41bff436 	bltu	r8,r6,8632c <memmove+0x84>
   8635c:	008000c4 	movi	r2,3
   86360:	1180072e 	bgeu	r2,r6,86380 <memmove+0xd8>
   86364:	1007883a 	mov	r3,r2
   86368:	28800017 	ldw	r2,0(r5)
   8636c:	31bfff04 	addi	r6,r6,-4
   86370:	29400104 	addi	r5,r5,4
   86374:	38800015 	stw	r2,0(r7)
   86378:	39c00104 	addi	r7,r7,4
   8637c:	19bffa36 	bltu	r3,r6,86368 <memmove+0xc0>
   86380:	3811883a 	mov	r8,r7
   86384:	003fd906 	br	862ec <memmove+0x44>

00086388 <memset>:
   86388:	008000c4 	movi	r2,3
   8638c:	29403fcc 	andi	r5,r5,255
   86390:	2007883a 	mov	r3,r4
   86394:	1180022e 	bgeu	r2,r6,863a0 <memset+0x18>
   86398:	2084703a 	and	r2,r4,r2
   8639c:	10000826 	beq	r2,zero,863c0 <memset+0x38>
   863a0:	30000526 	beq	r6,zero,863b8 <memset+0x30>
   863a4:	2805883a 	mov	r2,r5
   863a8:	30cd883a 	add	r6,r6,r3
   863ac:	18800005 	stb	r2,0(r3)
   863b0:	18c00044 	addi	r3,r3,1
   863b4:	19bffd1e 	bne	r3,r6,863ac <memset+0x24>
   863b8:	2005883a 	mov	r2,r4
   863bc:	f800283a 	ret
   863c0:	2804923a 	slli	r2,r5,8
   863c4:	020003c4 	movi	r8,15
   863c8:	200f883a 	mov	r7,r4
   863cc:	2884b03a 	or	r2,r5,r2
   863d0:	1006943a 	slli	r3,r2,16
   863d4:	10c6b03a 	or	r3,r2,r3
   863d8:	41800a2e 	bgeu	r8,r6,86404 <memset+0x7c>
   863dc:	4005883a 	mov	r2,r8
   863e0:	31bffc04 	addi	r6,r6,-16
   863e4:	38c00015 	stw	r3,0(r7)
   863e8:	38c00115 	stw	r3,4(r7)
   863ec:	38c00215 	stw	r3,8(r7)
   863f0:	38c00315 	stw	r3,12(r7)
   863f4:	39c00404 	addi	r7,r7,16
   863f8:	11bff936 	bltu	r2,r6,863e0 <memset+0x58>
   863fc:	008000c4 	movi	r2,3
   86400:	1180052e 	bgeu	r2,r6,86418 <memset+0x90>
   86404:	31bfff04 	addi	r6,r6,-4
   86408:	008000c4 	movi	r2,3
   8640c:	38c00015 	stw	r3,0(r7)
   86410:	39c00104 	addi	r7,r7,4
   86414:	11bffb36 	bltu	r2,r6,86404 <memset+0x7c>
   86418:	3807883a 	mov	r3,r7
   8641c:	003fe006 	br	863a0 <memset+0x18>

00086420 <_Bfree>:
   86420:	28000826 	beq	r5,zero,86444 <_Bfree+0x24>
   86424:	28800117 	ldw	r2,4(r5)
   86428:	21001317 	ldw	r4,76(r4)
   8642c:	1085883a 	add	r2,r2,r2
   86430:	1085883a 	add	r2,r2,r2
   86434:	1105883a 	add	r2,r2,r4
   86438:	10c00017 	ldw	r3,0(r2)
   8643c:	28c00015 	stw	r3,0(r5)
   86440:	11400015 	stw	r5,0(r2)
   86444:	f800283a 	ret

00086448 <__hi0bits>:
   86448:	20bfffec 	andhi	r2,r4,65535
   8644c:	10001426 	beq	r2,zero,864a0 <__hi0bits+0x58>
   86450:	0007883a 	mov	r3,zero
   86454:	20bfc02c 	andhi	r2,r4,65280
   86458:	1000021e 	bne	r2,zero,86464 <__hi0bits+0x1c>
   8645c:	2008923a 	slli	r4,r4,8
   86460:	18c00204 	addi	r3,r3,8
   86464:	20bc002c 	andhi	r2,r4,61440
   86468:	1000021e 	bne	r2,zero,86474 <__hi0bits+0x2c>
   8646c:	2008913a 	slli	r4,r4,4
   86470:	18c00104 	addi	r3,r3,4
   86474:	20b0002c 	andhi	r2,r4,49152
   86478:	1000031e 	bne	r2,zero,86488 <__hi0bits+0x40>
   8647c:	2105883a 	add	r2,r4,r4
   86480:	18c00084 	addi	r3,r3,2
   86484:	1089883a 	add	r4,r2,r2
   86488:	20000316 	blt	r4,zero,86498 <__hi0bits+0x50>
   8648c:	2090002c 	andhi	r2,r4,16384
   86490:	10000626 	beq	r2,zero,864ac <__hi0bits+0x64>
   86494:	18c00044 	addi	r3,r3,1
   86498:	1805883a 	mov	r2,r3
   8649c:	f800283a 	ret
   864a0:	2008943a 	slli	r4,r4,16
   864a4:	00c00404 	movi	r3,16
   864a8:	003fea06 	br	86454 <__hi0bits+0xc>
   864ac:	00c00804 	movi	r3,32
   864b0:	1805883a 	mov	r2,r3
   864b4:	f800283a 	ret

000864b8 <__lo0bits>:
   864b8:	20c00017 	ldw	r3,0(r4)
   864bc:	188001cc 	andi	r2,r3,7
   864c0:	10000a26 	beq	r2,zero,864ec <__lo0bits+0x34>
   864c4:	1880004c 	andi	r2,r3,1
   864c8:	1005003a 	cmpeq	r2,r2,zero
   864cc:	10002126 	beq	r2,zero,86554 <__lo0bits+0x9c>
   864d0:	1880008c 	andi	r2,r3,2
   864d4:	1000251e 	bne	r2,zero,8656c <__lo0bits+0xb4>
   864d8:	1804d0ba 	srli	r2,r3,2
   864dc:	01400084 	movi	r5,2
   864e0:	20800015 	stw	r2,0(r4)
   864e4:	2805883a 	mov	r2,r5
   864e8:	f800283a 	ret
   864ec:	18bfffcc 	andi	r2,r3,65535
   864f0:	10001526 	beq	r2,zero,86548 <__lo0bits+0x90>
   864f4:	000b883a 	mov	r5,zero
   864f8:	18803fcc 	andi	r2,r3,255
   864fc:	1000021e 	bne	r2,zero,86508 <__lo0bits+0x50>
   86500:	1806d23a 	srli	r3,r3,8
   86504:	29400204 	addi	r5,r5,8
   86508:	188003cc 	andi	r2,r3,15
   8650c:	1000021e 	bne	r2,zero,86518 <__lo0bits+0x60>
   86510:	1806d13a 	srli	r3,r3,4
   86514:	29400104 	addi	r5,r5,4
   86518:	188000cc 	andi	r2,r3,3
   8651c:	1000021e 	bne	r2,zero,86528 <__lo0bits+0x70>
   86520:	1806d0ba 	srli	r3,r3,2
   86524:	29400084 	addi	r5,r5,2
   86528:	1880004c 	andi	r2,r3,1
   8652c:	1000031e 	bne	r2,zero,8653c <__lo0bits+0x84>
   86530:	1806d07a 	srli	r3,r3,1
   86534:	18000a26 	beq	r3,zero,86560 <__lo0bits+0xa8>
   86538:	29400044 	addi	r5,r5,1
   8653c:	2805883a 	mov	r2,r5
   86540:	20c00015 	stw	r3,0(r4)
   86544:	f800283a 	ret
   86548:	1806d43a 	srli	r3,r3,16
   8654c:	01400404 	movi	r5,16
   86550:	003fe906 	br	864f8 <__lo0bits+0x40>
   86554:	000b883a 	mov	r5,zero
   86558:	2805883a 	mov	r2,r5
   8655c:	f800283a 	ret
   86560:	01400804 	movi	r5,32
   86564:	2805883a 	mov	r2,r5
   86568:	f800283a 	ret
   8656c:	1804d07a 	srli	r2,r3,1
   86570:	01400044 	movi	r5,1
   86574:	20800015 	stw	r2,0(r4)
   86578:	003fda06 	br	864e4 <__lo0bits+0x2c>

0008657c <__mcmp>:
   8657c:	20800417 	ldw	r2,16(r4)
   86580:	28c00417 	ldw	r3,16(r5)
   86584:	10cfc83a 	sub	r7,r2,r3
   86588:	38000c1e 	bne	r7,zero,865bc <__mcmp+0x40>
   8658c:	18c5883a 	add	r2,r3,r3
   86590:	1085883a 	add	r2,r2,r2
   86594:	10c00504 	addi	r3,r2,20
   86598:	21000504 	addi	r4,r4,20
   8659c:	28cb883a 	add	r5,r5,r3
   865a0:	2085883a 	add	r2,r4,r2
   865a4:	10bfff04 	addi	r2,r2,-4
   865a8:	297fff04 	addi	r5,r5,-4
   865ac:	11800017 	ldw	r6,0(r2)
   865b0:	28c00017 	ldw	r3,0(r5)
   865b4:	30c0031e 	bne	r6,r3,865c4 <__mcmp+0x48>
   865b8:	20bffa36 	bltu	r4,r2,865a4 <__mcmp+0x28>
   865bc:	3805883a 	mov	r2,r7
   865c0:	f800283a 	ret
   865c4:	30c00336 	bltu	r6,r3,865d4 <__mcmp+0x58>
   865c8:	01c00044 	movi	r7,1
   865cc:	3805883a 	mov	r2,r7
   865d0:	f800283a 	ret
   865d4:	01ffffc4 	movi	r7,-1
   865d8:	003ff806 	br	865bc <__mcmp+0x40>

000865dc <__ulp>:
   865dc:	295ffc2c 	andhi	r5,r5,32752
   865e0:	013f3034 	movhi	r4,64704
   865e4:	290b883a 	add	r5,r5,r4
   865e8:	0145c83a 	sub	r2,zero,r5
   865ec:	1007d53a 	srai	r3,r2,20
   865f0:	000d883a 	mov	r6,zero
   865f4:	0140040e 	bge	zero,r5,86608 <__ulp+0x2c>
   865f8:	280f883a 	mov	r7,r5
   865fc:	3807883a 	mov	r3,r7
   86600:	3005883a 	mov	r2,r6
   86604:	f800283a 	ret
   86608:	008004c4 	movi	r2,19
   8660c:	193ffb04 	addi	r4,r3,-20
   86610:	10c00c0e 	bge	r2,r3,86644 <__ulp+0x68>
   86614:	008007c4 	movi	r2,31
   86618:	1107c83a 	sub	r3,r2,r4
   8661c:	00800784 	movi	r2,30
   86620:	01400044 	movi	r5,1
   86624:	11000216 	blt	r2,r4,86630 <__ulp+0x54>
   86628:	00800044 	movi	r2,1
   8662c:	10ca983a 	sll	r5,r2,r3
   86630:	000f883a 	mov	r7,zero
   86634:	280d883a 	mov	r6,r5
   86638:	3807883a 	mov	r3,r7
   8663c:	3005883a 	mov	r2,r6
   86640:	f800283a 	ret
   86644:	00800234 	movhi	r2,8
   86648:	10cfd83a 	sra	r7,r2,r3
   8664c:	000d883a 	mov	r6,zero
   86650:	3005883a 	mov	r2,r6
   86654:	3807883a 	mov	r3,r7
   86658:	f800283a 	ret

0008665c <__b2d>:
   8665c:	20800417 	ldw	r2,16(r4)
   86660:	defff904 	addi	sp,sp,-28
   86664:	dd000415 	stw	r20,16(sp)
   86668:	1085883a 	add	r2,r2,r2
   8666c:	25000504 	addi	r20,r4,20
   86670:	1085883a 	add	r2,r2,r2
   86674:	dc000015 	stw	r16,0(sp)
   86678:	a0a1883a 	add	r16,r20,r2
   8667c:	dd400515 	stw	r21,20(sp)
   86680:	857fff17 	ldw	r21,-4(r16)
   86684:	dc400115 	stw	r17,4(sp)
   86688:	dfc00615 	stw	ra,24(sp)
   8668c:	a809883a 	mov	r4,r21
   86690:	2823883a 	mov	r17,r5
   86694:	dcc00315 	stw	r19,12(sp)
   86698:	dc800215 	stw	r18,8(sp)
   8669c:	00864480 	call	86448 <__hi0bits>
   866a0:	100b883a 	mov	r5,r2
   866a4:	00800804 	movi	r2,32
   866a8:	1145c83a 	sub	r2,r2,r5
   866ac:	88800015 	stw	r2,0(r17)
   866b0:	00800284 	movi	r2,10
   866b4:	80ffff04 	addi	r3,r16,-4
   866b8:	11401416 	blt	r2,r5,8670c <__b2d+0xb0>
   866bc:	008002c4 	movi	r2,11
   866c0:	1149c83a 	sub	r4,r2,r5
   866c4:	a0c02736 	bltu	r20,r3,86764 <__b2d+0x108>
   866c8:	000d883a 	mov	r6,zero
   866cc:	28800544 	addi	r2,r5,21
   866d0:	a906d83a 	srl	r3,r21,r4
   866d4:	a884983a 	sll	r2,r21,r2
   866d8:	1ccffc34 	orhi	r19,r3,16368
   866dc:	11a4b03a 	or	r18,r2,r6
   866e0:	9005883a 	mov	r2,r18
   866e4:	9807883a 	mov	r3,r19
   866e8:	dfc00617 	ldw	ra,24(sp)
   866ec:	dd400517 	ldw	r21,20(sp)
   866f0:	dd000417 	ldw	r20,16(sp)
   866f4:	dcc00317 	ldw	r19,12(sp)
   866f8:	dc800217 	ldw	r18,8(sp)
   866fc:	dc400117 	ldw	r17,4(sp)
   86700:	dc000017 	ldw	r16,0(sp)
   86704:	dec00704 	addi	sp,sp,28
   86708:	f800283a 	ret
   8670c:	a0c00e36 	bltu	r20,r3,86748 <__b2d+0xec>
   86710:	293ffd44 	addi	r4,r5,-11
   86714:	000d883a 	mov	r6,zero
   86718:	20000f26 	beq	r4,zero,86758 <__b2d+0xfc>
   8671c:	00800804 	movi	r2,32
   86720:	110bc83a 	sub	r5,r2,r4
   86724:	a0c01236 	bltu	r20,r3,86770 <__b2d+0x114>
   86728:	000f883a 	mov	r7,zero
   8672c:	a904983a 	sll	r2,r21,r4
   86730:	3146d83a 	srl	r3,r6,r5
   86734:	3108983a 	sll	r4,r6,r4
   86738:	108ffc34 	orhi	r2,r2,16368
   8673c:	18a6b03a 	or	r19,r3,r2
   86740:	3924b03a 	or	r18,r7,r4
   86744:	003fe606 	br	866e0 <__b2d+0x84>
   86748:	293ffd44 	addi	r4,r5,-11
   8674c:	81bffe17 	ldw	r6,-8(r16)
   86750:	80fffe04 	addi	r3,r16,-8
   86754:	203ff11e 	bne	r4,zero,8671c <__b2d+0xc0>
   86758:	accffc34 	orhi	r19,r21,16368
   8675c:	3025883a 	mov	r18,r6
   86760:	003fdf06 	br	866e0 <__b2d+0x84>
   86764:	18bfff17 	ldw	r2,-4(r3)
   86768:	110cd83a 	srl	r6,r2,r4
   8676c:	003fd706 	br	866cc <__b2d+0x70>
   86770:	18bfff17 	ldw	r2,-4(r3)
   86774:	114ed83a 	srl	r7,r2,r5
   86778:	003fec06 	br	8672c <__b2d+0xd0>

0008677c <__ratio>:
   8677c:	defff904 	addi	sp,sp,-28
   86780:	dc400215 	stw	r17,8(sp)
   86784:	2823883a 	mov	r17,r5
   86788:	d80b883a 	mov	r5,sp
   8678c:	dfc00615 	stw	ra,24(sp)
   86790:	dd000515 	stw	r20,20(sp)
   86794:	dcc00415 	stw	r19,16(sp)
   86798:	dc800315 	stw	r18,12(sp)
   8679c:	2025883a 	mov	r18,r4
   867a0:	008665c0 	call	8665c <__b2d>
   867a4:	8809883a 	mov	r4,r17
   867a8:	d9400104 	addi	r5,sp,4
   867ac:	1027883a 	mov	r19,r2
   867b0:	1829883a 	mov	r20,r3
   867b4:	008665c0 	call	8665c <__b2d>
   867b8:	89000417 	ldw	r4,16(r17)
   867bc:	91c00417 	ldw	r7,16(r18)
   867c0:	d9800117 	ldw	r6,4(sp)
   867c4:	180b883a 	mov	r5,r3
   867c8:	390fc83a 	sub	r7,r7,r4
   867cc:	1009883a 	mov	r4,r2
   867d0:	d8800017 	ldw	r2,0(sp)
   867d4:	380e917a 	slli	r7,r7,5
   867d8:	2011883a 	mov	r8,r4
   867dc:	1185c83a 	sub	r2,r2,r6
   867e0:	11c5883a 	add	r2,r2,r7
   867e4:	1006953a 	slli	r3,r2,20
   867e8:	2813883a 	mov	r9,r5
   867ec:	00800d0e 	bge	zero,r2,86824 <__ratio+0xa8>
   867f0:	1d29883a 	add	r20,r3,r20
   867f4:	a00b883a 	mov	r5,r20
   867f8:	480f883a 	mov	r7,r9
   867fc:	9809883a 	mov	r4,r19
   86800:	400d883a 	mov	r6,r8
   86804:	00897c40 	call	897c4 <__divdf3>
   86808:	dfc00617 	ldw	ra,24(sp)
   8680c:	dd000517 	ldw	r20,20(sp)
   86810:	dcc00417 	ldw	r19,16(sp)
   86814:	dc800317 	ldw	r18,12(sp)
   86818:	dc400217 	ldw	r17,8(sp)
   8681c:	dec00704 	addi	sp,sp,28
   86820:	f800283a 	ret
   86824:	28d3c83a 	sub	r9,r5,r3
   86828:	003ff206 	br	867f4 <__ratio+0x78>

0008682c <_mprec_log10>:
   8682c:	defffe04 	addi	sp,sp,-8
   86830:	008005c4 	movi	r2,23
   86834:	dc000015 	stw	r16,0(sp)
   86838:	dfc00115 	stw	ra,4(sp)
   8683c:	2021883a 	mov	r16,r4
   86840:	11000c16 	blt	r2,r4,86874 <_mprec_log10+0x48>
   86844:	200490fa 	slli	r2,r4,3
   86848:	00c00274 	movhi	r3,9
   8684c:	18f55604 	addi	r3,r3,-10920
   86850:	10c5883a 	add	r2,r2,r3
   86854:	12400117 	ldw	r9,4(r2)
   86858:	12000017 	ldw	r8,0(r2)
   8685c:	4807883a 	mov	r3,r9
   86860:	4005883a 	mov	r2,r8
   86864:	dfc00117 	ldw	ra,4(sp)
   86868:	dc000017 	ldw	r16,0(sp)
   8686c:	dec00204 	addi	sp,sp,8
   86870:	f800283a 	ret
   86874:	0011883a 	mov	r8,zero
   86878:	024ffc34 	movhi	r9,16368
   8687c:	0005883a 	mov	r2,zero
   86880:	00d00934 	movhi	r3,16420
   86884:	480b883a 	mov	r5,r9
   86888:	4009883a 	mov	r4,r8
   8688c:	180f883a 	mov	r7,r3
   86890:	100d883a 	mov	r6,r2
   86894:	00894000 	call	89400 <__muldf3>
   86898:	843fffc4 	addi	r16,r16,-1
   8689c:	1011883a 	mov	r8,r2
   868a0:	1813883a 	mov	r9,r3
   868a4:	803ff51e 	bne	r16,zero,8687c <_mprec_log10+0x50>
   868a8:	4005883a 	mov	r2,r8
   868ac:	4807883a 	mov	r3,r9
   868b0:	dfc00117 	ldw	ra,4(sp)
   868b4:	dc000017 	ldw	r16,0(sp)
   868b8:	dec00204 	addi	sp,sp,8
   868bc:	f800283a 	ret

000868c0 <__copybits>:
   868c0:	297fffc4 	addi	r5,r5,-1
   868c4:	30800417 	ldw	r2,16(r6)
   868c8:	280bd17a 	srai	r5,r5,5
   868cc:	31800504 	addi	r6,r6,20
   868d0:	1085883a 	add	r2,r2,r2
   868d4:	294b883a 	add	r5,r5,r5
   868d8:	294b883a 	add	r5,r5,r5
   868dc:	1085883a 	add	r2,r2,r2
   868e0:	290b883a 	add	r5,r5,r4
   868e4:	3087883a 	add	r3,r6,r2
   868e8:	29400104 	addi	r5,r5,4
   868ec:	30c0052e 	bgeu	r6,r3,86904 <__copybits+0x44>
   868f0:	30800017 	ldw	r2,0(r6)
   868f4:	31800104 	addi	r6,r6,4
   868f8:	20800015 	stw	r2,0(r4)
   868fc:	21000104 	addi	r4,r4,4
   86900:	30fffb36 	bltu	r6,r3,868f0 <__copybits+0x30>
   86904:	2140032e 	bgeu	r4,r5,86914 <__copybits+0x54>
   86908:	20000015 	stw	zero,0(r4)
   8690c:	21000104 	addi	r4,r4,4
   86910:	217ffd36 	bltu	r4,r5,86908 <__copybits+0x48>
   86914:	f800283a 	ret

00086918 <__any_on>:
   86918:	20800417 	ldw	r2,16(r4)
   8691c:	2807d17a 	srai	r3,r5,5
   86920:	21000504 	addi	r4,r4,20
   86924:	10c00d0e 	bge	r2,r3,8695c <__any_on+0x44>
   86928:	1085883a 	add	r2,r2,r2
   8692c:	1085883a 	add	r2,r2,r2
   86930:	208d883a 	add	r6,r4,r2
   86934:	2180182e 	bgeu	r4,r6,86998 <__any_on+0x80>
   86938:	30bfff17 	ldw	r2,-4(r6)
   8693c:	30ffff04 	addi	r3,r6,-4
   86940:	1000041e 	bne	r2,zero,86954 <__any_on+0x3c>
   86944:	20c0142e 	bgeu	r4,r3,86998 <__any_on+0x80>
   86948:	18ffff04 	addi	r3,r3,-4
   8694c:	18800017 	ldw	r2,0(r3)
   86950:	103ffc26 	beq	r2,zero,86944 <__any_on+0x2c>
   86954:	00800044 	movi	r2,1
   86958:	f800283a 	ret
   8695c:	18800a0e 	bge	r3,r2,86988 <__any_on+0x70>
   86960:	294007cc 	andi	r5,r5,31
   86964:	28000826 	beq	r5,zero,86988 <__any_on+0x70>
   86968:	18c5883a 	add	r2,r3,r3
   8696c:	1085883a 	add	r2,r2,r2
   86970:	208d883a 	add	r6,r4,r2
   86974:	30c00017 	ldw	r3,0(r6)
   86978:	1944d83a 	srl	r2,r3,r5
   8697c:	1144983a 	sll	r2,r2,r5
   86980:	18bff41e 	bne	r3,r2,86954 <__any_on+0x3c>
   86984:	003feb06 	br	86934 <__any_on+0x1c>
   86988:	18c5883a 	add	r2,r3,r3
   8698c:	1085883a 	add	r2,r2,r2
   86990:	208d883a 	add	r6,r4,r2
   86994:	003fe706 	br	86934 <__any_on+0x1c>
   86998:	0005883a 	mov	r2,zero
   8699c:	f800283a 	ret

000869a0 <_Balloc>:
   869a0:	20c01317 	ldw	r3,76(r4)
   869a4:	defffb04 	addi	sp,sp,-20
   869a8:	dcc00315 	stw	r19,12(sp)
   869ac:	dc800215 	stw	r18,8(sp)
   869b0:	dfc00415 	stw	ra,16(sp)
   869b4:	2825883a 	mov	r18,r5
   869b8:	dc400115 	stw	r17,4(sp)
   869bc:	dc000015 	stw	r16,0(sp)
   869c0:	2027883a 	mov	r19,r4
   869c4:	01800404 	movi	r6,16
   869c8:	01400104 	movi	r5,4
   869cc:	18001726 	beq	r3,zero,86a2c <_Balloc+0x8c>
   869d0:	01400044 	movi	r5,1
   869d4:	9485883a 	add	r2,r18,r18
   869d8:	2ca2983a 	sll	r17,r5,r18
   869dc:	1085883a 	add	r2,r2,r2
   869e0:	10c7883a 	add	r3,r2,r3
   869e4:	1c000017 	ldw	r16,0(r3)
   869e8:	8c4d883a 	add	r6,r17,r17
   869ec:	318d883a 	add	r6,r6,r6
   869f0:	9809883a 	mov	r4,r19
   869f4:	31800504 	addi	r6,r6,20
   869f8:	80001226 	beq	r16,zero,86a44 <_Balloc+0xa4>
   869fc:	80800017 	ldw	r2,0(r16)
   86a00:	18800015 	stw	r2,0(r3)
   86a04:	80000415 	stw	zero,16(r16)
   86a08:	80000315 	stw	zero,12(r16)
   86a0c:	8005883a 	mov	r2,r16
   86a10:	dfc00417 	ldw	ra,16(sp)
   86a14:	dcc00317 	ldw	r19,12(sp)
   86a18:	dc800217 	ldw	r18,8(sp)
   86a1c:	dc400117 	ldw	r17,4(sp)
   86a20:	dc000017 	ldw	r16,0(sp)
   86a24:	dec00504 	addi	sp,sp,20
   86a28:	f800283a 	ret
   86a2c:	0087e000 	call	87e00 <_calloc_r>
   86a30:	1007883a 	mov	r3,r2
   86a34:	0021883a 	mov	r16,zero
   86a38:	98801315 	stw	r2,76(r19)
   86a3c:	103fe41e 	bne	r2,zero,869d0 <_Balloc+0x30>
   86a40:	003ff206 	br	86a0c <_Balloc+0x6c>
   86a44:	0087e000 	call	87e00 <_calloc_r>
   86a48:	103ff026 	beq	r2,zero,86a0c <_Balloc+0x6c>
   86a4c:	1021883a 	mov	r16,r2
   86a50:	14800115 	stw	r18,4(r2)
   86a54:	14400215 	stw	r17,8(r2)
   86a58:	003fea06 	br	86a04 <_Balloc+0x64>

00086a5c <__d2b>:
   86a5c:	defff504 	addi	sp,sp,-44
   86a60:	dcc00515 	stw	r19,20(sp)
   86a64:	04c00044 	movi	r19,1
   86a68:	dc000215 	stw	r16,8(sp)
   86a6c:	2821883a 	mov	r16,r5
   86a70:	980b883a 	mov	r5,r19
   86a74:	ddc00915 	stw	r23,36(sp)
   86a78:	dd800815 	stw	r22,32(sp)
   86a7c:	dd400715 	stw	r21,28(sp)
   86a80:	dd000615 	stw	r20,24(sp)
   86a84:	dc800415 	stw	r18,16(sp)
   86a88:	dc400315 	stw	r17,12(sp)
   86a8c:	dfc00a15 	stw	ra,40(sp)
   86a90:	3023883a 	mov	r17,r6
   86a94:	382d883a 	mov	r22,r7
   86a98:	ddc00b17 	ldw	r23,44(sp)
   86a9c:	00869a00 	call	869a0 <_Balloc>
   86aa0:	1025883a 	mov	r18,r2
   86aa4:	00a00034 	movhi	r2,32768
   86aa8:	10bfffc4 	addi	r2,r2,-1
   86aac:	8888703a 	and	r4,r17,r2
   86ab0:	202ad53a 	srli	r21,r4,20
   86ab4:	00800434 	movhi	r2,16
   86ab8:	10bfffc4 	addi	r2,r2,-1
   86abc:	8886703a 	and	r3,r17,r2
   86ac0:	a829003a 	cmpeq	r20,r21,zero
   86ac4:	800b883a 	mov	r5,r16
   86ac8:	d8c00115 	stw	r3,4(sp)
   86acc:	94000504 	addi	r16,r18,20
   86ad0:	a000021e 	bne	r20,zero,86adc <__d2b+0x80>
   86ad4:	18c00434 	orhi	r3,r3,16
   86ad8:	d8c00115 	stw	r3,4(sp)
   86adc:	28002726 	beq	r5,zero,86b7c <__d2b+0x120>
   86ae0:	d809883a 	mov	r4,sp
   86ae4:	d9400015 	stw	r5,0(sp)
   86ae8:	00864b80 	call	864b8 <__lo0bits>
   86aec:	100d883a 	mov	r6,r2
   86af0:	10003526 	beq	r2,zero,86bc8 <__d2b+0x16c>
   86af4:	d8c00117 	ldw	r3,4(sp)
   86af8:	00800804 	movi	r2,32
   86afc:	1185c83a 	sub	r2,r2,r6
   86b00:	d9000017 	ldw	r4,0(sp)
   86b04:	1886983a 	sll	r3,r3,r2
   86b08:	1906b03a 	or	r3,r3,r4
   86b0c:	90c00515 	stw	r3,20(r18)
   86b10:	d8c00117 	ldw	r3,4(sp)
   86b14:	1986d83a 	srl	r3,r3,r6
   86b18:	d8c00115 	stw	r3,4(sp)
   86b1c:	180b003a 	cmpeq	r5,r3,zero
   86b20:	00800084 	movi	r2,2
   86b24:	114bc83a 	sub	r5,r2,r5
   86b28:	80c00115 	stw	r3,4(r16)
   86b2c:	91400415 	stw	r5,16(r18)
   86b30:	a0001a1e 	bne	r20,zero,86b9c <__d2b+0x140>
   86b34:	3545883a 	add	r2,r6,r21
   86b38:	10bef344 	addi	r2,r2,-1075
   86b3c:	00c00d44 	movi	r3,53
   86b40:	b0800015 	stw	r2,0(r22)
   86b44:	1987c83a 	sub	r3,r3,r6
   86b48:	b8c00015 	stw	r3,0(r23)
   86b4c:	9005883a 	mov	r2,r18
   86b50:	dfc00a17 	ldw	ra,40(sp)
   86b54:	ddc00917 	ldw	r23,36(sp)
   86b58:	dd800817 	ldw	r22,32(sp)
   86b5c:	dd400717 	ldw	r21,28(sp)
   86b60:	dd000617 	ldw	r20,24(sp)
   86b64:	dcc00517 	ldw	r19,20(sp)
   86b68:	dc800417 	ldw	r18,16(sp)
   86b6c:	dc400317 	ldw	r17,12(sp)
   86b70:	dc000217 	ldw	r16,8(sp)
   86b74:	dec00b04 	addi	sp,sp,44
   86b78:	f800283a 	ret
   86b7c:	d9000104 	addi	r4,sp,4
   86b80:	00864b80 	call	864b8 <__lo0bits>
   86b84:	11800804 	addi	r6,r2,32
   86b88:	d8800117 	ldw	r2,4(sp)
   86b8c:	94c00415 	stw	r19,16(r18)
   86b90:	980b883a 	mov	r5,r19
   86b94:	90800515 	stw	r2,20(r18)
   86b98:	a03fe626 	beq	r20,zero,86b34 <__d2b+0xd8>
   86b9c:	2945883a 	add	r2,r5,r5
   86ba0:	1085883a 	add	r2,r2,r2
   86ba4:	1405883a 	add	r2,r2,r16
   86ba8:	113fff17 	ldw	r4,-4(r2)
   86bac:	30fef384 	addi	r3,r6,-1074
   86bb0:	2820917a 	slli	r16,r5,5
   86bb4:	b0c00015 	stw	r3,0(r22)
   86bb8:	00864480 	call	86448 <__hi0bits>
   86bbc:	80a1c83a 	sub	r16,r16,r2
   86bc0:	bc000015 	stw	r16,0(r23)
   86bc4:	003fe106 	br	86b4c <__d2b+0xf0>
   86bc8:	d8800017 	ldw	r2,0(sp)
   86bcc:	90800515 	stw	r2,20(r18)
   86bd0:	d8c00117 	ldw	r3,4(sp)
   86bd4:	003fd106 	br	86b1c <__d2b+0xc0>

00086bd8 <__mdiff>:
   86bd8:	defffb04 	addi	sp,sp,-20
   86bdc:	dc000015 	stw	r16,0(sp)
   86be0:	2821883a 	mov	r16,r5
   86be4:	dc800215 	stw	r18,8(sp)
   86be8:	300b883a 	mov	r5,r6
   86bec:	2025883a 	mov	r18,r4
   86bf0:	8009883a 	mov	r4,r16
   86bf4:	dc400115 	stw	r17,4(sp)
   86bf8:	dfc00415 	stw	ra,16(sp)
   86bfc:	dcc00315 	stw	r19,12(sp)
   86c00:	3023883a 	mov	r17,r6
   86c04:	008657c0 	call	8657c <__mcmp>
   86c08:	10004226 	beq	r2,zero,86d14 <__mdiff+0x13c>
   86c0c:	10005016 	blt	r2,zero,86d50 <__mdiff+0x178>
   86c10:	0027883a 	mov	r19,zero
   86c14:	81400117 	ldw	r5,4(r16)
   86c18:	9009883a 	mov	r4,r18
   86c1c:	00869a00 	call	869a0 <_Balloc>
   86c20:	1019883a 	mov	r12,r2
   86c24:	82800417 	ldw	r10,16(r16)
   86c28:	88800417 	ldw	r2,16(r17)
   86c2c:	81800504 	addi	r6,r16,20
   86c30:	5287883a 	add	r3,r10,r10
   86c34:	1085883a 	add	r2,r2,r2
   86c38:	18c7883a 	add	r3,r3,r3
   86c3c:	1085883a 	add	r2,r2,r2
   86c40:	8a000504 	addi	r8,r17,20
   86c44:	64c00315 	stw	r19,12(r12)
   86c48:	30db883a 	add	r13,r6,r3
   86c4c:	4097883a 	add	r11,r8,r2
   86c50:	61c00504 	addi	r7,r12,20
   86c54:	0013883a 	mov	r9,zero
   86c58:	31000017 	ldw	r4,0(r6)
   86c5c:	41400017 	ldw	r5,0(r8)
   86c60:	42000104 	addi	r8,r8,4
   86c64:	20bfffcc 	andi	r2,r4,65535
   86c68:	28ffffcc 	andi	r3,r5,65535
   86c6c:	10c5c83a 	sub	r2,r2,r3
   86c70:	1245883a 	add	r2,r2,r9
   86c74:	2008d43a 	srli	r4,r4,16
   86c78:	280ad43a 	srli	r5,r5,16
   86c7c:	1007d43a 	srai	r3,r2,16
   86c80:	3880000d 	sth	r2,0(r7)
   86c84:	2149c83a 	sub	r4,r4,r5
   86c88:	20c9883a 	add	r4,r4,r3
   86c8c:	3900008d 	sth	r4,2(r7)
   86c90:	31800104 	addi	r6,r6,4
   86c94:	39c00104 	addi	r7,r7,4
   86c98:	2013d43a 	srai	r9,r4,16
   86c9c:	42ffee36 	bltu	r8,r11,86c58 <__mdiff+0x80>
   86ca0:	33400c2e 	bgeu	r6,r13,86cd4 <__mdiff+0xfc>
   86ca4:	30800017 	ldw	r2,0(r6)
   86ca8:	31800104 	addi	r6,r6,4
   86cac:	10ffffcc 	andi	r3,r2,65535
   86cb0:	1a47883a 	add	r3,r3,r9
   86cb4:	1004d43a 	srli	r2,r2,16
   86cb8:	1809d43a 	srai	r4,r3,16
   86cbc:	38c0000d 	sth	r3,0(r7)
   86cc0:	1105883a 	add	r2,r2,r4
   86cc4:	3880008d 	sth	r2,2(r7)
   86cc8:	1013d43a 	srai	r9,r2,16
   86ccc:	39c00104 	addi	r7,r7,4
   86cd0:	337ff436 	bltu	r6,r13,86ca4 <__mdiff+0xcc>
   86cd4:	38bfff17 	ldw	r2,-4(r7)
   86cd8:	38ffff04 	addi	r3,r7,-4
   86cdc:	1000041e 	bne	r2,zero,86cf0 <__mdiff+0x118>
   86ce0:	18ffff04 	addi	r3,r3,-4
   86ce4:	18800017 	ldw	r2,0(r3)
   86ce8:	52bfffc4 	addi	r10,r10,-1
   86cec:	103ffc26 	beq	r2,zero,86ce0 <__mdiff+0x108>
   86cf0:	6005883a 	mov	r2,r12
   86cf4:	62800415 	stw	r10,16(r12)
   86cf8:	dfc00417 	ldw	ra,16(sp)
   86cfc:	dcc00317 	ldw	r19,12(sp)
   86d00:	dc800217 	ldw	r18,8(sp)
   86d04:	dc400117 	ldw	r17,4(sp)
   86d08:	dc000017 	ldw	r16,0(sp)
   86d0c:	dec00504 	addi	sp,sp,20
   86d10:	f800283a 	ret
   86d14:	9009883a 	mov	r4,r18
   86d18:	000b883a 	mov	r5,zero
   86d1c:	00869a00 	call	869a0 <_Balloc>
   86d20:	1019883a 	mov	r12,r2
   86d24:	00800044 	movi	r2,1
   86d28:	60800415 	stw	r2,16(r12)
   86d2c:	6005883a 	mov	r2,r12
   86d30:	60000515 	stw	zero,20(r12)
   86d34:	dfc00417 	ldw	ra,16(sp)
   86d38:	dcc00317 	ldw	r19,12(sp)
   86d3c:	dc800217 	ldw	r18,8(sp)
   86d40:	dc400117 	ldw	r17,4(sp)
   86d44:	dc000017 	ldw	r16,0(sp)
   86d48:	dec00504 	addi	sp,sp,20
   86d4c:	f800283a 	ret
   86d50:	880d883a 	mov	r6,r17
   86d54:	04c00044 	movi	r19,1
   86d58:	8023883a 	mov	r17,r16
   86d5c:	3021883a 	mov	r16,r6
   86d60:	003fac06 	br	86c14 <__mdiff+0x3c>

00086d64 <__lshift>:
   86d64:	defff904 	addi	sp,sp,-28
   86d68:	28800417 	ldw	r2,16(r5)
   86d6c:	dc000015 	stw	r16,0(sp)
   86d70:	3021d17a 	srai	r16,r6,5
   86d74:	28c00217 	ldw	r3,8(r5)
   86d78:	10800044 	addi	r2,r2,1
   86d7c:	dc400115 	stw	r17,4(sp)
   86d80:	80a3883a 	add	r17,r16,r2
   86d84:	dd400515 	stw	r21,20(sp)
   86d88:	dd000415 	stw	r20,16(sp)
   86d8c:	dc800215 	stw	r18,8(sp)
   86d90:	dfc00615 	stw	ra,24(sp)
   86d94:	2825883a 	mov	r18,r5
   86d98:	dcc00315 	stw	r19,12(sp)
   86d9c:	3029883a 	mov	r20,r6
   86da0:	202b883a 	mov	r21,r4
   86da4:	29400117 	ldw	r5,4(r5)
   86da8:	1c40030e 	bge	r3,r17,86db8 <__lshift+0x54>
   86dac:	18c7883a 	add	r3,r3,r3
   86db0:	29400044 	addi	r5,r5,1
   86db4:	1c7ffd16 	blt	r3,r17,86dac <__lshift+0x48>
   86db8:	a809883a 	mov	r4,r21
   86dbc:	00869a00 	call	869a0 <_Balloc>
   86dc0:	1027883a 	mov	r19,r2
   86dc4:	11400504 	addi	r5,r2,20
   86dc8:	0400090e 	bge	zero,r16,86df0 <__lshift+0x8c>
   86dcc:	2805883a 	mov	r2,r5
   86dd0:	0007883a 	mov	r3,zero
   86dd4:	18c00044 	addi	r3,r3,1
   86dd8:	10000015 	stw	zero,0(r2)
   86ddc:	10800104 	addi	r2,r2,4
   86de0:	80fffc1e 	bne	r16,r3,86dd4 <__lshift+0x70>
   86de4:	8405883a 	add	r2,r16,r16
   86de8:	1085883a 	add	r2,r2,r2
   86dec:	288b883a 	add	r5,r5,r2
   86df0:	90800417 	ldw	r2,16(r18)
   86df4:	91000504 	addi	r4,r18,20
   86df8:	a18007cc 	andi	r6,r20,31
   86dfc:	1085883a 	add	r2,r2,r2
   86e00:	1085883a 	add	r2,r2,r2
   86e04:	208f883a 	add	r7,r4,r2
   86e08:	30001e26 	beq	r6,zero,86e84 <__lshift+0x120>
   86e0c:	00800804 	movi	r2,32
   86e10:	1191c83a 	sub	r8,r2,r6
   86e14:	0007883a 	mov	r3,zero
   86e18:	20800017 	ldw	r2,0(r4)
   86e1c:	1184983a 	sll	r2,r2,r6
   86e20:	1884b03a 	or	r2,r3,r2
   86e24:	28800015 	stw	r2,0(r5)
   86e28:	20c00017 	ldw	r3,0(r4)
   86e2c:	21000104 	addi	r4,r4,4
   86e30:	29400104 	addi	r5,r5,4
   86e34:	1a06d83a 	srl	r3,r3,r8
   86e38:	21fff736 	bltu	r4,r7,86e18 <__lshift+0xb4>
   86e3c:	28c00015 	stw	r3,0(r5)
   86e40:	18000126 	beq	r3,zero,86e48 <__lshift+0xe4>
   86e44:	8c400044 	addi	r17,r17,1
   86e48:	88bfffc4 	addi	r2,r17,-1
   86e4c:	98800415 	stw	r2,16(r19)
   86e50:	a809883a 	mov	r4,r21
   86e54:	900b883a 	mov	r5,r18
   86e58:	00864200 	call	86420 <_Bfree>
   86e5c:	9805883a 	mov	r2,r19
   86e60:	dfc00617 	ldw	ra,24(sp)
   86e64:	dd400517 	ldw	r21,20(sp)
   86e68:	dd000417 	ldw	r20,16(sp)
   86e6c:	dcc00317 	ldw	r19,12(sp)
   86e70:	dc800217 	ldw	r18,8(sp)
   86e74:	dc400117 	ldw	r17,4(sp)
   86e78:	dc000017 	ldw	r16,0(sp)
   86e7c:	dec00704 	addi	sp,sp,28
   86e80:	f800283a 	ret
   86e84:	20800017 	ldw	r2,0(r4)
   86e88:	21000104 	addi	r4,r4,4
   86e8c:	28800015 	stw	r2,0(r5)
   86e90:	29400104 	addi	r5,r5,4
   86e94:	21ffec2e 	bgeu	r4,r7,86e48 <__lshift+0xe4>
   86e98:	20800017 	ldw	r2,0(r4)
   86e9c:	21000104 	addi	r4,r4,4
   86ea0:	28800015 	stw	r2,0(r5)
   86ea4:	29400104 	addi	r5,r5,4
   86ea8:	21fff636 	bltu	r4,r7,86e84 <__lshift+0x120>
   86eac:	003fe606 	br	86e48 <__lshift+0xe4>

00086eb0 <__multiply>:
   86eb0:	defff004 	addi	sp,sp,-64
   86eb4:	dc800815 	stw	r18,32(sp)
   86eb8:	dc400715 	stw	r17,28(sp)
   86ebc:	2c800417 	ldw	r18,16(r5)
   86ec0:	34400417 	ldw	r17,16(r6)
   86ec4:	dcc00915 	stw	r19,36(sp)
   86ec8:	dc000615 	stw	r16,24(sp)
   86ecc:	dfc00f15 	stw	ra,60(sp)
   86ed0:	df000e15 	stw	fp,56(sp)
   86ed4:	ddc00d15 	stw	r23,52(sp)
   86ed8:	dd800c15 	stw	r22,48(sp)
   86edc:	dd400b15 	stw	r21,44(sp)
   86ee0:	dd000a15 	stw	r20,40(sp)
   86ee4:	2821883a 	mov	r16,r5
   86ee8:	3027883a 	mov	r19,r6
   86eec:	9440040e 	bge	r18,r17,86f00 <__multiply+0x50>
   86ef0:	8825883a 	mov	r18,r17
   86ef4:	2c400417 	ldw	r17,16(r5)
   86ef8:	2827883a 	mov	r19,r5
   86efc:	3021883a 	mov	r16,r6
   86f00:	80800217 	ldw	r2,8(r16)
   86f04:	9447883a 	add	r3,r18,r17
   86f08:	d8c00415 	stw	r3,16(sp)
   86f0c:	81400117 	ldw	r5,4(r16)
   86f10:	10c0010e 	bge	r2,r3,86f18 <__multiply+0x68>
   86f14:	29400044 	addi	r5,r5,1
   86f18:	00869a00 	call	869a0 <_Balloc>
   86f1c:	d8800515 	stw	r2,20(sp)
   86f20:	d9000417 	ldw	r4,16(sp)
   86f24:	d8c00517 	ldw	r3,20(sp)
   86f28:	2105883a 	add	r2,r4,r4
   86f2c:	1085883a 	add	r2,r2,r2
   86f30:	19000504 	addi	r4,r3,20
   86f34:	2085883a 	add	r2,r4,r2
   86f38:	d8800315 	stw	r2,12(sp)
   86f3c:	2080052e 	bgeu	r4,r2,86f54 <__multiply+0xa4>
   86f40:	2005883a 	mov	r2,r4
   86f44:	d8c00317 	ldw	r3,12(sp)
   86f48:	10000015 	stw	zero,0(r2)
   86f4c:	10800104 	addi	r2,r2,4
   86f50:	10fffc36 	bltu	r2,r3,86f44 <__multiply+0x94>
   86f54:	8c45883a 	add	r2,r17,r17
   86f58:	9487883a 	add	r3,r18,r18
   86f5c:	9dc00504 	addi	r23,r19,20
   86f60:	1085883a 	add	r2,r2,r2
   86f64:	84000504 	addi	r16,r16,20
   86f68:	18c7883a 	add	r3,r3,r3
   86f6c:	b885883a 	add	r2,r23,r2
   86f70:	dc000015 	stw	r16,0(sp)
   86f74:	d8800215 	stw	r2,8(sp)
   86f78:	80f9883a 	add	fp,r16,r3
   86f7c:	b880432e 	bgeu	r23,r2,8708c <__multiply+0x1dc>
   86f80:	d9000115 	stw	r4,4(sp)
   86f84:	b9000017 	ldw	r4,0(r23)
   86f88:	253fffcc 	andi	r20,r4,65535
   86f8c:	a0001a26 	beq	r20,zero,86ff8 <__multiply+0x148>
   86f90:	dcc00017 	ldw	r19,0(sp)
   86f94:	dc800117 	ldw	r18,4(sp)
   86f98:	002b883a 	mov	r21,zero
   86f9c:	9c400017 	ldw	r17,0(r19)
   86fa0:	94000017 	ldw	r16,0(r18)
   86fa4:	a009883a 	mov	r4,r20
   86fa8:	897fffcc 	andi	r5,r17,65535
   86fac:	008a1740 	call	8a174 <__mulsi3>
   86fb0:	880ad43a 	srli	r5,r17,16
   86fb4:	80ffffcc 	andi	r3,r16,65535
   86fb8:	a8c7883a 	add	r3,r21,r3
   86fbc:	a009883a 	mov	r4,r20
   86fc0:	10e3883a 	add	r17,r2,r3
   86fc4:	8020d43a 	srli	r16,r16,16
   86fc8:	008a1740 	call	8a174 <__mulsi3>
   86fcc:	8806d43a 	srli	r3,r17,16
   86fd0:	1405883a 	add	r2,r2,r16
   86fd4:	9cc00104 	addi	r19,r19,4
   86fd8:	1887883a 	add	r3,r3,r2
   86fdc:	90c0008d 	sth	r3,2(r18)
   86fe0:	9440000d 	sth	r17,0(r18)
   86fe4:	182ad43a 	srli	r21,r3,16
   86fe8:	94800104 	addi	r18,r18,4
   86fec:	9f3feb36 	bltu	r19,fp,86f9c <__multiply+0xec>
   86ff0:	95400015 	stw	r21,0(r18)
   86ff4:	b9000017 	ldw	r4,0(r23)
   86ff8:	202ad43a 	srli	r21,r4,16
   86ffc:	a8001c26 	beq	r21,zero,87070 <__multiply+0x1c0>
   87000:	d9000117 	ldw	r4,4(sp)
   87004:	dd000017 	ldw	r20,0(sp)
   87008:	002d883a 	mov	r22,zero
   8700c:	24c00017 	ldw	r19,0(r4)
   87010:	2025883a 	mov	r18,r4
   87014:	9823883a 	mov	r17,r19
   87018:	a4000017 	ldw	r16,0(r20)
   8701c:	a809883a 	mov	r4,r21
   87020:	a5000104 	addi	r20,r20,4
   87024:	817fffcc 	andi	r5,r16,65535
   87028:	008a1740 	call	8a174 <__mulsi3>
   8702c:	8806d43a 	srli	r3,r17,16
   87030:	800ad43a 	srli	r5,r16,16
   87034:	94c0000d 	sth	r19,0(r18)
   87038:	b0c7883a 	add	r3,r22,r3
   8703c:	10e1883a 	add	r16,r2,r3
   87040:	9400008d 	sth	r16,2(r18)
   87044:	a809883a 	mov	r4,r21
   87048:	94800104 	addi	r18,r18,4
   8704c:	008a1740 	call	8a174 <__mulsi3>
   87050:	94400017 	ldw	r17,0(r18)
   87054:	8020d43a 	srli	r16,r16,16
   87058:	88ffffcc 	andi	r3,r17,65535
   8705c:	10c5883a 	add	r2,r2,r3
   87060:	80a7883a 	add	r19,r16,r2
   87064:	982cd43a 	srli	r22,r19,16
   87068:	a73feb36 	bltu	r20,fp,87018 <__multiply+0x168>
   8706c:	94c00015 	stw	r19,0(r18)
   87070:	d8800217 	ldw	r2,8(sp)
   87074:	bdc00104 	addi	r23,r23,4
   87078:	b880042e 	bgeu	r23,r2,8708c <__multiply+0x1dc>
   8707c:	d8c00117 	ldw	r3,4(sp)
   87080:	18c00104 	addi	r3,r3,4
   87084:	d8c00115 	stw	r3,4(sp)
   87088:	003fbe06 	br	86f84 <__multiply+0xd4>
   8708c:	d9000417 	ldw	r4,16(sp)
   87090:	01000c0e 	bge	zero,r4,870c4 <__multiply+0x214>
   87094:	d8c00317 	ldw	r3,12(sp)
   87098:	18bfff17 	ldw	r2,-4(r3)
   8709c:	18ffff04 	addi	r3,r3,-4
   870a0:	10000326 	beq	r2,zero,870b0 <__multiply+0x200>
   870a4:	00000706 	br	870c4 <__multiply+0x214>
   870a8:	18800017 	ldw	r2,0(r3)
   870ac:	1000051e 	bne	r2,zero,870c4 <__multiply+0x214>
   870b0:	d9000417 	ldw	r4,16(sp)
   870b4:	18ffff04 	addi	r3,r3,-4
   870b8:	213fffc4 	addi	r4,r4,-1
   870bc:	d9000415 	stw	r4,16(sp)
   870c0:	203ff91e 	bne	r4,zero,870a8 <__multiply+0x1f8>
   870c4:	d8800417 	ldw	r2,16(sp)
   870c8:	d8c00517 	ldw	r3,20(sp)
   870cc:	18800415 	stw	r2,16(r3)
   870d0:	1805883a 	mov	r2,r3
   870d4:	dfc00f17 	ldw	ra,60(sp)
   870d8:	df000e17 	ldw	fp,56(sp)
   870dc:	ddc00d17 	ldw	r23,52(sp)
   870e0:	dd800c17 	ldw	r22,48(sp)
   870e4:	dd400b17 	ldw	r21,44(sp)
   870e8:	dd000a17 	ldw	r20,40(sp)
   870ec:	dcc00917 	ldw	r19,36(sp)
   870f0:	dc800817 	ldw	r18,32(sp)
   870f4:	dc400717 	ldw	r17,28(sp)
   870f8:	dc000617 	ldw	r16,24(sp)
   870fc:	dec01004 	addi	sp,sp,64
   87100:	f800283a 	ret

00087104 <__i2b>:
   87104:	defffd04 	addi	sp,sp,-12
   87108:	dc000015 	stw	r16,0(sp)
   8710c:	04000044 	movi	r16,1
   87110:	dc800115 	stw	r18,4(sp)
   87114:	2825883a 	mov	r18,r5
   87118:	800b883a 	mov	r5,r16
   8711c:	dfc00215 	stw	ra,8(sp)
   87120:	00869a00 	call	869a0 <_Balloc>
   87124:	14000415 	stw	r16,16(r2)
   87128:	14800515 	stw	r18,20(r2)
   8712c:	dfc00217 	ldw	ra,8(sp)
   87130:	dc800117 	ldw	r18,4(sp)
   87134:	dc000017 	ldw	r16,0(sp)
   87138:	dec00304 	addi	sp,sp,12
   8713c:	f800283a 	ret

00087140 <__multadd>:
   87140:	defff604 	addi	sp,sp,-40
   87144:	dd800615 	stw	r22,24(sp)
   87148:	2d800417 	ldw	r22,16(r5)
   8714c:	df000815 	stw	fp,32(sp)
   87150:	ddc00715 	stw	r23,28(sp)
   87154:	dd400515 	stw	r21,20(sp)
   87158:	dd000415 	stw	r20,16(sp)
   8715c:	dcc00315 	stw	r19,12(sp)
   87160:	dc800215 	stw	r18,8(sp)
   87164:	dfc00915 	stw	ra,36(sp)
   87168:	dc400115 	stw	r17,4(sp)
   8716c:	dc000015 	stw	r16,0(sp)
   87170:	282f883a 	mov	r23,r5
   87174:	2039883a 	mov	fp,r4
   87178:	302b883a 	mov	r21,r6
   8717c:	3829883a 	mov	r20,r7
   87180:	2c800504 	addi	r18,r5,20
   87184:	0027883a 	mov	r19,zero
   87188:	94400017 	ldw	r17,0(r18)
   8718c:	a80b883a 	mov	r5,r21
   87190:	9cc00044 	addi	r19,r19,1
   87194:	893fffcc 	andi	r4,r17,65535
   87198:	008a1740 	call	8a174 <__mulsi3>
   8719c:	8808d43a 	srli	r4,r17,16
   871a0:	1521883a 	add	r16,r2,r20
   871a4:	a80b883a 	mov	r5,r21
   871a8:	008a1740 	call	8a174 <__mulsi3>
   871ac:	8008d43a 	srli	r4,r16,16
   871b0:	843fffcc 	andi	r16,r16,65535
   871b4:	1105883a 	add	r2,r2,r4
   871b8:	1006943a 	slli	r3,r2,16
   871bc:	1028d43a 	srli	r20,r2,16
   871c0:	1c07883a 	add	r3,r3,r16
   871c4:	90c00015 	stw	r3,0(r18)
   871c8:	94800104 	addi	r18,r18,4
   871cc:	9dbfee16 	blt	r19,r22,87188 <__multadd+0x48>
   871d0:	a0000826 	beq	r20,zero,871f4 <__multadd+0xb4>
   871d4:	b8800217 	ldw	r2,8(r23)
   871d8:	b080130e 	bge	r22,r2,87228 <__multadd+0xe8>
   871dc:	b585883a 	add	r2,r22,r22
   871e0:	1085883a 	add	r2,r2,r2
   871e4:	15c5883a 	add	r2,r2,r23
   871e8:	b0c00044 	addi	r3,r22,1
   871ec:	15000515 	stw	r20,20(r2)
   871f0:	b8c00415 	stw	r3,16(r23)
   871f4:	b805883a 	mov	r2,r23
   871f8:	dfc00917 	ldw	ra,36(sp)
   871fc:	df000817 	ldw	fp,32(sp)
   87200:	ddc00717 	ldw	r23,28(sp)
   87204:	dd800617 	ldw	r22,24(sp)
   87208:	dd400517 	ldw	r21,20(sp)
   8720c:	dd000417 	ldw	r20,16(sp)
   87210:	dcc00317 	ldw	r19,12(sp)
   87214:	dc800217 	ldw	r18,8(sp)
   87218:	dc400117 	ldw	r17,4(sp)
   8721c:	dc000017 	ldw	r16,0(sp)
   87220:	dec00a04 	addi	sp,sp,40
   87224:	f800283a 	ret
   87228:	b9400117 	ldw	r5,4(r23)
   8722c:	e009883a 	mov	r4,fp
   87230:	29400044 	addi	r5,r5,1
   87234:	00869a00 	call	869a0 <_Balloc>
   87238:	b9800417 	ldw	r6,16(r23)
   8723c:	b9400304 	addi	r5,r23,12
   87240:	11000304 	addi	r4,r2,12
   87244:	318d883a 	add	r6,r6,r6
   87248:	318d883a 	add	r6,r6,r6
   8724c:	31800204 	addi	r6,r6,8
   87250:	1023883a 	mov	r17,r2
   87254:	00862080 	call	86208 <memcpy>
   87258:	b80b883a 	mov	r5,r23
   8725c:	e009883a 	mov	r4,fp
   87260:	00864200 	call	86420 <_Bfree>
   87264:	882f883a 	mov	r23,r17
   87268:	003fdc06 	br	871dc <__multadd+0x9c>

0008726c <__pow5mult>:
   8726c:	defffa04 	addi	sp,sp,-24
   87270:	308000cc 	andi	r2,r6,3
   87274:	dd000415 	stw	r20,16(sp)
   87278:	dcc00315 	stw	r19,12(sp)
   8727c:	dc000015 	stw	r16,0(sp)
   87280:	dfc00515 	stw	ra,20(sp)
   87284:	dc800215 	stw	r18,8(sp)
   87288:	dc400115 	stw	r17,4(sp)
   8728c:	3021883a 	mov	r16,r6
   87290:	2027883a 	mov	r19,r4
   87294:	2829883a 	mov	r20,r5
   87298:	10002b1e 	bne	r2,zero,87348 <__pow5mult+0xdc>
   8729c:	8025d0ba 	srai	r18,r16,2
   872a0:	90001b26 	beq	r18,zero,87310 <__pow5mult+0xa4>
   872a4:	9c001217 	ldw	r16,72(r19)
   872a8:	8000081e 	bne	r16,zero,872cc <__pow5mult+0x60>
   872ac:	00003006 	br	87370 <__pow5mult+0x104>
   872b0:	800b883a 	mov	r5,r16
   872b4:	800d883a 	mov	r6,r16
   872b8:	9809883a 	mov	r4,r19
   872bc:	90001426 	beq	r18,zero,87310 <__pow5mult+0xa4>
   872c0:	80800017 	ldw	r2,0(r16)
   872c4:	10001b26 	beq	r2,zero,87334 <__pow5mult+0xc8>
   872c8:	1021883a 	mov	r16,r2
   872cc:	9080004c 	andi	r2,r18,1
   872d0:	1005003a 	cmpeq	r2,r2,zero
   872d4:	9025d07a 	srai	r18,r18,1
   872d8:	800d883a 	mov	r6,r16
   872dc:	9809883a 	mov	r4,r19
   872e0:	a00b883a 	mov	r5,r20
   872e4:	103ff21e 	bne	r2,zero,872b0 <__pow5mult+0x44>
   872e8:	0086eb00 	call	86eb0 <__multiply>
   872ec:	a00b883a 	mov	r5,r20
   872f0:	9809883a 	mov	r4,r19
   872f4:	1023883a 	mov	r17,r2
   872f8:	00864200 	call	86420 <_Bfree>
   872fc:	8829883a 	mov	r20,r17
   87300:	800b883a 	mov	r5,r16
   87304:	800d883a 	mov	r6,r16
   87308:	9809883a 	mov	r4,r19
   8730c:	903fec1e 	bne	r18,zero,872c0 <__pow5mult+0x54>
   87310:	a005883a 	mov	r2,r20
   87314:	dfc00517 	ldw	ra,20(sp)
   87318:	dd000417 	ldw	r20,16(sp)
   8731c:	dcc00317 	ldw	r19,12(sp)
   87320:	dc800217 	ldw	r18,8(sp)
   87324:	dc400117 	ldw	r17,4(sp)
   87328:	dc000017 	ldw	r16,0(sp)
   8732c:	dec00604 	addi	sp,sp,24
   87330:	f800283a 	ret
   87334:	0086eb00 	call	86eb0 <__multiply>
   87338:	80800015 	stw	r2,0(r16)
   8733c:	1021883a 	mov	r16,r2
   87340:	10000015 	stw	zero,0(r2)
   87344:	003fe106 	br	872cc <__pow5mult+0x60>
   87348:	1085883a 	add	r2,r2,r2
   8734c:	00c00274 	movhi	r3,9
   87350:	18f59c04 	addi	r3,r3,-10640
   87354:	1085883a 	add	r2,r2,r2
   87358:	10c5883a 	add	r2,r2,r3
   8735c:	11bfff17 	ldw	r6,-4(r2)
   87360:	000f883a 	mov	r7,zero
   87364:	00871400 	call	87140 <__multadd>
   87368:	1029883a 	mov	r20,r2
   8736c:	003fcb06 	br	8729c <__pow5mult+0x30>
   87370:	9809883a 	mov	r4,r19
   87374:	01409c44 	movi	r5,625
   87378:	00871040 	call	87104 <__i2b>
   8737c:	98801215 	stw	r2,72(r19)
   87380:	1021883a 	mov	r16,r2
   87384:	10000015 	stw	zero,0(r2)
   87388:	003fd006 	br	872cc <__pow5mult+0x60>

0008738c <__s2b>:
   8738c:	defff904 	addi	sp,sp,-28
   87390:	dcc00315 	stw	r19,12(sp)
   87394:	dc800215 	stw	r18,8(sp)
   87398:	2827883a 	mov	r19,r5
   8739c:	2025883a 	mov	r18,r4
   873a0:	01400244 	movi	r5,9
   873a4:	39000204 	addi	r4,r7,8
   873a8:	dd000415 	stw	r20,16(sp)
   873ac:	dc400115 	stw	r17,4(sp)
   873b0:	dfc00615 	stw	ra,24(sp)
   873b4:	dd400515 	stw	r21,20(sp)
   873b8:	dc000015 	stw	r16,0(sp)
   873bc:	3829883a 	mov	r20,r7
   873c0:	3023883a 	mov	r17,r6
   873c4:	008a0a40 	call	8a0a4 <__divsi3>
   873c8:	00c00044 	movi	r3,1
   873cc:	1880350e 	bge	r3,r2,874a4 <__s2b+0x118>
   873d0:	000b883a 	mov	r5,zero
   873d4:	18c7883a 	add	r3,r3,r3
   873d8:	29400044 	addi	r5,r5,1
   873dc:	18bffd16 	blt	r3,r2,873d4 <__s2b+0x48>
   873e0:	9009883a 	mov	r4,r18
   873e4:	00869a00 	call	869a0 <_Balloc>
   873e8:	1011883a 	mov	r8,r2
   873ec:	d8800717 	ldw	r2,28(sp)
   873f0:	00c00044 	movi	r3,1
   873f4:	01800244 	movi	r6,9
   873f8:	40800515 	stw	r2,20(r8)
   873fc:	40c00415 	stw	r3,16(r8)
   87400:	3440260e 	bge	r6,r17,8749c <__s2b+0x110>
   87404:	3021883a 	mov	r16,r6
   87408:	99ab883a 	add	r21,r19,r6
   8740c:	9c05883a 	add	r2,r19,r16
   87410:	11c00007 	ldb	r7,0(r2)
   87414:	400b883a 	mov	r5,r8
   87418:	9009883a 	mov	r4,r18
   8741c:	39fff404 	addi	r7,r7,-48
   87420:	01800284 	movi	r6,10
   87424:	00871400 	call	87140 <__multadd>
   87428:	84000044 	addi	r16,r16,1
   8742c:	1011883a 	mov	r8,r2
   87430:	8c3ff61e 	bne	r17,r16,8740c <__s2b+0x80>
   87434:	ac45883a 	add	r2,r21,r17
   87438:	117ffe04 	addi	r5,r2,-8
   8743c:	880d883a 	mov	r6,r17
   87440:	35000c0e 	bge	r6,r20,87474 <__s2b+0xe8>
   87444:	a185c83a 	sub	r2,r20,r6
   87448:	2821883a 	mov	r16,r5
   8744c:	28a3883a 	add	r17,r5,r2
   87450:	81c00007 	ldb	r7,0(r16)
   87454:	400b883a 	mov	r5,r8
   87458:	9009883a 	mov	r4,r18
   8745c:	39fff404 	addi	r7,r7,-48
   87460:	01800284 	movi	r6,10
   87464:	00871400 	call	87140 <__multadd>
   87468:	84000044 	addi	r16,r16,1
   8746c:	1011883a 	mov	r8,r2
   87470:	847ff71e 	bne	r16,r17,87450 <__s2b+0xc4>
   87474:	4005883a 	mov	r2,r8
   87478:	dfc00617 	ldw	ra,24(sp)
   8747c:	dd400517 	ldw	r21,20(sp)
   87480:	dd000417 	ldw	r20,16(sp)
   87484:	dcc00317 	ldw	r19,12(sp)
   87488:	dc800217 	ldw	r18,8(sp)
   8748c:	dc400117 	ldw	r17,4(sp)
   87490:	dc000017 	ldw	r16,0(sp)
   87494:	dec00704 	addi	sp,sp,28
   87498:	f800283a 	ret
   8749c:	99400284 	addi	r5,r19,10
   874a0:	003fe706 	br	87440 <__s2b+0xb4>
   874a4:	000b883a 	mov	r5,zero
   874a8:	003fcd06 	br	873e0 <__s2b+0x54>

000874ac <_realloc_r>:
   874ac:	defff404 	addi	sp,sp,-48
   874b0:	dd800815 	stw	r22,32(sp)
   874b4:	dc800415 	stw	r18,16(sp)
   874b8:	dc400315 	stw	r17,12(sp)
   874bc:	dfc00b15 	stw	ra,44(sp)
   874c0:	df000a15 	stw	fp,40(sp)
   874c4:	ddc00915 	stw	r23,36(sp)
   874c8:	dd400715 	stw	r21,28(sp)
   874cc:	dd000615 	stw	r20,24(sp)
   874d0:	dcc00515 	stw	r19,20(sp)
   874d4:	dc000215 	stw	r16,8(sp)
   874d8:	2825883a 	mov	r18,r5
   874dc:	3023883a 	mov	r17,r6
   874e0:	202d883a 	mov	r22,r4
   874e4:	2800c926 	beq	r5,zero,8780c <_realloc_r+0x360>
   874e8:	008aef80 	call	8aef8 <__malloc_lock>
   874ec:	943ffe04 	addi	r16,r18,-8
   874f0:	88c002c4 	addi	r3,r17,11
   874f4:	00800584 	movi	r2,22
   874f8:	82000117 	ldw	r8,4(r16)
   874fc:	10c01b2e 	bgeu	r2,r3,8756c <_realloc_r+0xc0>
   87500:	00bffe04 	movi	r2,-8
   87504:	188e703a 	and	r7,r3,r2
   87508:	3839883a 	mov	fp,r7
   8750c:	38001a16 	blt	r7,zero,87578 <_realloc_r+0xcc>
   87510:	e4401936 	bltu	fp,r17,87578 <_realloc_r+0xcc>
   87514:	013fff04 	movi	r4,-4
   87518:	4126703a 	and	r19,r8,r4
   8751c:	99c02616 	blt	r19,r7,875b8 <_realloc_r+0x10c>
   87520:	802b883a 	mov	r21,r16
   87524:	9829883a 	mov	r20,r19
   87528:	84000204 	addi	r16,r16,8
   8752c:	a80f883a 	mov	r7,r21
   87530:	a70dc83a 	sub	r6,r20,fp
   87534:	008003c4 	movi	r2,15
   87538:	1180c136 	bltu	r2,r6,87840 <_realloc_r+0x394>
   8753c:	38800117 	ldw	r2,4(r7)
   87540:	a549883a 	add	r4,r20,r21
   87544:	1080004c 	andi	r2,r2,1
   87548:	a084b03a 	or	r2,r20,r2
   8754c:	38800115 	stw	r2,4(r7)
   87550:	20c00117 	ldw	r3,4(r4)
   87554:	18c00054 	ori	r3,r3,1
   87558:	20c00115 	stw	r3,4(r4)
   8755c:	b009883a 	mov	r4,r22
   87560:	008af180 	call	8af18 <__malloc_unlock>
   87564:	8023883a 	mov	r17,r16
   87568:	00000606 	br	87584 <_realloc_r+0xd8>
   8756c:	01c00404 	movi	r7,16
   87570:	3839883a 	mov	fp,r7
   87574:	e47fe72e 	bgeu	fp,r17,87514 <_realloc_r+0x68>
   87578:	00800304 	movi	r2,12
   8757c:	0023883a 	mov	r17,zero
   87580:	b0800015 	stw	r2,0(r22)
   87584:	8805883a 	mov	r2,r17
   87588:	dfc00b17 	ldw	ra,44(sp)
   8758c:	df000a17 	ldw	fp,40(sp)
   87590:	ddc00917 	ldw	r23,36(sp)
   87594:	dd800817 	ldw	r22,32(sp)
   87598:	dd400717 	ldw	r21,28(sp)
   8759c:	dd000617 	ldw	r20,24(sp)
   875a0:	dcc00517 	ldw	r19,20(sp)
   875a4:	dc800417 	ldw	r18,16(sp)
   875a8:	dc400317 	ldw	r17,12(sp)
   875ac:	dc000217 	ldw	r16,8(sp)
   875b0:	dec00c04 	addi	sp,sp,48
   875b4:	f800283a 	ret
   875b8:	00800274 	movhi	r2,9
   875bc:	10b7a704 	addi	r2,r2,-8548
   875c0:	12400217 	ldw	r9,8(r2)
   875c4:	84cd883a 	add	r6,r16,r19
   875c8:	802b883a 	mov	r21,r16
   875cc:	3240b926 	beq	r6,r9,878b4 <_realloc_r+0x408>
   875d0:	31400117 	ldw	r5,4(r6)
   875d4:	00bfff84 	movi	r2,-2
   875d8:	2884703a 	and	r2,r5,r2
   875dc:	1185883a 	add	r2,r2,r6
   875e0:	10c00117 	ldw	r3,4(r2)
   875e4:	18c0004c 	andi	r3,r3,1
   875e8:	1807003a 	cmpeq	r3,r3,zero
   875ec:	1800a326 	beq	r3,zero,8787c <_realloc_r+0x3d0>
   875f0:	2908703a 	and	r4,r5,r4
   875f4:	9929883a 	add	r20,r19,r4
   875f8:	a1c0a30e 	bge	r20,r7,87888 <_realloc_r+0x3dc>
   875fc:	4080004c 	andi	r2,r8,1
   87600:	1000551e 	bne	r2,zero,87758 <_realloc_r+0x2ac>
   87604:	80800017 	ldw	r2,0(r16)
   87608:	80afc83a 	sub	r23,r16,r2
   8760c:	b8c00117 	ldw	r3,4(r23)
   87610:	00bfff04 	movi	r2,-4
   87614:	1884703a 	and	r2,r3,r2
   87618:	30002e26 	beq	r6,zero,876d4 <_realloc_r+0x228>
   8761c:	3240b926 	beq	r6,r9,87904 <_realloc_r+0x458>
   87620:	98a9883a 	add	r20,r19,r2
   87624:	2509883a 	add	r4,r4,r20
   87628:	d9000015 	stw	r4,0(sp)
   8762c:	21c02a16 	blt	r4,r7,876d8 <_realloc_r+0x22c>
   87630:	30800317 	ldw	r2,12(r6)
   87634:	30c00217 	ldw	r3,8(r6)
   87638:	01400904 	movi	r5,36
   8763c:	99bfff04 	addi	r6,r19,-4
   87640:	18800315 	stw	r2,12(r3)
   87644:	10c00215 	stw	r3,8(r2)
   87648:	b9000317 	ldw	r4,12(r23)
   8764c:	b8800217 	ldw	r2,8(r23)
   87650:	b82b883a 	mov	r21,r23
   87654:	bc000204 	addi	r16,r23,8
   87658:	20800215 	stw	r2,8(r4)
   8765c:	11000315 	stw	r4,12(r2)
   87660:	2980e436 	bltu	r5,r6,879f4 <_realloc_r+0x548>
   87664:	008004c4 	movi	r2,19
   87668:	9009883a 	mov	r4,r18
   8766c:	8011883a 	mov	r8,r16
   87670:	11800f2e 	bgeu	r2,r6,876b0 <_realloc_r+0x204>
   87674:	90800017 	ldw	r2,0(r18)
   87678:	ba000404 	addi	r8,r23,16
   8767c:	91000204 	addi	r4,r18,8
   87680:	b8800215 	stw	r2,8(r23)
   87684:	90c00117 	ldw	r3,4(r18)
   87688:	008006c4 	movi	r2,27
   8768c:	b8c00315 	stw	r3,12(r23)
   87690:	1180072e 	bgeu	r2,r6,876b0 <_realloc_r+0x204>
   87694:	90c00217 	ldw	r3,8(r18)
   87698:	ba000604 	addi	r8,r23,24
   8769c:	91000404 	addi	r4,r18,16
   876a0:	b8c00415 	stw	r3,16(r23)
   876a4:	90800317 	ldw	r2,12(r18)
   876a8:	b8800515 	stw	r2,20(r23)
   876ac:	3140e726 	beq	r6,r5,87a4c <_realloc_r+0x5a0>
   876b0:	20800017 	ldw	r2,0(r4)
   876b4:	dd000017 	ldw	r20,0(sp)
   876b8:	b80f883a 	mov	r7,r23
   876bc:	40800015 	stw	r2,0(r8)
   876c0:	20c00117 	ldw	r3,4(r4)
   876c4:	40c00115 	stw	r3,4(r8)
   876c8:	20800217 	ldw	r2,8(r4)
   876cc:	40800215 	stw	r2,8(r8)
   876d0:	003f9706 	br	87530 <_realloc_r+0x84>
   876d4:	98a9883a 	add	r20,r19,r2
   876d8:	a1c01f16 	blt	r20,r7,87758 <_realloc_r+0x2ac>
   876dc:	b8c00317 	ldw	r3,12(r23)
   876e0:	b8800217 	ldw	r2,8(r23)
   876e4:	99bfff04 	addi	r6,r19,-4
   876e8:	01400904 	movi	r5,36
   876ec:	b82b883a 	mov	r21,r23
   876f0:	18800215 	stw	r2,8(r3)
   876f4:	10c00315 	stw	r3,12(r2)
   876f8:	bc000204 	addi	r16,r23,8
   876fc:	2980c336 	bltu	r5,r6,87a0c <_realloc_r+0x560>
   87700:	008004c4 	movi	r2,19
   87704:	9009883a 	mov	r4,r18
   87708:	8011883a 	mov	r8,r16
   8770c:	11800f2e 	bgeu	r2,r6,8774c <_realloc_r+0x2a0>
   87710:	90800017 	ldw	r2,0(r18)
   87714:	ba000404 	addi	r8,r23,16
   87718:	91000204 	addi	r4,r18,8
   8771c:	b8800215 	stw	r2,8(r23)
   87720:	90c00117 	ldw	r3,4(r18)
   87724:	008006c4 	movi	r2,27
   87728:	b8c00315 	stw	r3,12(r23)
   8772c:	1180072e 	bgeu	r2,r6,8774c <_realloc_r+0x2a0>
   87730:	90c00217 	ldw	r3,8(r18)
   87734:	ba000604 	addi	r8,r23,24
   87738:	91000404 	addi	r4,r18,16
   8773c:	b8c00415 	stw	r3,16(r23)
   87740:	90800317 	ldw	r2,12(r18)
   87744:	b8800515 	stw	r2,20(r23)
   87748:	3140c726 	beq	r6,r5,87a68 <_realloc_r+0x5bc>
   8774c:	20800017 	ldw	r2,0(r4)
   87750:	b80f883a 	mov	r7,r23
   87754:	003fd906 	br	876bc <_realloc_r+0x210>
   87758:	880b883a 	mov	r5,r17
   8775c:	b009883a 	mov	r4,r22
   87760:	00859e40 	call	859e4 <_malloc_r>
   87764:	1023883a 	mov	r17,r2
   87768:	10002526 	beq	r2,zero,87800 <_realloc_r+0x354>
   8776c:	80800117 	ldw	r2,4(r16)
   87770:	00ffff84 	movi	r3,-2
   87774:	893ffe04 	addi	r4,r17,-8
   87778:	10c4703a 	and	r2,r2,r3
   8777c:	8085883a 	add	r2,r16,r2
   87780:	20809526 	beq	r4,r2,879d8 <_realloc_r+0x52c>
   87784:	99bfff04 	addi	r6,r19,-4
   87788:	01c00904 	movi	r7,36
   8778c:	39804536 	bltu	r7,r6,878a4 <_realloc_r+0x3f8>
   87790:	008004c4 	movi	r2,19
   87794:	9009883a 	mov	r4,r18
   87798:	880b883a 	mov	r5,r17
   8779c:	11800f2e 	bgeu	r2,r6,877dc <_realloc_r+0x330>
   877a0:	90800017 	ldw	r2,0(r18)
   877a4:	89400204 	addi	r5,r17,8
   877a8:	91000204 	addi	r4,r18,8
   877ac:	88800015 	stw	r2,0(r17)
   877b0:	90c00117 	ldw	r3,4(r18)
   877b4:	008006c4 	movi	r2,27
   877b8:	88c00115 	stw	r3,4(r17)
   877bc:	1180072e 	bgeu	r2,r6,877dc <_realloc_r+0x330>
   877c0:	90c00217 	ldw	r3,8(r18)
   877c4:	89400404 	addi	r5,r17,16
   877c8:	91000404 	addi	r4,r18,16
   877cc:	88c00215 	stw	r3,8(r17)
   877d0:	90800317 	ldw	r2,12(r18)
   877d4:	88800315 	stw	r2,12(r17)
   877d8:	31c09126 	beq	r6,r7,87a20 <_realloc_r+0x574>
   877dc:	20800017 	ldw	r2,0(r4)
   877e0:	28800015 	stw	r2,0(r5)
   877e4:	20c00117 	ldw	r3,4(r4)
   877e8:	28c00115 	stw	r3,4(r5)
   877ec:	20800217 	ldw	r2,8(r4)
   877f0:	28800215 	stw	r2,8(r5)
   877f4:	900b883a 	mov	r5,r18
   877f8:	b009883a 	mov	r4,r22
   877fc:	0084e5c0 	call	84e5c <_free_r>
   87800:	b009883a 	mov	r4,r22
   87804:	008af180 	call	8af18 <__malloc_unlock>
   87808:	003f5e06 	br	87584 <_realloc_r+0xd8>
   8780c:	300b883a 	mov	r5,r6
   87810:	dfc00b17 	ldw	ra,44(sp)
   87814:	df000a17 	ldw	fp,40(sp)
   87818:	ddc00917 	ldw	r23,36(sp)
   8781c:	dd800817 	ldw	r22,32(sp)
   87820:	dd400717 	ldw	r21,28(sp)
   87824:	dd000617 	ldw	r20,24(sp)
   87828:	dcc00517 	ldw	r19,20(sp)
   8782c:	dc800417 	ldw	r18,16(sp)
   87830:	dc400317 	ldw	r17,12(sp)
   87834:	dc000217 	ldw	r16,8(sp)
   87838:	dec00c04 	addi	sp,sp,48
   8783c:	00859e41 	jmpi	859e4 <_malloc_r>
   87840:	38800117 	ldw	r2,4(r7)
   87844:	e54b883a 	add	r5,fp,r21
   87848:	31000054 	ori	r4,r6,1
   8784c:	1080004c 	andi	r2,r2,1
   87850:	1704b03a 	or	r2,r2,fp
   87854:	38800115 	stw	r2,4(r7)
   87858:	29000115 	stw	r4,4(r5)
   8785c:	2987883a 	add	r3,r5,r6
   87860:	18800117 	ldw	r2,4(r3)
   87864:	29400204 	addi	r5,r5,8
   87868:	b009883a 	mov	r4,r22
   8786c:	10800054 	ori	r2,r2,1
   87870:	18800115 	stw	r2,4(r3)
   87874:	0084e5c0 	call	84e5c <_free_r>
   87878:	003f3806 	br	8755c <_realloc_r+0xb0>
   8787c:	000d883a 	mov	r6,zero
   87880:	0009883a 	mov	r4,zero
   87884:	003f5d06 	br	875fc <_realloc_r+0x150>
   87888:	30c00217 	ldw	r3,8(r6)
   8788c:	30800317 	ldw	r2,12(r6)
   87890:	800f883a 	mov	r7,r16
   87894:	84000204 	addi	r16,r16,8
   87898:	10c00215 	stw	r3,8(r2)
   8789c:	18800315 	stw	r2,12(r3)
   878a0:	003f2306 	br	87530 <_realloc_r+0x84>
   878a4:	8809883a 	mov	r4,r17
   878a8:	900b883a 	mov	r5,r18
   878ac:	00862a80 	call	862a8 <memmove>
   878b0:	003fd006 	br	877f4 <_realloc_r+0x348>
   878b4:	30800117 	ldw	r2,4(r6)
   878b8:	e0c00404 	addi	r3,fp,16
   878bc:	1108703a 	and	r4,r2,r4
   878c0:	9905883a 	add	r2,r19,r4
   878c4:	10ff4d16 	blt	r2,r3,875fc <_realloc_r+0x150>
   878c8:	1705c83a 	sub	r2,r2,fp
   878cc:	870b883a 	add	r5,r16,fp
   878d0:	10800054 	ori	r2,r2,1
   878d4:	28800115 	stw	r2,4(r5)
   878d8:	80c00117 	ldw	r3,4(r16)
   878dc:	00800274 	movhi	r2,9
   878e0:	10b7a704 	addi	r2,r2,-8548
   878e4:	b009883a 	mov	r4,r22
   878e8:	18c0004c 	andi	r3,r3,1
   878ec:	e0c6b03a 	or	r3,fp,r3
   878f0:	11400215 	stw	r5,8(r2)
   878f4:	80c00115 	stw	r3,4(r16)
   878f8:	008af180 	call	8af18 <__malloc_unlock>
   878fc:	84400204 	addi	r17,r16,8
   87900:	003f2006 	br	87584 <_realloc_r+0xd8>
   87904:	98a9883a 	add	r20,r19,r2
   87908:	2509883a 	add	r4,r4,r20
   8790c:	e0800404 	addi	r2,fp,16
   87910:	d9000115 	stw	r4,4(sp)
   87914:	20bf7016 	blt	r4,r2,876d8 <_realloc_r+0x22c>
   87918:	b8c00317 	ldw	r3,12(r23)
   8791c:	b8800217 	ldw	r2,8(r23)
   87920:	99bfff04 	addi	r6,r19,-4
   87924:	01400904 	movi	r5,36
   87928:	18800215 	stw	r2,8(r3)
   8792c:	10c00315 	stw	r3,12(r2)
   87930:	bc400204 	addi	r17,r23,8
   87934:	29804136 	bltu	r5,r6,87a3c <_realloc_r+0x590>
   87938:	008004c4 	movi	r2,19
   8793c:	9009883a 	mov	r4,r18
   87940:	880f883a 	mov	r7,r17
   87944:	11800f2e 	bgeu	r2,r6,87984 <_realloc_r+0x4d8>
   87948:	90800017 	ldw	r2,0(r18)
   8794c:	b9c00404 	addi	r7,r23,16
   87950:	91000204 	addi	r4,r18,8
   87954:	b8800215 	stw	r2,8(r23)
   87958:	90c00117 	ldw	r3,4(r18)
   8795c:	008006c4 	movi	r2,27
   87960:	b8c00315 	stw	r3,12(r23)
   87964:	1180072e 	bgeu	r2,r6,87984 <_realloc_r+0x4d8>
   87968:	90c00217 	ldw	r3,8(r18)
   8796c:	b9c00604 	addi	r7,r23,24
   87970:	91000404 	addi	r4,r18,16
   87974:	b8c00415 	stw	r3,16(r23)
   87978:	90800317 	ldw	r2,12(r18)
   8797c:	b8800515 	stw	r2,20(r23)
   87980:	31404026 	beq	r6,r5,87a84 <_realloc_r+0x5d8>
   87984:	20800017 	ldw	r2,0(r4)
   87988:	38800015 	stw	r2,0(r7)
   8798c:	20c00117 	ldw	r3,4(r4)
   87990:	38c00115 	stw	r3,4(r7)
   87994:	20800217 	ldw	r2,8(r4)
   87998:	38800215 	stw	r2,8(r7)
   8799c:	d8c00117 	ldw	r3,4(sp)
   879a0:	bf0b883a 	add	r5,r23,fp
   879a4:	b009883a 	mov	r4,r22
   879a8:	1f05c83a 	sub	r2,r3,fp
   879ac:	10800054 	ori	r2,r2,1
   879b0:	28800115 	stw	r2,4(r5)
   879b4:	b8c00117 	ldw	r3,4(r23)
   879b8:	00800274 	movhi	r2,9
   879bc:	10b7a704 	addi	r2,r2,-8548
   879c0:	11400215 	stw	r5,8(r2)
   879c4:	18c0004c 	andi	r3,r3,1
   879c8:	e0c6b03a 	or	r3,fp,r3
   879cc:	b8c00115 	stw	r3,4(r23)
   879d0:	008af180 	call	8af18 <__malloc_unlock>
   879d4:	003eeb06 	br	87584 <_realloc_r+0xd8>
   879d8:	20800117 	ldw	r2,4(r4)
   879dc:	00ffff04 	movi	r3,-4
   879e0:	800f883a 	mov	r7,r16
   879e4:	10c4703a 	and	r2,r2,r3
   879e8:	98a9883a 	add	r20,r19,r2
   879ec:	84000204 	addi	r16,r16,8
   879f0:	003ecf06 	br	87530 <_realloc_r+0x84>
   879f4:	900b883a 	mov	r5,r18
   879f8:	8009883a 	mov	r4,r16
   879fc:	00862a80 	call	862a8 <memmove>
   87a00:	dd000017 	ldw	r20,0(sp)
   87a04:	b80f883a 	mov	r7,r23
   87a08:	003ec906 	br	87530 <_realloc_r+0x84>
   87a0c:	900b883a 	mov	r5,r18
   87a10:	8009883a 	mov	r4,r16
   87a14:	00862a80 	call	862a8 <memmove>
   87a18:	b80f883a 	mov	r7,r23
   87a1c:	003ec406 	br	87530 <_realloc_r+0x84>
   87a20:	90c00417 	ldw	r3,16(r18)
   87a24:	89400604 	addi	r5,r17,24
   87a28:	91000604 	addi	r4,r18,24
   87a2c:	88c00415 	stw	r3,16(r17)
   87a30:	90800517 	ldw	r2,20(r18)
   87a34:	88800515 	stw	r2,20(r17)
   87a38:	003f6806 	br	877dc <_realloc_r+0x330>
   87a3c:	900b883a 	mov	r5,r18
   87a40:	8809883a 	mov	r4,r17
   87a44:	00862a80 	call	862a8 <memmove>
   87a48:	003fd406 	br	8799c <_realloc_r+0x4f0>
   87a4c:	90c00417 	ldw	r3,16(r18)
   87a50:	91000604 	addi	r4,r18,24
   87a54:	ba000804 	addi	r8,r23,32
   87a58:	b8c00615 	stw	r3,24(r23)
   87a5c:	90800517 	ldw	r2,20(r18)
   87a60:	b8800715 	stw	r2,28(r23)
   87a64:	003f1206 	br	876b0 <_realloc_r+0x204>
   87a68:	90c00417 	ldw	r3,16(r18)
   87a6c:	91000604 	addi	r4,r18,24
   87a70:	ba000804 	addi	r8,r23,32
   87a74:	b8c00615 	stw	r3,24(r23)
   87a78:	90800517 	ldw	r2,20(r18)
   87a7c:	b8800715 	stw	r2,28(r23)
   87a80:	003f3206 	br	8774c <_realloc_r+0x2a0>
   87a84:	90c00417 	ldw	r3,16(r18)
   87a88:	91000604 	addi	r4,r18,24
   87a8c:	b9c00804 	addi	r7,r23,32
   87a90:	b8c00615 	stw	r3,24(r23)
   87a94:	90800517 	ldw	r2,20(r18)
   87a98:	b8800715 	stw	r2,28(r23)
   87a9c:	003fb906 	br	87984 <_realloc_r+0x4d8>

00087aa0 <__isinfd>:
   87aa0:	200d883a 	mov	r6,r4
   87aa4:	0109c83a 	sub	r4,zero,r4
   87aa8:	2188b03a 	or	r4,r4,r6
   87aac:	2008d7fa 	srli	r4,r4,31
   87ab0:	00a00034 	movhi	r2,32768
   87ab4:	10bfffc4 	addi	r2,r2,-1
   87ab8:	1144703a 	and	r2,r2,r5
   87abc:	2088b03a 	or	r4,r4,r2
   87ac0:	009ffc34 	movhi	r2,32752
   87ac4:	1105c83a 	sub	r2,r2,r4
   87ac8:	0087c83a 	sub	r3,zero,r2
   87acc:	10c4b03a 	or	r2,r2,r3
   87ad0:	1004d7fa 	srli	r2,r2,31
   87ad4:	00c00044 	movi	r3,1
   87ad8:	1885c83a 	sub	r2,r3,r2
   87adc:	f800283a 	ret

00087ae0 <__isnand>:
   87ae0:	200d883a 	mov	r6,r4
   87ae4:	0109c83a 	sub	r4,zero,r4
   87ae8:	2188b03a 	or	r4,r4,r6
   87aec:	2008d7fa 	srli	r4,r4,31
   87af0:	00a00034 	movhi	r2,32768
   87af4:	10bfffc4 	addi	r2,r2,-1
   87af8:	1144703a 	and	r2,r2,r5
   87afc:	2088b03a 	or	r4,r4,r2
   87b00:	009ffc34 	movhi	r2,32752
   87b04:	1105c83a 	sub	r2,r2,r4
   87b08:	1004d7fa 	srli	r2,r2,31
   87b0c:	f800283a 	ret

00087b10 <_sbrk_r>:
   87b10:	defffd04 	addi	sp,sp,-12
   87b14:	dc000015 	stw	r16,0(sp)
   87b18:	04000274 	movhi	r16,9
   87b1c:	84049504 	addi	r16,r16,4692
   87b20:	dc400115 	stw	r17,4(sp)
   87b24:	80000015 	stw	zero,0(r16)
   87b28:	2023883a 	mov	r17,r4
   87b2c:	2809883a 	mov	r4,r5
   87b30:	dfc00215 	stw	ra,8(sp)
   87b34:	008b1340 	call	8b134 <sbrk>
   87b38:	1007883a 	mov	r3,r2
   87b3c:	00bfffc4 	movi	r2,-1
   87b40:	18800626 	beq	r3,r2,87b5c <_sbrk_r+0x4c>
   87b44:	1805883a 	mov	r2,r3
   87b48:	dfc00217 	ldw	ra,8(sp)
   87b4c:	dc400117 	ldw	r17,4(sp)
   87b50:	dc000017 	ldw	r16,0(sp)
   87b54:	dec00304 	addi	sp,sp,12
   87b58:	f800283a 	ret
   87b5c:	80800017 	ldw	r2,0(r16)
   87b60:	103ff826 	beq	r2,zero,87b44 <_sbrk_r+0x34>
   87b64:	88800015 	stw	r2,0(r17)
   87b68:	1805883a 	mov	r2,r3
   87b6c:	dfc00217 	ldw	ra,8(sp)
   87b70:	dc400117 	ldw	r17,4(sp)
   87b74:	dc000017 	ldw	r16,0(sp)
   87b78:	dec00304 	addi	sp,sp,12
   87b7c:	f800283a 	ret

00087b80 <__sclose>:
   87b80:	2940038f 	ldh	r5,14(r5)
   87b84:	0087ec81 	jmpi	87ec8 <_close_r>

00087b88 <__sseek>:
   87b88:	defffe04 	addi	sp,sp,-8
   87b8c:	dc000015 	stw	r16,0(sp)
   87b90:	2821883a 	mov	r16,r5
   87b94:	2940038f 	ldh	r5,14(r5)
   87b98:	dfc00115 	stw	ra,4(sp)
   87b9c:	00881400 	call	88140 <_lseek_r>
   87ba0:	1007883a 	mov	r3,r2
   87ba4:	00bfffc4 	movi	r2,-1
   87ba8:	18800926 	beq	r3,r2,87bd0 <__sseek+0x48>
   87bac:	8080030b 	ldhu	r2,12(r16)
   87bb0:	80c01415 	stw	r3,80(r16)
   87bb4:	10840014 	ori	r2,r2,4096
   87bb8:	8080030d 	sth	r2,12(r16)
   87bbc:	1805883a 	mov	r2,r3
   87bc0:	dfc00117 	ldw	ra,4(sp)
   87bc4:	dc000017 	ldw	r16,0(sp)
   87bc8:	dec00204 	addi	sp,sp,8
   87bcc:	f800283a 	ret
   87bd0:	8080030b 	ldhu	r2,12(r16)
   87bd4:	10bbffcc 	andi	r2,r2,61439
   87bd8:	8080030d 	sth	r2,12(r16)
   87bdc:	1805883a 	mov	r2,r3
   87be0:	dfc00117 	ldw	ra,4(sp)
   87be4:	dc000017 	ldw	r16,0(sp)
   87be8:	dec00204 	addi	sp,sp,8
   87bec:	f800283a 	ret

00087bf0 <__swrite>:
   87bf0:	2880030b 	ldhu	r2,12(r5)
   87bf4:	defffb04 	addi	sp,sp,-20
   87bf8:	dcc00315 	stw	r19,12(sp)
   87bfc:	1080400c 	andi	r2,r2,256
   87c00:	dc800215 	stw	r18,8(sp)
   87c04:	dc400115 	stw	r17,4(sp)
   87c08:	dc000015 	stw	r16,0(sp)
   87c0c:	3027883a 	mov	r19,r6
   87c10:	3825883a 	mov	r18,r7
   87c14:	dfc00415 	stw	ra,16(sp)
   87c18:	2821883a 	mov	r16,r5
   87c1c:	000d883a 	mov	r6,zero
   87c20:	01c00084 	movi	r7,2
   87c24:	2023883a 	mov	r17,r4
   87c28:	10000226 	beq	r2,zero,87c34 <__swrite+0x44>
   87c2c:	2940038f 	ldh	r5,14(r5)
   87c30:	00881400 	call	88140 <_lseek_r>
   87c34:	8080030b 	ldhu	r2,12(r16)
   87c38:	8140038f 	ldh	r5,14(r16)
   87c3c:	8809883a 	mov	r4,r17
   87c40:	10bbffcc 	andi	r2,r2,61439
   87c44:	980d883a 	mov	r6,r19
   87c48:	900f883a 	mov	r7,r18
   87c4c:	8080030d 	sth	r2,12(r16)
   87c50:	dfc00417 	ldw	ra,16(sp)
   87c54:	dcc00317 	ldw	r19,12(sp)
   87c58:	dc800217 	ldw	r18,8(sp)
   87c5c:	dc400117 	ldw	r17,4(sp)
   87c60:	dc000017 	ldw	r16,0(sp)
   87c64:	dec00504 	addi	sp,sp,20
   87c68:	0087d881 	jmpi	87d88 <_write_r>

00087c6c <__sread>:
   87c6c:	defffe04 	addi	sp,sp,-8
   87c70:	dc000015 	stw	r16,0(sp)
   87c74:	2821883a 	mov	r16,r5
   87c78:	2940038f 	ldh	r5,14(r5)
   87c7c:	dfc00115 	stw	ra,4(sp)
   87c80:	00881b80 	call	881b8 <_read_r>
   87c84:	1007883a 	mov	r3,r2
   87c88:	10000816 	blt	r2,zero,87cac <__sread+0x40>
   87c8c:	80801417 	ldw	r2,80(r16)
   87c90:	10c5883a 	add	r2,r2,r3
   87c94:	80801415 	stw	r2,80(r16)
   87c98:	1805883a 	mov	r2,r3
   87c9c:	dfc00117 	ldw	ra,4(sp)
   87ca0:	dc000017 	ldw	r16,0(sp)
   87ca4:	dec00204 	addi	sp,sp,8
   87ca8:	f800283a 	ret
   87cac:	8080030b 	ldhu	r2,12(r16)
   87cb0:	10bbffcc 	andi	r2,r2,61439
   87cb4:	8080030d 	sth	r2,12(r16)
   87cb8:	1805883a 	mov	r2,r3
   87cbc:	dfc00117 	ldw	ra,4(sp)
   87cc0:	dc000017 	ldw	r16,0(sp)
   87cc4:	dec00204 	addi	sp,sp,8
   87cc8:	f800283a 	ret

00087ccc <strcmp>:
   87ccc:	2144b03a 	or	r2,r4,r5
   87cd0:	108000cc 	andi	r2,r2,3
   87cd4:	10001d1e 	bne	r2,zero,87d4c <strcmp+0x80>
   87cd8:	200f883a 	mov	r7,r4
   87cdc:	28800017 	ldw	r2,0(r5)
   87ce0:	21000017 	ldw	r4,0(r4)
   87ce4:	280d883a 	mov	r6,r5
   87ce8:	2080161e 	bne	r4,r2,87d44 <strcmp+0x78>
   87cec:	023fbff4 	movhi	r8,65279
   87cf0:	423fbfc4 	addi	r8,r8,-257
   87cf4:	2207883a 	add	r3,r4,r8
   87cf8:	01602074 	movhi	r5,32897
   87cfc:	29602004 	addi	r5,r5,-32640
   87d00:	1946703a 	and	r3,r3,r5
   87d04:	0104303a 	nor	r2,zero,r4
   87d08:	10c4703a 	and	r2,r2,r3
   87d0c:	10001c1e 	bne	r2,zero,87d80 <strcmp+0xb4>
   87d10:	4013883a 	mov	r9,r8
   87d14:	2811883a 	mov	r8,r5
   87d18:	00000106 	br	87d20 <strcmp+0x54>
   87d1c:	1800181e 	bne	r3,zero,87d80 <strcmp+0xb4>
   87d20:	39c00104 	addi	r7,r7,4
   87d24:	39000017 	ldw	r4,0(r7)
   87d28:	31800104 	addi	r6,r6,4
   87d2c:	31400017 	ldw	r5,0(r6)
   87d30:	2245883a 	add	r2,r4,r9
   87d34:	1204703a 	and	r2,r2,r8
   87d38:	0106303a 	nor	r3,zero,r4
   87d3c:	1886703a 	and	r3,r3,r2
   87d40:	217ff626 	beq	r4,r5,87d1c <strcmp+0x50>
   87d44:	3809883a 	mov	r4,r7
   87d48:	300b883a 	mov	r5,r6
   87d4c:	20c00007 	ldb	r3,0(r4)
   87d50:	1800051e 	bne	r3,zero,87d68 <strcmp+0x9c>
   87d54:	00000606 	br	87d70 <strcmp+0xa4>
   87d58:	21000044 	addi	r4,r4,1
   87d5c:	20c00007 	ldb	r3,0(r4)
   87d60:	29400044 	addi	r5,r5,1
   87d64:	18000226 	beq	r3,zero,87d70 <strcmp+0xa4>
   87d68:	28800007 	ldb	r2,0(r5)
   87d6c:	18bffa26 	beq	r3,r2,87d58 <strcmp+0x8c>
   87d70:	20c00003 	ldbu	r3,0(r4)
   87d74:	28800003 	ldbu	r2,0(r5)
   87d78:	1885c83a 	sub	r2,r3,r2
   87d7c:	f800283a 	ret
   87d80:	0005883a 	mov	r2,zero
   87d84:	f800283a 	ret

00087d88 <_write_r>:
   87d88:	defffd04 	addi	sp,sp,-12
   87d8c:	dc000015 	stw	r16,0(sp)
   87d90:	04000274 	movhi	r16,9
   87d94:	84049504 	addi	r16,r16,4692
   87d98:	dc400115 	stw	r17,4(sp)
   87d9c:	80000015 	stw	zero,0(r16)
   87da0:	2023883a 	mov	r17,r4
   87da4:	2809883a 	mov	r4,r5
   87da8:	300b883a 	mov	r5,r6
   87dac:	380d883a 	mov	r6,r7
   87db0:	dfc00215 	stw	ra,8(sp)
   87db4:	008b1f00 	call	8b1f0 <write>
   87db8:	1007883a 	mov	r3,r2
   87dbc:	00bfffc4 	movi	r2,-1
   87dc0:	18800626 	beq	r3,r2,87ddc <_write_r+0x54>
   87dc4:	1805883a 	mov	r2,r3
   87dc8:	dfc00217 	ldw	ra,8(sp)
   87dcc:	dc400117 	ldw	r17,4(sp)
   87dd0:	dc000017 	ldw	r16,0(sp)
   87dd4:	dec00304 	addi	sp,sp,12
   87dd8:	f800283a 	ret
   87ddc:	80800017 	ldw	r2,0(r16)
   87de0:	103ff826 	beq	r2,zero,87dc4 <_write_r+0x3c>
   87de4:	88800015 	stw	r2,0(r17)
   87de8:	1805883a 	mov	r2,r3
   87dec:	dfc00217 	ldw	ra,8(sp)
   87df0:	dc400117 	ldw	r17,4(sp)
   87df4:	dc000017 	ldw	r16,0(sp)
   87df8:	dec00304 	addi	sp,sp,12
   87dfc:	f800283a 	ret

00087e00 <_calloc_r>:
   87e00:	defffe04 	addi	sp,sp,-8
   87e04:	dc400015 	stw	r17,0(sp)
   87e08:	2023883a 	mov	r17,r4
   87e0c:	2809883a 	mov	r4,r5
   87e10:	300b883a 	mov	r5,r6
   87e14:	dfc00115 	stw	ra,4(sp)
   87e18:	008a1740 	call	8a174 <__mulsi3>
   87e1c:	100b883a 	mov	r5,r2
   87e20:	8809883a 	mov	r4,r17
   87e24:	00859e40 	call	859e4 <_malloc_r>
   87e28:	1023883a 	mov	r17,r2
   87e2c:	01c00904 	movi	r7,36
   87e30:	10000d26 	beq	r2,zero,87e68 <_calloc_r+0x68>
   87e34:	10ffff17 	ldw	r3,-4(r2)
   87e38:	1009883a 	mov	r4,r2
   87e3c:	00bfff04 	movi	r2,-4
   87e40:	1886703a 	and	r3,r3,r2
   87e44:	1887883a 	add	r3,r3,r2
   87e48:	180d883a 	mov	r6,r3
   87e4c:	000b883a 	mov	r5,zero
   87e50:	38c01736 	bltu	r7,r3,87eb0 <_calloc_r+0xb0>
   87e54:	008004c4 	movi	r2,19
   87e58:	10c00836 	bltu	r2,r3,87e7c <_calloc_r+0x7c>
   87e5c:	20000215 	stw	zero,8(r4)
   87e60:	20000015 	stw	zero,0(r4)
   87e64:	20000115 	stw	zero,4(r4)
   87e68:	8805883a 	mov	r2,r17
   87e6c:	dfc00117 	ldw	ra,4(sp)
   87e70:	dc400017 	ldw	r17,0(sp)
   87e74:	dec00204 	addi	sp,sp,8
   87e78:	f800283a 	ret
   87e7c:	008006c4 	movi	r2,27
   87e80:	88000015 	stw	zero,0(r17)
   87e84:	88000115 	stw	zero,4(r17)
   87e88:	89000204 	addi	r4,r17,8
   87e8c:	10fff32e 	bgeu	r2,r3,87e5c <_calloc_r+0x5c>
   87e90:	88000215 	stw	zero,8(r17)
   87e94:	88000315 	stw	zero,12(r17)
   87e98:	89000404 	addi	r4,r17,16
   87e9c:	19ffef1e 	bne	r3,r7,87e5c <_calloc_r+0x5c>
   87ea0:	89000604 	addi	r4,r17,24
   87ea4:	88000415 	stw	zero,16(r17)
   87ea8:	88000515 	stw	zero,20(r17)
   87eac:	003feb06 	br	87e5c <_calloc_r+0x5c>
   87eb0:	00863880 	call	86388 <memset>
   87eb4:	8805883a 	mov	r2,r17
   87eb8:	dfc00117 	ldw	ra,4(sp)
   87ebc:	dc400017 	ldw	r17,0(sp)
   87ec0:	dec00204 	addi	sp,sp,8
   87ec4:	f800283a 	ret

00087ec8 <_close_r>:
   87ec8:	defffd04 	addi	sp,sp,-12
   87ecc:	dc000015 	stw	r16,0(sp)
   87ed0:	04000274 	movhi	r16,9
   87ed4:	84049504 	addi	r16,r16,4692
   87ed8:	dc400115 	stw	r17,4(sp)
   87edc:	80000015 	stw	zero,0(r16)
   87ee0:	2023883a 	mov	r17,r4
   87ee4:	2809883a 	mov	r4,r5
   87ee8:	dfc00215 	stw	ra,8(sp)
   87eec:	008a8640 	call	8a864 <close>
   87ef0:	1007883a 	mov	r3,r2
   87ef4:	00bfffc4 	movi	r2,-1
   87ef8:	18800626 	beq	r3,r2,87f14 <_close_r+0x4c>
   87efc:	1805883a 	mov	r2,r3
   87f00:	dfc00217 	ldw	ra,8(sp)
   87f04:	dc400117 	ldw	r17,4(sp)
   87f08:	dc000017 	ldw	r16,0(sp)
   87f0c:	dec00304 	addi	sp,sp,12
   87f10:	f800283a 	ret
   87f14:	80800017 	ldw	r2,0(r16)
   87f18:	103ff826 	beq	r2,zero,87efc <_close_r+0x34>
   87f1c:	88800015 	stw	r2,0(r17)
   87f20:	1805883a 	mov	r2,r3
   87f24:	dfc00217 	ldw	ra,8(sp)
   87f28:	dc400117 	ldw	r17,4(sp)
   87f2c:	dc000017 	ldw	r16,0(sp)
   87f30:	dec00304 	addi	sp,sp,12
   87f34:	f800283a 	ret

00087f38 <_fclose_r>:
   87f38:	defffc04 	addi	sp,sp,-16
   87f3c:	dc400115 	stw	r17,4(sp)
   87f40:	dc000015 	stw	r16,0(sp)
   87f44:	dfc00315 	stw	ra,12(sp)
   87f48:	dc800215 	stw	r18,8(sp)
   87f4c:	2821883a 	mov	r16,r5
   87f50:	2023883a 	mov	r17,r4
   87f54:	28002926 	beq	r5,zero,87ffc <_fclose_r+0xc4>
   87f58:	0084a940 	call	84a94 <__sfp_lock_acquire>
   87f5c:	88000226 	beq	r17,zero,87f68 <_fclose_r+0x30>
   87f60:	88800e17 	ldw	r2,56(r17)
   87f64:	10002d26 	beq	r2,zero,8801c <_fclose_r+0xe4>
   87f68:	8080030f 	ldh	r2,12(r16)
   87f6c:	10002226 	beq	r2,zero,87ff8 <_fclose_r+0xc0>
   87f70:	8809883a 	mov	r4,r17
   87f74:	800b883a 	mov	r5,r16
   87f78:	008480c0 	call	8480c <_fflush_r>
   87f7c:	1025883a 	mov	r18,r2
   87f80:	80800b17 	ldw	r2,44(r16)
   87f84:	10000426 	beq	r2,zero,87f98 <_fclose_r+0x60>
   87f88:	81400717 	ldw	r5,28(r16)
   87f8c:	8809883a 	mov	r4,r17
   87f90:	103ee83a 	callr	r2
   87f94:	10002a16 	blt	r2,zero,88040 <_fclose_r+0x108>
   87f98:	8080030b 	ldhu	r2,12(r16)
   87f9c:	1080200c 	andi	r2,r2,128
   87fa0:	1000231e 	bne	r2,zero,88030 <_fclose_r+0xf8>
   87fa4:	81400c17 	ldw	r5,48(r16)
   87fa8:	28000526 	beq	r5,zero,87fc0 <_fclose_r+0x88>
   87fac:	80801004 	addi	r2,r16,64
   87fb0:	28800226 	beq	r5,r2,87fbc <_fclose_r+0x84>
   87fb4:	8809883a 	mov	r4,r17
   87fb8:	0084e5c0 	call	84e5c <_free_r>
   87fbc:	80000c15 	stw	zero,48(r16)
   87fc0:	81401117 	ldw	r5,68(r16)
   87fc4:	28000326 	beq	r5,zero,87fd4 <_fclose_r+0x9c>
   87fc8:	8809883a 	mov	r4,r17
   87fcc:	0084e5c0 	call	84e5c <_free_r>
   87fd0:	80001115 	stw	zero,68(r16)
   87fd4:	8000030d 	sth	zero,12(r16)
   87fd8:	0084a980 	call	84a98 <__sfp_lock_release>
   87fdc:	9005883a 	mov	r2,r18
   87fe0:	dfc00317 	ldw	ra,12(sp)
   87fe4:	dc800217 	ldw	r18,8(sp)
   87fe8:	dc400117 	ldw	r17,4(sp)
   87fec:	dc000017 	ldw	r16,0(sp)
   87ff0:	dec00404 	addi	sp,sp,16
   87ff4:	f800283a 	ret
   87ff8:	0084a980 	call	84a98 <__sfp_lock_release>
   87ffc:	0025883a 	mov	r18,zero
   88000:	9005883a 	mov	r2,r18
   88004:	dfc00317 	ldw	ra,12(sp)
   88008:	dc800217 	ldw	r18,8(sp)
   8800c:	dc400117 	ldw	r17,4(sp)
   88010:	dc000017 	ldw	r16,0(sp)
   88014:	dec00404 	addi	sp,sp,16
   88018:	f800283a 	ret
   8801c:	8809883a 	mov	r4,r17
   88020:	0084aa40 	call	84aa4 <__sinit>
   88024:	8080030f 	ldh	r2,12(r16)
   88028:	103fd11e 	bne	r2,zero,87f70 <_fclose_r+0x38>
   8802c:	003ff206 	br	87ff8 <_fclose_r+0xc0>
   88030:	81400417 	ldw	r5,16(r16)
   88034:	8809883a 	mov	r4,r17
   88038:	0084e5c0 	call	84e5c <_free_r>
   8803c:	003fd906 	br	87fa4 <_fclose_r+0x6c>
   88040:	04bfffc4 	movi	r18,-1
   88044:	003fd406 	br	87f98 <_fclose_r+0x60>

00088048 <fclose>:
   88048:	00800274 	movhi	r2,9
   8804c:	10bd2c04 	addi	r2,r2,-2896
   88050:	200b883a 	mov	r5,r4
   88054:	11000017 	ldw	r4,0(r2)
   88058:	0087f381 	jmpi	87f38 <_fclose_r>

0008805c <_fstat_r>:
   8805c:	defffd04 	addi	sp,sp,-12
   88060:	dc000015 	stw	r16,0(sp)
   88064:	04000274 	movhi	r16,9
   88068:	84049504 	addi	r16,r16,4692
   8806c:	dc400115 	stw	r17,4(sp)
   88070:	80000015 	stw	zero,0(r16)
   88074:	2023883a 	mov	r17,r4
   88078:	2809883a 	mov	r4,r5
   8807c:	300b883a 	mov	r5,r6
   88080:	dfc00215 	stw	ra,8(sp)
   88084:	008a9f00 	call	8a9f0 <fstat>
   88088:	1007883a 	mov	r3,r2
   8808c:	00bfffc4 	movi	r2,-1
   88090:	18800626 	beq	r3,r2,880ac <_fstat_r+0x50>
   88094:	1805883a 	mov	r2,r3
   88098:	dfc00217 	ldw	ra,8(sp)
   8809c:	dc400117 	ldw	r17,4(sp)
   880a0:	dc000017 	ldw	r16,0(sp)
   880a4:	dec00304 	addi	sp,sp,12
   880a8:	f800283a 	ret
   880ac:	80800017 	ldw	r2,0(r16)
   880b0:	103ff826 	beq	r2,zero,88094 <_fstat_r+0x38>
   880b4:	88800015 	stw	r2,0(r17)
   880b8:	1805883a 	mov	r2,r3
   880bc:	dfc00217 	ldw	ra,8(sp)
   880c0:	dc400117 	ldw	r17,4(sp)
   880c4:	dc000017 	ldw	r16,0(sp)
   880c8:	dec00304 	addi	sp,sp,12
   880cc:	f800283a 	ret

000880d0 <_isatty_r>:
   880d0:	defffd04 	addi	sp,sp,-12
   880d4:	dc000015 	stw	r16,0(sp)
   880d8:	04000274 	movhi	r16,9
   880dc:	84049504 	addi	r16,r16,4692
   880e0:	dc400115 	stw	r17,4(sp)
   880e4:	80000015 	stw	zero,0(r16)
   880e8:	2023883a 	mov	r17,r4
   880ec:	2809883a 	mov	r4,r5
   880f0:	dfc00215 	stw	ra,8(sp)
   880f4:	008ab280 	call	8ab28 <isatty>
   880f8:	1007883a 	mov	r3,r2
   880fc:	00bfffc4 	movi	r2,-1
   88100:	18800626 	beq	r3,r2,8811c <_isatty_r+0x4c>
   88104:	1805883a 	mov	r2,r3
   88108:	dfc00217 	ldw	ra,8(sp)
   8810c:	dc400117 	ldw	r17,4(sp)
   88110:	dc000017 	ldw	r16,0(sp)
   88114:	dec00304 	addi	sp,sp,12
   88118:	f800283a 	ret
   8811c:	80800017 	ldw	r2,0(r16)
   88120:	103ff826 	beq	r2,zero,88104 <_isatty_r+0x34>
   88124:	88800015 	stw	r2,0(r17)
   88128:	1805883a 	mov	r2,r3
   8812c:	dfc00217 	ldw	ra,8(sp)
   88130:	dc400117 	ldw	r17,4(sp)
   88134:	dc000017 	ldw	r16,0(sp)
   88138:	dec00304 	addi	sp,sp,12
   8813c:	f800283a 	ret

00088140 <_lseek_r>:
   88140:	defffd04 	addi	sp,sp,-12
   88144:	dc000015 	stw	r16,0(sp)
   88148:	04000274 	movhi	r16,9
   8814c:	84049504 	addi	r16,r16,4692
   88150:	dc400115 	stw	r17,4(sp)
   88154:	80000015 	stw	zero,0(r16)
   88158:	2023883a 	mov	r17,r4
   8815c:	2809883a 	mov	r4,r5
   88160:	300b883a 	mov	r5,r6
   88164:	380d883a 	mov	r6,r7
   88168:	dfc00215 	stw	ra,8(sp)
   8816c:	008ad380 	call	8ad38 <lseek>
   88170:	1007883a 	mov	r3,r2
   88174:	00bfffc4 	movi	r2,-1
   88178:	18800626 	beq	r3,r2,88194 <_lseek_r+0x54>
   8817c:	1805883a 	mov	r2,r3
   88180:	dfc00217 	ldw	ra,8(sp)
   88184:	dc400117 	ldw	r17,4(sp)
   88188:	dc000017 	ldw	r16,0(sp)
   8818c:	dec00304 	addi	sp,sp,12
   88190:	f800283a 	ret
   88194:	80800017 	ldw	r2,0(r16)
   88198:	103ff826 	beq	r2,zero,8817c <_lseek_r+0x3c>
   8819c:	88800015 	stw	r2,0(r17)
   881a0:	1805883a 	mov	r2,r3
   881a4:	dfc00217 	ldw	ra,8(sp)
   881a8:	dc400117 	ldw	r17,4(sp)
   881ac:	dc000017 	ldw	r16,0(sp)
   881b0:	dec00304 	addi	sp,sp,12
   881b4:	f800283a 	ret

000881b8 <_read_r>:
   881b8:	defffd04 	addi	sp,sp,-12
   881bc:	dc000015 	stw	r16,0(sp)
   881c0:	04000274 	movhi	r16,9
   881c4:	84049504 	addi	r16,r16,4692
   881c8:	dc400115 	stw	r17,4(sp)
   881cc:	80000015 	stw	zero,0(r16)
   881d0:	2023883a 	mov	r17,r4
   881d4:	2809883a 	mov	r4,r5
   881d8:	300b883a 	mov	r5,r6
   881dc:	380d883a 	mov	r6,r7
   881e0:	dfc00215 	stw	ra,8(sp)
   881e4:	008af380 	call	8af38 <read>
   881e8:	1007883a 	mov	r3,r2
   881ec:	00bfffc4 	movi	r2,-1
   881f0:	18800626 	beq	r3,r2,8820c <_read_r+0x54>
   881f4:	1805883a 	mov	r2,r3
   881f8:	dfc00217 	ldw	ra,8(sp)
   881fc:	dc400117 	ldw	r17,4(sp)
   88200:	dc000017 	ldw	r16,0(sp)
   88204:	dec00304 	addi	sp,sp,12
   88208:	f800283a 	ret
   8820c:	80800017 	ldw	r2,0(r16)
   88210:	103ff826 	beq	r2,zero,881f4 <_read_r+0x3c>
   88214:	88800015 	stw	r2,0(r17)
   88218:	1805883a 	mov	r2,r3
   8821c:	dfc00217 	ldw	ra,8(sp)
   88220:	dc400117 	ldw	r17,4(sp)
   88224:	dc000017 	ldw	r16,0(sp)
   88228:	dec00304 	addi	sp,sp,12
   8822c:	f800283a 	ret

00088230 <__udivdi3>:
   88230:	defff104 	addi	sp,sp,-60
   88234:	0015883a 	mov	r10,zero
   88238:	2005883a 	mov	r2,r4
   8823c:	3011883a 	mov	r8,r6
   88240:	df000d15 	stw	fp,52(sp)
   88244:	dd400a15 	stw	r21,40(sp)
   88248:	dcc00815 	stw	r19,32(sp)
   8824c:	dfc00e15 	stw	ra,56(sp)
   88250:	ddc00c15 	stw	r23,48(sp)
   88254:	dd800b15 	stw	r22,44(sp)
   88258:	dd000915 	stw	r20,36(sp)
   8825c:	dc800715 	stw	r18,28(sp)
   88260:	dc400615 	stw	r17,24(sp)
   88264:	dc000515 	stw	r16,20(sp)
   88268:	da800315 	stw	r10,12(sp)
   8826c:	4027883a 	mov	r19,r8
   88270:	1039883a 	mov	fp,r2
   88274:	282b883a 	mov	r21,r5
   88278:	da800415 	stw	r10,16(sp)
   8827c:	3800401e 	bne	r7,zero,88380 <__udivdi3+0x150>
   88280:	2a006536 	bltu	r5,r8,88418 <__udivdi3+0x1e8>
   88284:	4000b526 	beq	r8,zero,8855c <__udivdi3+0x32c>
   88288:	00bfffd4 	movui	r2,65535
   8828c:	14c0ad36 	bltu	r2,r19,88544 <__udivdi3+0x314>
   88290:	00803fc4 	movi	r2,255
   88294:	14c15e36 	bltu	r2,r19,88810 <__udivdi3+0x5e0>
   88298:	000b883a 	mov	r5,zero
   8829c:	0005883a 	mov	r2,zero
   882a0:	9884d83a 	srl	r2,r19,r2
   882a4:	01000274 	movhi	r4,9
   882a8:	2135a404 	addi	r4,r4,-10608
   882ac:	01800804 	movi	r6,32
   882b0:	1105883a 	add	r2,r2,r4
   882b4:	10c00003 	ldbu	r3,0(r2)
   882b8:	28c7883a 	add	r3,r5,r3
   882bc:	30e9c83a 	sub	r20,r6,r3
   882c0:	a0010a1e 	bne	r20,zero,886ec <__udivdi3+0x4bc>
   882c4:	982ed43a 	srli	r23,r19,16
   882c8:	acebc83a 	sub	r21,r21,r19
   882cc:	9dbfffcc 	andi	r22,r19,65535
   882d0:	05000044 	movi	r20,1
   882d4:	a809883a 	mov	r4,r21
   882d8:	b80b883a 	mov	r5,r23
   882dc:	008a1640 	call	8a164 <__udivsi3>
   882e0:	100b883a 	mov	r5,r2
   882e4:	b009883a 	mov	r4,r22
   882e8:	1021883a 	mov	r16,r2
   882ec:	008a1740 	call	8a174 <__mulsi3>
   882f0:	a809883a 	mov	r4,r21
   882f4:	b80b883a 	mov	r5,r23
   882f8:	1023883a 	mov	r17,r2
   882fc:	008a16c0 	call	8a16c <__umodsi3>
   88300:	1004943a 	slli	r2,r2,16
   88304:	e006d43a 	srli	r3,fp,16
   88308:	10c4b03a 	or	r2,r2,r3
   8830c:	1440042e 	bgeu	r2,r17,88320 <__udivdi3+0xf0>
   88310:	14c5883a 	add	r2,r2,r19
   88314:	843fffc4 	addi	r16,r16,-1
   88318:	14c00136 	bltu	r2,r19,88320 <__udivdi3+0xf0>
   8831c:	14415c36 	bltu	r2,r17,88890 <__udivdi3+0x660>
   88320:	1463c83a 	sub	r17,r2,r17
   88324:	8809883a 	mov	r4,r17
   88328:	b80b883a 	mov	r5,r23
   8832c:	008a1640 	call	8a164 <__udivsi3>
   88330:	100b883a 	mov	r5,r2
   88334:	b009883a 	mov	r4,r22
   88338:	102b883a 	mov	r21,r2
   8833c:	008a1740 	call	8a174 <__mulsi3>
   88340:	8809883a 	mov	r4,r17
   88344:	b80b883a 	mov	r5,r23
   88348:	1025883a 	mov	r18,r2
   8834c:	008a16c0 	call	8a16c <__umodsi3>
   88350:	1004943a 	slli	r2,r2,16
   88354:	e0ffffcc 	andi	r3,fp,65535
   88358:	10c4b03a 	or	r2,r2,r3
   8835c:	1480042e 	bgeu	r2,r18,88370 <__udivdi3+0x140>
   88360:	9885883a 	add	r2,r19,r2
   88364:	ad7fffc4 	addi	r21,r21,-1
   88368:	14c00136 	bltu	r2,r19,88370 <__udivdi3+0x140>
   8836c:	14813c36 	bltu	r2,r18,88860 <__udivdi3+0x630>
   88370:	8004943a 	slli	r2,r16,16
   88374:	a009883a 	mov	r4,r20
   88378:	a884b03a 	or	r2,r21,r2
   8837c:	00001506 	br	883d4 <__udivdi3+0x1a4>
   88380:	380d883a 	mov	r6,r7
   88384:	29c06c36 	bltu	r5,r7,88538 <__udivdi3+0x308>
   88388:	00bfffd4 	movui	r2,65535
   8838c:	11c06436 	bltu	r2,r7,88520 <__udivdi3+0x2f0>
   88390:	00803fc4 	movi	r2,255
   88394:	11c11836 	bltu	r2,r7,887f8 <__udivdi3+0x5c8>
   88398:	000b883a 	mov	r5,zero
   8839c:	0005883a 	mov	r2,zero
   883a0:	3084d83a 	srl	r2,r6,r2
   883a4:	01000274 	movhi	r4,9
   883a8:	2135a404 	addi	r4,r4,-10608
   883ac:	01c00804 	movi	r7,32
   883b0:	1105883a 	add	r2,r2,r4
   883b4:	10c00003 	ldbu	r3,0(r2)
   883b8:	28c7883a 	add	r3,r5,r3
   883bc:	38edc83a 	sub	r22,r7,r3
   883c0:	b000731e 	bne	r22,zero,88590 <__udivdi3+0x360>
   883c4:	35400136 	bltu	r6,r21,883cc <__udivdi3+0x19c>
   883c8:	e4c05b36 	bltu	fp,r19,88538 <__udivdi3+0x308>
   883cc:	00800044 	movi	r2,1
   883d0:	0009883a 	mov	r4,zero
   883d4:	d8800315 	stw	r2,12(sp)
   883d8:	d9400317 	ldw	r5,12(sp)
   883dc:	2007883a 	mov	r3,r4
   883e0:	d9000415 	stw	r4,16(sp)
   883e4:	2805883a 	mov	r2,r5
   883e8:	dfc00e17 	ldw	ra,56(sp)
   883ec:	df000d17 	ldw	fp,52(sp)
   883f0:	ddc00c17 	ldw	r23,48(sp)
   883f4:	dd800b17 	ldw	r22,44(sp)
   883f8:	dd400a17 	ldw	r21,40(sp)
   883fc:	dd000917 	ldw	r20,36(sp)
   88400:	dcc00817 	ldw	r19,32(sp)
   88404:	dc800717 	ldw	r18,28(sp)
   88408:	dc400617 	ldw	r17,24(sp)
   8840c:	dc000517 	ldw	r16,20(sp)
   88410:	dec00f04 	addi	sp,sp,60
   88414:	f800283a 	ret
   88418:	00bfffd4 	movui	r2,65535
   8841c:	12005636 	bltu	r2,r8,88578 <__udivdi3+0x348>
   88420:	00803fc4 	movi	r2,255
   88424:	12010036 	bltu	r2,r8,88828 <__udivdi3+0x5f8>
   88428:	000b883a 	mov	r5,zero
   8842c:	0005883a 	mov	r2,zero
   88430:	9884d83a 	srl	r2,r19,r2
   88434:	01000274 	movhi	r4,9
   88438:	2135a404 	addi	r4,r4,-10608
   8843c:	01800804 	movi	r6,32
   88440:	1105883a 	add	r2,r2,r4
   88444:	10c00003 	ldbu	r3,0(r2)
   88448:	28c7883a 	add	r3,r5,r3
   8844c:	30cbc83a 	sub	r5,r6,r3
   88450:	28000626 	beq	r5,zero,8846c <__udivdi3+0x23c>
   88454:	3145c83a 	sub	r2,r6,r5
   88458:	e084d83a 	srl	r2,fp,r2
   8845c:	a946983a 	sll	r3,r21,r5
   88460:	e178983a 	sll	fp,fp,r5
   88464:	9966983a 	sll	r19,r19,r5
   88468:	18aab03a 	or	r21,r3,r2
   8846c:	982ed43a 	srli	r23,r19,16
   88470:	a809883a 	mov	r4,r21
   88474:	9cbfffcc 	andi	r18,r19,65535
   88478:	b80b883a 	mov	r5,r23
   8847c:	008a1640 	call	8a164 <__udivsi3>
   88480:	100b883a 	mov	r5,r2
   88484:	9009883a 	mov	r4,r18
   88488:	1021883a 	mov	r16,r2
   8848c:	008a1740 	call	8a174 <__mulsi3>
   88490:	a809883a 	mov	r4,r21
   88494:	b80b883a 	mov	r5,r23
   88498:	1023883a 	mov	r17,r2
   8849c:	008a16c0 	call	8a16c <__umodsi3>
   884a0:	1004943a 	slli	r2,r2,16
   884a4:	e006d43a 	srli	r3,fp,16
   884a8:	10c4b03a 	or	r2,r2,r3
   884ac:	1440042e 	bgeu	r2,r17,884c0 <__udivdi3+0x290>
   884b0:	14c5883a 	add	r2,r2,r19
   884b4:	843fffc4 	addi	r16,r16,-1
   884b8:	14c00136 	bltu	r2,r19,884c0 <__udivdi3+0x290>
   884bc:	1440ea36 	bltu	r2,r17,88868 <__udivdi3+0x638>
   884c0:	1463c83a 	sub	r17,r2,r17
   884c4:	8809883a 	mov	r4,r17
   884c8:	b80b883a 	mov	r5,r23
   884cc:	008a1640 	call	8a164 <__udivsi3>
   884d0:	100b883a 	mov	r5,r2
   884d4:	9009883a 	mov	r4,r18
   884d8:	102b883a 	mov	r21,r2
   884dc:	008a1740 	call	8a174 <__mulsi3>
   884e0:	8809883a 	mov	r4,r17
   884e4:	b80b883a 	mov	r5,r23
   884e8:	1025883a 	mov	r18,r2
   884ec:	008a16c0 	call	8a16c <__umodsi3>
   884f0:	1004943a 	slli	r2,r2,16
   884f4:	e0ffffcc 	andi	r3,fp,65535
   884f8:	10c4b03a 	or	r2,r2,r3
   884fc:	1480042e 	bgeu	r2,r18,88510 <__udivdi3+0x2e0>
   88500:	9885883a 	add	r2,r19,r2
   88504:	ad7fffc4 	addi	r21,r21,-1
   88508:	14c00136 	bltu	r2,r19,88510 <__udivdi3+0x2e0>
   8850c:	1480d936 	bltu	r2,r18,88874 <__udivdi3+0x644>
   88510:	8004943a 	slli	r2,r16,16
   88514:	0009883a 	mov	r4,zero
   88518:	a884b03a 	or	r2,r21,r2
   8851c:	003fad06 	br	883d4 <__udivdi3+0x1a4>
   88520:	00804034 	movhi	r2,256
   88524:	10bfffc4 	addi	r2,r2,-1
   88528:	11c0b636 	bltu	r2,r7,88804 <__udivdi3+0x5d4>
   8852c:	01400404 	movi	r5,16
   88530:	2805883a 	mov	r2,r5
   88534:	003f9a06 	br	883a0 <__udivdi3+0x170>
   88538:	0005883a 	mov	r2,zero
   8853c:	0009883a 	mov	r4,zero
   88540:	003fa406 	br	883d4 <__udivdi3+0x1a4>
   88544:	00804034 	movhi	r2,256
   88548:	10bfffc4 	addi	r2,r2,-1
   8854c:	14c0b336 	bltu	r2,r19,8881c <__udivdi3+0x5ec>
   88550:	01400404 	movi	r5,16
   88554:	2805883a 	mov	r2,r5
   88558:	003f5106 	br	882a0 <__udivdi3+0x70>
   8855c:	01000044 	movi	r4,1
   88560:	000b883a 	mov	r5,zero
   88564:	008a1640 	call	8a164 <__udivsi3>
   88568:	1027883a 	mov	r19,r2
   8856c:	00bfffd4 	movui	r2,65535
   88570:	14fff436 	bltu	r2,r19,88544 <__udivdi3+0x314>
   88574:	003f4606 	br	88290 <__udivdi3+0x60>
   88578:	00804034 	movhi	r2,256
   8857c:	10bfffc4 	addi	r2,r2,-1
   88580:	1200ac36 	bltu	r2,r8,88834 <__udivdi3+0x604>
   88584:	01400404 	movi	r5,16
   88588:	2805883a 	mov	r2,r5
   8858c:	003fa806 	br	88430 <__udivdi3+0x200>
   88590:	3d85c83a 	sub	r2,r7,r22
   88594:	3588983a 	sll	r4,r6,r22
   88598:	9886d83a 	srl	r3,r19,r2
   8859c:	a8a2d83a 	srl	r17,r21,r2
   885a0:	e084d83a 	srl	r2,fp,r2
   885a4:	20eeb03a 	or	r23,r4,r3
   885a8:	b824d43a 	srli	r18,r23,16
   885ac:	ad86983a 	sll	r3,r21,r22
   885b0:	8809883a 	mov	r4,r17
   885b4:	900b883a 	mov	r5,r18
   885b8:	1886b03a 	or	r3,r3,r2
   885bc:	d8c00115 	stw	r3,4(sp)
   885c0:	bc3fffcc 	andi	r16,r23,65535
   885c4:	008a1640 	call	8a164 <__udivsi3>
   885c8:	100b883a 	mov	r5,r2
   885cc:	8009883a 	mov	r4,r16
   885d0:	1029883a 	mov	r20,r2
   885d4:	008a1740 	call	8a174 <__mulsi3>
   885d8:	900b883a 	mov	r5,r18
   885dc:	8809883a 	mov	r4,r17
   885e0:	102b883a 	mov	r21,r2
   885e4:	008a16c0 	call	8a16c <__umodsi3>
   885e8:	d9400117 	ldw	r5,4(sp)
   885ec:	1004943a 	slli	r2,r2,16
   885f0:	9da6983a 	sll	r19,r19,r22
   885f4:	2806d43a 	srli	r3,r5,16
   885f8:	10c4b03a 	or	r2,r2,r3
   885fc:	1540032e 	bgeu	r2,r21,8860c <__udivdi3+0x3dc>
   88600:	15c5883a 	add	r2,r2,r23
   88604:	a53fffc4 	addi	r20,r20,-1
   88608:	15c0912e 	bgeu	r2,r23,88850 <__udivdi3+0x620>
   8860c:	1563c83a 	sub	r17,r2,r21
   88610:	8809883a 	mov	r4,r17
   88614:	900b883a 	mov	r5,r18
   88618:	008a1640 	call	8a164 <__udivsi3>
   8861c:	100b883a 	mov	r5,r2
   88620:	8009883a 	mov	r4,r16
   88624:	102b883a 	mov	r21,r2
   88628:	008a1740 	call	8a174 <__mulsi3>
   8862c:	8809883a 	mov	r4,r17
   88630:	900b883a 	mov	r5,r18
   88634:	1021883a 	mov	r16,r2
   88638:	008a16c0 	call	8a16c <__umodsi3>
   8863c:	da800117 	ldw	r10,4(sp)
   88640:	1004943a 	slli	r2,r2,16
   88644:	50ffffcc 	andi	r3,r10,65535
   88648:	10c6b03a 	or	r3,r2,r3
   8864c:	1c00032e 	bgeu	r3,r16,8865c <__udivdi3+0x42c>
   88650:	1dc7883a 	add	r3,r3,r23
   88654:	ad7fffc4 	addi	r21,r21,-1
   88658:	1dc0792e 	bgeu	r3,r23,88840 <__udivdi3+0x610>
   8865c:	a004943a 	slli	r2,r20,16
   88660:	982ed43a 	srli	r23,r19,16
   88664:	9cffffcc 	andi	r19,r19,65535
   88668:	a8a4b03a 	or	r18,r21,r2
   8866c:	947fffcc 	andi	r17,r18,65535
   88670:	902ad43a 	srli	r21,r18,16
   88674:	8809883a 	mov	r4,r17
   88678:	980b883a 	mov	r5,r19
   8867c:	1c21c83a 	sub	r16,r3,r16
   88680:	008a1740 	call	8a174 <__mulsi3>
   88684:	8809883a 	mov	r4,r17
   88688:	b80b883a 	mov	r5,r23
   8868c:	1029883a 	mov	r20,r2
   88690:	008a1740 	call	8a174 <__mulsi3>
   88694:	980b883a 	mov	r5,r19
   88698:	a809883a 	mov	r4,r21
   8869c:	1023883a 	mov	r17,r2
   886a0:	008a1740 	call	8a174 <__mulsi3>
   886a4:	a809883a 	mov	r4,r21
   886a8:	b80b883a 	mov	r5,r23
   886ac:	1027883a 	mov	r19,r2
   886b0:	008a1740 	call	8a174 <__mulsi3>
   886b4:	1009883a 	mov	r4,r2
   886b8:	a004d43a 	srli	r2,r20,16
   886bc:	8ce3883a 	add	r17,r17,r19
   886c0:	1447883a 	add	r3,r2,r17
   886c4:	1cc0022e 	bgeu	r3,r19,886d0 <__udivdi3+0x4a0>
   886c8:	00800074 	movhi	r2,1
   886cc:	2089883a 	add	r4,r4,r2
   886d0:	1804d43a 	srli	r2,r3,16
   886d4:	2085883a 	add	r2,r4,r2
   886d8:	80804436 	bltu	r16,r2,887ec <__udivdi3+0x5bc>
   886dc:	80803e26 	beq	r16,r2,887d8 <__udivdi3+0x5a8>
   886e0:	9005883a 	mov	r2,r18
   886e4:	0009883a 	mov	r4,zero
   886e8:	003f3a06 	br	883d4 <__udivdi3+0x1a4>
   886ec:	9d26983a 	sll	r19,r19,r20
   886f0:	3505c83a 	sub	r2,r6,r20
   886f4:	a8a2d83a 	srl	r17,r21,r2
   886f8:	982ed43a 	srli	r23,r19,16
   886fc:	e084d83a 	srl	r2,fp,r2
   88700:	ad06983a 	sll	r3,r21,r20
   88704:	8809883a 	mov	r4,r17
   88708:	b80b883a 	mov	r5,r23
   8870c:	1886b03a 	or	r3,r3,r2
   88710:	d8c00015 	stw	r3,0(sp)
   88714:	9dbfffcc 	andi	r22,r19,65535
   88718:	008a1640 	call	8a164 <__udivsi3>
   8871c:	100b883a 	mov	r5,r2
   88720:	b009883a 	mov	r4,r22
   88724:	d8800215 	stw	r2,8(sp)
   88728:	008a1740 	call	8a174 <__mulsi3>
   8872c:	8809883a 	mov	r4,r17
   88730:	b80b883a 	mov	r5,r23
   88734:	102b883a 	mov	r21,r2
   88738:	008a16c0 	call	8a16c <__umodsi3>
   8873c:	d9000017 	ldw	r4,0(sp)
   88740:	1004943a 	slli	r2,r2,16
   88744:	2006d43a 	srli	r3,r4,16
   88748:	10c4b03a 	or	r2,r2,r3
   8874c:	1540052e 	bgeu	r2,r21,88764 <__udivdi3+0x534>
   88750:	d9400217 	ldw	r5,8(sp)
   88754:	14c5883a 	add	r2,r2,r19
   88758:	297fffc4 	addi	r5,r5,-1
   8875c:	d9400215 	stw	r5,8(sp)
   88760:	14c0462e 	bgeu	r2,r19,8887c <__udivdi3+0x64c>
   88764:	1563c83a 	sub	r17,r2,r21
   88768:	8809883a 	mov	r4,r17
   8876c:	b80b883a 	mov	r5,r23
   88770:	008a1640 	call	8a164 <__udivsi3>
   88774:	100b883a 	mov	r5,r2
   88778:	b009883a 	mov	r4,r22
   8877c:	1025883a 	mov	r18,r2
   88780:	008a1740 	call	8a174 <__mulsi3>
   88784:	8809883a 	mov	r4,r17
   88788:	b80b883a 	mov	r5,r23
   8878c:	1021883a 	mov	r16,r2
   88790:	008a16c0 	call	8a16c <__umodsi3>
   88794:	da800017 	ldw	r10,0(sp)
   88798:	1004943a 	slli	r2,r2,16
   8879c:	50ffffcc 	andi	r3,r10,65535
   887a0:	10c6b03a 	or	r3,r2,r3
   887a4:	1c00062e 	bgeu	r3,r16,887c0 <__udivdi3+0x590>
   887a8:	1cc7883a 	add	r3,r3,r19
   887ac:	94bfffc4 	addi	r18,r18,-1
   887b0:	1cc00336 	bltu	r3,r19,887c0 <__udivdi3+0x590>
   887b4:	1c00022e 	bgeu	r3,r16,887c0 <__udivdi3+0x590>
   887b8:	94bfffc4 	addi	r18,r18,-1
   887bc:	1cc7883a 	add	r3,r3,r19
   887c0:	d9000217 	ldw	r4,8(sp)
   887c4:	e538983a 	sll	fp,fp,r20
   887c8:	1c2bc83a 	sub	r21,r3,r16
   887cc:	2004943a 	slli	r2,r4,16
   887d0:	90a8b03a 	or	r20,r18,r2
   887d4:	003ebf06 	br	882d4 <__udivdi3+0xa4>
   887d8:	1804943a 	slli	r2,r3,16
   887dc:	e588983a 	sll	r4,fp,r22
   887e0:	a0ffffcc 	andi	r3,r20,65535
   887e4:	10c5883a 	add	r2,r2,r3
   887e8:	20bfbd2e 	bgeu	r4,r2,886e0 <__udivdi3+0x4b0>
   887ec:	90bfffc4 	addi	r2,r18,-1
   887f0:	0009883a 	mov	r4,zero
   887f4:	003ef706 	br	883d4 <__udivdi3+0x1a4>
   887f8:	01400204 	movi	r5,8
   887fc:	2805883a 	mov	r2,r5
   88800:	003ee706 	br	883a0 <__udivdi3+0x170>
   88804:	01400604 	movi	r5,24
   88808:	2805883a 	mov	r2,r5
   8880c:	003ee406 	br	883a0 <__udivdi3+0x170>
   88810:	01400204 	movi	r5,8
   88814:	2805883a 	mov	r2,r5
   88818:	003ea106 	br	882a0 <__udivdi3+0x70>
   8881c:	01400604 	movi	r5,24
   88820:	2805883a 	mov	r2,r5
   88824:	003e9e06 	br	882a0 <__udivdi3+0x70>
   88828:	01400204 	movi	r5,8
   8882c:	2805883a 	mov	r2,r5
   88830:	003eff06 	br	88430 <__udivdi3+0x200>
   88834:	01400604 	movi	r5,24
   88838:	2805883a 	mov	r2,r5
   8883c:	003efc06 	br	88430 <__udivdi3+0x200>
   88840:	1c3f862e 	bgeu	r3,r16,8865c <__udivdi3+0x42c>
   88844:	1dc7883a 	add	r3,r3,r23
   88848:	ad7fffc4 	addi	r21,r21,-1
   8884c:	003f8306 	br	8865c <__udivdi3+0x42c>
   88850:	157f6e2e 	bgeu	r2,r21,8860c <__udivdi3+0x3dc>
   88854:	a53fffc4 	addi	r20,r20,-1
   88858:	15c5883a 	add	r2,r2,r23
   8885c:	003f6b06 	br	8860c <__udivdi3+0x3dc>
   88860:	ad7fffc4 	addi	r21,r21,-1
   88864:	003ec206 	br	88370 <__udivdi3+0x140>
   88868:	843fffc4 	addi	r16,r16,-1
   8886c:	14c5883a 	add	r2,r2,r19
   88870:	003f1306 	br	884c0 <__udivdi3+0x290>
   88874:	ad7fffc4 	addi	r21,r21,-1
   88878:	003f2506 	br	88510 <__udivdi3+0x2e0>
   8887c:	157fb92e 	bgeu	r2,r21,88764 <__udivdi3+0x534>
   88880:	297fffc4 	addi	r5,r5,-1
   88884:	14c5883a 	add	r2,r2,r19
   88888:	d9400215 	stw	r5,8(sp)
   8888c:	003fb506 	br	88764 <__udivdi3+0x534>
   88890:	843fffc4 	addi	r16,r16,-1
   88894:	14c5883a 	add	r2,r2,r19
   88898:	003ea106 	br	88320 <__udivdi3+0xf0>

0008889c <__umoddi3>:
   8889c:	defff004 	addi	sp,sp,-64
   888a0:	3011883a 	mov	r8,r6
   888a4:	000d883a 	mov	r6,zero
   888a8:	dd400b15 	stw	r21,44(sp)
   888ac:	dcc00915 	stw	r19,36(sp)
   888b0:	dc000615 	stw	r16,24(sp)
   888b4:	dfc00f15 	stw	ra,60(sp)
   888b8:	df000e15 	stw	fp,56(sp)
   888bc:	ddc00d15 	stw	r23,52(sp)
   888c0:	dd800c15 	stw	r22,48(sp)
   888c4:	dd000a15 	stw	r20,40(sp)
   888c8:	dc800815 	stw	r18,32(sp)
   888cc:	dc400715 	stw	r17,28(sp)
   888d0:	2817883a 	mov	r11,r5
   888d4:	d9800415 	stw	r6,16(sp)
   888d8:	4027883a 	mov	r19,r8
   888dc:	d9800515 	stw	r6,20(sp)
   888e0:	2021883a 	mov	r16,r4
   888e4:	282b883a 	mov	r21,r5
   888e8:	38002c1e 	bne	r7,zero,8899c <__umoddi3+0x100>
   888ec:	2a005636 	bltu	r5,r8,88a48 <__umoddi3+0x1ac>
   888f0:	40009a26 	beq	r8,zero,88b5c <__umoddi3+0x2c0>
   888f4:	00bfffd4 	movui	r2,65535
   888f8:	14c09236 	bltu	r2,r19,88b44 <__umoddi3+0x2a8>
   888fc:	00803fc4 	movi	r2,255
   88900:	14c15c36 	bltu	r2,r19,88e74 <__umoddi3+0x5d8>
   88904:	000b883a 	mov	r5,zero
   88908:	0005883a 	mov	r2,zero
   8890c:	9884d83a 	srl	r2,r19,r2
   88910:	01000274 	movhi	r4,9
   88914:	2135a404 	addi	r4,r4,-10608
   88918:	01800804 	movi	r6,32
   8891c:	1105883a 	add	r2,r2,r4
   88920:	10c00003 	ldbu	r3,0(r2)
   88924:	28c7883a 	add	r3,r5,r3
   88928:	30e5c83a 	sub	r18,r6,r3
   8892c:	9000a41e 	bne	r18,zero,88bc0 <__umoddi3+0x324>
   88930:	982ed43a 	srli	r23,r19,16
   88934:	acebc83a 	sub	r21,r21,r19
   88938:	9d3fffcc 	andi	r20,r19,65535
   8893c:	002d883a 	mov	r22,zero
   88940:	a809883a 	mov	r4,r21
   88944:	b80b883a 	mov	r5,r23
   88948:	008a1640 	call	8a164 <__udivsi3>
   8894c:	100b883a 	mov	r5,r2
   88950:	a009883a 	mov	r4,r20
   88954:	008a1740 	call	8a174 <__mulsi3>
   88958:	a809883a 	mov	r4,r21
   8895c:	b80b883a 	mov	r5,r23
   88960:	1023883a 	mov	r17,r2
   88964:	008a16c0 	call	8a16c <__umodsi3>
   88968:	1004943a 	slli	r2,r2,16
   8896c:	8006d43a 	srli	r3,r16,16
   88970:	10c4b03a 	or	r2,r2,r3
   88974:	1440032e 	bgeu	r2,r17,88984 <__umoddi3+0xe8>
   88978:	14c5883a 	add	r2,r2,r19
   8897c:	14c00136 	bltu	r2,r19,88984 <__umoddi3+0xe8>
   88980:	14415836 	bltu	r2,r17,88ee4 <__umoddi3+0x648>
   88984:	1463c83a 	sub	r17,r2,r17
   88988:	8809883a 	mov	r4,r17
   8898c:	b80b883a 	mov	r5,r23
   88990:	008a1640 	call	8a164 <__udivsi3>
   88994:	a009883a 	mov	r4,r20
   88998:	00005306 	br	88ae8 <__umoddi3+0x24c>
   8899c:	380d883a 	mov	r6,r7
   889a0:	29c0132e 	bgeu	r5,r7,889f0 <__umoddi3+0x154>
   889a4:	d9000415 	stw	r4,16(sp)
   889a8:	d9400515 	stw	r5,20(sp)
   889ac:	d9400417 	ldw	r5,16(sp)
   889b0:	5813883a 	mov	r9,r11
   889b4:	2811883a 	mov	r8,r5
   889b8:	4005883a 	mov	r2,r8
   889bc:	4807883a 	mov	r3,r9
   889c0:	dfc00f17 	ldw	ra,60(sp)
   889c4:	df000e17 	ldw	fp,56(sp)
   889c8:	ddc00d17 	ldw	r23,52(sp)
   889cc:	dd800c17 	ldw	r22,48(sp)
   889d0:	dd400b17 	ldw	r21,44(sp)
   889d4:	dd000a17 	ldw	r20,40(sp)
   889d8:	dcc00917 	ldw	r19,36(sp)
   889dc:	dc800817 	ldw	r18,32(sp)
   889e0:	dc400717 	ldw	r17,28(sp)
   889e4:	dc000617 	ldw	r16,24(sp)
   889e8:	dec01004 	addi	sp,sp,64
   889ec:	f800283a 	ret
   889f0:	00bfffd4 	movui	r2,65535
   889f4:	11c06636 	bltu	r2,r7,88b90 <__umoddi3+0x2f4>
   889f8:	00803fc4 	movi	r2,255
   889fc:	11c12036 	bltu	r2,r7,88e80 <__umoddi3+0x5e4>
   88a00:	000b883a 	mov	r5,zero
   88a04:	0005883a 	mov	r2,zero
   88a08:	3084d83a 	srl	r2,r6,r2
   88a0c:	01000274 	movhi	r4,9
   88a10:	2135a404 	addi	r4,r4,-10608
   88a14:	01c00804 	movi	r7,32
   88a18:	1105883a 	add	r2,r2,r4
   88a1c:	10c00003 	ldbu	r3,0(r2)
   88a20:	28c7883a 	add	r3,r5,r3
   88a24:	38e5c83a 	sub	r18,r7,r3
   88a28:	9000941e 	bne	r18,zero,88c7c <__umoddi3+0x3e0>
   88a2c:	35405e36 	bltu	r6,r21,88ba8 <__umoddi3+0x30c>
   88a30:	84c05d2e 	bgeu	r16,r19,88ba8 <__umoddi3+0x30c>
   88a34:	8011883a 	mov	r8,r16
   88a38:	a813883a 	mov	r9,r21
   88a3c:	dc000415 	stw	r16,16(sp)
   88a40:	dd400515 	stw	r21,20(sp)
   88a44:	003fdc06 	br	889b8 <__umoddi3+0x11c>
   88a48:	00bfffd4 	movui	r2,65535
   88a4c:	12004a36 	bltu	r2,r8,88b78 <__umoddi3+0x2dc>
   88a50:	00803fc4 	movi	r2,255
   88a54:	12010d36 	bltu	r2,r8,88e8c <__umoddi3+0x5f0>
   88a58:	000b883a 	mov	r5,zero
   88a5c:	0005883a 	mov	r2,zero
   88a60:	9884d83a 	srl	r2,r19,r2
   88a64:	01000274 	movhi	r4,9
   88a68:	2135a404 	addi	r4,r4,-10608
   88a6c:	01800804 	movi	r6,32
   88a70:	1105883a 	add	r2,r2,r4
   88a74:	10c00003 	ldbu	r3,0(r2)
   88a78:	28c7883a 	add	r3,r5,r3
   88a7c:	30c7c83a 	sub	r3,r6,r3
   88a80:	1800dc1e 	bne	r3,zero,88df4 <__umoddi3+0x558>
   88a84:	002d883a 	mov	r22,zero
   88a88:	982ed43a 	srli	r23,r19,16
   88a8c:	a809883a 	mov	r4,r21
   88a90:	9cbfffcc 	andi	r18,r19,65535
   88a94:	b80b883a 	mov	r5,r23
   88a98:	008a1640 	call	8a164 <__udivsi3>
   88a9c:	100b883a 	mov	r5,r2
   88aa0:	9009883a 	mov	r4,r18
   88aa4:	008a1740 	call	8a174 <__mulsi3>
   88aa8:	a809883a 	mov	r4,r21
   88aac:	b80b883a 	mov	r5,r23
   88ab0:	1023883a 	mov	r17,r2
   88ab4:	008a16c0 	call	8a16c <__umodsi3>
   88ab8:	1004943a 	slli	r2,r2,16
   88abc:	8006d43a 	srli	r3,r16,16
   88ac0:	10c4b03a 	or	r2,r2,r3
   88ac4:	1440032e 	bgeu	r2,r17,88ad4 <__umoddi3+0x238>
   88ac8:	14c5883a 	add	r2,r2,r19
   88acc:	14c00136 	bltu	r2,r19,88ad4 <__umoddi3+0x238>
   88ad0:	14410236 	bltu	r2,r17,88edc <__umoddi3+0x640>
   88ad4:	1463c83a 	sub	r17,r2,r17
   88ad8:	8809883a 	mov	r4,r17
   88adc:	b80b883a 	mov	r5,r23
   88ae0:	008a1640 	call	8a164 <__udivsi3>
   88ae4:	9009883a 	mov	r4,r18
   88ae8:	100b883a 	mov	r5,r2
   88aec:	008a1740 	call	8a174 <__mulsi3>
   88af0:	8809883a 	mov	r4,r17
   88af4:	b80b883a 	mov	r5,r23
   88af8:	102b883a 	mov	r21,r2
   88afc:	008a16c0 	call	8a16c <__umodsi3>
   88b00:	1004943a 	slli	r2,r2,16
   88b04:	80ffffcc 	andi	r3,r16,65535
   88b08:	10c4b03a 	or	r2,r2,r3
   88b0c:	1540042e 	bgeu	r2,r21,88b20 <__umoddi3+0x284>
   88b10:	14c5883a 	add	r2,r2,r19
   88b14:	14c00236 	bltu	r2,r19,88b20 <__umoddi3+0x284>
   88b18:	1540012e 	bgeu	r2,r21,88b20 <__umoddi3+0x284>
   88b1c:	14c5883a 	add	r2,r2,r19
   88b20:	1545c83a 	sub	r2,r2,r21
   88b24:	1584d83a 	srl	r2,r2,r22
   88b28:	0013883a 	mov	r9,zero
   88b2c:	d8800415 	stw	r2,16(sp)
   88b30:	d8c00417 	ldw	r3,16(sp)
   88b34:	0005883a 	mov	r2,zero
   88b38:	d8800515 	stw	r2,20(sp)
   88b3c:	1811883a 	mov	r8,r3
   88b40:	003f9d06 	br	889b8 <__umoddi3+0x11c>
   88b44:	00804034 	movhi	r2,256
   88b48:	10bfffc4 	addi	r2,r2,-1
   88b4c:	14c0c636 	bltu	r2,r19,88e68 <__umoddi3+0x5cc>
   88b50:	01400404 	movi	r5,16
   88b54:	2805883a 	mov	r2,r5
   88b58:	003f6c06 	br	8890c <__umoddi3+0x70>
   88b5c:	01000044 	movi	r4,1
   88b60:	000b883a 	mov	r5,zero
   88b64:	008a1640 	call	8a164 <__udivsi3>
   88b68:	1027883a 	mov	r19,r2
   88b6c:	00bfffd4 	movui	r2,65535
   88b70:	14fff436 	bltu	r2,r19,88b44 <__umoddi3+0x2a8>
   88b74:	003f6106 	br	888fc <__umoddi3+0x60>
   88b78:	00804034 	movhi	r2,256
   88b7c:	10bfffc4 	addi	r2,r2,-1
   88b80:	1200c536 	bltu	r2,r8,88e98 <__umoddi3+0x5fc>
   88b84:	01400404 	movi	r5,16
   88b88:	2805883a 	mov	r2,r5
   88b8c:	003fb406 	br	88a60 <__umoddi3+0x1c4>
   88b90:	00804034 	movhi	r2,256
   88b94:	10bfffc4 	addi	r2,r2,-1
   88b98:	11c0c236 	bltu	r2,r7,88ea4 <__umoddi3+0x608>
   88b9c:	01400404 	movi	r5,16
   88ba0:	2805883a 	mov	r2,r5
   88ba4:	003f9806 	br	88a08 <__umoddi3+0x16c>
   88ba8:	84c9c83a 	sub	r4,r16,r19
   88bac:	8105803a 	cmpltu	r2,r16,r4
   88bb0:	a987c83a 	sub	r3,r21,r6
   88bb4:	18abc83a 	sub	r21,r3,r2
   88bb8:	2021883a 	mov	r16,r4
   88bbc:	003f9d06 	br	88a34 <__umoddi3+0x198>
   88bc0:	9ca6983a 	sll	r19,r19,r18
   88bc4:	3485c83a 	sub	r2,r6,r18
   88bc8:	a8a2d83a 	srl	r17,r21,r2
   88bcc:	982ed43a 	srli	r23,r19,16
   88bd0:	ac86983a 	sll	r3,r21,r18
   88bd4:	8084d83a 	srl	r2,r16,r2
   88bd8:	8809883a 	mov	r4,r17
   88bdc:	b80b883a 	mov	r5,r23
   88be0:	18b8b03a 	or	fp,r3,r2
   88be4:	9d3fffcc 	andi	r20,r19,65535
   88be8:	008a1640 	call	8a164 <__udivsi3>
   88bec:	100b883a 	mov	r5,r2
   88bf0:	a009883a 	mov	r4,r20
   88bf4:	008a1740 	call	8a174 <__mulsi3>
   88bf8:	8809883a 	mov	r4,r17
   88bfc:	b80b883a 	mov	r5,r23
   88c00:	102b883a 	mov	r21,r2
   88c04:	008a16c0 	call	8a16c <__umodsi3>
   88c08:	1004943a 	slli	r2,r2,16
   88c0c:	e006d43a 	srli	r3,fp,16
   88c10:	902d883a 	mov	r22,r18
   88c14:	10c4b03a 	or	r2,r2,r3
   88c18:	1540022e 	bgeu	r2,r21,88c24 <__umoddi3+0x388>
   88c1c:	14c5883a 	add	r2,r2,r19
   88c20:	14c0ab2e 	bgeu	r2,r19,88ed0 <__umoddi3+0x634>
   88c24:	1563c83a 	sub	r17,r2,r21
   88c28:	8809883a 	mov	r4,r17
   88c2c:	b80b883a 	mov	r5,r23
   88c30:	008a1640 	call	8a164 <__udivsi3>
   88c34:	100b883a 	mov	r5,r2
   88c38:	a009883a 	mov	r4,r20
   88c3c:	008a1740 	call	8a174 <__mulsi3>
   88c40:	8809883a 	mov	r4,r17
   88c44:	b80b883a 	mov	r5,r23
   88c48:	102b883a 	mov	r21,r2
   88c4c:	008a16c0 	call	8a16c <__umodsi3>
   88c50:	1004943a 	slli	r2,r2,16
   88c54:	e0ffffcc 	andi	r3,fp,65535
   88c58:	10c4b03a 	or	r2,r2,r3
   88c5c:	1540042e 	bgeu	r2,r21,88c70 <__umoddi3+0x3d4>
   88c60:	14c5883a 	add	r2,r2,r19
   88c64:	14c00236 	bltu	r2,r19,88c70 <__umoddi3+0x3d4>
   88c68:	1540012e 	bgeu	r2,r21,88c70 <__umoddi3+0x3d4>
   88c6c:	14c5883a 	add	r2,r2,r19
   88c70:	84a0983a 	sll	r16,r16,r18
   88c74:	156bc83a 	sub	r21,r2,r21
   88c78:	003f3106 	br	88940 <__umoddi3+0xa4>
   88c7c:	3c8fc83a 	sub	r7,r7,r18
   88c80:	3486983a 	sll	r3,r6,r18
   88c84:	99c4d83a 	srl	r2,r19,r7
   88c88:	a9e2d83a 	srl	r17,r21,r7
   88c8c:	ac8c983a 	sll	r6,r21,r18
   88c90:	18acb03a 	or	r22,r3,r2
   88c94:	b02ed43a 	srli	r23,r22,16
   88c98:	81c4d83a 	srl	r2,r16,r7
   88c9c:	8809883a 	mov	r4,r17
   88ca0:	b80b883a 	mov	r5,r23
   88ca4:	308cb03a 	or	r6,r6,r2
   88ca8:	d9c00315 	stw	r7,12(sp)
   88cac:	d9800215 	stw	r6,8(sp)
   88cb0:	b53fffcc 	andi	r20,r22,65535
   88cb4:	008a1640 	call	8a164 <__udivsi3>
   88cb8:	100b883a 	mov	r5,r2
   88cbc:	a009883a 	mov	r4,r20
   88cc0:	1039883a 	mov	fp,r2
   88cc4:	008a1740 	call	8a174 <__mulsi3>
   88cc8:	8809883a 	mov	r4,r17
   88ccc:	b80b883a 	mov	r5,r23
   88cd0:	102b883a 	mov	r21,r2
   88cd4:	008a16c0 	call	8a16c <__umodsi3>
   88cd8:	d9000217 	ldw	r4,8(sp)
   88cdc:	1004943a 	slli	r2,r2,16
   88ce0:	9ca6983a 	sll	r19,r19,r18
   88ce4:	2006d43a 	srli	r3,r4,16
   88ce8:	84a0983a 	sll	r16,r16,r18
   88cec:	dcc00015 	stw	r19,0(sp)
   88cf0:	10c4b03a 	or	r2,r2,r3
   88cf4:	dc000115 	stw	r16,4(sp)
   88cf8:	1540032e 	bgeu	r2,r21,88d08 <__umoddi3+0x46c>
   88cfc:	1585883a 	add	r2,r2,r22
   88d00:	e73fffc4 	addi	fp,fp,-1
   88d04:	15806e2e 	bgeu	r2,r22,88ec0 <__umoddi3+0x624>
   88d08:	1563c83a 	sub	r17,r2,r21
   88d0c:	8809883a 	mov	r4,r17
   88d10:	b80b883a 	mov	r5,r23
   88d14:	008a1640 	call	8a164 <__udivsi3>
   88d18:	100b883a 	mov	r5,r2
   88d1c:	a009883a 	mov	r4,r20
   88d20:	1021883a 	mov	r16,r2
   88d24:	008a1740 	call	8a174 <__mulsi3>
   88d28:	b80b883a 	mov	r5,r23
   88d2c:	8809883a 	mov	r4,r17
   88d30:	1029883a 	mov	r20,r2
   88d34:	008a16c0 	call	8a16c <__umodsi3>
   88d38:	d9400217 	ldw	r5,8(sp)
   88d3c:	1004943a 	slli	r2,r2,16
   88d40:	28ffffcc 	andi	r3,r5,65535
   88d44:	10c4b03a 	or	r2,r2,r3
   88d48:	1500032e 	bgeu	r2,r20,88d58 <__umoddi3+0x4bc>
   88d4c:	1585883a 	add	r2,r2,r22
   88d50:	843fffc4 	addi	r16,r16,-1
   88d54:	1580562e 	bgeu	r2,r22,88eb0 <__umoddi3+0x614>
   88d58:	d9800017 	ldw	r6,0(sp)
   88d5c:	e022943a 	slli	r17,fp,16
   88d60:	302ed43a 	srli	r23,r6,16
   88d64:	8462b03a 	or	r17,r16,r17
   88d68:	34ffffcc 	andi	r19,r6,65535
   88d6c:	882ad43a 	srli	r21,r17,16
   88d70:	8c7fffcc 	andi	r17,r17,65535
   88d74:	8809883a 	mov	r4,r17
   88d78:	980b883a 	mov	r5,r19
   88d7c:	1521c83a 	sub	r16,r2,r20
   88d80:	008a1740 	call	8a174 <__mulsi3>
   88d84:	8809883a 	mov	r4,r17
   88d88:	b80b883a 	mov	r5,r23
   88d8c:	1029883a 	mov	r20,r2
   88d90:	008a1740 	call	8a174 <__mulsi3>
   88d94:	980b883a 	mov	r5,r19
   88d98:	a809883a 	mov	r4,r21
   88d9c:	1023883a 	mov	r17,r2
   88da0:	008a1740 	call	8a174 <__mulsi3>
   88da4:	a809883a 	mov	r4,r21
   88da8:	b80b883a 	mov	r5,r23
   88dac:	1027883a 	mov	r19,r2
   88db0:	008a1740 	call	8a174 <__mulsi3>
   88db4:	100b883a 	mov	r5,r2
   88db8:	a004d43a 	srli	r2,r20,16
   88dbc:	8ce3883a 	add	r17,r17,r19
   88dc0:	1449883a 	add	r4,r2,r17
   88dc4:	24c0022e 	bgeu	r4,r19,88dd0 <__umoddi3+0x534>
   88dc8:	00800074 	movhi	r2,1
   88dcc:	288b883a 	add	r5,r5,r2
   88dd0:	2004d43a 	srli	r2,r4,16
   88dd4:	2008943a 	slli	r4,r4,16
   88dd8:	a0ffffcc 	andi	r3,r20,65535
   88ddc:	288d883a 	add	r6,r5,r2
   88de0:	20c9883a 	add	r4,r4,r3
   88de4:	81800b36 	bltu	r16,r6,88e14 <__umoddi3+0x578>
   88de8:	81804026 	beq	r16,r6,88eec <__umoddi3+0x650>
   88dec:	818dc83a 	sub	r6,r16,r6
   88df0:	00000f06 	br	88e30 <__umoddi3+0x594>
   88df4:	30c5c83a 	sub	r2,r6,r3
   88df8:	182d883a 	mov	r22,r3
   88dfc:	8084d83a 	srl	r2,r16,r2
   88e00:	a8c6983a 	sll	r3,r21,r3
   88e04:	9da6983a 	sll	r19,r19,r22
   88e08:	85a0983a 	sll	r16,r16,r22
   88e0c:	18aab03a 	or	r21,r3,r2
   88e10:	003f1d06 	br	88a88 <__umoddi3+0x1ec>
   88e14:	d8c00017 	ldw	r3,0(sp)
   88e18:	20c5c83a 	sub	r2,r4,r3
   88e1c:	2089803a 	cmpltu	r4,r4,r2
   88e20:	3587c83a 	sub	r3,r6,r22
   88e24:	1907c83a 	sub	r3,r3,r4
   88e28:	80cdc83a 	sub	r6,r16,r3
   88e2c:	1009883a 	mov	r4,r2
   88e30:	d9400117 	ldw	r5,4(sp)
   88e34:	2905c83a 	sub	r2,r5,r4
   88e38:	2887803a 	cmpltu	r3,r5,r2
   88e3c:	30c7c83a 	sub	r3,r6,r3
   88e40:	d9800317 	ldw	r6,12(sp)
   88e44:	1484d83a 	srl	r2,r2,r18
   88e48:	1988983a 	sll	r4,r3,r6
   88e4c:	1c86d83a 	srl	r3,r3,r18
   88e50:	2088b03a 	or	r4,r4,r2
   88e54:	2011883a 	mov	r8,r4
   88e58:	1813883a 	mov	r9,r3
   88e5c:	d9000415 	stw	r4,16(sp)
   88e60:	d8c00515 	stw	r3,20(sp)
   88e64:	003ed406 	br	889b8 <__umoddi3+0x11c>
   88e68:	01400604 	movi	r5,24
   88e6c:	2805883a 	mov	r2,r5
   88e70:	003ea606 	br	8890c <__umoddi3+0x70>
   88e74:	01400204 	movi	r5,8
   88e78:	2805883a 	mov	r2,r5
   88e7c:	003ea306 	br	8890c <__umoddi3+0x70>
   88e80:	01400204 	movi	r5,8
   88e84:	2805883a 	mov	r2,r5
   88e88:	003edf06 	br	88a08 <__umoddi3+0x16c>
   88e8c:	01400204 	movi	r5,8
   88e90:	2805883a 	mov	r2,r5
   88e94:	003ef206 	br	88a60 <__umoddi3+0x1c4>
   88e98:	01400604 	movi	r5,24
   88e9c:	2805883a 	mov	r2,r5
   88ea0:	003eef06 	br	88a60 <__umoddi3+0x1c4>
   88ea4:	01400604 	movi	r5,24
   88ea8:	2805883a 	mov	r2,r5
   88eac:	003ed606 	br	88a08 <__umoddi3+0x16c>
   88eb0:	153fa92e 	bgeu	r2,r20,88d58 <__umoddi3+0x4bc>
   88eb4:	843fffc4 	addi	r16,r16,-1
   88eb8:	1585883a 	add	r2,r2,r22
   88ebc:	003fa606 	br	88d58 <__umoddi3+0x4bc>
   88ec0:	157f912e 	bgeu	r2,r21,88d08 <__umoddi3+0x46c>
   88ec4:	e73fffc4 	addi	fp,fp,-1
   88ec8:	1585883a 	add	r2,r2,r22
   88ecc:	003f8e06 	br	88d08 <__umoddi3+0x46c>
   88ed0:	157f542e 	bgeu	r2,r21,88c24 <__umoddi3+0x388>
   88ed4:	14c5883a 	add	r2,r2,r19
   88ed8:	003f5206 	br	88c24 <__umoddi3+0x388>
   88edc:	14c5883a 	add	r2,r2,r19
   88ee0:	003efc06 	br	88ad4 <__umoddi3+0x238>
   88ee4:	14c5883a 	add	r2,r2,r19
   88ee8:	003ea606 	br	88984 <__umoddi3+0xe8>
   88eec:	d8800117 	ldw	r2,4(sp)
   88ef0:	113fc836 	bltu	r2,r4,88e14 <__umoddi3+0x578>
   88ef4:	000d883a 	mov	r6,zero
   88ef8:	003fcd06 	br	88e30 <__umoddi3+0x594>

00088efc <_fpadd_parts>:
   88efc:	defff804 	addi	sp,sp,-32
   88f00:	dcc00315 	stw	r19,12(sp)
   88f04:	2027883a 	mov	r19,r4
   88f08:	21000017 	ldw	r4,0(r4)
   88f0c:	00c00044 	movi	r3,1
   88f10:	dd400515 	stw	r21,20(sp)
   88f14:	dd000415 	stw	r20,16(sp)
   88f18:	ddc00715 	stw	r23,28(sp)
   88f1c:	dd800615 	stw	r22,24(sp)
   88f20:	dc800215 	stw	r18,8(sp)
   88f24:	dc400115 	stw	r17,4(sp)
   88f28:	dc000015 	stw	r16,0(sp)
   88f2c:	282b883a 	mov	r21,r5
   88f30:	3029883a 	mov	r20,r6
   88f34:	1900632e 	bgeu	r3,r4,890c4 <_fpadd_parts+0x1c8>
   88f38:	28800017 	ldw	r2,0(r5)
   88f3c:	1880812e 	bgeu	r3,r2,89144 <_fpadd_parts+0x248>
   88f40:	00c00104 	movi	r3,4
   88f44:	20c0dc26 	beq	r4,r3,892b8 <_fpadd_parts+0x3bc>
   88f48:	10c07e26 	beq	r2,r3,89144 <_fpadd_parts+0x248>
   88f4c:	00c00084 	movi	r3,2
   88f50:	10c06726 	beq	r2,r3,890f0 <_fpadd_parts+0x1f4>
   88f54:	20c07b26 	beq	r4,r3,89144 <_fpadd_parts+0x248>
   88f58:	9dc00217 	ldw	r23,8(r19)
   88f5c:	28c00217 	ldw	r3,8(r5)
   88f60:	9c400317 	ldw	r17,12(r19)
   88f64:	2bc00317 	ldw	r15,12(r5)
   88f68:	b8cdc83a 	sub	r6,r23,r3
   88f6c:	9c800417 	ldw	r18,16(r19)
   88f70:	2c000417 	ldw	r16,16(r5)
   88f74:	3009883a 	mov	r4,r6
   88f78:	30009716 	blt	r6,zero,891d8 <_fpadd_parts+0x2dc>
   88f7c:	00800fc4 	movi	r2,63
   88f80:	11806b16 	blt	r2,r6,89130 <_fpadd_parts+0x234>
   88f84:	0100a40e 	bge	zero,r4,89218 <_fpadd_parts+0x31c>
   88f88:	35bff804 	addi	r22,r6,-32
   88f8c:	b000bc16 	blt	r22,zero,89280 <_fpadd_parts+0x384>
   88f90:	8596d83a 	srl	r11,r16,r22
   88f94:	0019883a 	mov	r12,zero
   88f98:	0013883a 	mov	r9,zero
   88f9c:	01000044 	movi	r4,1
   88fa0:	0015883a 	mov	r10,zero
   88fa4:	b000be16 	blt	r22,zero,892a0 <_fpadd_parts+0x3a4>
   88fa8:	2590983a 	sll	r8,r4,r22
   88fac:	000f883a 	mov	r7,zero
   88fb0:	00bfffc4 	movi	r2,-1
   88fb4:	3889883a 	add	r4,r7,r2
   88fb8:	408b883a 	add	r5,r8,r2
   88fbc:	21cd803a 	cmpltu	r6,r4,r7
   88fc0:	314b883a 	add	r5,r6,r5
   88fc4:	7904703a 	and	r2,r15,r4
   88fc8:	8146703a 	and	r3,r16,r5
   88fcc:	10c4b03a 	or	r2,r2,r3
   88fd0:	10000226 	beq	r2,zero,88fdc <_fpadd_parts+0xe0>
   88fd4:	02400044 	movi	r9,1
   88fd8:	0015883a 	mov	r10,zero
   88fdc:	5a5eb03a 	or	r15,r11,r9
   88fe0:	62a0b03a 	or	r16,r12,r10
   88fe4:	99400117 	ldw	r5,4(r19)
   88fe8:	a8800117 	ldw	r2,4(r21)
   88fec:	28806e26 	beq	r5,r2,891a8 <_fpadd_parts+0x2ac>
   88ff0:	28006626 	beq	r5,zero,8918c <_fpadd_parts+0x290>
   88ff4:	7c45c83a 	sub	r2,r15,r17
   88ff8:	7889803a 	cmpltu	r4,r15,r2
   88ffc:	8487c83a 	sub	r3,r16,r18
   89000:	1909c83a 	sub	r4,r3,r4
   89004:	100d883a 	mov	r6,r2
   89008:	200f883a 	mov	r7,r4
   8900c:	38007716 	blt	r7,zero,891ec <_fpadd_parts+0x2f0>
   89010:	a5c00215 	stw	r23,8(r20)
   89014:	a1c00415 	stw	r7,16(r20)
   89018:	a0000115 	stw	zero,4(r20)
   8901c:	a1800315 	stw	r6,12(r20)
   89020:	a2000317 	ldw	r8,12(r20)
   89024:	a2400417 	ldw	r9,16(r20)
   89028:	00bfffc4 	movi	r2,-1
   8902c:	408b883a 	add	r5,r8,r2
   89030:	2a09803a 	cmpltu	r4,r5,r8
   89034:	488d883a 	add	r6,r9,r2
   89038:	01c40034 	movhi	r7,4096
   8903c:	39ffffc4 	addi	r7,r7,-1
   89040:	218d883a 	add	r6,r4,r6
   89044:	39801736 	bltu	r7,r6,890a4 <_fpadd_parts+0x1a8>
   89048:	31c06526 	beq	r6,r7,891e0 <_fpadd_parts+0x2e4>
   8904c:	a3000217 	ldw	r12,8(r20)
   89050:	4209883a 	add	r4,r8,r8
   89054:	00bfffc4 	movi	r2,-1
   89058:	220f803a 	cmpltu	r7,r4,r8
   8905c:	4a4b883a 	add	r5,r9,r9
   89060:	394f883a 	add	r7,r7,r5
   89064:	2095883a 	add	r10,r4,r2
   89068:	3897883a 	add	r11,r7,r2
   8906c:	510d803a 	cmpltu	r6,r10,r4
   89070:	6099883a 	add	r12,r12,r2
   89074:	32d7883a 	add	r11,r6,r11
   89078:	00840034 	movhi	r2,4096
   8907c:	10bfffc4 	addi	r2,r2,-1
   89080:	2011883a 	mov	r8,r4
   89084:	3813883a 	mov	r9,r7
   89088:	a1000315 	stw	r4,12(r20)
   8908c:	a1c00415 	stw	r7,16(r20)
   89090:	a3000215 	stw	r12,8(r20)
   89094:	12c00336 	bltu	r2,r11,890a4 <_fpadd_parts+0x1a8>
   89098:	58bfed1e 	bne	r11,r2,89050 <_fpadd_parts+0x154>
   8909c:	00bfff84 	movi	r2,-2
   890a0:	12bfeb2e 	bgeu	r2,r10,89050 <_fpadd_parts+0x154>
   890a4:	a2800417 	ldw	r10,16(r20)
   890a8:	008000c4 	movi	r2,3
   890ac:	00c80034 	movhi	r3,8192
   890b0:	18ffffc4 	addi	r3,r3,-1
   890b4:	a2400317 	ldw	r9,12(r20)
   890b8:	a0800015 	stw	r2,0(r20)
   890bc:	1a802336 	bltu	r3,r10,8914c <_fpadd_parts+0x250>
   890c0:	a027883a 	mov	r19,r20
   890c4:	9805883a 	mov	r2,r19
   890c8:	ddc00717 	ldw	r23,28(sp)
   890cc:	dd800617 	ldw	r22,24(sp)
   890d0:	dd400517 	ldw	r21,20(sp)
   890d4:	dd000417 	ldw	r20,16(sp)
   890d8:	dcc00317 	ldw	r19,12(sp)
   890dc:	dc800217 	ldw	r18,8(sp)
   890e0:	dc400117 	ldw	r17,4(sp)
   890e4:	dc000017 	ldw	r16,0(sp)
   890e8:	dec00804 	addi	sp,sp,32
   890ec:	f800283a 	ret
   890f0:	20fff41e 	bne	r4,r3,890c4 <_fpadd_parts+0x1c8>
   890f4:	31000015 	stw	r4,0(r6)
   890f8:	98800117 	ldw	r2,4(r19)
   890fc:	30800115 	stw	r2,4(r6)
   89100:	98c00217 	ldw	r3,8(r19)
   89104:	30c00215 	stw	r3,8(r6)
   89108:	98800317 	ldw	r2,12(r19)
   8910c:	30800315 	stw	r2,12(r6)
   89110:	98c00417 	ldw	r3,16(r19)
   89114:	30c00415 	stw	r3,16(r6)
   89118:	98800117 	ldw	r2,4(r19)
   8911c:	28c00117 	ldw	r3,4(r5)
   89120:	3027883a 	mov	r19,r6
   89124:	10c4703a 	and	r2,r2,r3
   89128:	30800115 	stw	r2,4(r6)
   8912c:	003fe506 	br	890c4 <_fpadd_parts+0x1c8>
   89130:	1dc02616 	blt	r3,r23,891cc <_fpadd_parts+0x2d0>
   89134:	0023883a 	mov	r17,zero
   89138:	182f883a 	mov	r23,r3
   8913c:	0025883a 	mov	r18,zero
   89140:	003fa806 	br	88fe4 <_fpadd_parts+0xe8>
   89144:	a827883a 	mov	r19,r21
   89148:	003fde06 	br	890c4 <_fpadd_parts+0x1c8>
   8914c:	01800044 	movi	r6,1
   89150:	500497fa 	slli	r2,r10,31
   89154:	4808d07a 	srli	r4,r9,1
   89158:	518ad83a 	srl	r5,r10,r6
   8915c:	a2000217 	ldw	r8,8(r20)
   89160:	1108b03a 	or	r4,r2,r4
   89164:	0007883a 	mov	r3,zero
   89168:	4984703a 	and	r2,r9,r6
   8916c:	208cb03a 	or	r6,r4,r2
   89170:	28ceb03a 	or	r7,r5,r3
   89174:	42000044 	addi	r8,r8,1
   89178:	a027883a 	mov	r19,r20
   8917c:	a1c00415 	stw	r7,16(r20)
   89180:	a2000215 	stw	r8,8(r20)
   89184:	a1800315 	stw	r6,12(r20)
   89188:	003fce06 	br	890c4 <_fpadd_parts+0x1c8>
   8918c:	8bc5c83a 	sub	r2,r17,r15
   89190:	8889803a 	cmpltu	r4,r17,r2
   89194:	9407c83a 	sub	r3,r18,r16
   89198:	1909c83a 	sub	r4,r3,r4
   8919c:	100d883a 	mov	r6,r2
   891a0:	200f883a 	mov	r7,r4
   891a4:	003f9906 	br	8900c <_fpadd_parts+0x110>
   891a8:	7c45883a 	add	r2,r15,r17
   891ac:	13c9803a 	cmpltu	r4,r2,r15
   891b0:	8487883a 	add	r3,r16,r18
   891b4:	20c9883a 	add	r4,r4,r3
   891b8:	a1400115 	stw	r5,4(r20)
   891bc:	a5c00215 	stw	r23,8(r20)
   891c0:	a0800315 	stw	r2,12(r20)
   891c4:	a1000415 	stw	r4,16(r20)
   891c8:	003fb606 	br	890a4 <_fpadd_parts+0x1a8>
   891cc:	001f883a 	mov	r15,zero
   891d0:	0021883a 	mov	r16,zero
   891d4:	003f8306 	br	88fe4 <_fpadd_parts+0xe8>
   891d8:	018dc83a 	sub	r6,zero,r6
   891dc:	003f6706 	br	88f7c <_fpadd_parts+0x80>
   891e0:	00bfff84 	movi	r2,-2
   891e4:	117faf36 	bltu	r2,r5,890a4 <_fpadd_parts+0x1a8>
   891e8:	003f9806 	br	8904c <_fpadd_parts+0x150>
   891ec:	0005883a 	mov	r2,zero
   891f0:	1189c83a 	sub	r4,r2,r6
   891f4:	1105803a 	cmpltu	r2,r2,r4
   891f8:	01cbc83a 	sub	r5,zero,r7
   891fc:	2885c83a 	sub	r2,r5,r2
   89200:	01800044 	movi	r6,1
   89204:	a1800115 	stw	r6,4(r20)
   89208:	a5c00215 	stw	r23,8(r20)
   8920c:	a1000315 	stw	r4,12(r20)
   89210:	a0800415 	stw	r2,16(r20)
   89214:	003f8206 	br	89020 <_fpadd_parts+0x124>
   89218:	203f7226 	beq	r4,zero,88fe4 <_fpadd_parts+0xe8>
   8921c:	35bff804 	addi	r22,r6,-32
   89220:	b9af883a 	add	r23,r23,r6
   89224:	b0003116 	blt	r22,zero,892ec <_fpadd_parts+0x3f0>
   89228:	959ad83a 	srl	r13,r18,r22
   8922c:	001d883a 	mov	r14,zero
   89230:	000f883a 	mov	r7,zero
   89234:	01000044 	movi	r4,1
   89238:	0011883a 	mov	r8,zero
   8923c:	b0002516 	blt	r22,zero,892d4 <_fpadd_parts+0x3d8>
   89240:	2594983a 	sll	r10,r4,r22
   89244:	0013883a 	mov	r9,zero
   89248:	00bfffc4 	movi	r2,-1
   8924c:	4889883a 	add	r4,r9,r2
   89250:	508b883a 	add	r5,r10,r2
   89254:	224d803a 	cmpltu	r6,r4,r9
   89258:	314b883a 	add	r5,r6,r5
   8925c:	8904703a 	and	r2,r17,r4
   89260:	9146703a 	and	r3,r18,r5
   89264:	10c4b03a 	or	r2,r2,r3
   89268:	10000226 	beq	r2,zero,89274 <_fpadd_parts+0x378>
   8926c:	01c00044 	movi	r7,1
   89270:	0011883a 	mov	r8,zero
   89274:	69e2b03a 	or	r17,r13,r7
   89278:	7224b03a 	or	r18,r14,r8
   8927c:	003f5906 	br	88fe4 <_fpadd_parts+0xe8>
   89280:	8407883a 	add	r3,r16,r16
   89284:	008007c4 	movi	r2,31
   89288:	1185c83a 	sub	r2,r2,r6
   8928c:	1886983a 	sll	r3,r3,r2
   89290:	7996d83a 	srl	r11,r15,r6
   89294:	8198d83a 	srl	r12,r16,r6
   89298:	1ad6b03a 	or	r11,r3,r11
   8929c:	003f3e06 	br	88f98 <_fpadd_parts+0x9c>
   892a0:	2006d07a 	srli	r3,r4,1
   892a4:	008007c4 	movi	r2,31
   892a8:	1185c83a 	sub	r2,r2,r6
   892ac:	1890d83a 	srl	r8,r3,r2
   892b0:	218e983a 	sll	r7,r4,r6
   892b4:	003f3e06 	br	88fb0 <_fpadd_parts+0xb4>
   892b8:	113f821e 	bne	r2,r4,890c4 <_fpadd_parts+0x1c8>
   892bc:	28c00117 	ldw	r3,4(r5)
   892c0:	98800117 	ldw	r2,4(r19)
   892c4:	10ff7f26 	beq	r2,r3,890c4 <_fpadd_parts+0x1c8>
   892c8:	04c00274 	movhi	r19,9
   892cc:	9cf59f04 	addi	r19,r19,-10628
   892d0:	003f7c06 	br	890c4 <_fpadd_parts+0x1c8>
   892d4:	2006d07a 	srli	r3,r4,1
   892d8:	008007c4 	movi	r2,31
   892dc:	1185c83a 	sub	r2,r2,r6
   892e0:	1894d83a 	srl	r10,r3,r2
   892e4:	2192983a 	sll	r9,r4,r6
   892e8:	003fd706 	br	89248 <_fpadd_parts+0x34c>
   892ec:	9487883a 	add	r3,r18,r18
   892f0:	008007c4 	movi	r2,31
   892f4:	1185c83a 	sub	r2,r2,r6
   892f8:	1886983a 	sll	r3,r3,r2
   892fc:	899ad83a 	srl	r13,r17,r6
   89300:	919cd83a 	srl	r14,r18,r6
   89304:	1b5ab03a 	or	r13,r3,r13
   89308:	003fc906 	br	89230 <_fpadd_parts+0x334>

0008930c <__subdf3>:
   8930c:	deffea04 	addi	sp,sp,-88
   89310:	dcc01415 	stw	r19,80(sp)
   89314:	dcc00404 	addi	r19,sp,16
   89318:	2011883a 	mov	r8,r4
   8931c:	2813883a 	mov	r9,r5
   89320:	dc401315 	stw	r17,76(sp)
   89324:	d809883a 	mov	r4,sp
   89328:	980b883a 	mov	r5,r19
   8932c:	dc400904 	addi	r17,sp,36
   89330:	dfc01515 	stw	ra,84(sp)
   89334:	da400115 	stw	r9,4(sp)
   89338:	d9c00315 	stw	r7,12(sp)
   8933c:	da000015 	stw	r8,0(sp)
   89340:	d9800215 	stw	r6,8(sp)
   89344:	008a6640 	call	8a664 <__unpack_d>
   89348:	d9000204 	addi	r4,sp,8
   8934c:	880b883a 	mov	r5,r17
   89350:	008a6640 	call	8a664 <__unpack_d>
   89354:	d8800a17 	ldw	r2,40(sp)
   89358:	880b883a 	mov	r5,r17
   8935c:	9809883a 	mov	r4,r19
   89360:	d9800e04 	addi	r6,sp,56
   89364:	1080005c 	xori	r2,r2,1
   89368:	d8800a15 	stw	r2,40(sp)
   8936c:	0088efc0 	call	88efc <_fpadd_parts>
   89370:	1009883a 	mov	r4,r2
   89374:	008a3500 	call	8a350 <__pack_d>
   89378:	dfc01517 	ldw	ra,84(sp)
   8937c:	dcc01417 	ldw	r19,80(sp)
   89380:	dc401317 	ldw	r17,76(sp)
   89384:	dec01604 	addi	sp,sp,88
   89388:	f800283a 	ret

0008938c <__adddf3>:
   8938c:	deffea04 	addi	sp,sp,-88
   89390:	dcc01415 	stw	r19,80(sp)
   89394:	dcc00404 	addi	r19,sp,16
   89398:	2011883a 	mov	r8,r4
   8939c:	2813883a 	mov	r9,r5
   893a0:	dc401315 	stw	r17,76(sp)
   893a4:	d809883a 	mov	r4,sp
   893a8:	980b883a 	mov	r5,r19
   893ac:	dc400904 	addi	r17,sp,36
   893b0:	dfc01515 	stw	ra,84(sp)
   893b4:	da400115 	stw	r9,4(sp)
   893b8:	d9c00315 	stw	r7,12(sp)
   893bc:	da000015 	stw	r8,0(sp)
   893c0:	d9800215 	stw	r6,8(sp)
   893c4:	008a6640 	call	8a664 <__unpack_d>
   893c8:	d9000204 	addi	r4,sp,8
   893cc:	880b883a 	mov	r5,r17
   893d0:	008a6640 	call	8a664 <__unpack_d>
   893d4:	d9800e04 	addi	r6,sp,56
   893d8:	9809883a 	mov	r4,r19
   893dc:	880b883a 	mov	r5,r17
   893e0:	0088efc0 	call	88efc <_fpadd_parts>
   893e4:	1009883a 	mov	r4,r2
   893e8:	008a3500 	call	8a350 <__pack_d>
   893ec:	dfc01517 	ldw	ra,84(sp)
   893f0:	dcc01417 	ldw	r19,80(sp)
   893f4:	dc401317 	ldw	r17,76(sp)
   893f8:	dec01604 	addi	sp,sp,88
   893fc:	f800283a 	ret

00089400 <__muldf3>:
   89400:	deffe004 	addi	sp,sp,-128
   89404:	dc401815 	stw	r17,96(sp)
   89408:	dc400404 	addi	r17,sp,16
   8940c:	2011883a 	mov	r8,r4
   89410:	2813883a 	mov	r9,r5
   89414:	dc001715 	stw	r16,92(sp)
   89418:	d809883a 	mov	r4,sp
   8941c:	880b883a 	mov	r5,r17
   89420:	dc000904 	addi	r16,sp,36
   89424:	dfc01f15 	stw	ra,124(sp)
   89428:	da400115 	stw	r9,4(sp)
   8942c:	d9c00315 	stw	r7,12(sp)
   89430:	da000015 	stw	r8,0(sp)
   89434:	d9800215 	stw	r6,8(sp)
   89438:	ddc01e15 	stw	r23,120(sp)
   8943c:	dd801d15 	stw	r22,116(sp)
   89440:	dd401c15 	stw	r21,112(sp)
   89444:	dd001b15 	stw	r20,108(sp)
   89448:	dcc01a15 	stw	r19,104(sp)
   8944c:	dc801915 	stw	r18,100(sp)
   89450:	008a6640 	call	8a664 <__unpack_d>
   89454:	d9000204 	addi	r4,sp,8
   89458:	800b883a 	mov	r5,r16
   8945c:	008a6640 	call	8a664 <__unpack_d>
   89460:	d9000417 	ldw	r4,16(sp)
   89464:	00800044 	movi	r2,1
   89468:	1100102e 	bgeu	r2,r4,894ac <__muldf3+0xac>
   8946c:	d8c00917 	ldw	r3,36(sp)
   89470:	10c0062e 	bgeu	r2,r3,8948c <__muldf3+0x8c>
   89474:	00800104 	movi	r2,4
   89478:	20800a26 	beq	r4,r2,894a4 <__muldf3+0xa4>
   8947c:	1880cc26 	beq	r3,r2,897b0 <__muldf3+0x3b0>
   89480:	00800084 	movi	r2,2
   89484:	20800926 	beq	r4,r2,894ac <__muldf3+0xac>
   89488:	1880191e 	bne	r3,r2,894f0 <__muldf3+0xf0>
   8948c:	d8c00a17 	ldw	r3,40(sp)
   89490:	d8800517 	ldw	r2,20(sp)
   89494:	8009883a 	mov	r4,r16
   89498:	10c4c03a 	cmpne	r2,r2,r3
   8949c:	d8800a15 	stw	r2,40(sp)
   894a0:	00000706 	br	894c0 <__muldf3+0xc0>
   894a4:	00800084 	movi	r2,2
   894a8:	1880c326 	beq	r3,r2,897b8 <__muldf3+0x3b8>
   894ac:	d8800517 	ldw	r2,20(sp)
   894b0:	d8c00a17 	ldw	r3,40(sp)
   894b4:	8809883a 	mov	r4,r17
   894b8:	10c4c03a 	cmpne	r2,r2,r3
   894bc:	d8800515 	stw	r2,20(sp)
   894c0:	008a3500 	call	8a350 <__pack_d>
   894c4:	dfc01f17 	ldw	ra,124(sp)
   894c8:	ddc01e17 	ldw	r23,120(sp)
   894cc:	dd801d17 	ldw	r22,116(sp)
   894d0:	dd401c17 	ldw	r21,112(sp)
   894d4:	dd001b17 	ldw	r20,108(sp)
   894d8:	dcc01a17 	ldw	r19,104(sp)
   894dc:	dc801917 	ldw	r18,100(sp)
   894e0:	dc401817 	ldw	r17,96(sp)
   894e4:	dc001717 	ldw	r16,92(sp)
   894e8:	dec02004 	addi	sp,sp,128
   894ec:	f800283a 	ret
   894f0:	dd800717 	ldw	r22,28(sp)
   894f4:	dc800c17 	ldw	r18,48(sp)
   894f8:	002b883a 	mov	r21,zero
   894fc:	0023883a 	mov	r17,zero
   89500:	a80b883a 	mov	r5,r21
   89504:	b00d883a 	mov	r6,r22
   89508:	880f883a 	mov	r7,r17
   8950c:	ddc00817 	ldw	r23,32(sp)
   89510:	dcc00d17 	ldw	r19,52(sp)
   89514:	9009883a 	mov	r4,r18
   89518:	008a1ac0 	call	8a1ac <__muldi3>
   8951c:	001b883a 	mov	r13,zero
   89520:	680f883a 	mov	r7,r13
   89524:	b009883a 	mov	r4,r22
   89528:	000b883a 	mov	r5,zero
   8952c:	980d883a 	mov	r6,r19
   89530:	b82d883a 	mov	r22,r23
   89534:	002f883a 	mov	r23,zero
   89538:	db401615 	stw	r13,88(sp)
   8953c:	d8801315 	stw	r2,76(sp)
   89540:	d8c01415 	stw	r3,80(sp)
   89544:	dcc01515 	stw	r19,84(sp)
   89548:	008a1ac0 	call	8a1ac <__muldi3>
   8954c:	b00d883a 	mov	r6,r22
   89550:	000b883a 	mov	r5,zero
   89554:	9009883a 	mov	r4,r18
   89558:	b80f883a 	mov	r7,r23
   8955c:	1021883a 	mov	r16,r2
   89560:	1823883a 	mov	r17,r3
   89564:	008a1ac0 	call	8a1ac <__muldi3>
   89568:	8085883a 	add	r2,r16,r2
   8956c:	140d803a 	cmpltu	r6,r2,r16
   89570:	88c7883a 	add	r3,r17,r3
   89574:	30cd883a 	add	r6,r6,r3
   89578:	1029883a 	mov	r20,r2
   8957c:	302b883a 	mov	r21,r6
   89580:	da801317 	ldw	r10,76(sp)
   89584:	dac01417 	ldw	r11,80(sp)
   89588:	db001517 	ldw	r12,84(sp)
   8958c:	db401617 	ldw	r13,88(sp)
   89590:	3440612e 	bgeu	r6,r17,89718 <__muldf3+0x318>
   89594:	0009883a 	mov	r4,zero
   89598:	5105883a 	add	r2,r10,r4
   8959c:	128d803a 	cmpltu	r6,r2,r10
   895a0:	5d07883a 	add	r3,r11,r20
   895a4:	30cd883a 	add	r6,r6,r3
   895a8:	0021883a 	mov	r16,zero
   895ac:	04400044 	movi	r17,1
   895b0:	1025883a 	mov	r18,r2
   895b4:	3027883a 	mov	r19,r6
   895b8:	32c06236 	bltu	r6,r11,89744 <__muldf3+0x344>
   895bc:	59807a26 	beq	r11,r6,897a8 <__muldf3+0x3a8>
   895c0:	680b883a 	mov	r5,r13
   895c4:	b80f883a 	mov	r7,r23
   895c8:	6009883a 	mov	r4,r12
   895cc:	b00d883a 	mov	r6,r22
   895d0:	008a1ac0 	call	8a1ac <__muldi3>
   895d4:	1009883a 	mov	r4,r2
   895d8:	000f883a 	mov	r7,zero
   895dc:	1545883a 	add	r2,r2,r21
   895e0:	1111803a 	cmpltu	r8,r2,r4
   895e4:	19c7883a 	add	r3,r3,r7
   895e8:	40c7883a 	add	r3,r8,r3
   895ec:	88cb883a 	add	r5,r17,r3
   895f0:	d8c00617 	ldw	r3,24(sp)
   895f4:	8089883a 	add	r4,r16,r2
   895f8:	d8800b17 	ldw	r2,44(sp)
   895fc:	18c00104 	addi	r3,r3,4
   89600:	240d803a 	cmpltu	r6,r4,r16
   89604:	10c7883a 	add	r3,r2,r3
   89608:	2013883a 	mov	r9,r4
   8960c:	d8800a17 	ldw	r2,40(sp)
   89610:	d9000517 	ldw	r4,20(sp)
   89614:	314d883a 	add	r6,r6,r5
   89618:	3015883a 	mov	r10,r6
   8961c:	2088c03a 	cmpne	r4,r4,r2
   89620:	00880034 	movhi	r2,8192
   89624:	10bfffc4 	addi	r2,r2,-1
   89628:	d9000f15 	stw	r4,60(sp)
   8962c:	d8c01015 	stw	r3,64(sp)
   89630:	1180162e 	bgeu	r2,r6,8968c <__muldf3+0x28c>
   89634:	1811883a 	mov	r8,r3
   89638:	101f883a 	mov	r15,r2
   8963c:	980497fa 	slli	r2,r19,31
   89640:	9016d07a 	srli	r11,r18,1
   89644:	500697fa 	slli	r3,r10,31
   89648:	480cd07a 	srli	r6,r9,1
   8964c:	500ed07a 	srli	r7,r10,1
   89650:	12d6b03a 	or	r11,r2,r11
   89654:	00800044 	movi	r2,1
   89658:	198cb03a 	or	r6,r3,r6
   8965c:	4888703a 	and	r4,r9,r2
   89660:	9818d07a 	srli	r12,r19,1
   89664:	001b883a 	mov	r13,zero
   89668:	03a00034 	movhi	r14,32768
   8966c:	3013883a 	mov	r9,r6
   89670:	3815883a 	mov	r10,r7
   89674:	4091883a 	add	r8,r8,r2
   89678:	20000226 	beq	r4,zero,89684 <__muldf3+0x284>
   8967c:	5b64b03a 	or	r18,r11,r13
   89680:	63a6b03a 	or	r19,r12,r14
   89684:	7abfed36 	bltu	r15,r10,8963c <__muldf3+0x23c>
   89688:	da001015 	stw	r8,64(sp)
   8968c:	00840034 	movhi	r2,4096
   89690:	10bfffc4 	addi	r2,r2,-1
   89694:	12801436 	bltu	r2,r10,896e8 <__muldf3+0x2e8>
   89698:	da001017 	ldw	r8,64(sp)
   8969c:	101f883a 	mov	r15,r2
   896a0:	4a45883a 	add	r2,r9,r9
   896a4:	124d803a 	cmpltu	r6,r2,r9
   896a8:	5287883a 	add	r3,r10,r10
   896ac:	9497883a 	add	r11,r18,r18
   896b0:	5c8f803a 	cmpltu	r7,r11,r18
   896b4:	9cd9883a 	add	r12,r19,r19
   896b8:	01000044 	movi	r4,1
   896bc:	30cd883a 	add	r6,r6,r3
   896c0:	3b0f883a 	add	r7,r7,r12
   896c4:	423fffc4 	addi	r8,r8,-1
   896c8:	1013883a 	mov	r9,r2
   896cc:	3015883a 	mov	r10,r6
   896d0:	111ab03a 	or	r13,r2,r4
   896d4:	98003016 	blt	r19,zero,89798 <__muldf3+0x398>
   896d8:	5825883a 	mov	r18,r11
   896dc:	3827883a 	mov	r19,r7
   896e0:	7abfef2e 	bgeu	r15,r10,896a0 <__muldf3+0x2a0>
   896e4:	da001015 	stw	r8,64(sp)
   896e8:	00803fc4 	movi	r2,255
   896ec:	488e703a 	and	r7,r9,r2
   896f0:	00802004 	movi	r2,128
   896f4:	0007883a 	mov	r3,zero
   896f8:	0011883a 	mov	r8,zero
   896fc:	38801826 	beq	r7,r2,89760 <__muldf3+0x360>
   89700:	008000c4 	movi	r2,3
   89704:	d9000e04 	addi	r4,sp,56
   89708:	da801215 	stw	r10,72(sp)
   8970c:	d8800e15 	stw	r2,56(sp)
   89710:	da401115 	stw	r9,68(sp)
   89714:	003f6a06 	br	894c0 <__muldf3+0xc0>
   89718:	89802126 	beq	r17,r6,897a0 <__muldf3+0x3a0>
   8971c:	0009883a 	mov	r4,zero
   89720:	5105883a 	add	r2,r10,r4
   89724:	128d803a 	cmpltu	r6,r2,r10
   89728:	5d07883a 	add	r3,r11,r20
   8972c:	30cd883a 	add	r6,r6,r3
   89730:	0021883a 	mov	r16,zero
   89734:	0023883a 	mov	r17,zero
   89738:	1025883a 	mov	r18,r2
   8973c:	3027883a 	mov	r19,r6
   89740:	32ff9e2e 	bgeu	r6,r11,895bc <__muldf3+0x1bc>
   89744:	00800044 	movi	r2,1
   89748:	8089883a 	add	r4,r16,r2
   8974c:	240d803a 	cmpltu	r6,r4,r16
   89750:	344d883a 	add	r6,r6,r17
   89754:	2021883a 	mov	r16,r4
   89758:	3023883a 	mov	r17,r6
   8975c:	003f9806 	br	895c0 <__muldf3+0x1c0>
   89760:	403fe71e 	bne	r8,zero,89700 <__muldf3+0x300>
   89764:	01004004 	movi	r4,256
   89768:	4904703a 	and	r2,r9,r4
   8976c:	10c4b03a 	or	r2,r2,r3
   89770:	103fe31e 	bne	r2,zero,89700 <__muldf3+0x300>
   89774:	94c4b03a 	or	r2,r18,r19
   89778:	103fe126 	beq	r2,zero,89700 <__muldf3+0x300>
   8977c:	49c5883a 	add	r2,r9,r7
   89780:	1251803a 	cmpltu	r8,r2,r9
   89784:	4291883a 	add	r8,r8,r10
   89788:	013fc004 	movi	r4,-256
   8978c:	1112703a 	and	r9,r2,r4
   89790:	4015883a 	mov	r10,r8
   89794:	003fda06 	br	89700 <__muldf3+0x300>
   89798:	6813883a 	mov	r9,r13
   8979c:	003fce06 	br	896d8 <__muldf3+0x2d8>
   897a0:	143f7c36 	bltu	r2,r16,89594 <__muldf3+0x194>
   897a4:	003fdd06 	br	8971c <__muldf3+0x31c>
   897a8:	12bf852e 	bgeu	r2,r10,895c0 <__muldf3+0x1c0>
   897ac:	003fe506 	br	89744 <__muldf3+0x344>
   897b0:	00800084 	movi	r2,2
   897b4:	20bf351e 	bne	r4,r2,8948c <__muldf3+0x8c>
   897b8:	01000274 	movhi	r4,9
   897bc:	21359f04 	addi	r4,r4,-10628
   897c0:	003f3f06 	br	894c0 <__muldf3+0xc0>

000897c4 <__divdf3>:
   897c4:	deffed04 	addi	sp,sp,-76
   897c8:	dcc01115 	stw	r19,68(sp)
   897cc:	dcc00404 	addi	r19,sp,16
   897d0:	2011883a 	mov	r8,r4
   897d4:	2813883a 	mov	r9,r5
   897d8:	dc000e15 	stw	r16,56(sp)
   897dc:	d809883a 	mov	r4,sp
   897e0:	980b883a 	mov	r5,r19
   897e4:	dc000904 	addi	r16,sp,36
   897e8:	dfc01215 	stw	ra,72(sp)
   897ec:	da400115 	stw	r9,4(sp)
   897f0:	d9c00315 	stw	r7,12(sp)
   897f4:	da000015 	stw	r8,0(sp)
   897f8:	d9800215 	stw	r6,8(sp)
   897fc:	dc801015 	stw	r18,64(sp)
   89800:	dc400f15 	stw	r17,60(sp)
   89804:	008a6640 	call	8a664 <__unpack_d>
   89808:	d9000204 	addi	r4,sp,8
   8980c:	800b883a 	mov	r5,r16
   89810:	008a6640 	call	8a664 <__unpack_d>
   89814:	d9000417 	ldw	r4,16(sp)
   89818:	00800044 	movi	r2,1
   8981c:	11000b2e 	bgeu	r2,r4,8984c <__divdf3+0x88>
   89820:	d9400917 	ldw	r5,36(sp)
   89824:	1140762e 	bgeu	r2,r5,89a00 <__divdf3+0x23c>
   89828:	d8800517 	ldw	r2,20(sp)
   8982c:	d8c00a17 	ldw	r3,40(sp)
   89830:	01800104 	movi	r6,4
   89834:	10c4f03a 	xor	r2,r2,r3
   89838:	d8800515 	stw	r2,20(sp)
   8983c:	21800226 	beq	r4,r6,89848 <__divdf3+0x84>
   89840:	00800084 	movi	r2,2
   89844:	2080141e 	bne	r4,r2,89898 <__divdf3+0xd4>
   89848:	29000926 	beq	r5,r4,89870 <__divdf3+0xac>
   8984c:	9809883a 	mov	r4,r19
   89850:	008a3500 	call	8a350 <__pack_d>
   89854:	dfc01217 	ldw	ra,72(sp)
   89858:	dcc01117 	ldw	r19,68(sp)
   8985c:	dc801017 	ldw	r18,64(sp)
   89860:	dc400f17 	ldw	r17,60(sp)
   89864:	dc000e17 	ldw	r16,56(sp)
   89868:	dec01304 	addi	sp,sp,76
   8986c:	f800283a 	ret
   89870:	01000274 	movhi	r4,9
   89874:	21359f04 	addi	r4,r4,-10628
   89878:	008a3500 	call	8a350 <__pack_d>
   8987c:	dfc01217 	ldw	ra,72(sp)
   89880:	dcc01117 	ldw	r19,68(sp)
   89884:	dc801017 	ldw	r18,64(sp)
   89888:	dc400f17 	ldw	r17,60(sp)
   8988c:	dc000e17 	ldw	r16,56(sp)
   89890:	dec01304 	addi	sp,sp,76
   89894:	f800283a 	ret
   89898:	29805b26 	beq	r5,r6,89a08 <__divdf3+0x244>
   8989c:	28802d26 	beq	r5,r2,89954 <__divdf3+0x190>
   898a0:	d8c00617 	ldw	r3,24(sp)
   898a4:	d8800b17 	ldw	r2,44(sp)
   898a8:	d9c00817 	ldw	r7,32(sp)
   898ac:	dc400d17 	ldw	r17,52(sp)
   898b0:	188bc83a 	sub	r5,r3,r2
   898b4:	d9800717 	ldw	r6,28(sp)
   898b8:	dc000c17 	ldw	r16,48(sp)
   898bc:	d9400615 	stw	r5,24(sp)
   898c0:	3c403836 	bltu	r7,r17,899a4 <__divdf3+0x1e0>
   898c4:	89c03626 	beq	r17,r7,899a0 <__divdf3+0x1dc>
   898c8:	0015883a 	mov	r10,zero
   898cc:	001d883a 	mov	r14,zero
   898d0:	02c40034 	movhi	r11,4096
   898d4:	001f883a 	mov	r15,zero
   898d8:	003f883a 	mov	ra,zero
   898dc:	04800f44 	movi	r18,61
   898e0:	00000f06 	br	89920 <__divdf3+0x15c>
   898e4:	601d883a 	mov	r14,r12
   898e8:	681f883a 	mov	r15,r13
   898ec:	400d883a 	mov	r6,r8
   898f0:	100f883a 	mov	r7,r2
   898f4:	3191883a 	add	r8,r6,r6
   898f8:	5808d07a 	srli	r4,r11,1
   898fc:	4185803a 	cmpltu	r2,r8,r6
   89900:	39d3883a 	add	r9,r7,r7
   89904:	28c6b03a 	or	r3,r5,r3
   89908:	1245883a 	add	r2,r2,r9
   8990c:	1815883a 	mov	r10,r3
   89910:	2017883a 	mov	r11,r4
   89914:	400d883a 	mov	r6,r8
   89918:	100f883a 	mov	r7,r2
   8991c:	fc801726 	beq	ra,r18,8997c <__divdf3+0x1b8>
   89920:	580a97fa 	slli	r5,r11,31
   89924:	5006d07a 	srli	r3,r10,1
   89928:	ffc00044 	addi	ra,ra,1
   8992c:	3c7ff136 	bltu	r7,r17,898f4 <__divdf3+0x130>
   89930:	3411c83a 	sub	r8,r6,r16
   89934:	3205803a 	cmpltu	r2,r6,r8
   89938:	3c53c83a 	sub	r9,r7,r17
   8993c:	7298b03a 	or	r12,r14,r10
   89940:	7adab03a 	or	r13,r15,r11
   89944:	4885c83a 	sub	r2,r9,r2
   89948:	89ffe61e 	bne	r17,r7,898e4 <__divdf3+0x120>
   8994c:	343fe936 	bltu	r6,r16,898f4 <__divdf3+0x130>
   89950:	003fe406 	br	898e4 <__divdf3+0x120>
   89954:	9809883a 	mov	r4,r19
   89958:	d9800415 	stw	r6,16(sp)
   8995c:	008a3500 	call	8a350 <__pack_d>
   89960:	dfc01217 	ldw	ra,72(sp)
   89964:	dcc01117 	ldw	r19,68(sp)
   89968:	dc801017 	ldw	r18,64(sp)
   8996c:	dc400f17 	ldw	r17,60(sp)
   89970:	dc000e17 	ldw	r16,56(sp)
   89974:	dec01304 	addi	sp,sp,76
   89978:	f800283a 	ret
   8997c:	00803fc4 	movi	r2,255
   89980:	7090703a 	and	r8,r14,r2
   89984:	00802004 	movi	r2,128
   89988:	0007883a 	mov	r3,zero
   8998c:	0013883a 	mov	r9,zero
   89990:	40800d26 	beq	r8,r2,899c8 <__divdf3+0x204>
   89994:	dbc00815 	stw	r15,32(sp)
   89998:	db800715 	stw	r14,28(sp)
   8999c:	003fab06 	br	8984c <__divdf3+0x88>
   899a0:	343fc92e 	bgeu	r6,r16,898c8 <__divdf3+0x104>
   899a4:	3185883a 	add	r2,r6,r6
   899a8:	1189803a 	cmpltu	r4,r2,r6
   899ac:	39c7883a 	add	r3,r7,r7
   899b0:	20c9883a 	add	r4,r4,r3
   899b4:	297fffc4 	addi	r5,r5,-1
   899b8:	100d883a 	mov	r6,r2
   899bc:	200f883a 	mov	r7,r4
   899c0:	d9400615 	stw	r5,24(sp)
   899c4:	003fc006 	br	898c8 <__divdf3+0x104>
   899c8:	483ff21e 	bne	r9,zero,89994 <__divdf3+0x1d0>
   899cc:	01004004 	movi	r4,256
   899d0:	7104703a 	and	r2,r14,r4
   899d4:	10c4b03a 	or	r2,r2,r3
   899d8:	103fee1e 	bne	r2,zero,89994 <__divdf3+0x1d0>
   899dc:	31c4b03a 	or	r2,r6,r7
   899e0:	103fec26 	beq	r2,zero,89994 <__divdf3+0x1d0>
   899e4:	7205883a 	add	r2,r14,r8
   899e8:	1391803a 	cmpltu	r8,r2,r14
   899ec:	43d1883a 	add	r8,r8,r15
   899f0:	013fc004 	movi	r4,-256
   899f4:	111c703a 	and	r14,r2,r4
   899f8:	401f883a 	mov	r15,r8
   899fc:	003fe506 	br	89994 <__divdf3+0x1d0>
   89a00:	8009883a 	mov	r4,r16
   89a04:	003f9206 	br	89850 <__divdf3+0x8c>
   89a08:	9809883a 	mov	r4,r19
   89a0c:	d8000715 	stw	zero,28(sp)
   89a10:	d8000815 	stw	zero,32(sp)
   89a14:	d8000615 	stw	zero,24(sp)
   89a18:	003f8d06 	br	89850 <__divdf3+0x8c>

00089a1c <__eqdf2>:
   89a1c:	deffef04 	addi	sp,sp,-68
   89a20:	dc400f15 	stw	r17,60(sp)
   89a24:	dc400404 	addi	r17,sp,16
   89a28:	2005883a 	mov	r2,r4
   89a2c:	2807883a 	mov	r3,r5
   89a30:	dc000e15 	stw	r16,56(sp)
   89a34:	d809883a 	mov	r4,sp
   89a38:	880b883a 	mov	r5,r17
   89a3c:	dc000904 	addi	r16,sp,36
   89a40:	d8c00115 	stw	r3,4(sp)
   89a44:	d8800015 	stw	r2,0(sp)
   89a48:	d9800215 	stw	r6,8(sp)
   89a4c:	dfc01015 	stw	ra,64(sp)
   89a50:	d9c00315 	stw	r7,12(sp)
   89a54:	008a6640 	call	8a664 <__unpack_d>
   89a58:	d9000204 	addi	r4,sp,8
   89a5c:	800b883a 	mov	r5,r16
   89a60:	008a6640 	call	8a664 <__unpack_d>
   89a64:	d8800417 	ldw	r2,16(sp)
   89a68:	00c00044 	movi	r3,1
   89a6c:	180d883a 	mov	r6,r3
   89a70:	1880062e 	bgeu	r3,r2,89a8c <__eqdf2+0x70>
   89a74:	d8800917 	ldw	r2,36(sp)
   89a78:	8809883a 	mov	r4,r17
   89a7c:	800b883a 	mov	r5,r16
   89a80:	1880022e 	bgeu	r3,r2,89a8c <__eqdf2+0x70>
   89a84:	008a79c0 	call	8a79c <__fpcmp_parts_d>
   89a88:	100d883a 	mov	r6,r2
   89a8c:	3005883a 	mov	r2,r6
   89a90:	dfc01017 	ldw	ra,64(sp)
   89a94:	dc400f17 	ldw	r17,60(sp)
   89a98:	dc000e17 	ldw	r16,56(sp)
   89a9c:	dec01104 	addi	sp,sp,68
   89aa0:	f800283a 	ret

00089aa4 <__nedf2>:
   89aa4:	deffef04 	addi	sp,sp,-68
   89aa8:	dc400f15 	stw	r17,60(sp)
   89aac:	dc400404 	addi	r17,sp,16
   89ab0:	2005883a 	mov	r2,r4
   89ab4:	2807883a 	mov	r3,r5
   89ab8:	dc000e15 	stw	r16,56(sp)
   89abc:	d809883a 	mov	r4,sp
   89ac0:	880b883a 	mov	r5,r17
   89ac4:	dc000904 	addi	r16,sp,36
   89ac8:	d8c00115 	stw	r3,4(sp)
   89acc:	d8800015 	stw	r2,0(sp)
   89ad0:	d9800215 	stw	r6,8(sp)
   89ad4:	dfc01015 	stw	ra,64(sp)
   89ad8:	d9c00315 	stw	r7,12(sp)
   89adc:	008a6640 	call	8a664 <__unpack_d>
   89ae0:	d9000204 	addi	r4,sp,8
   89ae4:	800b883a 	mov	r5,r16
   89ae8:	008a6640 	call	8a664 <__unpack_d>
   89aec:	d8800417 	ldw	r2,16(sp)
   89af0:	00c00044 	movi	r3,1
   89af4:	180d883a 	mov	r6,r3
   89af8:	1880062e 	bgeu	r3,r2,89b14 <__nedf2+0x70>
   89afc:	d8800917 	ldw	r2,36(sp)
   89b00:	8809883a 	mov	r4,r17
   89b04:	800b883a 	mov	r5,r16
   89b08:	1880022e 	bgeu	r3,r2,89b14 <__nedf2+0x70>
   89b0c:	008a79c0 	call	8a79c <__fpcmp_parts_d>
   89b10:	100d883a 	mov	r6,r2
   89b14:	3005883a 	mov	r2,r6
   89b18:	dfc01017 	ldw	ra,64(sp)
   89b1c:	dc400f17 	ldw	r17,60(sp)
   89b20:	dc000e17 	ldw	r16,56(sp)
   89b24:	dec01104 	addi	sp,sp,68
   89b28:	f800283a 	ret

00089b2c <__gtdf2>:
   89b2c:	deffef04 	addi	sp,sp,-68
   89b30:	dc400f15 	stw	r17,60(sp)
   89b34:	dc400404 	addi	r17,sp,16
   89b38:	2005883a 	mov	r2,r4
   89b3c:	2807883a 	mov	r3,r5
   89b40:	dc000e15 	stw	r16,56(sp)
   89b44:	d809883a 	mov	r4,sp
   89b48:	880b883a 	mov	r5,r17
   89b4c:	dc000904 	addi	r16,sp,36
   89b50:	d8c00115 	stw	r3,4(sp)
   89b54:	d8800015 	stw	r2,0(sp)
   89b58:	d9800215 	stw	r6,8(sp)
   89b5c:	dfc01015 	stw	ra,64(sp)
   89b60:	d9c00315 	stw	r7,12(sp)
   89b64:	008a6640 	call	8a664 <__unpack_d>
   89b68:	d9000204 	addi	r4,sp,8
   89b6c:	800b883a 	mov	r5,r16
   89b70:	008a6640 	call	8a664 <__unpack_d>
   89b74:	d8800417 	ldw	r2,16(sp)
   89b78:	00c00044 	movi	r3,1
   89b7c:	01bfffc4 	movi	r6,-1
   89b80:	1880062e 	bgeu	r3,r2,89b9c <__gtdf2+0x70>
   89b84:	d8800917 	ldw	r2,36(sp)
   89b88:	8809883a 	mov	r4,r17
   89b8c:	800b883a 	mov	r5,r16
   89b90:	1880022e 	bgeu	r3,r2,89b9c <__gtdf2+0x70>
   89b94:	008a79c0 	call	8a79c <__fpcmp_parts_d>
   89b98:	100d883a 	mov	r6,r2
   89b9c:	3005883a 	mov	r2,r6
   89ba0:	dfc01017 	ldw	ra,64(sp)
   89ba4:	dc400f17 	ldw	r17,60(sp)
   89ba8:	dc000e17 	ldw	r16,56(sp)
   89bac:	dec01104 	addi	sp,sp,68
   89bb0:	f800283a 	ret

00089bb4 <__gedf2>:
   89bb4:	deffef04 	addi	sp,sp,-68
   89bb8:	dc400f15 	stw	r17,60(sp)
   89bbc:	dc400404 	addi	r17,sp,16
   89bc0:	2005883a 	mov	r2,r4
   89bc4:	2807883a 	mov	r3,r5
   89bc8:	dc000e15 	stw	r16,56(sp)
   89bcc:	d809883a 	mov	r4,sp
   89bd0:	880b883a 	mov	r5,r17
   89bd4:	dc000904 	addi	r16,sp,36
   89bd8:	d8c00115 	stw	r3,4(sp)
   89bdc:	d8800015 	stw	r2,0(sp)
   89be0:	d9800215 	stw	r6,8(sp)
   89be4:	dfc01015 	stw	ra,64(sp)
   89be8:	d9c00315 	stw	r7,12(sp)
   89bec:	008a6640 	call	8a664 <__unpack_d>
   89bf0:	d9000204 	addi	r4,sp,8
   89bf4:	800b883a 	mov	r5,r16
   89bf8:	008a6640 	call	8a664 <__unpack_d>
   89bfc:	d8800417 	ldw	r2,16(sp)
   89c00:	00c00044 	movi	r3,1
   89c04:	01bfffc4 	movi	r6,-1
   89c08:	1880062e 	bgeu	r3,r2,89c24 <__gedf2+0x70>
   89c0c:	d8800917 	ldw	r2,36(sp)
   89c10:	8809883a 	mov	r4,r17
   89c14:	800b883a 	mov	r5,r16
   89c18:	1880022e 	bgeu	r3,r2,89c24 <__gedf2+0x70>
   89c1c:	008a79c0 	call	8a79c <__fpcmp_parts_d>
   89c20:	100d883a 	mov	r6,r2
   89c24:	3005883a 	mov	r2,r6
   89c28:	dfc01017 	ldw	ra,64(sp)
   89c2c:	dc400f17 	ldw	r17,60(sp)
   89c30:	dc000e17 	ldw	r16,56(sp)
   89c34:	dec01104 	addi	sp,sp,68
   89c38:	f800283a 	ret

00089c3c <__ltdf2>:
   89c3c:	deffef04 	addi	sp,sp,-68
   89c40:	dc400f15 	stw	r17,60(sp)
   89c44:	dc400404 	addi	r17,sp,16
   89c48:	2005883a 	mov	r2,r4
   89c4c:	2807883a 	mov	r3,r5
   89c50:	dc000e15 	stw	r16,56(sp)
   89c54:	d809883a 	mov	r4,sp
   89c58:	880b883a 	mov	r5,r17
   89c5c:	dc000904 	addi	r16,sp,36
   89c60:	d8c00115 	stw	r3,4(sp)
   89c64:	d8800015 	stw	r2,0(sp)
   89c68:	d9800215 	stw	r6,8(sp)
   89c6c:	dfc01015 	stw	ra,64(sp)
   89c70:	d9c00315 	stw	r7,12(sp)
   89c74:	008a6640 	call	8a664 <__unpack_d>
   89c78:	d9000204 	addi	r4,sp,8
   89c7c:	800b883a 	mov	r5,r16
   89c80:	008a6640 	call	8a664 <__unpack_d>
   89c84:	d8800417 	ldw	r2,16(sp)
   89c88:	00c00044 	movi	r3,1
   89c8c:	180d883a 	mov	r6,r3
   89c90:	1880062e 	bgeu	r3,r2,89cac <__ltdf2+0x70>
   89c94:	d8800917 	ldw	r2,36(sp)
   89c98:	8809883a 	mov	r4,r17
   89c9c:	800b883a 	mov	r5,r16
   89ca0:	1880022e 	bgeu	r3,r2,89cac <__ltdf2+0x70>
   89ca4:	008a79c0 	call	8a79c <__fpcmp_parts_d>
   89ca8:	100d883a 	mov	r6,r2
   89cac:	3005883a 	mov	r2,r6
   89cb0:	dfc01017 	ldw	ra,64(sp)
   89cb4:	dc400f17 	ldw	r17,60(sp)
   89cb8:	dc000e17 	ldw	r16,56(sp)
   89cbc:	dec01104 	addi	sp,sp,68
   89cc0:	f800283a 	ret

00089cc4 <__floatsidf>:
   89cc4:	2006d7fa 	srli	r3,r4,31
   89cc8:	defff604 	addi	sp,sp,-40
   89ccc:	008000c4 	movi	r2,3
   89cd0:	dfc00915 	stw	ra,36(sp)
   89cd4:	dcc00815 	stw	r19,32(sp)
   89cd8:	dc800715 	stw	r18,28(sp)
   89cdc:	dc400615 	stw	r17,24(sp)
   89ce0:	dc000515 	stw	r16,20(sp)
   89ce4:	d8800015 	stw	r2,0(sp)
   89ce8:	d8c00115 	stw	r3,4(sp)
   89cec:	20000f1e 	bne	r4,zero,89d2c <__floatsidf+0x68>
   89cf0:	00800084 	movi	r2,2
   89cf4:	d8800015 	stw	r2,0(sp)
   89cf8:	d809883a 	mov	r4,sp
   89cfc:	008a3500 	call	8a350 <__pack_d>
   89d00:	1009883a 	mov	r4,r2
   89d04:	180b883a 	mov	r5,r3
   89d08:	2005883a 	mov	r2,r4
   89d0c:	2807883a 	mov	r3,r5
   89d10:	dfc00917 	ldw	ra,36(sp)
   89d14:	dcc00817 	ldw	r19,32(sp)
   89d18:	dc800717 	ldw	r18,28(sp)
   89d1c:	dc400617 	ldw	r17,24(sp)
   89d20:	dc000517 	ldw	r16,20(sp)
   89d24:	dec00a04 	addi	sp,sp,40
   89d28:	f800283a 	ret
   89d2c:	00800f04 	movi	r2,60
   89d30:	1807003a 	cmpeq	r3,r3,zero
   89d34:	d8800215 	stw	r2,8(sp)
   89d38:	18001126 	beq	r3,zero,89d80 <__floatsidf+0xbc>
   89d3c:	0027883a 	mov	r19,zero
   89d40:	2025883a 	mov	r18,r4
   89d44:	d9000315 	stw	r4,12(sp)
   89d48:	dcc00415 	stw	r19,16(sp)
   89d4c:	008a2d00 	call	8a2d0 <__clzsi2>
   89d50:	11000744 	addi	r4,r2,29
   89d54:	013fe80e 	bge	zero,r4,89cf8 <__floatsidf+0x34>
   89d58:	10bfff44 	addi	r2,r2,-3
   89d5c:	10000c16 	blt	r2,zero,89d90 <__floatsidf+0xcc>
   89d60:	90a2983a 	sll	r17,r18,r2
   89d64:	0021883a 	mov	r16,zero
   89d68:	d8800217 	ldw	r2,8(sp)
   89d6c:	dc400415 	stw	r17,16(sp)
   89d70:	dc000315 	stw	r16,12(sp)
   89d74:	1105c83a 	sub	r2,r2,r4
   89d78:	d8800215 	stw	r2,8(sp)
   89d7c:	003fde06 	br	89cf8 <__floatsidf+0x34>
   89d80:	00a00034 	movhi	r2,32768
   89d84:	20800a26 	beq	r4,r2,89db0 <__floatsidf+0xec>
   89d88:	0109c83a 	sub	r4,zero,r4
   89d8c:	003feb06 	br	89d3c <__floatsidf+0x78>
   89d90:	9006d07a 	srli	r3,r18,1
   89d94:	008007c4 	movi	r2,31
   89d98:	1105c83a 	sub	r2,r2,r4
   89d9c:	1886d83a 	srl	r3,r3,r2
   89da0:	9922983a 	sll	r17,r19,r4
   89da4:	9120983a 	sll	r16,r18,r4
   89da8:	1c62b03a 	or	r17,r3,r17
   89dac:	003fee06 	br	89d68 <__floatsidf+0xa4>
   89db0:	0009883a 	mov	r4,zero
   89db4:	01707834 	movhi	r5,49632
   89db8:	003fd306 	br	89d08 <__floatsidf+0x44>

00089dbc <__fixdfsi>:
   89dbc:	defff804 	addi	sp,sp,-32
   89dc0:	2005883a 	mov	r2,r4
   89dc4:	2807883a 	mov	r3,r5
   89dc8:	d809883a 	mov	r4,sp
   89dcc:	d9400204 	addi	r5,sp,8
   89dd0:	d8c00115 	stw	r3,4(sp)
   89dd4:	d8800015 	stw	r2,0(sp)
   89dd8:	dfc00715 	stw	ra,28(sp)
   89ddc:	008a6640 	call	8a664 <__unpack_d>
   89de0:	d8c00217 	ldw	r3,8(sp)
   89de4:	00800084 	movi	r2,2
   89de8:	1880051e 	bne	r3,r2,89e00 <__fixdfsi+0x44>
   89dec:	0007883a 	mov	r3,zero
   89df0:	1805883a 	mov	r2,r3
   89df4:	dfc00717 	ldw	ra,28(sp)
   89df8:	dec00804 	addi	sp,sp,32
   89dfc:	f800283a 	ret
   89e00:	00800044 	movi	r2,1
   89e04:	10fff92e 	bgeu	r2,r3,89dec <__fixdfsi+0x30>
   89e08:	00800104 	movi	r2,4
   89e0c:	18800426 	beq	r3,r2,89e20 <__fixdfsi+0x64>
   89e10:	d8c00417 	ldw	r3,16(sp)
   89e14:	183ff516 	blt	r3,zero,89dec <__fixdfsi+0x30>
   89e18:	00800784 	movi	r2,30
   89e1c:	10c0080e 	bge	r2,r3,89e40 <__fixdfsi+0x84>
   89e20:	d8800317 	ldw	r2,12(sp)
   89e24:	1000121e 	bne	r2,zero,89e70 <__fixdfsi+0xb4>
   89e28:	00e00034 	movhi	r3,32768
   89e2c:	18ffffc4 	addi	r3,r3,-1
   89e30:	1805883a 	mov	r2,r3
   89e34:	dfc00717 	ldw	ra,28(sp)
   89e38:	dec00804 	addi	sp,sp,32
   89e3c:	f800283a 	ret
   89e40:	00800f04 	movi	r2,60
   89e44:	10d1c83a 	sub	r8,r2,r3
   89e48:	40bff804 	addi	r2,r8,-32
   89e4c:	d9800517 	ldw	r6,20(sp)
   89e50:	d9c00617 	ldw	r7,24(sp)
   89e54:	10000816 	blt	r2,zero,89e78 <__fixdfsi+0xbc>
   89e58:	3888d83a 	srl	r4,r7,r2
   89e5c:	d8800317 	ldw	r2,12(sp)
   89e60:	2007883a 	mov	r3,r4
   89e64:	103fe226 	beq	r2,zero,89df0 <__fixdfsi+0x34>
   89e68:	0107c83a 	sub	r3,zero,r4
   89e6c:	003fe006 	br	89df0 <__fixdfsi+0x34>
   89e70:	00e00034 	movhi	r3,32768
   89e74:	003fde06 	br	89df0 <__fixdfsi+0x34>
   89e78:	39c7883a 	add	r3,r7,r7
   89e7c:	008007c4 	movi	r2,31
   89e80:	1205c83a 	sub	r2,r2,r8
   89e84:	1886983a 	sll	r3,r3,r2
   89e88:	3208d83a 	srl	r4,r6,r8
   89e8c:	1908b03a 	or	r4,r3,r4
   89e90:	003ff206 	br	89e5c <__fixdfsi+0xa0>

00089e94 <__floatunsidf>:
   89e94:	defff204 	addi	sp,sp,-56
   89e98:	dfc00d15 	stw	ra,52(sp)
   89e9c:	ddc00c15 	stw	r23,48(sp)
   89ea0:	dd800b15 	stw	r22,44(sp)
   89ea4:	dd400a15 	stw	r21,40(sp)
   89ea8:	dd000915 	stw	r20,36(sp)
   89eac:	dcc00815 	stw	r19,32(sp)
   89eb0:	dc800715 	stw	r18,28(sp)
   89eb4:	dc400615 	stw	r17,24(sp)
   89eb8:	dc000515 	stw	r16,20(sp)
   89ebc:	d8000115 	stw	zero,4(sp)
   89ec0:	20000f1e 	bne	r4,zero,89f00 <__floatunsidf+0x6c>
   89ec4:	00800084 	movi	r2,2
   89ec8:	d8800015 	stw	r2,0(sp)
   89ecc:	d809883a 	mov	r4,sp
   89ed0:	008a3500 	call	8a350 <__pack_d>
   89ed4:	dfc00d17 	ldw	ra,52(sp)
   89ed8:	ddc00c17 	ldw	r23,48(sp)
   89edc:	dd800b17 	ldw	r22,44(sp)
   89ee0:	dd400a17 	ldw	r21,40(sp)
   89ee4:	dd000917 	ldw	r20,36(sp)
   89ee8:	dcc00817 	ldw	r19,32(sp)
   89eec:	dc800717 	ldw	r18,28(sp)
   89ef0:	dc400617 	ldw	r17,24(sp)
   89ef4:	dc000517 	ldw	r16,20(sp)
   89ef8:	dec00e04 	addi	sp,sp,56
   89efc:	f800283a 	ret
   89f00:	008000c4 	movi	r2,3
   89f04:	00c00f04 	movi	r3,60
   89f08:	002f883a 	mov	r23,zero
   89f0c:	202d883a 	mov	r22,r4
   89f10:	d8800015 	stw	r2,0(sp)
   89f14:	d8c00215 	stw	r3,8(sp)
   89f18:	d9000315 	stw	r4,12(sp)
   89f1c:	ddc00415 	stw	r23,16(sp)
   89f20:	008a2d00 	call	8a2d0 <__clzsi2>
   89f24:	12400744 	addi	r9,r2,29
   89f28:	48000b16 	blt	r9,zero,89f58 <__floatunsidf+0xc4>
   89f2c:	483fe726 	beq	r9,zero,89ecc <__floatunsidf+0x38>
   89f30:	10bfff44 	addi	r2,r2,-3
   89f34:	10002e16 	blt	r2,zero,89ff0 <__floatunsidf+0x15c>
   89f38:	b0a2983a 	sll	r17,r22,r2
   89f3c:	0021883a 	mov	r16,zero
   89f40:	d8800217 	ldw	r2,8(sp)
   89f44:	dc400415 	stw	r17,16(sp)
   89f48:	dc000315 	stw	r16,12(sp)
   89f4c:	1245c83a 	sub	r2,r2,r9
   89f50:	d8800215 	stw	r2,8(sp)
   89f54:	003fdd06 	br	89ecc <__floatunsidf+0x38>
   89f58:	0255c83a 	sub	r10,zero,r9
   89f5c:	51bff804 	addi	r6,r10,-32
   89f60:	30001b16 	blt	r6,zero,89fd0 <__floatunsidf+0x13c>
   89f64:	b9a8d83a 	srl	r20,r23,r6
   89f68:	002b883a 	mov	r21,zero
   89f6c:	000f883a 	mov	r7,zero
   89f70:	01000044 	movi	r4,1
   89f74:	0011883a 	mov	r8,zero
   89f78:	30002516 	blt	r6,zero,8a010 <__floatunsidf+0x17c>
   89f7c:	21a6983a 	sll	r19,r4,r6
   89f80:	0025883a 	mov	r18,zero
   89f84:	00bfffc4 	movi	r2,-1
   89f88:	9089883a 	add	r4,r18,r2
   89f8c:	988b883a 	add	r5,r19,r2
   89f90:	248d803a 	cmpltu	r6,r4,r18
   89f94:	314b883a 	add	r5,r6,r5
   89f98:	b104703a 	and	r2,r22,r4
   89f9c:	b946703a 	and	r3,r23,r5
   89fa0:	10c4b03a 	or	r2,r2,r3
   89fa4:	10000226 	beq	r2,zero,89fb0 <__floatunsidf+0x11c>
   89fa8:	01c00044 	movi	r7,1
   89fac:	0011883a 	mov	r8,zero
   89fb0:	d9000217 	ldw	r4,8(sp)
   89fb4:	a1c4b03a 	or	r2,r20,r7
   89fb8:	aa06b03a 	or	r3,r21,r8
   89fbc:	2249c83a 	sub	r4,r4,r9
   89fc0:	d8c00415 	stw	r3,16(sp)
   89fc4:	d9000215 	stw	r4,8(sp)
   89fc8:	d8800315 	stw	r2,12(sp)
   89fcc:	003fbf06 	br	89ecc <__floatunsidf+0x38>
   89fd0:	bdc7883a 	add	r3,r23,r23
   89fd4:	008007c4 	movi	r2,31
   89fd8:	1285c83a 	sub	r2,r2,r10
   89fdc:	1886983a 	sll	r3,r3,r2
   89fe0:	b2a8d83a 	srl	r20,r22,r10
   89fe4:	baaad83a 	srl	r21,r23,r10
   89fe8:	1d28b03a 	or	r20,r3,r20
   89fec:	003fdf06 	br	89f6c <__floatunsidf+0xd8>
   89ff0:	b006d07a 	srli	r3,r22,1
   89ff4:	008007c4 	movi	r2,31
   89ff8:	1245c83a 	sub	r2,r2,r9
   89ffc:	1886d83a 	srl	r3,r3,r2
   8a000:	ba62983a 	sll	r17,r23,r9
   8a004:	b260983a 	sll	r16,r22,r9
   8a008:	1c62b03a 	or	r17,r3,r17
   8a00c:	003fcc06 	br	89f40 <__floatunsidf+0xac>
   8a010:	2006d07a 	srli	r3,r4,1
   8a014:	008007c4 	movi	r2,31
   8a018:	1285c83a 	sub	r2,r2,r10
   8a01c:	18a6d83a 	srl	r19,r3,r2
   8a020:	22a4983a 	sll	r18,r4,r10
   8a024:	003fd706 	br	89f84 <__floatunsidf+0xf0>

0008a028 <udivmodsi4>:
   8a028:	29001b2e 	bgeu	r5,r4,8a098 <udivmodsi4+0x70>
   8a02c:	28001a16 	blt	r5,zero,8a098 <udivmodsi4+0x70>
   8a030:	00800044 	movi	r2,1
   8a034:	0007883a 	mov	r3,zero
   8a038:	01c007c4 	movi	r7,31
   8a03c:	00000306 	br	8a04c <udivmodsi4+0x24>
   8a040:	19c01326 	beq	r3,r7,8a090 <udivmodsi4+0x68>
   8a044:	18c00044 	addi	r3,r3,1
   8a048:	28000416 	blt	r5,zero,8a05c <udivmodsi4+0x34>
   8a04c:	294b883a 	add	r5,r5,r5
   8a050:	1085883a 	add	r2,r2,r2
   8a054:	293ffa36 	bltu	r5,r4,8a040 <udivmodsi4+0x18>
   8a058:	10000d26 	beq	r2,zero,8a090 <udivmodsi4+0x68>
   8a05c:	0007883a 	mov	r3,zero
   8a060:	21400236 	bltu	r4,r5,8a06c <udivmodsi4+0x44>
   8a064:	2149c83a 	sub	r4,r4,r5
   8a068:	1886b03a 	or	r3,r3,r2
   8a06c:	1004d07a 	srli	r2,r2,1
   8a070:	280ad07a 	srli	r5,r5,1
   8a074:	103ffa1e 	bne	r2,zero,8a060 <udivmodsi4+0x38>
   8a078:	30000226 	beq	r6,zero,8a084 <udivmodsi4+0x5c>
   8a07c:	2005883a 	mov	r2,r4
   8a080:	f800283a 	ret
   8a084:	1809883a 	mov	r4,r3
   8a088:	2005883a 	mov	r2,r4
   8a08c:	f800283a 	ret
   8a090:	0007883a 	mov	r3,zero
   8a094:	003ff806 	br	8a078 <udivmodsi4+0x50>
   8a098:	00800044 	movi	r2,1
   8a09c:	0007883a 	mov	r3,zero
   8a0a0:	003fef06 	br	8a060 <udivmodsi4+0x38>

0008a0a4 <__divsi3>:
   8a0a4:	defffe04 	addi	sp,sp,-8
   8a0a8:	dc000015 	stw	r16,0(sp)
   8a0ac:	dfc00115 	stw	ra,4(sp)
   8a0b0:	0021883a 	mov	r16,zero
   8a0b4:	20000c16 	blt	r4,zero,8a0e8 <__divsi3+0x44>
   8a0b8:	000d883a 	mov	r6,zero
   8a0bc:	28000e16 	blt	r5,zero,8a0f8 <__divsi3+0x54>
   8a0c0:	008a0280 	call	8a028 <udivmodsi4>
   8a0c4:	1007883a 	mov	r3,r2
   8a0c8:	8005003a 	cmpeq	r2,r16,zero
   8a0cc:	1000011e 	bne	r2,zero,8a0d4 <__divsi3+0x30>
   8a0d0:	00c7c83a 	sub	r3,zero,r3
   8a0d4:	1805883a 	mov	r2,r3
   8a0d8:	dfc00117 	ldw	ra,4(sp)
   8a0dc:	dc000017 	ldw	r16,0(sp)
   8a0e0:	dec00204 	addi	sp,sp,8
   8a0e4:	f800283a 	ret
   8a0e8:	0109c83a 	sub	r4,zero,r4
   8a0ec:	04000044 	movi	r16,1
   8a0f0:	000d883a 	mov	r6,zero
   8a0f4:	283ff20e 	bge	r5,zero,8a0c0 <__divsi3+0x1c>
   8a0f8:	014bc83a 	sub	r5,zero,r5
   8a0fc:	8021003a 	cmpeq	r16,r16,zero
   8a100:	003fef06 	br	8a0c0 <__divsi3+0x1c>

0008a104 <__modsi3>:
   8a104:	deffff04 	addi	sp,sp,-4
   8a108:	dfc00015 	stw	ra,0(sp)
   8a10c:	01800044 	movi	r6,1
   8a110:	2807883a 	mov	r3,r5
   8a114:	20000416 	blt	r4,zero,8a128 <__modsi3+0x24>
   8a118:	28000c16 	blt	r5,zero,8a14c <__modsi3+0x48>
   8a11c:	dfc00017 	ldw	ra,0(sp)
   8a120:	dec00104 	addi	sp,sp,4
   8a124:	008a0281 	jmpi	8a028 <udivmodsi4>
   8a128:	0109c83a 	sub	r4,zero,r4
   8a12c:	28000b16 	blt	r5,zero,8a15c <__modsi3+0x58>
   8a130:	180b883a 	mov	r5,r3
   8a134:	01800044 	movi	r6,1
   8a138:	008a0280 	call	8a028 <udivmodsi4>
   8a13c:	0085c83a 	sub	r2,zero,r2
   8a140:	dfc00017 	ldw	ra,0(sp)
   8a144:	dec00104 	addi	sp,sp,4
   8a148:	f800283a 	ret
   8a14c:	014bc83a 	sub	r5,zero,r5
   8a150:	dfc00017 	ldw	ra,0(sp)
   8a154:	dec00104 	addi	sp,sp,4
   8a158:	008a0281 	jmpi	8a028 <udivmodsi4>
   8a15c:	0147c83a 	sub	r3,zero,r5
   8a160:	003ff306 	br	8a130 <__modsi3+0x2c>

0008a164 <__udivsi3>:
   8a164:	000d883a 	mov	r6,zero
   8a168:	008a0281 	jmpi	8a028 <udivmodsi4>

0008a16c <__umodsi3>:
   8a16c:	01800044 	movi	r6,1
   8a170:	008a0281 	jmpi	8a028 <udivmodsi4>

0008a174 <__mulsi3>:
   8a174:	20000a26 	beq	r4,zero,8a1a0 <__mulsi3+0x2c>
   8a178:	0007883a 	mov	r3,zero
   8a17c:	2080004c 	andi	r2,r4,1
   8a180:	1005003a 	cmpeq	r2,r2,zero
   8a184:	2008d07a 	srli	r4,r4,1
   8a188:	1000011e 	bne	r2,zero,8a190 <__mulsi3+0x1c>
   8a18c:	1947883a 	add	r3,r3,r5
   8a190:	294b883a 	add	r5,r5,r5
   8a194:	203ff91e 	bne	r4,zero,8a17c <__mulsi3+0x8>
   8a198:	1805883a 	mov	r2,r3
   8a19c:	f800283a 	ret
   8a1a0:	0007883a 	mov	r3,zero
   8a1a4:	1805883a 	mov	r2,r3
   8a1a8:	f800283a 	ret

0008a1ac <__muldi3>:
   8a1ac:	defff204 	addi	sp,sp,-56
   8a1b0:	df000c15 	stw	fp,48(sp)
   8a1b4:	3038d43a 	srli	fp,r6,16
   8a1b8:	dd000815 	stw	r20,32(sp)
   8a1bc:	dc400515 	stw	r17,20(sp)
   8a1c0:	2028d43a 	srli	r20,r4,16
   8a1c4:	247fffcc 	andi	r17,r4,65535
   8a1c8:	dc000415 	stw	r16,16(sp)
   8a1cc:	343fffcc 	andi	r16,r6,65535
   8a1d0:	dcc00715 	stw	r19,28(sp)
   8a1d4:	d9000015 	stw	r4,0(sp)
   8a1d8:	2827883a 	mov	r19,r5
   8a1dc:	8809883a 	mov	r4,r17
   8a1e0:	d9400115 	stw	r5,4(sp)
   8a1e4:	800b883a 	mov	r5,r16
   8a1e8:	d9800215 	stw	r6,8(sp)
   8a1ec:	dfc00d15 	stw	ra,52(sp)
   8a1f0:	d9c00315 	stw	r7,12(sp)
   8a1f4:	dd800a15 	stw	r22,40(sp)
   8a1f8:	dd400915 	stw	r21,36(sp)
   8a1fc:	302d883a 	mov	r22,r6
   8a200:	ddc00b15 	stw	r23,44(sp)
   8a204:	dc800615 	stw	r18,24(sp)
   8a208:	008a1740 	call	8a174 <__mulsi3>
   8a20c:	8809883a 	mov	r4,r17
   8a210:	e00b883a 	mov	r5,fp
   8a214:	102b883a 	mov	r21,r2
   8a218:	008a1740 	call	8a174 <__mulsi3>
   8a21c:	800b883a 	mov	r5,r16
   8a220:	a009883a 	mov	r4,r20
   8a224:	1023883a 	mov	r17,r2
   8a228:	008a1740 	call	8a174 <__mulsi3>
   8a22c:	a009883a 	mov	r4,r20
   8a230:	e00b883a 	mov	r5,fp
   8a234:	1021883a 	mov	r16,r2
   8a238:	008a1740 	call	8a174 <__mulsi3>
   8a23c:	a8ffffcc 	andi	r3,r21,65535
   8a240:	a82ad43a 	srli	r21,r21,16
   8a244:	8c23883a 	add	r17,r17,r16
   8a248:	1011883a 	mov	r8,r2
   8a24c:	ac6b883a 	add	r21,r21,r17
   8a250:	a804943a 	slli	r2,r21,16
   8a254:	b009883a 	mov	r4,r22
   8a258:	980b883a 	mov	r5,r19
   8a25c:	10c7883a 	add	r3,r2,r3
   8a260:	a812d43a 	srli	r9,r21,16
   8a264:	180d883a 	mov	r6,r3
   8a268:	ac00022e 	bgeu	r21,r16,8a274 <__muldi3+0xc8>
   8a26c:	00800074 	movhi	r2,1
   8a270:	4091883a 	add	r8,r8,r2
   8a274:	4267883a 	add	r19,r8,r9
   8a278:	302d883a 	mov	r22,r6
   8a27c:	008a1740 	call	8a174 <__mulsi3>
   8a280:	d9400317 	ldw	r5,12(sp)
   8a284:	d9000017 	ldw	r4,0(sp)
   8a288:	1023883a 	mov	r17,r2
   8a28c:	008a1740 	call	8a174 <__mulsi3>
   8a290:	14cb883a 	add	r5,r2,r19
   8a294:	894b883a 	add	r5,r17,r5
   8a298:	b005883a 	mov	r2,r22
   8a29c:	2807883a 	mov	r3,r5
   8a2a0:	dfc00d17 	ldw	ra,52(sp)
   8a2a4:	df000c17 	ldw	fp,48(sp)
   8a2a8:	ddc00b17 	ldw	r23,44(sp)
   8a2ac:	dd800a17 	ldw	r22,40(sp)
   8a2b0:	dd400917 	ldw	r21,36(sp)
   8a2b4:	dd000817 	ldw	r20,32(sp)
   8a2b8:	dcc00717 	ldw	r19,28(sp)
   8a2bc:	dc800617 	ldw	r18,24(sp)
   8a2c0:	dc400517 	ldw	r17,20(sp)
   8a2c4:	dc000417 	ldw	r16,16(sp)
   8a2c8:	dec00e04 	addi	sp,sp,56
   8a2cc:	f800283a 	ret

0008a2d0 <__clzsi2>:
   8a2d0:	00bfffd4 	movui	r2,65535
   8a2d4:	11000e36 	bltu	r2,r4,8a310 <__clzsi2+0x40>
   8a2d8:	00803fc4 	movi	r2,255
   8a2dc:	01400204 	movi	r5,8
   8a2e0:	0007883a 	mov	r3,zero
   8a2e4:	11001036 	bltu	r2,r4,8a328 <__clzsi2+0x58>
   8a2e8:	000b883a 	mov	r5,zero
   8a2ec:	20c6d83a 	srl	r3,r4,r3
   8a2f0:	00800274 	movhi	r2,9
   8a2f4:	10b5a404 	addi	r2,r2,-10608
   8a2f8:	1887883a 	add	r3,r3,r2
   8a2fc:	18800003 	ldbu	r2,0(r3)
   8a300:	00c00804 	movi	r3,32
   8a304:	2885883a 	add	r2,r5,r2
   8a308:	1885c83a 	sub	r2,r3,r2
   8a30c:	f800283a 	ret
   8a310:	01400404 	movi	r5,16
   8a314:	00804034 	movhi	r2,256
   8a318:	10bfffc4 	addi	r2,r2,-1
   8a31c:	2807883a 	mov	r3,r5
   8a320:	113ff22e 	bgeu	r2,r4,8a2ec <__clzsi2+0x1c>
   8a324:	01400604 	movi	r5,24
   8a328:	2807883a 	mov	r3,r5
   8a32c:	20c6d83a 	srl	r3,r4,r3
   8a330:	00800274 	movhi	r2,9
   8a334:	10b5a404 	addi	r2,r2,-10608
   8a338:	1887883a 	add	r3,r3,r2
   8a33c:	18800003 	ldbu	r2,0(r3)
   8a340:	00c00804 	movi	r3,32
   8a344:	2885883a 	add	r2,r5,r2
   8a348:	1885c83a 	sub	r2,r3,r2
   8a34c:	f800283a 	ret

0008a350 <__pack_d>:
   8a350:	20c00017 	ldw	r3,0(r4)
   8a354:	defffd04 	addi	sp,sp,-12
   8a358:	dc000015 	stw	r16,0(sp)
   8a35c:	dc800215 	stw	r18,8(sp)
   8a360:	dc400115 	stw	r17,4(sp)
   8a364:	00800044 	movi	r2,1
   8a368:	22000317 	ldw	r8,12(r4)
   8a36c:	001f883a 	mov	r15,zero
   8a370:	22400417 	ldw	r9,16(r4)
   8a374:	24000117 	ldw	r16,4(r4)
   8a378:	10c0552e 	bgeu	r2,r3,8a4d0 <__pack_d+0x180>
   8a37c:	00800104 	movi	r2,4
   8a380:	18804f26 	beq	r3,r2,8a4c0 <__pack_d+0x170>
   8a384:	00800084 	movi	r2,2
   8a388:	18800226 	beq	r3,r2,8a394 <__pack_d+0x44>
   8a38c:	4244b03a 	or	r2,r8,r9
   8a390:	10001a1e 	bne	r2,zero,8a3fc <__pack_d+0xac>
   8a394:	000d883a 	mov	r6,zero
   8a398:	000f883a 	mov	r7,zero
   8a39c:	0011883a 	mov	r8,zero
   8a3a0:	00800434 	movhi	r2,16
   8a3a4:	10bfffc4 	addi	r2,r2,-1
   8a3a8:	301d883a 	mov	r14,r6
   8a3ac:	3884703a 	and	r2,r7,r2
   8a3b0:	400a953a 	slli	r5,r8,20
   8a3b4:	79bffc2c 	andhi	r6,r15,65520
   8a3b8:	308cb03a 	or	r6,r6,r2
   8a3bc:	00e00434 	movhi	r3,32784
   8a3c0:	18ffffc4 	addi	r3,r3,-1
   8a3c4:	800497fa 	slli	r2,r16,31
   8a3c8:	30c6703a 	and	r3,r6,r3
   8a3cc:	1946b03a 	or	r3,r3,r5
   8a3d0:	01600034 	movhi	r5,32768
   8a3d4:	297fffc4 	addi	r5,r5,-1
   8a3d8:	194a703a 	and	r5,r3,r5
   8a3dc:	288ab03a 	or	r5,r5,r2
   8a3e0:	2807883a 	mov	r3,r5
   8a3e4:	7005883a 	mov	r2,r14
   8a3e8:	dc800217 	ldw	r18,8(sp)
   8a3ec:	dc400117 	ldw	r17,4(sp)
   8a3f0:	dc000017 	ldw	r16,0(sp)
   8a3f4:	dec00304 	addi	sp,sp,12
   8a3f8:	f800283a 	ret
   8a3fc:	21000217 	ldw	r4,8(r4)
   8a400:	00bf0084 	movi	r2,-1022
   8a404:	20803f16 	blt	r4,r2,8a504 <__pack_d+0x1b4>
   8a408:	0080ffc4 	movi	r2,1023
   8a40c:	11002c16 	blt	r2,r4,8a4c0 <__pack_d+0x170>
   8a410:	00803fc4 	movi	r2,255
   8a414:	408c703a 	and	r6,r8,r2
   8a418:	00802004 	movi	r2,128
   8a41c:	0007883a 	mov	r3,zero
   8a420:	000f883a 	mov	r7,zero
   8a424:	2280ffc4 	addi	r10,r4,1023
   8a428:	30801e26 	beq	r6,r2,8a4a4 <__pack_d+0x154>
   8a42c:	00801fc4 	movi	r2,127
   8a430:	4089883a 	add	r4,r8,r2
   8a434:	220d803a 	cmpltu	r6,r4,r8
   8a438:	324d883a 	add	r6,r6,r9
   8a43c:	2011883a 	mov	r8,r4
   8a440:	3013883a 	mov	r9,r6
   8a444:	00880034 	movhi	r2,8192
   8a448:	10bfffc4 	addi	r2,r2,-1
   8a44c:	12400d36 	bltu	r2,r9,8a484 <__pack_d+0x134>
   8a450:	4804963a 	slli	r2,r9,24
   8a454:	400cd23a 	srli	r6,r8,8
   8a458:	480ed23a 	srli	r7,r9,8
   8a45c:	013fffc4 	movi	r4,-1
   8a460:	118cb03a 	or	r6,r2,r6
   8a464:	01400434 	movhi	r5,16
   8a468:	297fffc4 	addi	r5,r5,-1
   8a46c:	3104703a 	and	r2,r6,r4
   8a470:	3946703a 	and	r3,r7,r5
   8a474:	5201ffcc 	andi	r8,r10,2047
   8a478:	100d883a 	mov	r6,r2
   8a47c:	180f883a 	mov	r7,r3
   8a480:	003fc706 	br	8a3a0 <__pack_d+0x50>
   8a484:	480897fa 	slli	r4,r9,31
   8a488:	4004d07a 	srli	r2,r8,1
   8a48c:	4806d07a 	srli	r3,r9,1
   8a490:	52800044 	addi	r10,r10,1
   8a494:	2084b03a 	or	r2,r4,r2
   8a498:	1011883a 	mov	r8,r2
   8a49c:	1813883a 	mov	r9,r3
   8a4a0:	003feb06 	br	8a450 <__pack_d+0x100>
   8a4a4:	383fe11e 	bne	r7,zero,8a42c <__pack_d+0xdc>
   8a4a8:	01004004 	movi	r4,256
   8a4ac:	4104703a 	and	r2,r8,r4
   8a4b0:	10c4b03a 	or	r2,r2,r3
   8a4b4:	103fe326 	beq	r2,zero,8a444 <__pack_d+0xf4>
   8a4b8:	3005883a 	mov	r2,r6
   8a4bc:	003fdc06 	br	8a430 <__pack_d+0xe0>
   8a4c0:	000d883a 	mov	r6,zero
   8a4c4:	000f883a 	mov	r7,zero
   8a4c8:	0201ffc4 	movi	r8,2047
   8a4cc:	003fb406 	br	8a3a0 <__pack_d+0x50>
   8a4d0:	0005883a 	mov	r2,zero
   8a4d4:	00c00234 	movhi	r3,8
   8a4d8:	408cb03a 	or	r6,r8,r2
   8a4dc:	48ceb03a 	or	r7,r9,r3
   8a4e0:	013fffc4 	movi	r4,-1
   8a4e4:	01400434 	movhi	r5,16
   8a4e8:	297fffc4 	addi	r5,r5,-1
   8a4ec:	3104703a 	and	r2,r6,r4
   8a4f0:	3946703a 	and	r3,r7,r5
   8a4f4:	100d883a 	mov	r6,r2
   8a4f8:	180f883a 	mov	r7,r3
   8a4fc:	0201ffc4 	movi	r8,2047
   8a500:	003fa706 	br	8a3a0 <__pack_d+0x50>
   8a504:	1109c83a 	sub	r4,r2,r4
   8a508:	00800e04 	movi	r2,56
   8a50c:	11004316 	blt	r2,r4,8a61c <__pack_d+0x2cc>
   8a510:	21fff804 	addi	r7,r4,-32
   8a514:	38004516 	blt	r7,zero,8a62c <__pack_d+0x2dc>
   8a518:	49d8d83a 	srl	r12,r9,r7
   8a51c:	001b883a 	mov	r13,zero
   8a520:	0023883a 	mov	r17,zero
   8a524:	01400044 	movi	r5,1
   8a528:	0025883a 	mov	r18,zero
   8a52c:	38004716 	blt	r7,zero,8a64c <__pack_d+0x2fc>
   8a530:	29d6983a 	sll	r11,r5,r7
   8a534:	0015883a 	mov	r10,zero
   8a538:	00bfffc4 	movi	r2,-1
   8a53c:	5089883a 	add	r4,r10,r2
   8a540:	588b883a 	add	r5,r11,r2
   8a544:	228d803a 	cmpltu	r6,r4,r10
   8a548:	314b883a 	add	r5,r6,r5
   8a54c:	4104703a 	and	r2,r8,r4
   8a550:	4946703a 	and	r3,r9,r5
   8a554:	10c4b03a 	or	r2,r2,r3
   8a558:	10000226 	beq	r2,zero,8a564 <__pack_d+0x214>
   8a55c:	04400044 	movi	r17,1
   8a560:	0025883a 	mov	r18,zero
   8a564:	00803fc4 	movi	r2,255
   8a568:	644eb03a 	or	r7,r12,r17
   8a56c:	3892703a 	and	r9,r7,r2
   8a570:	00802004 	movi	r2,128
   8a574:	6c90b03a 	or	r8,r13,r18
   8a578:	0015883a 	mov	r10,zero
   8a57c:	48801626 	beq	r9,r2,8a5d8 <__pack_d+0x288>
   8a580:	01001fc4 	movi	r4,127
   8a584:	3905883a 	add	r2,r7,r4
   8a588:	11cd803a 	cmpltu	r6,r2,r7
   8a58c:	320d883a 	add	r6,r6,r8
   8a590:	100f883a 	mov	r7,r2
   8a594:	00840034 	movhi	r2,4096
   8a598:	10bfffc4 	addi	r2,r2,-1
   8a59c:	3011883a 	mov	r8,r6
   8a5a0:	0007883a 	mov	r3,zero
   8a5a4:	11801b36 	bltu	r2,r6,8a614 <__pack_d+0x2c4>
   8a5a8:	4004963a 	slli	r2,r8,24
   8a5ac:	3808d23a 	srli	r4,r7,8
   8a5b0:	400ad23a 	srli	r5,r8,8
   8a5b4:	1813883a 	mov	r9,r3
   8a5b8:	1108b03a 	or	r4,r2,r4
   8a5bc:	00bfffc4 	movi	r2,-1
   8a5c0:	00c00434 	movhi	r3,16
   8a5c4:	18ffffc4 	addi	r3,r3,-1
   8a5c8:	208c703a 	and	r6,r4,r2
   8a5cc:	28ce703a 	and	r7,r5,r3
   8a5d0:	4a01ffcc 	andi	r8,r9,2047
   8a5d4:	003f7206 	br	8a3a0 <__pack_d+0x50>
   8a5d8:	503fe91e 	bne	r10,zero,8a580 <__pack_d+0x230>
   8a5dc:	01004004 	movi	r4,256
   8a5e0:	3904703a 	and	r2,r7,r4
   8a5e4:	0007883a 	mov	r3,zero
   8a5e8:	10c4b03a 	or	r2,r2,r3
   8a5ec:	10000626 	beq	r2,zero,8a608 <__pack_d+0x2b8>
   8a5f0:	3a45883a 	add	r2,r7,r9
   8a5f4:	11cd803a 	cmpltu	r6,r2,r7
   8a5f8:	320d883a 	add	r6,r6,r8
   8a5fc:	100f883a 	mov	r7,r2
   8a600:	3011883a 	mov	r8,r6
   8a604:	0007883a 	mov	r3,zero
   8a608:	00840034 	movhi	r2,4096
   8a60c:	10bfffc4 	addi	r2,r2,-1
   8a610:	123fe52e 	bgeu	r2,r8,8a5a8 <__pack_d+0x258>
   8a614:	00c00044 	movi	r3,1
   8a618:	003fe306 	br	8a5a8 <__pack_d+0x258>
   8a61c:	0009883a 	mov	r4,zero
   8a620:	0013883a 	mov	r9,zero
   8a624:	000b883a 	mov	r5,zero
   8a628:	003fe406 	br	8a5bc <__pack_d+0x26c>
   8a62c:	4a47883a 	add	r3,r9,r9
   8a630:	008007c4 	movi	r2,31
   8a634:	1105c83a 	sub	r2,r2,r4
   8a638:	1886983a 	sll	r3,r3,r2
   8a63c:	4118d83a 	srl	r12,r8,r4
   8a640:	491ad83a 	srl	r13,r9,r4
   8a644:	1b18b03a 	or	r12,r3,r12
   8a648:	003fb506 	br	8a520 <__pack_d+0x1d0>
   8a64c:	2806d07a 	srli	r3,r5,1
   8a650:	008007c4 	movi	r2,31
   8a654:	1105c83a 	sub	r2,r2,r4
   8a658:	1896d83a 	srl	r11,r3,r2
   8a65c:	2914983a 	sll	r10,r5,r4
   8a660:	003fb506 	br	8a538 <__pack_d+0x1e8>

0008a664 <__unpack_d>:
   8a664:	20c00117 	ldw	r3,4(r4)
   8a668:	22400017 	ldw	r9,0(r4)
   8a66c:	00800434 	movhi	r2,16
   8a670:	10bfffc4 	addi	r2,r2,-1
   8a674:	1808d53a 	srli	r4,r3,20
   8a678:	180cd7fa 	srli	r6,r3,31
   8a67c:	1894703a 	and	r10,r3,r2
   8a680:	2201ffcc 	andi	r8,r4,2047
   8a684:	281b883a 	mov	r13,r5
   8a688:	4817883a 	mov	r11,r9
   8a68c:	29800115 	stw	r6,4(r5)
   8a690:	5019883a 	mov	r12,r10
   8a694:	40001e1e 	bne	r8,zero,8a710 <__unpack_d+0xac>
   8a698:	4a84b03a 	or	r2,r9,r10
   8a69c:	10001926 	beq	r2,zero,8a704 <__unpack_d+0xa0>
   8a6a0:	4804d63a 	srli	r2,r9,24
   8a6a4:	500c923a 	slli	r6,r10,8
   8a6a8:	013f0084 	movi	r4,-1022
   8a6ac:	00c40034 	movhi	r3,4096
   8a6b0:	18ffffc4 	addi	r3,r3,-1
   8a6b4:	118cb03a 	or	r6,r2,r6
   8a6b8:	008000c4 	movi	r2,3
   8a6bc:	480a923a 	slli	r5,r9,8
   8a6c0:	68800015 	stw	r2,0(r13)
   8a6c4:	69000215 	stw	r4,8(r13)
   8a6c8:	19800b36 	bltu	r3,r6,8a6f8 <__unpack_d+0x94>
   8a6cc:	200f883a 	mov	r7,r4
   8a6d0:	1811883a 	mov	r8,r3
   8a6d4:	2945883a 	add	r2,r5,r5
   8a6d8:	1149803a 	cmpltu	r4,r2,r5
   8a6dc:	3187883a 	add	r3,r6,r6
   8a6e0:	20c9883a 	add	r4,r4,r3
   8a6e4:	100b883a 	mov	r5,r2
   8a6e8:	200d883a 	mov	r6,r4
   8a6ec:	39ffffc4 	addi	r7,r7,-1
   8a6f0:	413ff82e 	bgeu	r8,r4,8a6d4 <__unpack_d+0x70>
   8a6f4:	69c00215 	stw	r7,8(r13)
   8a6f8:	69800415 	stw	r6,16(r13)
   8a6fc:	69400315 	stw	r5,12(r13)
   8a700:	f800283a 	ret
   8a704:	00800084 	movi	r2,2
   8a708:	28800015 	stw	r2,0(r5)
   8a70c:	f800283a 	ret
   8a710:	0081ffc4 	movi	r2,2047
   8a714:	40800f26 	beq	r8,r2,8a754 <__unpack_d+0xf0>
   8a718:	480cd63a 	srli	r6,r9,24
   8a71c:	5006923a 	slli	r3,r10,8
   8a720:	4804923a 	slli	r2,r9,8
   8a724:	0009883a 	mov	r4,zero
   8a728:	30c6b03a 	or	r3,r6,r3
   8a72c:	01440034 	movhi	r5,4096
   8a730:	110cb03a 	or	r6,r2,r4
   8a734:	423f0044 	addi	r8,r8,-1023
   8a738:	194eb03a 	or	r7,r3,r5
   8a73c:	008000c4 	movi	r2,3
   8a740:	69c00415 	stw	r7,16(r13)
   8a744:	6a000215 	stw	r8,8(r13)
   8a748:	68800015 	stw	r2,0(r13)
   8a74c:	69800315 	stw	r6,12(r13)
   8a750:	f800283a 	ret
   8a754:	4a84b03a 	or	r2,r9,r10
   8a758:	1000031e 	bne	r2,zero,8a768 <__unpack_d+0x104>
   8a75c:	00800104 	movi	r2,4
   8a760:	28800015 	stw	r2,0(r5)
   8a764:	f800283a 	ret
   8a768:	0009883a 	mov	r4,zero
   8a76c:	01400234 	movhi	r5,8
   8a770:	4904703a 	and	r2,r9,r4
   8a774:	5146703a 	and	r3,r10,r5
   8a778:	10c4b03a 	or	r2,r2,r3
   8a77c:	10000526 	beq	r2,zero,8a794 <__unpack_d+0x130>
   8a780:	00800044 	movi	r2,1
   8a784:	68800015 	stw	r2,0(r13)
   8a788:	6b000415 	stw	r12,16(r13)
   8a78c:	6ac00315 	stw	r11,12(r13)
   8a790:	f800283a 	ret
   8a794:	68000015 	stw	zero,0(r13)
   8a798:	003ffb06 	br	8a788 <__unpack_d+0x124>

0008a79c <__fpcmp_parts_d>:
   8a79c:	21800017 	ldw	r6,0(r4)
   8a7a0:	00c00044 	movi	r3,1
   8a7a4:	19800a2e 	bgeu	r3,r6,8a7d0 <__fpcmp_parts_d+0x34>
   8a7a8:	28800017 	ldw	r2,0(r5)
   8a7ac:	1880082e 	bgeu	r3,r2,8a7d0 <__fpcmp_parts_d+0x34>
   8a7b0:	00c00104 	movi	r3,4
   8a7b4:	30c02626 	beq	r6,r3,8a850 <__fpcmp_parts_d+0xb4>
   8a7b8:	10c02226 	beq	r2,r3,8a844 <__fpcmp_parts_d+0xa8>
   8a7bc:	00c00084 	movi	r3,2
   8a7c0:	30c00526 	beq	r6,r3,8a7d8 <__fpcmp_parts_d+0x3c>
   8a7c4:	10c0071e 	bne	r2,r3,8a7e4 <__fpcmp_parts_d+0x48>
   8a7c8:	20800117 	ldw	r2,4(r4)
   8a7cc:	1000091e 	bne	r2,zero,8a7f4 <__fpcmp_parts_d+0x58>
   8a7d0:	00800044 	movi	r2,1
   8a7d4:	f800283a 	ret
   8a7d8:	10c01a1e 	bne	r2,r3,8a844 <__fpcmp_parts_d+0xa8>
   8a7dc:	0005883a 	mov	r2,zero
   8a7e0:	f800283a 	ret
   8a7e4:	22000117 	ldw	r8,4(r4)
   8a7e8:	28800117 	ldw	r2,4(r5)
   8a7ec:	40800326 	beq	r8,r2,8a7fc <__fpcmp_parts_d+0x60>
   8a7f0:	403ff726 	beq	r8,zero,8a7d0 <__fpcmp_parts_d+0x34>
   8a7f4:	00bfffc4 	movi	r2,-1
   8a7f8:	f800283a 	ret
   8a7fc:	20c00217 	ldw	r3,8(r4)
   8a800:	28800217 	ldw	r2,8(r5)
   8a804:	10fffa16 	blt	r2,r3,8a7f0 <__fpcmp_parts_d+0x54>
   8a808:	18800916 	blt	r3,r2,8a830 <__fpcmp_parts_d+0x94>
   8a80c:	21c00417 	ldw	r7,16(r4)
   8a810:	28c00417 	ldw	r3,16(r5)
   8a814:	21800317 	ldw	r6,12(r4)
   8a818:	28800317 	ldw	r2,12(r5)
   8a81c:	19fff436 	bltu	r3,r7,8a7f0 <__fpcmp_parts_d+0x54>
   8a820:	38c00526 	beq	r7,r3,8a838 <__fpcmp_parts_d+0x9c>
   8a824:	38c00236 	bltu	r7,r3,8a830 <__fpcmp_parts_d+0x94>
   8a828:	19ffec1e 	bne	r3,r7,8a7dc <__fpcmp_parts_d+0x40>
   8a82c:	30bfeb2e 	bgeu	r6,r2,8a7dc <__fpcmp_parts_d+0x40>
   8a830:	403fe71e 	bne	r8,zero,8a7d0 <__fpcmp_parts_d+0x34>
   8a834:	003fef06 	br	8a7f4 <__fpcmp_parts_d+0x58>
   8a838:	11bffa2e 	bgeu	r2,r6,8a824 <__fpcmp_parts_d+0x88>
   8a83c:	403fe426 	beq	r8,zero,8a7d0 <__fpcmp_parts_d+0x34>
   8a840:	003fec06 	br	8a7f4 <__fpcmp_parts_d+0x58>
   8a844:	28800117 	ldw	r2,4(r5)
   8a848:	103fe11e 	bne	r2,zero,8a7d0 <__fpcmp_parts_d+0x34>
   8a84c:	003fe906 	br	8a7f4 <__fpcmp_parts_d+0x58>
   8a850:	11bfdd1e 	bne	r2,r6,8a7c8 <__fpcmp_parts_d+0x2c>
   8a854:	28c00117 	ldw	r3,4(r5)
   8a858:	20800117 	ldw	r2,4(r4)
   8a85c:	1885c83a 	sub	r2,r3,r2
   8a860:	f800283a 	ret

0008a864 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8a864:	defff804 	addi	sp,sp,-32
   8a868:	dfc00715 	stw	ra,28(sp)
   8a86c:	df000615 	stw	fp,24(sp)
   8a870:	df000604 	addi	fp,sp,24
   8a874:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8a878:	e0bffc17 	ldw	r2,-16(fp)
   8a87c:	1004803a 	cmplt	r2,r2,zero
   8a880:	1000091e 	bne	r2,zero,8a8a8 <close+0x44>
   8a884:	e13ffc17 	ldw	r4,-16(fp)
   8a888:	01400304 	movi	r5,12
   8a88c:	008a1740 	call	8a174 <__mulsi3>
   8a890:	1007883a 	mov	r3,r2
   8a894:	00800274 	movhi	r2,9
   8a898:	10b8b304 	addi	r2,r2,-7476
   8a89c:	1887883a 	add	r3,r3,r2
   8a8a0:	e0ffff15 	stw	r3,-4(fp)
   8a8a4:	00000106 	br	8a8ac <close+0x48>
   8a8a8:	e03fff15 	stw	zero,-4(fp)
   8a8ac:	e0bfff17 	ldw	r2,-4(fp)
   8a8b0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   8a8b4:	e0bffb17 	ldw	r2,-20(fp)
   8a8b8:	1005003a 	cmpeq	r2,r2,zero
   8a8bc:	10001d1e 	bne	r2,zero,8a934 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8a8c0:	e0bffb17 	ldw	r2,-20(fp)
   8a8c4:	10800017 	ldw	r2,0(r2)
   8a8c8:	10800417 	ldw	r2,16(r2)
   8a8cc:	1005003a 	cmpeq	r2,r2,zero
   8a8d0:	1000071e 	bne	r2,zero,8a8f0 <close+0x8c>
   8a8d4:	e0bffb17 	ldw	r2,-20(fp)
   8a8d8:	10800017 	ldw	r2,0(r2)
   8a8dc:	10800417 	ldw	r2,16(r2)
   8a8e0:	e13ffb17 	ldw	r4,-20(fp)
   8a8e4:	103ee83a 	callr	r2
   8a8e8:	e0bffe15 	stw	r2,-8(fp)
   8a8ec:	00000106 	br	8a8f4 <close+0x90>
   8a8f0:	e03ffe15 	stw	zero,-8(fp)
   8a8f4:	e0bffe17 	ldw	r2,-8(fp)
   8a8f8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8a8fc:	e13ffc17 	ldw	r4,-16(fp)
   8a900:	008b0bc0 	call	8b0bc <alt_release_fd>
    if (rval < 0)
   8a904:	e0bffa17 	ldw	r2,-24(fp)
   8a908:	1004403a 	cmpge	r2,r2,zero
   8a90c:	1000071e 	bne	r2,zero,8a92c <close+0xc8>
    {
      ALT_ERRNO = -rval;
   8a910:	008a9640 	call	8a964 <alt_get_errno>
   8a914:	e0fffa17 	ldw	r3,-24(fp)
   8a918:	00c7c83a 	sub	r3,zero,r3
   8a91c:	10c00015 	stw	r3,0(r2)
      return -1;
   8a920:	00bfffc4 	movi	r2,-1
   8a924:	e0bffd15 	stw	r2,-12(fp)
   8a928:	00000806 	br	8a94c <close+0xe8>
    }
    return 0;
   8a92c:	e03ffd15 	stw	zero,-12(fp)
   8a930:	00000606 	br	8a94c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8a934:	008a9640 	call	8a964 <alt_get_errno>
   8a938:	1007883a 	mov	r3,r2
   8a93c:	00801444 	movi	r2,81
   8a940:	18800015 	stw	r2,0(r3)
    return -1;
   8a944:	00bfffc4 	movi	r2,-1
   8a948:	e0bffd15 	stw	r2,-12(fp)
   8a94c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   8a950:	e037883a 	mov	sp,fp
   8a954:	dfc00117 	ldw	ra,4(sp)
   8a958:	df000017 	ldw	fp,0(sp)
   8a95c:	dec00204 	addi	sp,sp,8
   8a960:	f800283a 	ret

0008a964 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8a964:	defffd04 	addi	sp,sp,-12
   8a968:	dfc00215 	stw	ra,8(sp)
   8a96c:	df000115 	stw	fp,4(sp)
   8a970:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8a974:	00800274 	movhi	r2,9
   8a978:	10bd3704 	addi	r2,r2,-2852
   8a97c:	10800017 	ldw	r2,0(r2)
   8a980:	1005003a 	cmpeq	r2,r2,zero
   8a984:	1000061e 	bne	r2,zero,8a9a0 <alt_get_errno+0x3c>
   8a988:	00800274 	movhi	r2,9
   8a98c:	10bd3704 	addi	r2,r2,-2852
   8a990:	10800017 	ldw	r2,0(r2)
   8a994:	103ee83a 	callr	r2
   8a998:	e0bfff15 	stw	r2,-4(fp)
   8a99c:	00000306 	br	8a9ac <alt_get_errno+0x48>
   8a9a0:	00800274 	movhi	r2,9
   8a9a4:	10849504 	addi	r2,r2,4692
   8a9a8:	e0bfff15 	stw	r2,-4(fp)
   8a9ac:	e0bfff17 	ldw	r2,-4(fp)
}
   8a9b0:	e037883a 	mov	sp,fp
   8a9b4:	dfc00117 	ldw	ra,4(sp)
   8a9b8:	df000017 	ldw	fp,0(sp)
   8a9bc:	dec00204 	addi	sp,sp,8
   8a9c0:	f800283a 	ret

0008a9c4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8a9c4:	defffc04 	addi	sp,sp,-16
   8a9c8:	df000315 	stw	fp,12(sp)
   8a9cc:	df000304 	addi	fp,sp,12
   8a9d0:	e13ffd15 	stw	r4,-12(fp)
   8a9d4:	e17ffe15 	stw	r5,-8(fp)
   8a9d8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8a9dc:	e0bfff17 	ldw	r2,-4(fp)
}
   8a9e0:	e037883a 	mov	sp,fp
   8a9e4:	df000017 	ldw	fp,0(sp)
   8a9e8:	dec00104 	addi	sp,sp,4
   8a9ec:	f800283a 	ret

0008a9f0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8a9f0:	defff904 	addi	sp,sp,-28
   8a9f4:	dfc00615 	stw	ra,24(sp)
   8a9f8:	df000515 	stw	fp,20(sp)
   8a9fc:	df000504 	addi	fp,sp,20
   8aa00:	e13ffc15 	stw	r4,-16(fp)
   8aa04:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8aa08:	e0bffc17 	ldw	r2,-16(fp)
   8aa0c:	1004803a 	cmplt	r2,r2,zero
   8aa10:	1000091e 	bne	r2,zero,8aa38 <fstat+0x48>
   8aa14:	e13ffc17 	ldw	r4,-16(fp)
   8aa18:	01400304 	movi	r5,12
   8aa1c:	008a1740 	call	8a174 <__mulsi3>
   8aa20:	1007883a 	mov	r3,r2
   8aa24:	00800274 	movhi	r2,9
   8aa28:	10b8b304 	addi	r2,r2,-7476
   8aa2c:	1887883a 	add	r3,r3,r2
   8aa30:	e0ffff15 	stw	r3,-4(fp)
   8aa34:	00000106 	br	8aa3c <fstat+0x4c>
   8aa38:	e03fff15 	stw	zero,-4(fp)
   8aa3c:	e0bfff17 	ldw	r2,-4(fp)
   8aa40:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8aa44:	e0bffb17 	ldw	r2,-20(fp)
   8aa48:	1005003a 	cmpeq	r2,r2,zero
   8aa4c:	1000121e 	bne	r2,zero,8aa98 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8aa50:	e0bffb17 	ldw	r2,-20(fp)
   8aa54:	10800017 	ldw	r2,0(r2)
   8aa58:	10800817 	ldw	r2,32(r2)
   8aa5c:	1005003a 	cmpeq	r2,r2,zero
   8aa60:	1000081e 	bne	r2,zero,8aa84 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   8aa64:	e0bffb17 	ldw	r2,-20(fp)
   8aa68:	10800017 	ldw	r2,0(r2)
   8aa6c:	10800817 	ldw	r2,32(r2)
   8aa70:	e13ffb17 	ldw	r4,-20(fp)
   8aa74:	e17ffd17 	ldw	r5,-12(fp)
   8aa78:	103ee83a 	callr	r2
   8aa7c:	e0bffe15 	stw	r2,-8(fp)
   8aa80:	00000b06 	br	8aab0 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8aa84:	e0fffd17 	ldw	r3,-12(fp)
   8aa88:	00880004 	movi	r2,8192
   8aa8c:	18800115 	stw	r2,4(r3)
      return 0;
   8aa90:	e03ffe15 	stw	zero,-8(fp)
   8aa94:	00000606 	br	8aab0 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8aa98:	008aac80 	call	8aac8 <alt_get_errno>
   8aa9c:	1007883a 	mov	r3,r2
   8aaa0:	00801444 	movi	r2,81
   8aaa4:	18800015 	stw	r2,0(r3)
    return -1;
   8aaa8:	00bfffc4 	movi	r2,-1
   8aaac:	e0bffe15 	stw	r2,-8(fp)
   8aab0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8aab4:	e037883a 	mov	sp,fp
   8aab8:	dfc00117 	ldw	ra,4(sp)
   8aabc:	df000017 	ldw	fp,0(sp)
   8aac0:	dec00204 	addi	sp,sp,8
   8aac4:	f800283a 	ret

0008aac8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8aac8:	defffd04 	addi	sp,sp,-12
   8aacc:	dfc00215 	stw	ra,8(sp)
   8aad0:	df000115 	stw	fp,4(sp)
   8aad4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8aad8:	00800274 	movhi	r2,9
   8aadc:	10bd3704 	addi	r2,r2,-2852
   8aae0:	10800017 	ldw	r2,0(r2)
   8aae4:	1005003a 	cmpeq	r2,r2,zero
   8aae8:	1000061e 	bne	r2,zero,8ab04 <alt_get_errno+0x3c>
   8aaec:	00800274 	movhi	r2,9
   8aaf0:	10bd3704 	addi	r2,r2,-2852
   8aaf4:	10800017 	ldw	r2,0(r2)
   8aaf8:	103ee83a 	callr	r2
   8aafc:	e0bfff15 	stw	r2,-4(fp)
   8ab00:	00000306 	br	8ab10 <alt_get_errno+0x48>
   8ab04:	00800274 	movhi	r2,9
   8ab08:	10849504 	addi	r2,r2,4692
   8ab0c:	e0bfff15 	stw	r2,-4(fp)
   8ab10:	e0bfff17 	ldw	r2,-4(fp)
}
   8ab14:	e037883a 	mov	sp,fp
   8ab18:	dfc00117 	ldw	ra,4(sp)
   8ab1c:	df000017 	ldw	fp,0(sp)
   8ab20:	dec00204 	addi	sp,sp,8
   8ab24:	f800283a 	ret

0008ab28 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8ab28:	deffeb04 	addi	sp,sp,-84
   8ab2c:	dfc01415 	stw	ra,80(sp)
   8ab30:	df001315 	stw	fp,76(sp)
   8ab34:	df001304 	addi	fp,sp,76
   8ab38:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8ab3c:	e0bffd17 	ldw	r2,-12(fp)
   8ab40:	1004803a 	cmplt	r2,r2,zero
   8ab44:	1000091e 	bne	r2,zero,8ab6c <isatty+0x44>
   8ab48:	e13ffd17 	ldw	r4,-12(fp)
   8ab4c:	01400304 	movi	r5,12
   8ab50:	008a1740 	call	8a174 <__mulsi3>
   8ab54:	1007883a 	mov	r3,r2
   8ab58:	00800274 	movhi	r2,9
   8ab5c:	10b8b304 	addi	r2,r2,-7476
   8ab60:	1887883a 	add	r3,r3,r2
   8ab64:	e0ffff15 	stw	r3,-4(fp)
   8ab68:	00000106 	br	8ab70 <isatty+0x48>
   8ab6c:	e03fff15 	stw	zero,-4(fp)
   8ab70:	e0bfff17 	ldw	r2,-4(fp)
   8ab74:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   8ab78:	e0bfed17 	ldw	r2,-76(fp)
   8ab7c:	1005003a 	cmpeq	r2,r2,zero
   8ab80:	10000f1e 	bne	r2,zero,8abc0 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8ab84:	e0bfed17 	ldw	r2,-76(fp)
   8ab88:	10800017 	ldw	r2,0(r2)
   8ab8c:	10800817 	ldw	r2,32(r2)
   8ab90:	1004c03a 	cmpne	r2,r2,zero
   8ab94:	1000031e 	bne	r2,zero,8aba4 <isatty+0x7c>
    {
      return 1;
   8ab98:	00800044 	movi	r2,1
   8ab9c:	e0bffe15 	stw	r2,-8(fp)
   8aba0:	00000c06 	br	8abd4 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8aba4:	e17fee04 	addi	r5,fp,-72
   8aba8:	e13ffd17 	ldw	r4,-12(fp)
   8abac:	008a9f00 	call	8a9f0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8abb0:	e0bfef17 	ldw	r2,-68(fp)
   8abb4:	10880020 	cmpeqi	r2,r2,8192
   8abb8:	e0bffe15 	stw	r2,-8(fp)
   8abbc:	00000506 	br	8abd4 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8abc0:	008abec0 	call	8abec <alt_get_errno>
   8abc4:	1007883a 	mov	r3,r2
   8abc8:	00801444 	movi	r2,81
   8abcc:	18800015 	stw	r2,0(r3)
    return 0;
   8abd0:	e03ffe15 	stw	zero,-8(fp)
   8abd4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8abd8:	e037883a 	mov	sp,fp
   8abdc:	dfc00117 	ldw	ra,4(sp)
   8abe0:	df000017 	ldw	fp,0(sp)
   8abe4:	dec00204 	addi	sp,sp,8
   8abe8:	f800283a 	ret

0008abec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8abec:	defffd04 	addi	sp,sp,-12
   8abf0:	dfc00215 	stw	ra,8(sp)
   8abf4:	df000115 	stw	fp,4(sp)
   8abf8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8abfc:	00800274 	movhi	r2,9
   8ac00:	10bd3704 	addi	r2,r2,-2852
   8ac04:	10800017 	ldw	r2,0(r2)
   8ac08:	1005003a 	cmpeq	r2,r2,zero
   8ac0c:	1000061e 	bne	r2,zero,8ac28 <alt_get_errno+0x3c>
   8ac10:	00800274 	movhi	r2,9
   8ac14:	10bd3704 	addi	r2,r2,-2852
   8ac18:	10800017 	ldw	r2,0(r2)
   8ac1c:	103ee83a 	callr	r2
   8ac20:	e0bfff15 	stw	r2,-4(fp)
   8ac24:	00000306 	br	8ac34 <alt_get_errno+0x48>
   8ac28:	00800274 	movhi	r2,9
   8ac2c:	10849504 	addi	r2,r2,4692
   8ac30:	e0bfff15 	stw	r2,-4(fp)
   8ac34:	e0bfff17 	ldw	r2,-4(fp)
}
   8ac38:	e037883a 	mov	sp,fp
   8ac3c:	dfc00117 	ldw	ra,4(sp)
   8ac40:	df000017 	ldw	fp,0(sp)
   8ac44:	dec00204 	addi	sp,sp,8
   8ac48:	f800283a 	ret

0008ac4c <alt_load>:
   8ac4c:	defffe04 	addi	sp,sp,-8
   8ac50:	dfc00115 	stw	ra,4(sp)
   8ac54:	df000015 	stw	fp,0(sp)
   8ac58:	d839883a 	mov	fp,sp
   8ac5c:	01000274 	movhi	r4,9
   8ac60:	213d3c04 	addi	r4,r4,-2832
   8ac64:	01400274 	movhi	r5,9
   8ac68:	2975f104 	addi	r5,r5,-10300
   8ac6c:	01800274 	movhi	r6,9
   8ac70:	31bd3c04 	addi	r6,r6,-2832
   8ac74:	008accc0 	call	8accc <alt_load_section>
   8ac78:	01000234 	movhi	r4,8
   8ac7c:	21000804 	addi	r4,r4,32
   8ac80:	01400234 	movhi	r5,8
   8ac84:	29400804 	addi	r5,r5,32
   8ac88:	01800234 	movhi	r6,8
   8ac8c:	31806d04 	addi	r6,r6,436
   8ac90:	008accc0 	call	8accc <alt_load_section>
   8ac94:	01000274 	movhi	r4,9
   8ac98:	21346304 	addi	r4,r4,-11892
   8ac9c:	01400274 	movhi	r5,9
   8aca0:	29746304 	addi	r5,r5,-11892
   8aca4:	01800274 	movhi	r6,9
   8aca8:	31b5f104 	addi	r6,r6,-10300
   8acac:	008accc0 	call	8accc <alt_load_section>
   8acb0:	008c0240 	call	8c024 <alt_dcache_flush_all>
   8acb4:	008c21c0 	call	8c21c <alt_icache_flush_all>
   8acb8:	e037883a 	mov	sp,fp
   8acbc:	dfc00117 	ldw	ra,4(sp)
   8acc0:	df000017 	ldw	fp,0(sp)
   8acc4:	dec00204 	addi	sp,sp,8
   8acc8:	f800283a 	ret

0008accc <alt_load_section>:
   8accc:	defffc04 	addi	sp,sp,-16
   8acd0:	df000315 	stw	fp,12(sp)
   8acd4:	df000304 	addi	fp,sp,12
   8acd8:	e13ffd15 	stw	r4,-12(fp)
   8acdc:	e17ffe15 	stw	r5,-8(fp)
   8ace0:	e1bfff15 	stw	r6,-4(fp)
   8ace4:	e0fffe17 	ldw	r3,-8(fp)
   8ace8:	e0bffd17 	ldw	r2,-12(fp)
   8acec:	18800e26 	beq	r3,r2,8ad28 <alt_load_section+0x5c>
   8acf0:	00000a06 	br	8ad1c <alt_load_section+0x50>
   8acf4:	e0bffd17 	ldw	r2,-12(fp)
   8acf8:	10c00017 	ldw	r3,0(r2)
   8acfc:	e0bffe17 	ldw	r2,-8(fp)
   8ad00:	10c00015 	stw	r3,0(r2)
   8ad04:	e0bffe17 	ldw	r2,-8(fp)
   8ad08:	10800104 	addi	r2,r2,4
   8ad0c:	e0bffe15 	stw	r2,-8(fp)
   8ad10:	e0bffd17 	ldw	r2,-12(fp)
   8ad14:	10800104 	addi	r2,r2,4
   8ad18:	e0bffd15 	stw	r2,-12(fp)
   8ad1c:	e0fffe17 	ldw	r3,-8(fp)
   8ad20:	e0bfff17 	ldw	r2,-4(fp)
   8ad24:	18bff31e 	bne	r3,r2,8acf4 <alt_load_section+0x28>
   8ad28:	e037883a 	mov	sp,fp
   8ad2c:	df000017 	ldw	fp,0(sp)
   8ad30:	dec00104 	addi	sp,sp,4
   8ad34:	f800283a 	ret

0008ad38 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8ad38:	defff804 	addi	sp,sp,-32
   8ad3c:	dfc00715 	stw	ra,28(sp)
   8ad40:	df000615 	stw	fp,24(sp)
   8ad44:	df000604 	addi	fp,sp,24
   8ad48:	e13ffc15 	stw	r4,-16(fp)
   8ad4c:	e17ffd15 	stw	r5,-12(fp)
   8ad50:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8ad54:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8ad58:	e0bffc17 	ldw	r2,-16(fp)
   8ad5c:	1004803a 	cmplt	r2,r2,zero
   8ad60:	1000091e 	bne	r2,zero,8ad88 <lseek+0x50>
   8ad64:	e13ffc17 	ldw	r4,-16(fp)
   8ad68:	01400304 	movi	r5,12
   8ad6c:	008a1740 	call	8a174 <__mulsi3>
   8ad70:	1007883a 	mov	r3,r2
   8ad74:	00800274 	movhi	r2,9
   8ad78:	10b8b304 	addi	r2,r2,-7476
   8ad7c:	1887883a 	add	r3,r3,r2
   8ad80:	e0ffff15 	stw	r3,-4(fp)
   8ad84:	00000106 	br	8ad8c <lseek+0x54>
   8ad88:	e03fff15 	stw	zero,-4(fp)
   8ad8c:	e0bfff17 	ldw	r2,-4(fp)
   8ad90:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   8ad94:	e0bffb17 	ldw	r2,-20(fp)
   8ad98:	1005003a 	cmpeq	r2,r2,zero
   8ad9c:	1000111e 	bne	r2,zero,8ade4 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8ada0:	e0bffb17 	ldw	r2,-20(fp)
   8ada4:	10800017 	ldw	r2,0(r2)
   8ada8:	10800717 	ldw	r2,28(r2)
   8adac:	1005003a 	cmpeq	r2,r2,zero
   8adb0:	1000091e 	bne	r2,zero,8add8 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8adb4:	e0bffb17 	ldw	r2,-20(fp)
   8adb8:	10800017 	ldw	r2,0(r2)
   8adbc:	10800717 	ldw	r2,28(r2)
   8adc0:	e13ffb17 	ldw	r4,-20(fp)
   8adc4:	e17ffd17 	ldw	r5,-12(fp)
   8adc8:	e1bffe17 	ldw	r6,-8(fp)
   8adcc:	103ee83a 	callr	r2
   8add0:	e0bffa15 	stw	r2,-24(fp)
   8add4:	00000506 	br	8adec <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8add8:	00bfde84 	movi	r2,-134
   8addc:	e0bffa15 	stw	r2,-24(fp)
   8ade0:	00000206 	br	8adec <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   8ade4:	00bfebc4 	movi	r2,-81
   8ade8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   8adec:	e0bffa17 	ldw	r2,-24(fp)
   8adf0:	1004403a 	cmpge	r2,r2,zero
   8adf4:	1000071e 	bne	r2,zero,8ae14 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   8adf8:	008ae2c0 	call	8ae2c <alt_get_errno>
   8adfc:	1007883a 	mov	r3,r2
   8ae00:	e0bffa17 	ldw	r2,-24(fp)
   8ae04:	0085c83a 	sub	r2,zero,r2
   8ae08:	18800015 	stw	r2,0(r3)
    rc = -1;
   8ae0c:	00bfffc4 	movi	r2,-1
   8ae10:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   8ae14:	e0bffa17 	ldw	r2,-24(fp)
}
   8ae18:	e037883a 	mov	sp,fp
   8ae1c:	dfc00117 	ldw	ra,4(sp)
   8ae20:	df000017 	ldw	fp,0(sp)
   8ae24:	dec00204 	addi	sp,sp,8
   8ae28:	f800283a 	ret

0008ae2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8ae2c:	defffd04 	addi	sp,sp,-12
   8ae30:	dfc00215 	stw	ra,8(sp)
   8ae34:	df000115 	stw	fp,4(sp)
   8ae38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8ae3c:	00800274 	movhi	r2,9
   8ae40:	10bd3704 	addi	r2,r2,-2852
   8ae44:	10800017 	ldw	r2,0(r2)
   8ae48:	1005003a 	cmpeq	r2,r2,zero
   8ae4c:	1000061e 	bne	r2,zero,8ae68 <alt_get_errno+0x3c>
   8ae50:	00800274 	movhi	r2,9
   8ae54:	10bd3704 	addi	r2,r2,-2852
   8ae58:	10800017 	ldw	r2,0(r2)
   8ae5c:	103ee83a 	callr	r2
   8ae60:	e0bfff15 	stw	r2,-4(fp)
   8ae64:	00000306 	br	8ae74 <alt_get_errno+0x48>
   8ae68:	00800274 	movhi	r2,9
   8ae6c:	10849504 	addi	r2,r2,4692
   8ae70:	e0bfff15 	stw	r2,-4(fp)
   8ae74:	e0bfff17 	ldw	r2,-4(fp)
}
   8ae78:	e037883a 	mov	sp,fp
   8ae7c:	dfc00117 	ldw	ra,4(sp)
   8ae80:	df000017 	ldw	fp,0(sp)
   8ae84:	dec00204 	addi	sp,sp,8
   8ae88:	f800283a 	ret

0008ae8c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8ae8c:	defffd04 	addi	sp,sp,-12
   8ae90:	dfc00215 	stw	ra,8(sp)
   8ae94:	df000115 	stw	fp,4(sp)
   8ae98:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8ae9c:	0009883a 	mov	r4,zero
   8aea0:	008b3740 	call	8b374 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8aea4:	008b3a80 	call	8b3a8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8aea8:	01000274 	movhi	r4,9
   8aeac:	2135e704 	addi	r4,r4,-10340
   8aeb0:	01400274 	movhi	r5,9
   8aeb4:	2975e704 	addi	r5,r5,-10340
   8aeb8:	01800274 	movhi	r6,9
   8aebc:	31b5e704 	addi	r6,r6,-10340
   8aec0:	008c5dc0 	call	8c5dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8aec4:	008c1540 	call	8c154 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8aec8:	01000274 	movhi	r4,9
   8aecc:	21306e04 	addi	r4,r4,-15944
   8aed0:	008cd800 	call	8cd80 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8aed4:	d1276b17 	ldw	r4,-25172(gp)
   8aed8:	d1676c17 	ldw	r5,-25168(gp)
   8aedc:	d1a76d17 	ldw	r6,-25164(gp)
   8aee0:	008094c0 	call	8094c <main>
   8aee4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8aee8:	01000044 	movi	r4,1
   8aeec:	008a8640 	call	8a864 <close>
  exit (result);
   8aef0:	e13fff17 	ldw	r4,-4(fp)
   8aef4:	008cd940 	call	8cd94 <exit>

0008aef8 <__malloc_lock>:
   8aef8:	defffe04 	addi	sp,sp,-8
   8aefc:	df000115 	stw	fp,4(sp)
   8af00:	df000104 	addi	fp,sp,4
   8af04:	e13fff15 	stw	r4,-4(fp)
   8af08:	e037883a 	mov	sp,fp
   8af0c:	df000017 	ldw	fp,0(sp)
   8af10:	dec00104 	addi	sp,sp,4
   8af14:	f800283a 	ret

0008af18 <__malloc_unlock>:
   8af18:	defffe04 	addi	sp,sp,-8
   8af1c:	df000115 	stw	fp,4(sp)
   8af20:	df000104 	addi	fp,sp,4
   8af24:	e13fff15 	stw	r4,-4(fp)
   8af28:	e037883a 	mov	sp,fp
   8af2c:	df000017 	ldw	fp,0(sp)
   8af30:	dec00104 	addi	sp,sp,4
   8af34:	f800283a 	ret

0008af38 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8af38:	defff704 	addi	sp,sp,-36
   8af3c:	dfc00815 	stw	ra,32(sp)
   8af40:	df000715 	stw	fp,28(sp)
   8af44:	df000704 	addi	fp,sp,28
   8af48:	e13ffb15 	stw	r4,-20(fp)
   8af4c:	e17ffc15 	stw	r5,-16(fp)
   8af50:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8af54:	e0bffb17 	ldw	r2,-20(fp)
   8af58:	1004803a 	cmplt	r2,r2,zero
   8af5c:	1000091e 	bne	r2,zero,8af84 <read+0x4c>
   8af60:	e13ffb17 	ldw	r4,-20(fp)
   8af64:	01400304 	movi	r5,12
   8af68:	008a1740 	call	8a174 <__mulsi3>
   8af6c:	1007883a 	mov	r3,r2
   8af70:	00800274 	movhi	r2,9
   8af74:	10b8b304 	addi	r2,r2,-7476
   8af78:	1887883a 	add	r3,r3,r2
   8af7c:	e0ffff15 	stw	r3,-4(fp)
   8af80:	00000106 	br	8af88 <read+0x50>
   8af84:	e03fff15 	stw	zero,-4(fp)
   8af88:	e0bfff17 	ldw	r2,-4(fp)
   8af8c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8af90:	e0bffa17 	ldw	r2,-24(fp)
   8af94:	1005003a 	cmpeq	r2,r2,zero
   8af98:	1000241e 	bne	r2,zero,8b02c <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8af9c:	e0bffa17 	ldw	r2,-24(fp)
   8afa0:	10800217 	ldw	r2,8(r2)
   8afa4:	108000cc 	andi	r2,r2,3
   8afa8:	10800060 	cmpeqi	r2,r2,1
   8afac:	10001a1e 	bne	r2,zero,8b018 <read+0xe0>
   8afb0:	e0bffa17 	ldw	r2,-24(fp)
   8afb4:	10800017 	ldw	r2,0(r2)
   8afb8:	10800517 	ldw	r2,20(r2)
   8afbc:	1005003a 	cmpeq	r2,r2,zero
   8afc0:	1000151e 	bne	r2,zero,8b018 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8afc4:	e0bffa17 	ldw	r2,-24(fp)
   8afc8:	10800017 	ldw	r2,0(r2)
   8afcc:	10800517 	ldw	r2,20(r2)
   8afd0:	e17ffc17 	ldw	r5,-16(fp)
   8afd4:	e1bffd17 	ldw	r6,-12(fp)
   8afd8:	e13ffa17 	ldw	r4,-24(fp)
   8afdc:	103ee83a 	callr	r2
   8afe0:	e0bff915 	stw	r2,-28(fp)
   8afe4:	e0bff917 	ldw	r2,-28(fp)
   8afe8:	1004403a 	cmpge	r2,r2,zero
   8afec:	1000071e 	bne	r2,zero,8b00c <read+0xd4>
        {
          ALT_ERRNO = -rval;
   8aff0:	008b05c0 	call	8b05c <alt_get_errno>
   8aff4:	e0fff917 	ldw	r3,-28(fp)
   8aff8:	00c7c83a 	sub	r3,zero,r3
   8affc:	10c00015 	stw	r3,0(r2)
          return -1;
   8b000:	00bfffc4 	movi	r2,-1
   8b004:	e0bffe15 	stw	r2,-8(fp)
   8b008:	00000e06 	br	8b044 <read+0x10c>
        }
        return rval;
   8b00c:	e0bff917 	ldw	r2,-28(fp)
   8b010:	e0bffe15 	stw	r2,-8(fp)
   8b014:	00000b06 	br	8b044 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8b018:	008b05c0 	call	8b05c <alt_get_errno>
   8b01c:	1007883a 	mov	r3,r2
   8b020:	00800344 	movi	r2,13
   8b024:	18800015 	stw	r2,0(r3)
   8b028:	00000406 	br	8b03c <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8b02c:	008b05c0 	call	8b05c <alt_get_errno>
   8b030:	1007883a 	mov	r3,r2
   8b034:	00801444 	movi	r2,81
   8b038:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8b03c:	00bfffc4 	movi	r2,-1
   8b040:	e0bffe15 	stw	r2,-8(fp)
   8b044:	e0bffe17 	ldw	r2,-8(fp)
}
   8b048:	e037883a 	mov	sp,fp
   8b04c:	dfc00117 	ldw	ra,4(sp)
   8b050:	df000017 	ldw	fp,0(sp)
   8b054:	dec00204 	addi	sp,sp,8
   8b058:	f800283a 	ret

0008b05c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b05c:	defffd04 	addi	sp,sp,-12
   8b060:	dfc00215 	stw	ra,8(sp)
   8b064:	df000115 	stw	fp,4(sp)
   8b068:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b06c:	00800274 	movhi	r2,9
   8b070:	10bd3704 	addi	r2,r2,-2852
   8b074:	10800017 	ldw	r2,0(r2)
   8b078:	1005003a 	cmpeq	r2,r2,zero
   8b07c:	1000061e 	bne	r2,zero,8b098 <alt_get_errno+0x3c>
   8b080:	00800274 	movhi	r2,9
   8b084:	10bd3704 	addi	r2,r2,-2852
   8b088:	10800017 	ldw	r2,0(r2)
   8b08c:	103ee83a 	callr	r2
   8b090:	e0bfff15 	stw	r2,-4(fp)
   8b094:	00000306 	br	8b0a4 <alt_get_errno+0x48>
   8b098:	00800274 	movhi	r2,9
   8b09c:	10849504 	addi	r2,r2,4692
   8b0a0:	e0bfff15 	stw	r2,-4(fp)
   8b0a4:	e0bfff17 	ldw	r2,-4(fp)
}
   8b0a8:	e037883a 	mov	sp,fp
   8b0ac:	dfc00117 	ldw	ra,4(sp)
   8b0b0:	df000017 	ldw	fp,0(sp)
   8b0b4:	dec00204 	addi	sp,sp,8
   8b0b8:	f800283a 	ret

0008b0bc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8b0bc:	defffc04 	addi	sp,sp,-16
   8b0c0:	dfc00315 	stw	ra,12(sp)
   8b0c4:	df000215 	stw	fp,8(sp)
   8b0c8:	dc000115 	stw	r16,4(sp)
   8b0cc:	df000104 	addi	fp,sp,4
   8b0d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8b0d4:	e0bfff17 	ldw	r2,-4(fp)
   8b0d8:	108000d0 	cmplti	r2,r2,3
   8b0dc:	10000f1e 	bne	r2,zero,8b11c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   8b0e0:	e13fff17 	ldw	r4,-4(fp)
   8b0e4:	04000274 	movhi	r16,9
   8b0e8:	8438b304 	addi	r16,r16,-7476
   8b0ec:	01400304 	movi	r5,12
   8b0f0:	008a1740 	call	8a174 <__mulsi3>
   8b0f4:	1405883a 	add	r2,r2,r16
   8b0f8:	10800204 	addi	r2,r2,8
   8b0fc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8b100:	e13fff17 	ldw	r4,-4(fp)
   8b104:	04000274 	movhi	r16,9
   8b108:	8438b304 	addi	r16,r16,-7476
   8b10c:	01400304 	movi	r5,12
   8b110:	008a1740 	call	8a174 <__mulsi3>
   8b114:	1405883a 	add	r2,r2,r16
   8b118:	10000015 	stw	zero,0(r2)
  }
}
   8b11c:	e037883a 	mov	sp,fp
   8b120:	dfc00217 	ldw	ra,8(sp)
   8b124:	df000117 	ldw	fp,4(sp)
   8b128:	dc000017 	ldw	r16,0(sp)
   8b12c:	dec00304 	addi	sp,sp,12
   8b130:	f800283a 	ret

0008b134 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8b134:	defff804 	addi	sp,sp,-32
   8b138:	df000715 	stw	fp,28(sp)
   8b13c:	df000704 	addi	fp,sp,28
   8b140:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b144:	0005303a 	rdctl	r2,status
   8b148:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b14c:	e0fffb17 	ldw	r3,-20(fp)
   8b150:	00bfff84 	movi	r2,-2
   8b154:	1884703a 	and	r2,r3,r2
   8b158:	1001703a 	wrctl	status,r2
  
  return context;
   8b15c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8b160:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8b164:	d0a00d17 	ldw	r2,-32716(gp)
   8b168:	10c000c4 	addi	r3,r2,3
   8b16c:	00bfff04 	movi	r2,-4
   8b170:	1884703a 	and	r2,r3,r2
   8b174:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8b178:	d0e00d17 	ldw	r3,-32716(gp)
   8b17c:	e0bffe17 	ldw	r2,-8(fp)
   8b180:	1887883a 	add	r3,r3,r2
   8b184:	00800434 	movhi	r2,16
   8b188:	10800004 	addi	r2,r2,0
   8b18c:	10c0072e 	bgeu	r2,r3,8b1ac <sbrk+0x78>
   8b190:	e0bffd17 	ldw	r2,-12(fp)
   8b194:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b198:	e0bffa17 	ldw	r2,-24(fp)
   8b19c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8b1a0:	00bfffc4 	movi	r2,-1
   8b1a4:	e0bfff15 	stw	r2,-4(fp)
   8b1a8:	00000c06 	br	8b1dc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   8b1ac:	d0a00d17 	ldw	r2,-32716(gp)
   8b1b0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   8b1b4:	d0e00d17 	ldw	r3,-32716(gp)
   8b1b8:	e0bffe17 	ldw	r2,-8(fp)
   8b1bc:	1885883a 	add	r2,r3,r2
   8b1c0:	d0a00d15 	stw	r2,-32716(gp)
   8b1c4:	e0bffd17 	ldw	r2,-12(fp)
   8b1c8:	e0bff915 	stw	r2,-28(fp)
   8b1cc:	e0bff917 	ldw	r2,-28(fp)
   8b1d0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8b1d4:	e0bffc17 	ldw	r2,-16(fp)
   8b1d8:	e0bfff15 	stw	r2,-4(fp)
   8b1dc:	e0bfff17 	ldw	r2,-4(fp)
} 
   8b1e0:	e037883a 	mov	sp,fp
   8b1e4:	df000017 	ldw	fp,0(sp)
   8b1e8:	dec00104 	addi	sp,sp,4
   8b1ec:	f800283a 	ret

0008b1f0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8b1f0:	defff704 	addi	sp,sp,-36
   8b1f4:	dfc00815 	stw	ra,32(sp)
   8b1f8:	df000715 	stw	fp,28(sp)
   8b1fc:	df000704 	addi	fp,sp,28
   8b200:	e13ffb15 	stw	r4,-20(fp)
   8b204:	e17ffc15 	stw	r5,-16(fp)
   8b208:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b20c:	e0bffb17 	ldw	r2,-20(fp)
   8b210:	1004803a 	cmplt	r2,r2,zero
   8b214:	1000091e 	bne	r2,zero,8b23c <write+0x4c>
   8b218:	e13ffb17 	ldw	r4,-20(fp)
   8b21c:	01400304 	movi	r5,12
   8b220:	008a1740 	call	8a174 <__mulsi3>
   8b224:	1007883a 	mov	r3,r2
   8b228:	00800274 	movhi	r2,9
   8b22c:	10b8b304 	addi	r2,r2,-7476
   8b230:	1887883a 	add	r3,r3,r2
   8b234:	e0ffff15 	stw	r3,-4(fp)
   8b238:	00000106 	br	8b240 <write+0x50>
   8b23c:	e03fff15 	stw	zero,-4(fp)
   8b240:	e0bfff17 	ldw	r2,-4(fp)
   8b244:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8b248:	e0bffa17 	ldw	r2,-24(fp)
   8b24c:	1005003a 	cmpeq	r2,r2,zero
   8b250:	1000241e 	bne	r2,zero,8b2e4 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8b254:	e0bffa17 	ldw	r2,-24(fp)
   8b258:	10800217 	ldw	r2,8(r2)
   8b25c:	108000cc 	andi	r2,r2,3
   8b260:	1005003a 	cmpeq	r2,r2,zero
   8b264:	10001a1e 	bne	r2,zero,8b2d0 <write+0xe0>
   8b268:	e0bffa17 	ldw	r2,-24(fp)
   8b26c:	10800017 	ldw	r2,0(r2)
   8b270:	10800617 	ldw	r2,24(r2)
   8b274:	1005003a 	cmpeq	r2,r2,zero
   8b278:	1000151e 	bne	r2,zero,8b2d0 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8b27c:	e0bffa17 	ldw	r2,-24(fp)
   8b280:	10800017 	ldw	r2,0(r2)
   8b284:	10800617 	ldw	r2,24(r2)
   8b288:	e17ffc17 	ldw	r5,-16(fp)
   8b28c:	e1bffd17 	ldw	r6,-12(fp)
   8b290:	e13ffa17 	ldw	r4,-24(fp)
   8b294:	103ee83a 	callr	r2
   8b298:	e0bff915 	stw	r2,-28(fp)
   8b29c:	e0bff917 	ldw	r2,-28(fp)
   8b2a0:	1004403a 	cmpge	r2,r2,zero
   8b2a4:	1000071e 	bne	r2,zero,8b2c4 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   8b2a8:	008b3140 	call	8b314 <alt_get_errno>
   8b2ac:	e0fff917 	ldw	r3,-28(fp)
   8b2b0:	00c7c83a 	sub	r3,zero,r3
   8b2b4:	10c00015 	stw	r3,0(r2)
        return -1;
   8b2b8:	00bfffc4 	movi	r2,-1
   8b2bc:	e0bffe15 	stw	r2,-8(fp)
   8b2c0:	00000e06 	br	8b2fc <write+0x10c>
      }
      return rval;
   8b2c4:	e0bff917 	ldw	r2,-28(fp)
   8b2c8:	e0bffe15 	stw	r2,-8(fp)
   8b2cc:	00000b06 	br	8b2fc <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8b2d0:	008b3140 	call	8b314 <alt_get_errno>
   8b2d4:	1007883a 	mov	r3,r2
   8b2d8:	00800344 	movi	r2,13
   8b2dc:	18800015 	stw	r2,0(r3)
   8b2e0:	00000406 	br	8b2f4 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8b2e4:	008b3140 	call	8b314 <alt_get_errno>
   8b2e8:	1007883a 	mov	r3,r2
   8b2ec:	00801444 	movi	r2,81
   8b2f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8b2f4:	00bfffc4 	movi	r2,-1
   8b2f8:	e0bffe15 	stw	r2,-8(fp)
   8b2fc:	e0bffe17 	ldw	r2,-8(fp)
}
   8b300:	e037883a 	mov	sp,fp
   8b304:	dfc00117 	ldw	ra,4(sp)
   8b308:	df000017 	ldw	fp,0(sp)
   8b30c:	dec00204 	addi	sp,sp,8
   8b310:	f800283a 	ret

0008b314 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b314:	defffd04 	addi	sp,sp,-12
   8b318:	dfc00215 	stw	ra,8(sp)
   8b31c:	df000115 	stw	fp,4(sp)
   8b320:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b324:	00800274 	movhi	r2,9
   8b328:	10bd3704 	addi	r2,r2,-2852
   8b32c:	10800017 	ldw	r2,0(r2)
   8b330:	1005003a 	cmpeq	r2,r2,zero
   8b334:	1000061e 	bne	r2,zero,8b350 <alt_get_errno+0x3c>
   8b338:	00800274 	movhi	r2,9
   8b33c:	10bd3704 	addi	r2,r2,-2852
   8b340:	10800017 	ldw	r2,0(r2)
   8b344:	103ee83a 	callr	r2
   8b348:	e0bfff15 	stw	r2,-4(fp)
   8b34c:	00000306 	br	8b35c <alt_get_errno+0x48>
   8b350:	00800274 	movhi	r2,9
   8b354:	10849504 	addi	r2,r2,4692
   8b358:	e0bfff15 	stw	r2,-4(fp)
   8b35c:	e0bfff17 	ldw	r2,-4(fp)
}
   8b360:	e037883a 	mov	sp,fp
   8b364:	dfc00117 	ldw	ra,4(sp)
   8b368:	df000017 	ldw	fp,0(sp)
   8b36c:	dec00204 	addi	sp,sp,8
   8b370:	f800283a 	ret

0008b374 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8b374:	defffd04 	addi	sp,sp,-12
   8b378:	dfc00215 	stw	ra,8(sp)
   8b37c:	df000115 	stw	fp,4(sp)
   8b380:	df000104 	addi	fp,sp,4
   8b384:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
   8b388:	008cadc0 	call	8cadc <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8b38c:	00800044 	movi	r2,1
   8b390:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8b394:	e037883a 	mov	sp,fp
   8b398:	dfc00117 	ldw	ra,4(sp)
   8b39c:	df000017 	ldw	fp,0(sp)
   8b3a0:	dec00204 	addi	sp,sp,8
   8b3a4:	f800283a 	ret

0008b3a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8b3a8:	defffe04 	addi	sp,sp,-8
   8b3ac:	dfc00115 	stw	ra,4(sp)
   8b3b0:	df000015 	stw	fp,0(sp)
   8b3b4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   8b3b8:	01000274 	movhi	r4,9
   8b3bc:	21391d04 	addi	r4,r4,-7052
   8b3c0:	000b883a 	mov	r5,zero
   8b3c4:	000d883a 	mov	r6,zero
   8b3c8:	008b56c0 	call	8b56c <altera_avalon_jtag_uart_init>
   8b3cc:	01000274 	movhi	r4,9
   8b3d0:	21391304 	addi	r4,r4,-7092
   8b3d4:	008b3ec0 	call	8b3ec <alt_dev_reg>
}
   8b3d8:	e037883a 	mov	sp,fp
   8b3dc:	dfc00117 	ldw	ra,4(sp)
   8b3e0:	df000017 	ldw	fp,0(sp)
   8b3e4:	dec00204 	addi	sp,sp,8
   8b3e8:	f800283a 	ret

0008b3ec <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8b3ec:	defffd04 	addi	sp,sp,-12
   8b3f0:	dfc00215 	stw	ra,8(sp)
   8b3f4:	df000115 	stw	fp,4(sp)
   8b3f8:	df000104 	addi	fp,sp,4
   8b3fc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8b400:	e13fff17 	ldw	r4,-4(fp)
   8b404:	01400274 	movhi	r5,9
   8b408:	297d3404 	addi	r5,r5,-2864
   8b40c:	008c0400 	call	8c040 <alt_dev_llist_insert>
}
   8b410:	e037883a 	mov	sp,fp
   8b414:	dfc00117 	ldw	ra,4(sp)
   8b418:	df000017 	ldw	fp,0(sp)
   8b41c:	dec00204 	addi	sp,sp,8
   8b420:	f800283a 	ret

0008b424 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8b424:	defffa04 	addi	sp,sp,-24
   8b428:	dfc00515 	stw	ra,20(sp)
   8b42c:	df000415 	stw	fp,16(sp)
   8b430:	df000404 	addi	fp,sp,16
   8b434:	e13ffd15 	stw	r4,-12(fp)
   8b438:	e17ffe15 	stw	r5,-8(fp)
   8b43c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8b440:	e0bffd17 	ldw	r2,-12(fp)
   8b444:	10800017 	ldw	r2,0(r2)
   8b448:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8b44c:	e0bffc17 	ldw	r2,-16(fp)
   8b450:	11000a04 	addi	r4,r2,40
   8b454:	e0bffd17 	ldw	r2,-12(fp)
   8b458:	11c00217 	ldw	r7,8(r2)
   8b45c:	e17ffe17 	ldw	r5,-8(fp)
   8b460:	e1bfff17 	ldw	r6,-4(fp)
   8b464:	008ba6c0 	call	8ba6c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8b468:	e037883a 	mov	sp,fp
   8b46c:	dfc00117 	ldw	ra,4(sp)
   8b470:	df000017 	ldw	fp,0(sp)
   8b474:	dec00204 	addi	sp,sp,8
   8b478:	f800283a 	ret

0008b47c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8b47c:	defffa04 	addi	sp,sp,-24
   8b480:	dfc00515 	stw	ra,20(sp)
   8b484:	df000415 	stw	fp,16(sp)
   8b488:	df000404 	addi	fp,sp,16
   8b48c:	e13ffd15 	stw	r4,-12(fp)
   8b490:	e17ffe15 	stw	r5,-8(fp)
   8b494:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8b498:	e0bffd17 	ldw	r2,-12(fp)
   8b49c:	10800017 	ldw	r2,0(r2)
   8b4a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8b4a4:	e0bffc17 	ldw	r2,-16(fp)
   8b4a8:	11000a04 	addi	r4,r2,40
   8b4ac:	e0bffd17 	ldw	r2,-12(fp)
   8b4b0:	11c00217 	ldw	r7,8(r2)
   8b4b4:	e17ffe17 	ldw	r5,-8(fp)
   8b4b8:	e1bfff17 	ldw	r6,-4(fp)
   8b4bc:	008bc900 	call	8bc90 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8b4c0:	e037883a 	mov	sp,fp
   8b4c4:	dfc00117 	ldw	ra,4(sp)
   8b4c8:	df000017 	ldw	fp,0(sp)
   8b4cc:	dec00204 	addi	sp,sp,8
   8b4d0:	f800283a 	ret

0008b4d4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8b4d4:	defffc04 	addi	sp,sp,-16
   8b4d8:	dfc00315 	stw	ra,12(sp)
   8b4dc:	df000215 	stw	fp,8(sp)
   8b4e0:	df000204 	addi	fp,sp,8
   8b4e4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8b4e8:	e0bfff17 	ldw	r2,-4(fp)
   8b4ec:	10800017 	ldw	r2,0(r2)
   8b4f0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8b4f4:	e0bffe17 	ldw	r2,-8(fp)
   8b4f8:	11000a04 	addi	r4,r2,40
   8b4fc:	e0bfff17 	ldw	r2,-4(fp)
   8b500:	11400217 	ldw	r5,8(r2)
   8b504:	008b9040 	call	8b904 <altera_avalon_jtag_uart_close>
}
   8b508:	e037883a 	mov	sp,fp
   8b50c:	dfc00117 	ldw	ra,4(sp)
   8b510:	df000017 	ldw	fp,0(sp)
   8b514:	dec00204 	addi	sp,sp,8
   8b518:	f800283a 	ret

0008b51c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8b51c:	defffa04 	addi	sp,sp,-24
   8b520:	dfc00515 	stw	ra,20(sp)
   8b524:	df000415 	stw	fp,16(sp)
   8b528:	df000404 	addi	fp,sp,16
   8b52c:	e13ffd15 	stw	r4,-12(fp)
   8b530:	e17ffe15 	stw	r5,-8(fp)
   8b534:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8b538:	e0bffd17 	ldw	r2,-12(fp)
   8b53c:	10800017 	ldw	r2,0(r2)
   8b540:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8b544:	e0bffc17 	ldw	r2,-16(fp)
   8b548:	11000a04 	addi	r4,r2,40
   8b54c:	e17ffe17 	ldw	r5,-8(fp)
   8b550:	e1bfff17 	ldw	r6,-4(fp)
   8b554:	008b9780 	call	8b978 <altera_avalon_jtag_uart_ioctl>
}
   8b558:	e037883a 	mov	sp,fp
   8b55c:	dfc00117 	ldw	ra,4(sp)
   8b560:	df000017 	ldw	fp,0(sp)
   8b564:	dec00204 	addi	sp,sp,8
   8b568:	f800283a 	ret

0008b56c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8b56c:	defffa04 	addi	sp,sp,-24
   8b570:	dfc00515 	stw	ra,20(sp)
   8b574:	df000415 	stw	fp,16(sp)
   8b578:	df000404 	addi	fp,sp,16
   8b57c:	e13ffd15 	stw	r4,-12(fp)
   8b580:	e17ffe15 	stw	r5,-8(fp)
   8b584:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8b588:	e0fffd17 	ldw	r3,-12(fp)
   8b58c:	00800044 	movi	r2,1
   8b590:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8b594:	e0bffd17 	ldw	r2,-12(fp)
   8b598:	10800017 	ldw	r2,0(r2)
   8b59c:	11000104 	addi	r4,r2,4
   8b5a0:	e0bffd17 	ldw	r2,-12(fp)
   8b5a4:	10800817 	ldw	r2,32(r2)
   8b5a8:	1007883a 	mov	r3,r2
   8b5ac:	2005883a 	mov	r2,r4
   8b5b0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8b5b4:	e13ffe17 	ldw	r4,-8(fp)
   8b5b8:	e17fff17 	ldw	r5,-4(fp)
   8b5bc:	d8000015 	stw	zero,0(sp)
   8b5c0:	01800274 	movhi	r6,9
   8b5c4:	31ad8b04 	addi	r6,r6,-18900
   8b5c8:	e1fffd17 	ldw	r7,-12(fp)
   8b5cc:	008c2380 	call	8c238 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8b5d0:	e0bffd17 	ldw	r2,-12(fp)
   8b5d4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8b5d8:	e0bffd17 	ldw	r2,-12(fp)
   8b5dc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8b5e0:	00800274 	movhi	r2,9
   8b5e4:	10849a04 	addi	r2,r2,4712
   8b5e8:	10800017 	ldw	r2,0(r2)
   8b5ec:	100b883a 	mov	r5,r2
   8b5f0:	01800274 	movhi	r6,9
   8b5f4:	31ae1504 	addi	r6,r6,-18348
   8b5f8:	e1fffd17 	ldw	r7,-12(fp)
   8b5fc:	008bed00 	call	8bed0 <alt_alarm_start>
   8b600:	1004403a 	cmpge	r2,r2,zero
   8b604:	1000041e 	bne	r2,zero,8b618 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8b608:	e0fffd17 	ldw	r3,-12(fp)
   8b60c:	00a00034 	movhi	r2,32768
   8b610:	10bfffc4 	addi	r2,r2,-1
   8b614:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8b618:	e037883a 	mov	sp,fp
   8b61c:	dfc00117 	ldw	ra,4(sp)
   8b620:	df000017 	ldw	fp,0(sp)
   8b624:	dec00204 	addi	sp,sp,8
   8b628:	f800283a 	ret

0008b62c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8b62c:	defff804 	addi	sp,sp,-32
   8b630:	df000715 	stw	fp,28(sp)
   8b634:	df000704 	addi	fp,sp,28
   8b638:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8b63c:	e0bfff17 	ldw	r2,-4(fp)
   8b640:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   8b644:	e0bffe17 	ldw	r2,-8(fp)
   8b648:	10800017 	ldw	r2,0(r2)
   8b64c:	e0bffd15 	stw	r2,-12(fp)
   8b650:	00000006 	br	8b654 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8b654:	e0bffd17 	ldw	r2,-12(fp)
   8b658:	10800104 	addi	r2,r2,4
   8b65c:	10800037 	ldwio	r2,0(r2)
   8b660:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8b664:	e0bffc17 	ldw	r2,-16(fp)
   8b668:	1080c00c 	andi	r2,r2,768
   8b66c:	1005003a 	cmpeq	r2,r2,zero
   8b670:	1000741e 	bne	r2,zero,8b844 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8b674:	e0bffc17 	ldw	r2,-16(fp)
   8b678:	1080400c 	andi	r2,r2,256
   8b67c:	1005003a 	cmpeq	r2,r2,zero
   8b680:	1000351e 	bne	r2,zero,8b758 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8b684:	00800074 	movhi	r2,1
   8b688:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8b68c:	e0bffe17 	ldw	r2,-8(fp)
   8b690:	10800a17 	ldw	r2,40(r2)
   8b694:	10800044 	addi	r2,r2,1
   8b698:	1081ffcc 	andi	r2,r2,2047
   8b69c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   8b6a0:	e0bffe17 	ldw	r2,-8(fp)
   8b6a4:	10c00b17 	ldw	r3,44(r2)
   8b6a8:	e0bffa17 	ldw	r2,-24(fp)
   8b6ac:	18801626 	beq	r3,r2,8b708 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8b6b0:	e0bffd17 	ldw	r2,-12(fp)
   8b6b4:	10800037 	ldwio	r2,0(r2)
   8b6b8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8b6bc:	e0bffb17 	ldw	r2,-20(fp)
   8b6c0:	10a0000c 	andi	r2,r2,32768
   8b6c4:	1005003a 	cmpeq	r2,r2,zero
   8b6c8:	10000f1e 	bne	r2,zero,8b708 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8b6cc:	e0bffe17 	ldw	r2,-8(fp)
   8b6d0:	10c00a17 	ldw	r3,40(r2)
   8b6d4:	e0bffb17 	ldw	r2,-20(fp)
   8b6d8:	1009883a 	mov	r4,r2
   8b6dc:	e0bffe17 	ldw	r2,-8(fp)
   8b6e0:	1885883a 	add	r2,r3,r2
   8b6e4:	10800e04 	addi	r2,r2,56
   8b6e8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8b6ec:	e0bffe17 	ldw	r2,-8(fp)
   8b6f0:	10800a17 	ldw	r2,40(r2)
   8b6f4:	10800044 	addi	r2,r2,1
   8b6f8:	10c1ffcc 	andi	r3,r2,2047
   8b6fc:	e0bffe17 	ldw	r2,-8(fp)
   8b700:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8b704:	003fe106 	br	8b68c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8b708:	e0bffb17 	ldw	r2,-20(fp)
   8b70c:	10bfffec 	andhi	r2,r2,65535
   8b710:	1005003a 	cmpeq	r2,r2,zero
   8b714:	1000101e 	bne	r2,zero,8b758 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8b718:	e0bffe17 	ldw	r2,-8(fp)
   8b71c:	10c00817 	ldw	r3,32(r2)
   8b720:	00bfff84 	movi	r2,-2
   8b724:	1886703a 	and	r3,r3,r2
   8b728:	e0bffe17 	ldw	r2,-8(fp)
   8b72c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8b730:	e0bffd17 	ldw	r2,-12(fp)
   8b734:	11000104 	addi	r4,r2,4
   8b738:	e0bffe17 	ldw	r2,-8(fp)
   8b73c:	10800817 	ldw	r2,32(r2)
   8b740:	1007883a 	mov	r3,r2
   8b744:	2005883a 	mov	r2,r4
   8b748:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8b74c:	e0bffd17 	ldw	r2,-12(fp)
   8b750:	10800104 	addi	r2,r2,4
   8b754:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8b758:	e0bffc17 	ldw	r2,-16(fp)
   8b75c:	1080800c 	andi	r2,r2,512
   8b760:	1005003a 	cmpeq	r2,r2,zero
   8b764:	103fbb1e 	bne	r2,zero,8b654 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8b768:	e0bffc17 	ldw	r2,-16(fp)
   8b76c:	10bfffec 	andhi	r2,r2,65535
   8b770:	1004d43a 	srli	r2,r2,16
   8b774:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8b778:	00001506 	br	8b7d0 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8b77c:	e13ffd17 	ldw	r4,-12(fp)
   8b780:	e0bffe17 	ldw	r2,-8(fp)
   8b784:	10c00d17 	ldw	r3,52(r2)
   8b788:	e0bffe17 	ldw	r2,-8(fp)
   8b78c:	1885883a 	add	r2,r3,r2
   8b790:	10820e04 	addi	r2,r2,2104
   8b794:	10800003 	ldbu	r2,0(r2)
   8b798:	10c03fcc 	andi	r3,r2,255
   8b79c:	18c0201c 	xori	r3,r3,128
   8b7a0:	18ffe004 	addi	r3,r3,-128
   8b7a4:	2005883a 	mov	r2,r4
   8b7a8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8b7ac:	e0bffe17 	ldw	r2,-8(fp)
   8b7b0:	10800d17 	ldw	r2,52(r2)
   8b7b4:	10800044 	addi	r2,r2,1
   8b7b8:	10c1ffcc 	andi	r3,r2,2047
   8b7bc:	e0bffe17 	ldw	r2,-8(fp)
   8b7c0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8b7c4:	e0bff917 	ldw	r2,-28(fp)
   8b7c8:	10bfffc4 	addi	r2,r2,-1
   8b7cc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8b7d0:	e0bff917 	ldw	r2,-28(fp)
   8b7d4:	1005003a 	cmpeq	r2,r2,zero
   8b7d8:	1000051e 	bne	r2,zero,8b7f0 <altera_avalon_jtag_uart_irq+0x1c4>
   8b7dc:	e0bffe17 	ldw	r2,-8(fp)
   8b7e0:	10c00d17 	ldw	r3,52(r2)
   8b7e4:	e0bffe17 	ldw	r2,-8(fp)
   8b7e8:	10800c17 	ldw	r2,48(r2)
   8b7ec:	18bfe31e 	bne	r3,r2,8b77c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8b7f0:	e0bff917 	ldw	r2,-28(fp)
   8b7f4:	1005003a 	cmpeq	r2,r2,zero
   8b7f8:	103f961e 	bne	r2,zero,8b654 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8b7fc:	e0bffe17 	ldw	r2,-8(fp)
   8b800:	10c00817 	ldw	r3,32(r2)
   8b804:	00bfff44 	movi	r2,-3
   8b808:	1886703a 	and	r3,r3,r2
   8b80c:	e0bffe17 	ldw	r2,-8(fp)
   8b810:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8b814:	e0bffe17 	ldw	r2,-8(fp)
   8b818:	10800017 	ldw	r2,0(r2)
   8b81c:	11000104 	addi	r4,r2,4
   8b820:	e0bffe17 	ldw	r2,-8(fp)
   8b824:	10800817 	ldw	r2,32(r2)
   8b828:	1007883a 	mov	r3,r2
   8b82c:	2005883a 	mov	r2,r4
   8b830:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8b834:	e0bffd17 	ldw	r2,-12(fp)
   8b838:	10800104 	addi	r2,r2,4
   8b83c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8b840:	003f8406 	br	8b654 <altera_avalon_jtag_uart_irq+0x28>
}
   8b844:	e037883a 	mov	sp,fp
   8b848:	df000017 	ldw	fp,0(sp)
   8b84c:	dec00104 	addi	sp,sp,4
   8b850:	f800283a 	ret

0008b854 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8b854:	defffc04 	addi	sp,sp,-16
   8b858:	df000315 	stw	fp,12(sp)
   8b85c:	df000304 	addi	fp,sp,12
   8b860:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8b864:	e0bfff17 	ldw	r2,-4(fp)
   8b868:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8b86c:	e0bffe17 	ldw	r2,-8(fp)
   8b870:	10800017 	ldw	r2,0(r2)
   8b874:	10800104 	addi	r2,r2,4
   8b878:	10800037 	ldwio	r2,0(r2)
   8b87c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8b880:	e0bffd17 	ldw	r2,-12(fp)
   8b884:	1081000c 	andi	r2,r2,1024
   8b888:	1005003a 	cmpeq	r2,r2,zero
   8b88c:	10000c1e 	bne	r2,zero,8b8c0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8b890:	e0bffe17 	ldw	r2,-8(fp)
   8b894:	10800017 	ldw	r2,0(r2)
   8b898:	11000104 	addi	r4,r2,4
   8b89c:	e0bffe17 	ldw	r2,-8(fp)
   8b8a0:	10800817 	ldw	r2,32(r2)
   8b8a4:	10810014 	ori	r2,r2,1024
   8b8a8:	1007883a 	mov	r3,r2
   8b8ac:	2005883a 	mov	r2,r4
   8b8b0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   8b8b4:	e0bffe17 	ldw	r2,-8(fp)
   8b8b8:	10000915 	stw	zero,36(r2)
   8b8bc:	00000a06 	br	8b8e8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8b8c0:	e0bffe17 	ldw	r2,-8(fp)
   8b8c4:	10c00917 	ldw	r3,36(r2)
   8b8c8:	00a00034 	movhi	r2,32768
   8b8cc:	10bfff04 	addi	r2,r2,-4
   8b8d0:	10c00536 	bltu	r2,r3,8b8e8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   8b8d4:	e0bffe17 	ldw	r2,-8(fp)
   8b8d8:	10800917 	ldw	r2,36(r2)
   8b8dc:	10c00044 	addi	r3,r2,1
   8b8e0:	e0bffe17 	ldw	r2,-8(fp)
   8b8e4:	10c00915 	stw	r3,36(r2)
   8b8e8:	00800274 	movhi	r2,9
   8b8ec:	10849a04 	addi	r2,r2,4712
   8b8f0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8b8f4:	e037883a 	mov	sp,fp
   8b8f8:	df000017 	ldw	fp,0(sp)
   8b8fc:	dec00104 	addi	sp,sp,4
   8b900:	f800283a 	ret

0008b904 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8b904:	defffc04 	addi	sp,sp,-16
   8b908:	df000315 	stw	fp,12(sp)
   8b90c:	df000304 	addi	fp,sp,12
   8b910:	e13ffd15 	stw	r4,-12(fp)
   8b914:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8b918:	00000706 	br	8b938 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   8b91c:	e0bffe17 	ldw	r2,-8(fp)
   8b920:	1090000c 	andi	r2,r2,16384
   8b924:	1005003a 	cmpeq	r2,r2,zero
   8b928:	1000031e 	bne	r2,zero,8b938 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   8b92c:	00bffd44 	movi	r2,-11
   8b930:	e0bfff15 	stw	r2,-4(fp)
   8b934:	00000b06 	br	8b964 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8b938:	e0bffd17 	ldw	r2,-12(fp)
   8b93c:	10c00d17 	ldw	r3,52(r2)
   8b940:	e0bffd17 	ldw	r2,-12(fp)
   8b944:	10800c17 	ldw	r2,48(r2)
   8b948:	18800526 	beq	r3,r2,8b960 <altera_avalon_jtag_uart_close+0x5c>
   8b94c:	e0bffd17 	ldw	r2,-12(fp)
   8b950:	10c00917 	ldw	r3,36(r2)
   8b954:	e0bffd17 	ldw	r2,-12(fp)
   8b958:	10800117 	ldw	r2,4(r2)
   8b95c:	18bfef36 	bltu	r3,r2,8b91c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8b960:	e03fff15 	stw	zero,-4(fp)
   8b964:	e0bfff17 	ldw	r2,-4(fp)
}
   8b968:	e037883a 	mov	sp,fp
   8b96c:	df000017 	ldw	fp,0(sp)
   8b970:	dec00104 	addi	sp,sp,4
   8b974:	f800283a 	ret

0008b978 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8b978:	defff804 	addi	sp,sp,-32
   8b97c:	df000715 	stw	fp,28(sp)
   8b980:	df000704 	addi	fp,sp,28
   8b984:	e13ffb15 	stw	r4,-20(fp)
   8b988:	e17ffc15 	stw	r5,-16(fp)
   8b98c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   8b990:	00bff9c4 	movi	r2,-25
   8b994:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   8b998:	e0bffc17 	ldw	r2,-16(fp)
   8b99c:	e0bfff15 	stw	r2,-4(fp)
   8b9a0:	e0ffff17 	ldw	r3,-4(fp)
   8b9a4:	189a8060 	cmpeqi	r2,r3,27137
   8b9a8:	1000041e 	bne	r2,zero,8b9bc <altera_avalon_jtag_uart_ioctl+0x44>
   8b9ac:	e0ffff17 	ldw	r3,-4(fp)
   8b9b0:	189a80a0 	cmpeqi	r2,r3,27138
   8b9b4:	10001b1e 	bne	r2,zero,8ba24 <altera_avalon_jtag_uart_ioctl+0xac>
   8b9b8:	00002706 	br	8ba58 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8b9bc:	e0bffb17 	ldw	r2,-20(fp)
   8b9c0:	10c00117 	ldw	r3,4(r2)
   8b9c4:	00a00034 	movhi	r2,32768
   8b9c8:	10bfffc4 	addi	r2,r2,-1
   8b9cc:	18802226 	beq	r3,r2,8ba58 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   8b9d0:	e0bffd17 	ldw	r2,-12(fp)
   8b9d4:	10800017 	ldw	r2,0(r2)
   8b9d8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8b9dc:	e0bff917 	ldw	r2,-28(fp)
   8b9e0:	10800090 	cmplti	r2,r2,2
   8b9e4:	1000071e 	bne	r2,zero,8ba04 <altera_avalon_jtag_uart_ioctl+0x8c>
   8b9e8:	e0fff917 	ldw	r3,-28(fp)
   8b9ec:	00a00034 	movhi	r2,32768
   8b9f0:	10bfffc4 	addi	r2,r2,-1
   8b9f4:	18800326 	beq	r3,r2,8ba04 <altera_avalon_jtag_uart_ioctl+0x8c>
   8b9f8:	e0bff917 	ldw	r2,-28(fp)
   8b9fc:	e0bffe15 	stw	r2,-8(fp)
   8ba00:	00000306 	br	8ba10 <altera_avalon_jtag_uart_ioctl+0x98>
   8ba04:	00e00034 	movhi	r3,32768
   8ba08:	18ffff84 	addi	r3,r3,-2
   8ba0c:	e0fffe15 	stw	r3,-8(fp)
   8ba10:	e0bffb17 	ldw	r2,-20(fp)
   8ba14:	e0fffe17 	ldw	r3,-8(fp)
   8ba18:	10c00115 	stw	r3,4(r2)
      rc = 0;
   8ba1c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   8ba20:	00000d06 	br	8ba58 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8ba24:	e0bffb17 	ldw	r2,-20(fp)
   8ba28:	10c00117 	ldw	r3,4(r2)
   8ba2c:	00a00034 	movhi	r2,32768
   8ba30:	10bfffc4 	addi	r2,r2,-1
   8ba34:	18800826 	beq	r3,r2,8ba58 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8ba38:	e13ffd17 	ldw	r4,-12(fp)
   8ba3c:	e0bffb17 	ldw	r2,-20(fp)
   8ba40:	10c00917 	ldw	r3,36(r2)
   8ba44:	e0bffb17 	ldw	r2,-20(fp)
   8ba48:	10800117 	ldw	r2,4(r2)
   8ba4c:	1885803a 	cmpltu	r2,r3,r2
   8ba50:	20800015 	stw	r2,0(r4)
      rc = 0;
   8ba54:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   8ba58:	e0bffa17 	ldw	r2,-24(fp)
}
   8ba5c:	e037883a 	mov	sp,fp
   8ba60:	df000017 	ldw	fp,0(sp)
   8ba64:	dec00104 	addi	sp,sp,4
   8ba68:	f800283a 	ret

0008ba6c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8ba6c:	defff204 	addi	sp,sp,-56
   8ba70:	dfc00d15 	stw	ra,52(sp)
   8ba74:	df000c15 	stw	fp,48(sp)
   8ba78:	df000c04 	addi	fp,sp,48
   8ba7c:	e13ffb15 	stw	r4,-20(fp)
   8ba80:	e17ffc15 	stw	r5,-16(fp)
   8ba84:	e1bffd15 	stw	r6,-12(fp)
   8ba88:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   8ba8c:	e0bffc17 	ldw	r2,-16(fp)
   8ba90:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8ba94:	00004806 	br	8bbb8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8ba98:	e0bffb17 	ldw	r2,-20(fp)
   8ba9c:	10800a17 	ldw	r2,40(r2)
   8baa0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8baa4:	e0bffb17 	ldw	r2,-20(fp)
   8baa8:	10800b17 	ldw	r2,44(r2)
   8baac:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   8bab0:	e0fff717 	ldw	r3,-36(fp)
   8bab4:	e0bff617 	ldw	r2,-40(fp)
   8bab8:	18800536 	bltu	r3,r2,8bad0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8babc:	e0bff717 	ldw	r2,-36(fp)
   8bac0:	e0fff617 	ldw	r3,-40(fp)
   8bac4:	10c5c83a 	sub	r2,r2,r3
   8bac8:	e0bff815 	stw	r2,-32(fp)
   8bacc:	00000406 	br	8bae0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8bad0:	00820004 	movi	r2,2048
   8bad4:	e0fff617 	ldw	r3,-40(fp)
   8bad8:	10c5c83a 	sub	r2,r2,r3
   8badc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   8bae0:	e0bff817 	ldw	r2,-32(fp)
   8bae4:	1005003a 	cmpeq	r2,r2,zero
   8bae8:	10001f1e 	bne	r2,zero,8bb68 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   8baec:	e0fffd17 	ldw	r3,-12(fp)
   8baf0:	e0bff817 	ldw	r2,-32(fp)
   8baf4:	1880022e 	bgeu	r3,r2,8bb00 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   8baf8:	e0bffd17 	ldw	r2,-12(fp)
   8bafc:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8bb00:	e0bffb17 	ldw	r2,-20(fp)
   8bb04:	10c00e04 	addi	r3,r2,56
   8bb08:	e0bff617 	ldw	r2,-40(fp)
   8bb0c:	1887883a 	add	r3,r3,r2
   8bb10:	e0bffa17 	ldw	r2,-24(fp)
   8bb14:	1009883a 	mov	r4,r2
   8bb18:	180b883a 	mov	r5,r3
   8bb1c:	e1bff817 	ldw	r6,-32(fp)
   8bb20:	00862080 	call	86208 <memcpy>
      ptr   += n;
   8bb24:	e0fff817 	ldw	r3,-32(fp)
   8bb28:	e0bffa17 	ldw	r2,-24(fp)
   8bb2c:	10c5883a 	add	r2,r2,r3
   8bb30:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   8bb34:	e0fffd17 	ldw	r3,-12(fp)
   8bb38:	e0bff817 	ldw	r2,-32(fp)
   8bb3c:	1885c83a 	sub	r2,r3,r2
   8bb40:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8bb44:	e0fff617 	ldw	r3,-40(fp)
   8bb48:	e0bff817 	ldw	r2,-32(fp)
   8bb4c:	1885883a 	add	r2,r3,r2
   8bb50:	10c1ffcc 	andi	r3,r2,2047
   8bb54:	e0bffb17 	ldw	r2,-20(fp)
   8bb58:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8bb5c:	e0bffd17 	ldw	r2,-12(fp)
   8bb60:	10800048 	cmpgei	r2,r2,1
   8bb64:	103fcc1e 	bne	r2,zero,8ba98 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   8bb68:	e0fffa17 	ldw	r3,-24(fp)
   8bb6c:	e0bffc17 	ldw	r2,-16(fp)
   8bb70:	1880141e 	bne	r3,r2,8bbc4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8bb74:	e0bffe17 	ldw	r2,-8(fp)
   8bb78:	1090000c 	andi	r2,r2,16384
   8bb7c:	1004c03a 	cmpne	r2,r2,zero
   8bb80:	1000101e 	bne	r2,zero,8bbc4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8bb84:	e0bffb17 	ldw	r2,-20(fp)
   8bb88:	10c00a17 	ldw	r3,40(r2)
   8bb8c:	e0bff717 	ldw	r2,-36(fp)
   8bb90:	1880051e 	bne	r3,r2,8bba8 <altera_avalon_jtag_uart_read+0x13c>
   8bb94:	e0bffb17 	ldw	r2,-20(fp)
   8bb98:	10c00917 	ldw	r3,36(r2)
   8bb9c:	e0bffb17 	ldw	r2,-20(fp)
   8bba0:	10800117 	ldw	r2,4(r2)
   8bba4:	18bff736 	bltu	r3,r2,8bb84 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8bba8:	e0bffb17 	ldw	r2,-20(fp)
   8bbac:	10c00a17 	ldw	r3,40(r2)
   8bbb0:	e0bff717 	ldw	r2,-36(fp)
   8bbb4:	18800326 	beq	r3,r2,8bbc4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8bbb8:	e0bffd17 	ldw	r2,-12(fp)
   8bbbc:	10800048 	cmpgei	r2,r2,1
   8bbc0:	103fb51e 	bne	r2,zero,8ba98 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8bbc4:	e0fffa17 	ldw	r3,-24(fp)
   8bbc8:	e0bffc17 	ldw	r2,-16(fp)
   8bbcc:	18801926 	beq	r3,r2,8bc34 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bbd0:	0005303a 	rdctl	r2,status
   8bbd4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bbd8:	e0fff517 	ldw	r3,-44(fp)
   8bbdc:	00bfff84 	movi	r2,-2
   8bbe0:	1884703a 	and	r2,r3,r2
   8bbe4:	1001703a 	wrctl	status,r2
  
  return context;
   8bbe8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8bbec:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8bbf0:	e0bffb17 	ldw	r2,-20(fp)
   8bbf4:	10800817 	ldw	r2,32(r2)
   8bbf8:	10c00054 	ori	r3,r2,1
   8bbfc:	e0bffb17 	ldw	r2,-20(fp)
   8bc00:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8bc04:	e0bffb17 	ldw	r2,-20(fp)
   8bc08:	10800017 	ldw	r2,0(r2)
   8bc0c:	11000104 	addi	r4,r2,4
   8bc10:	e0bffb17 	ldw	r2,-20(fp)
   8bc14:	10800817 	ldw	r2,32(r2)
   8bc18:	1007883a 	mov	r3,r2
   8bc1c:	2005883a 	mov	r2,r4
   8bc20:	10c00035 	stwio	r3,0(r2)
   8bc24:	e0bff917 	ldw	r2,-28(fp)
   8bc28:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bc2c:	e0bff417 	ldw	r2,-48(fp)
   8bc30:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8bc34:	e0fffa17 	ldw	r3,-24(fp)
   8bc38:	e0bffc17 	ldw	r2,-16(fp)
   8bc3c:	18800526 	beq	r3,r2,8bc54 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   8bc40:	e0fffa17 	ldw	r3,-24(fp)
   8bc44:	e0bffc17 	ldw	r2,-16(fp)
   8bc48:	1887c83a 	sub	r3,r3,r2
   8bc4c:	e0ffff15 	stw	r3,-4(fp)
   8bc50:	00000906 	br	8bc78 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   8bc54:	e0bffe17 	ldw	r2,-8(fp)
   8bc58:	1090000c 	andi	r2,r2,16384
   8bc5c:	1005003a 	cmpeq	r2,r2,zero
   8bc60:	1000031e 	bne	r2,zero,8bc70 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   8bc64:	00bffd44 	movi	r2,-11
   8bc68:	e0bfff15 	stw	r2,-4(fp)
   8bc6c:	00000206 	br	8bc78 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   8bc70:	00bffec4 	movi	r2,-5
   8bc74:	e0bfff15 	stw	r2,-4(fp)
   8bc78:	e0bfff17 	ldw	r2,-4(fp)
}
   8bc7c:	e037883a 	mov	sp,fp
   8bc80:	dfc00117 	ldw	ra,4(sp)
   8bc84:	df000017 	ldw	fp,0(sp)
   8bc88:	dec00204 	addi	sp,sp,8
   8bc8c:	f800283a 	ret

0008bc90 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8bc90:	defff204 	addi	sp,sp,-56
   8bc94:	dfc00d15 	stw	ra,52(sp)
   8bc98:	df000c15 	stw	fp,48(sp)
   8bc9c:	df000c04 	addi	fp,sp,48
   8bca0:	e13ffb15 	stw	r4,-20(fp)
   8bca4:	e17ffc15 	stw	r5,-16(fp)
   8bca8:	e1bffd15 	stw	r6,-12(fp)
   8bcac:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8bcb0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8bcb4:	e0bffc17 	ldw	r2,-16(fp)
   8bcb8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8bcbc:	00003a06 	br	8bda8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8bcc0:	e0bffb17 	ldw	r2,-20(fp)
   8bcc4:	10800c17 	ldw	r2,48(r2)
   8bcc8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   8bccc:	e0bffb17 	ldw	r2,-20(fp)
   8bcd0:	10800d17 	ldw	r2,52(r2)
   8bcd4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   8bcd8:	e0fffa17 	ldw	r3,-24(fp)
   8bcdc:	e0bff917 	ldw	r2,-28(fp)
   8bce0:	1880062e 	bgeu	r3,r2,8bcfc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8bce4:	e0fff917 	ldw	r3,-28(fp)
   8bce8:	e0bffa17 	ldw	r2,-24(fp)
   8bcec:	1885c83a 	sub	r2,r3,r2
   8bcf0:	10bfffc4 	addi	r2,r2,-1
   8bcf4:	e0bff815 	stw	r2,-32(fp)
   8bcf8:	00000c06 	br	8bd2c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   8bcfc:	e0bff917 	ldw	r2,-28(fp)
   8bd00:	1005003a 	cmpeq	r2,r2,zero
   8bd04:	1000051e 	bne	r2,zero,8bd1c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8bd08:	00820004 	movi	r2,2048
   8bd0c:	e0fffa17 	ldw	r3,-24(fp)
   8bd10:	10c5c83a 	sub	r2,r2,r3
   8bd14:	e0bff815 	stw	r2,-32(fp)
   8bd18:	00000406 	br	8bd2c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8bd1c:	0081ffc4 	movi	r2,2047
   8bd20:	e0fffa17 	ldw	r3,-24(fp)
   8bd24:	10c5c83a 	sub	r2,r2,r3
   8bd28:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   8bd2c:	e0bff817 	ldw	r2,-32(fp)
   8bd30:	1005003a 	cmpeq	r2,r2,zero
   8bd34:	10001f1e 	bne	r2,zero,8bdb4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   8bd38:	e0fffd17 	ldw	r3,-12(fp)
   8bd3c:	e0bff817 	ldw	r2,-32(fp)
   8bd40:	1880022e 	bgeu	r3,r2,8bd4c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   8bd44:	e0bffd17 	ldw	r2,-12(fp)
   8bd48:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8bd4c:	e0bffb17 	ldw	r2,-20(fp)
   8bd50:	10c20e04 	addi	r3,r2,2104
   8bd54:	e0bffa17 	ldw	r2,-24(fp)
   8bd58:	1885883a 	add	r2,r3,r2
   8bd5c:	e0fffc17 	ldw	r3,-16(fp)
   8bd60:	1009883a 	mov	r4,r2
   8bd64:	180b883a 	mov	r5,r3
   8bd68:	e1bff817 	ldw	r6,-32(fp)
   8bd6c:	00862080 	call	86208 <memcpy>
      ptr   += n;
   8bd70:	e0fff817 	ldw	r3,-32(fp)
   8bd74:	e0bffc17 	ldw	r2,-16(fp)
   8bd78:	10c5883a 	add	r2,r2,r3
   8bd7c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   8bd80:	e0fffd17 	ldw	r3,-12(fp)
   8bd84:	e0bff817 	ldw	r2,-32(fp)
   8bd88:	1885c83a 	sub	r2,r3,r2
   8bd8c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8bd90:	e0fffa17 	ldw	r3,-24(fp)
   8bd94:	e0bff817 	ldw	r2,-32(fp)
   8bd98:	1885883a 	add	r2,r3,r2
   8bd9c:	10c1ffcc 	andi	r3,r2,2047
   8bda0:	e0bffb17 	ldw	r2,-20(fp)
   8bda4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8bda8:	e0bffd17 	ldw	r2,-12(fp)
   8bdac:	10800048 	cmpgei	r2,r2,1
   8bdb0:	103fc31e 	bne	r2,zero,8bcc0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bdb4:	0005303a 	rdctl	r2,status
   8bdb8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bdbc:	e0fff517 	ldw	r3,-44(fp)
   8bdc0:	00bfff84 	movi	r2,-2
   8bdc4:	1884703a 	and	r2,r3,r2
   8bdc8:	1001703a 	wrctl	status,r2
  
  return context;
   8bdcc:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8bdd0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8bdd4:	e0bffb17 	ldw	r2,-20(fp)
   8bdd8:	10800817 	ldw	r2,32(r2)
   8bddc:	10c00094 	ori	r3,r2,2
   8bde0:	e0bffb17 	ldw	r2,-20(fp)
   8bde4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8bde8:	e0bffb17 	ldw	r2,-20(fp)
   8bdec:	10800017 	ldw	r2,0(r2)
   8bdf0:	11000104 	addi	r4,r2,4
   8bdf4:	e0bffb17 	ldw	r2,-20(fp)
   8bdf8:	10800817 	ldw	r2,32(r2)
   8bdfc:	1007883a 	mov	r3,r2
   8be00:	2005883a 	mov	r2,r4
   8be04:	10c00035 	stwio	r3,0(r2)
   8be08:	e0bff717 	ldw	r2,-36(fp)
   8be0c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8be10:	e0bff417 	ldw	r2,-48(fp)
   8be14:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8be18:	e0bffd17 	ldw	r2,-12(fp)
   8be1c:	10800050 	cmplti	r2,r2,1
   8be20:	1000111e 	bne	r2,zero,8be68 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   8be24:	e0bffe17 	ldw	r2,-8(fp)
   8be28:	1090000c 	andi	r2,r2,16384
   8be2c:	1004c03a 	cmpne	r2,r2,zero
   8be30:	1000101e 	bne	r2,zero,8be74 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8be34:	e0bffb17 	ldw	r2,-20(fp)
   8be38:	10c00d17 	ldw	r3,52(r2)
   8be3c:	e0bff917 	ldw	r2,-28(fp)
   8be40:	1880051e 	bne	r3,r2,8be58 <altera_avalon_jtag_uart_write+0x1c8>
   8be44:	e0bffb17 	ldw	r2,-20(fp)
   8be48:	10c00917 	ldw	r3,36(r2)
   8be4c:	e0bffb17 	ldw	r2,-20(fp)
   8be50:	10800117 	ldw	r2,4(r2)
   8be54:	18bff736 	bltu	r3,r2,8be34 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   8be58:	e0bffb17 	ldw	r2,-20(fp)
   8be5c:	10c00d17 	ldw	r3,52(r2)
   8be60:	e0bff917 	ldw	r2,-28(fp)
   8be64:	18800326 	beq	r3,r2,8be74 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   8be68:	e0bffd17 	ldw	r2,-12(fp)
   8be6c:	10800048 	cmpgei	r2,r2,1
   8be70:	103fcd1e 	bne	r2,zero,8bda8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8be74:	e0fffc17 	ldw	r3,-16(fp)
   8be78:	e0bff617 	ldw	r2,-40(fp)
   8be7c:	18800526 	beq	r3,r2,8be94 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   8be80:	e0fffc17 	ldw	r3,-16(fp)
   8be84:	e0bff617 	ldw	r2,-40(fp)
   8be88:	1887c83a 	sub	r3,r3,r2
   8be8c:	e0ffff15 	stw	r3,-4(fp)
   8be90:	00000906 	br	8beb8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   8be94:	e0bffe17 	ldw	r2,-8(fp)
   8be98:	1090000c 	andi	r2,r2,16384
   8be9c:	1005003a 	cmpeq	r2,r2,zero
   8bea0:	1000031e 	bne	r2,zero,8beb0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   8bea4:	00bffd44 	movi	r2,-11
   8bea8:	e0bfff15 	stw	r2,-4(fp)
   8beac:	00000206 	br	8beb8 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   8beb0:	00bffec4 	movi	r2,-5
   8beb4:	e0bfff15 	stw	r2,-4(fp)
   8beb8:	e0bfff17 	ldw	r2,-4(fp)
}
   8bebc:	e037883a 	mov	sp,fp
   8bec0:	dfc00117 	ldw	ra,4(sp)
   8bec4:	df000017 	ldw	fp,0(sp)
   8bec8:	dec00204 	addi	sp,sp,8
   8becc:	f800283a 	ret

0008bed0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8bed0:	defff404 	addi	sp,sp,-48
   8bed4:	df000b15 	stw	fp,44(sp)
   8bed8:	df000b04 	addi	fp,sp,44
   8bedc:	e13ffb15 	stw	r4,-20(fp)
   8bee0:	e17ffc15 	stw	r5,-16(fp)
   8bee4:	e1bffd15 	stw	r6,-12(fp)
   8bee8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8beec:	e03ff915 	stw	zero,-28(fp)
   8bef0:	00800274 	movhi	r2,9
   8bef4:	10849a04 	addi	r2,r2,4712
   8bef8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   8befc:	1005003a 	cmpeq	r2,r2,zero
   8bf00:	1000411e 	bne	r2,zero,8c008 <alt_alarm_start+0x138>
  {
    if (alarm)
   8bf04:	e0bffb17 	ldw	r2,-20(fp)
   8bf08:	1005003a 	cmpeq	r2,r2,zero
   8bf0c:	10003b1e 	bne	r2,zero,8bffc <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   8bf10:	e0fffb17 	ldw	r3,-20(fp)
   8bf14:	e0bffd17 	ldw	r2,-12(fp)
   8bf18:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   8bf1c:	e0fffb17 	ldw	r3,-20(fp)
   8bf20:	e0bffe17 	ldw	r2,-8(fp)
   8bf24:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bf28:	0005303a 	rdctl	r2,status
   8bf2c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bf30:	e0fff817 	ldw	r3,-32(fp)
   8bf34:	00bfff84 	movi	r2,-2
   8bf38:	1884703a 	and	r2,r3,r2
   8bf3c:	1001703a 	wrctl	status,r2
  
  return context;
   8bf40:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   8bf44:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8bf48:	00800274 	movhi	r2,9
   8bf4c:	10849b04 	addi	r2,r2,4716
   8bf50:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   8bf54:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   8bf58:	e0fffc17 	ldw	r3,-16(fp)
   8bf5c:	e0bff917 	ldw	r2,-28(fp)
   8bf60:	1885883a 	add	r2,r3,r2
   8bf64:	10c00044 	addi	r3,r2,1
   8bf68:	e0bffb17 	ldw	r2,-20(fp)
   8bf6c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8bf70:	e0bffb17 	ldw	r2,-20(fp)
   8bf74:	10c00217 	ldw	r3,8(r2)
   8bf78:	e0bff917 	ldw	r2,-28(fp)
   8bf7c:	1880042e 	bgeu	r3,r2,8bf90 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   8bf80:	e0fffb17 	ldw	r3,-20(fp)
   8bf84:	00800044 	movi	r2,1
   8bf88:	18800405 	stb	r2,16(r3)
   8bf8c:	00000206 	br	8bf98 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   8bf90:	e0bffb17 	ldw	r2,-20(fp)
   8bf94:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8bf98:	e0fffb17 	ldw	r3,-20(fp)
   8bf9c:	00800274 	movhi	r2,9
   8bfa0:	10bd3a04 	addi	r2,r2,-2840
   8bfa4:	e0bff615 	stw	r2,-40(fp)
   8bfa8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8bfac:	e0fff717 	ldw	r3,-36(fp)
   8bfb0:	e0bff617 	ldw	r2,-40(fp)
   8bfb4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   8bfb8:	e0bff617 	ldw	r2,-40(fp)
   8bfbc:	10c00017 	ldw	r3,0(r2)
   8bfc0:	e0bff717 	ldw	r2,-36(fp)
   8bfc4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8bfc8:	e0bff617 	ldw	r2,-40(fp)
   8bfcc:	10c00017 	ldw	r3,0(r2)
   8bfd0:	e0bff717 	ldw	r2,-36(fp)
   8bfd4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   8bfd8:	e0fff617 	ldw	r3,-40(fp)
   8bfdc:	e0bff717 	ldw	r2,-36(fp)
   8bfe0:	18800015 	stw	r2,0(r3)
   8bfe4:	e0bffa17 	ldw	r2,-24(fp)
   8bfe8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bfec:	e0bff517 	ldw	r2,-44(fp)
   8bff0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   8bff4:	e03fff15 	stw	zero,-4(fp)
   8bff8:	00000506 	br	8c010 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   8bffc:	00bffa84 	movi	r2,-22
   8c000:	e0bfff15 	stw	r2,-4(fp)
   8c004:	00000206 	br	8c010 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   8c008:	00bfde84 	movi	r2,-134
   8c00c:	e0bfff15 	stw	r2,-4(fp)
   8c010:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   8c014:	e037883a 	mov	sp,fp
   8c018:	df000017 	ldw	fp,0(sp)
   8c01c:	dec00104 	addi	sp,sp,4
   8c020:	f800283a 	ret

0008c024 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8c024:	deffff04 	addi	sp,sp,-4
   8c028:	df000015 	stw	fp,0(sp)
   8c02c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8c030:	e037883a 	mov	sp,fp
   8c034:	df000017 	ldw	fp,0(sp)
   8c038:	dec00104 	addi	sp,sp,4
   8c03c:	f800283a 	ret

0008c040 <alt_dev_llist_insert>:
   8c040:	defff904 	addi	sp,sp,-28
   8c044:	dfc00615 	stw	ra,24(sp)
   8c048:	df000515 	stw	fp,20(sp)
   8c04c:	df000504 	addi	fp,sp,20
   8c050:	e13ffd15 	stw	r4,-12(fp)
   8c054:	e17ffe15 	stw	r5,-8(fp)
   8c058:	e0bffd17 	ldw	r2,-12(fp)
   8c05c:	1005003a 	cmpeq	r2,r2,zero
   8c060:	1000041e 	bne	r2,zero,8c074 <alt_dev_llist_insert+0x34>
   8c064:	e0bffd17 	ldw	r2,-12(fp)
   8c068:	10800217 	ldw	r2,8(r2)
   8c06c:	1004c03a 	cmpne	r2,r2,zero
   8c070:	1000071e 	bne	r2,zero,8c090 <alt_dev_llist_insert+0x50>
   8c074:	008c0f40 	call	8c0f4 <alt_get_errno>
   8c078:	1007883a 	mov	r3,r2
   8c07c:	00800584 	movi	r2,22
   8c080:	18800015 	stw	r2,0(r3)
   8c084:	00bffa84 	movi	r2,-22
   8c088:	e0bfff15 	stw	r2,-4(fp)
   8c08c:	00001306 	br	8c0dc <alt_dev_llist_insert+0x9c>
   8c090:	e0fffd17 	ldw	r3,-12(fp)
   8c094:	e0bffe17 	ldw	r2,-8(fp)
   8c098:	e0bffb15 	stw	r2,-20(fp)
   8c09c:	e0fffc15 	stw	r3,-16(fp)
   8c0a0:	e0fffc17 	ldw	r3,-16(fp)
   8c0a4:	e0bffb17 	ldw	r2,-20(fp)
   8c0a8:	18800115 	stw	r2,4(r3)
   8c0ac:	e0bffb17 	ldw	r2,-20(fp)
   8c0b0:	10c00017 	ldw	r3,0(r2)
   8c0b4:	e0bffc17 	ldw	r2,-16(fp)
   8c0b8:	10c00015 	stw	r3,0(r2)
   8c0bc:	e0bffb17 	ldw	r2,-20(fp)
   8c0c0:	10c00017 	ldw	r3,0(r2)
   8c0c4:	e0bffc17 	ldw	r2,-16(fp)
   8c0c8:	18800115 	stw	r2,4(r3)
   8c0cc:	e0fffb17 	ldw	r3,-20(fp)
   8c0d0:	e0bffc17 	ldw	r2,-16(fp)
   8c0d4:	18800015 	stw	r2,0(r3)
   8c0d8:	e03fff15 	stw	zero,-4(fp)
   8c0dc:	e0bfff17 	ldw	r2,-4(fp)
   8c0e0:	e037883a 	mov	sp,fp
   8c0e4:	dfc00117 	ldw	ra,4(sp)
   8c0e8:	df000017 	ldw	fp,0(sp)
   8c0ec:	dec00204 	addi	sp,sp,8
   8c0f0:	f800283a 	ret

0008c0f4 <alt_get_errno>:
   8c0f4:	defffd04 	addi	sp,sp,-12
   8c0f8:	dfc00215 	stw	ra,8(sp)
   8c0fc:	df000115 	stw	fp,4(sp)
   8c100:	df000104 	addi	fp,sp,4
   8c104:	00800274 	movhi	r2,9
   8c108:	10bd3704 	addi	r2,r2,-2852
   8c10c:	10800017 	ldw	r2,0(r2)
   8c110:	1005003a 	cmpeq	r2,r2,zero
   8c114:	1000061e 	bne	r2,zero,8c130 <alt_get_errno+0x3c>
   8c118:	00800274 	movhi	r2,9
   8c11c:	10bd3704 	addi	r2,r2,-2852
   8c120:	10800017 	ldw	r2,0(r2)
   8c124:	103ee83a 	callr	r2
   8c128:	e0bfff15 	stw	r2,-4(fp)
   8c12c:	00000306 	br	8c13c <alt_get_errno+0x48>
   8c130:	00800274 	movhi	r2,9
   8c134:	10849504 	addi	r2,r2,4692
   8c138:	e0bfff15 	stw	r2,-4(fp)
   8c13c:	e0bfff17 	ldw	r2,-4(fp)
   8c140:	e037883a 	mov	sp,fp
   8c144:	dfc00117 	ldw	ra,4(sp)
   8c148:	df000017 	ldw	fp,0(sp)
   8c14c:	dec00204 	addi	sp,sp,8
   8c150:	f800283a 	ret

0008c154 <_do_ctors>:
   8c154:	defffd04 	addi	sp,sp,-12
   8c158:	dfc00215 	stw	ra,8(sp)
   8c15c:	df000115 	stw	fp,4(sp)
   8c160:	df000104 	addi	fp,sp,4
   8c164:	00bfff04 	movi	r2,-4
   8c168:	00c00274 	movhi	r3,9
   8c16c:	18f46304 	addi	r3,r3,-11892
   8c170:	1885883a 	add	r2,r3,r2
   8c174:	e0bfff15 	stw	r2,-4(fp)
   8c178:	00000606 	br	8c194 <_do_ctors+0x40>
   8c17c:	e0bfff17 	ldw	r2,-4(fp)
   8c180:	10800017 	ldw	r2,0(r2)
   8c184:	103ee83a 	callr	r2
   8c188:	e0bfff17 	ldw	r2,-4(fp)
   8c18c:	10bfff04 	addi	r2,r2,-4
   8c190:	e0bfff15 	stw	r2,-4(fp)
   8c194:	e0ffff17 	ldw	r3,-4(fp)
   8c198:	00800274 	movhi	r2,9
   8c19c:	10b46204 	addi	r2,r2,-11896
   8c1a0:	18bff62e 	bgeu	r3,r2,8c17c <_do_ctors+0x28>
   8c1a4:	e037883a 	mov	sp,fp
   8c1a8:	dfc00117 	ldw	ra,4(sp)
   8c1ac:	df000017 	ldw	fp,0(sp)
   8c1b0:	dec00204 	addi	sp,sp,8
   8c1b4:	f800283a 	ret

0008c1b8 <_do_dtors>:
   8c1b8:	defffd04 	addi	sp,sp,-12
   8c1bc:	dfc00215 	stw	ra,8(sp)
   8c1c0:	df000115 	stw	fp,4(sp)
   8c1c4:	df000104 	addi	fp,sp,4
   8c1c8:	00bfff04 	movi	r2,-4
   8c1cc:	00c00274 	movhi	r3,9
   8c1d0:	18f46304 	addi	r3,r3,-11892
   8c1d4:	1885883a 	add	r2,r3,r2
   8c1d8:	e0bfff15 	stw	r2,-4(fp)
   8c1dc:	00000606 	br	8c1f8 <_do_dtors+0x40>
   8c1e0:	e0bfff17 	ldw	r2,-4(fp)
   8c1e4:	10800017 	ldw	r2,0(r2)
   8c1e8:	103ee83a 	callr	r2
   8c1ec:	e0bfff17 	ldw	r2,-4(fp)
   8c1f0:	10bfff04 	addi	r2,r2,-4
   8c1f4:	e0bfff15 	stw	r2,-4(fp)
   8c1f8:	e0ffff17 	ldw	r3,-4(fp)
   8c1fc:	00800274 	movhi	r2,9
   8c200:	10b46304 	addi	r2,r2,-11892
   8c204:	18bff62e 	bgeu	r3,r2,8c1e0 <_do_dtors+0x28>
   8c208:	e037883a 	mov	sp,fp
   8c20c:	dfc00117 	ldw	ra,4(sp)
   8c210:	df000017 	ldw	fp,0(sp)
   8c214:	dec00204 	addi	sp,sp,8
   8c218:	f800283a 	ret

0008c21c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   8c21c:	deffff04 	addi	sp,sp,-4
   8c220:	df000015 	stw	fp,0(sp)
   8c224:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   8c228:	e037883a 	mov	sp,fp
   8c22c:	df000017 	ldw	fp,0(sp)
   8c230:	dec00104 	addi	sp,sp,4
   8c234:	f800283a 	ret

0008c238 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8c238:	defff904 	addi	sp,sp,-28
   8c23c:	dfc00615 	stw	ra,24(sp)
   8c240:	df000515 	stw	fp,20(sp)
   8c244:	df000504 	addi	fp,sp,20
   8c248:	e13ffc15 	stw	r4,-16(fp)
   8c24c:	e17ffd15 	stw	r5,-12(fp)
   8c250:	e1bffe15 	stw	r6,-8(fp)
   8c254:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8c258:	e0800217 	ldw	r2,8(fp)
   8c25c:	d8800015 	stw	r2,0(sp)
   8c260:	e13ffc17 	ldw	r4,-16(fp)
   8c264:	e17ffd17 	ldw	r5,-12(fp)
   8c268:	e1bffe17 	ldw	r6,-8(fp)
   8c26c:	e1ffff17 	ldw	r7,-4(fp)
   8c270:	008c40c0 	call	8c40c <alt_iic_isr_register>
}  
   8c274:	e037883a 	mov	sp,fp
   8c278:	dfc00117 	ldw	ra,4(sp)
   8c27c:	df000017 	ldw	fp,0(sp)
   8c280:	dec00204 	addi	sp,sp,8
   8c284:	f800283a 	ret

0008c288 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8c288:	defff904 	addi	sp,sp,-28
   8c28c:	df000615 	stw	fp,24(sp)
   8c290:	df000604 	addi	fp,sp,24
   8c294:	e13ffe15 	stw	r4,-8(fp)
   8c298:	e17fff15 	stw	r5,-4(fp)
   8c29c:	e0bfff17 	ldw	r2,-4(fp)
   8c2a0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c2a4:	0005303a 	rdctl	r2,status
   8c2a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c2ac:	e0fffb17 	ldw	r3,-20(fp)
   8c2b0:	00bfff84 	movi	r2,-2
   8c2b4:	1884703a 	and	r2,r3,r2
   8c2b8:	1001703a 	wrctl	status,r2
  
  return context;
   8c2bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8c2c0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   8c2c4:	e0fffc17 	ldw	r3,-16(fp)
   8c2c8:	00800044 	movi	r2,1
   8c2cc:	10c4983a 	sll	r2,r2,r3
   8c2d0:	1007883a 	mov	r3,r2
   8c2d4:	00800274 	movhi	r2,9
   8c2d8:	10849904 	addi	r2,r2,4708
   8c2dc:	10800017 	ldw	r2,0(r2)
   8c2e0:	1886b03a 	or	r3,r3,r2
   8c2e4:	00800274 	movhi	r2,9
   8c2e8:	10849904 	addi	r2,r2,4708
   8c2ec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8c2f0:	00800274 	movhi	r2,9
   8c2f4:	10849904 	addi	r2,r2,4708
   8c2f8:	10800017 	ldw	r2,0(r2)
   8c2fc:	100170fa 	wrctl	ienable,r2
   8c300:	e0bffd17 	ldw	r2,-12(fp)
   8c304:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c308:	e0bffa17 	ldw	r2,-24(fp)
   8c30c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8c310:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   8c314:	e037883a 	mov	sp,fp
   8c318:	df000017 	ldw	fp,0(sp)
   8c31c:	dec00104 	addi	sp,sp,4
   8c320:	f800283a 	ret

0008c324 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8c324:	defff904 	addi	sp,sp,-28
   8c328:	df000615 	stw	fp,24(sp)
   8c32c:	df000604 	addi	fp,sp,24
   8c330:	e13ffe15 	stw	r4,-8(fp)
   8c334:	e17fff15 	stw	r5,-4(fp)
   8c338:	e0bfff17 	ldw	r2,-4(fp)
   8c33c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c340:	0005303a 	rdctl	r2,status
   8c344:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c348:	e0fffb17 	ldw	r3,-20(fp)
   8c34c:	00bfff84 	movi	r2,-2
   8c350:	1884703a 	and	r2,r3,r2
   8c354:	1001703a 	wrctl	status,r2
  
  return context;
   8c358:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8c35c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   8c360:	e0fffc17 	ldw	r3,-16(fp)
   8c364:	00800044 	movi	r2,1
   8c368:	10c4983a 	sll	r2,r2,r3
   8c36c:	0084303a 	nor	r2,zero,r2
   8c370:	1007883a 	mov	r3,r2
   8c374:	00800274 	movhi	r2,9
   8c378:	10849904 	addi	r2,r2,4708
   8c37c:	10800017 	ldw	r2,0(r2)
   8c380:	1886703a 	and	r3,r3,r2
   8c384:	00800274 	movhi	r2,9
   8c388:	10849904 	addi	r2,r2,4708
   8c38c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8c390:	00800274 	movhi	r2,9
   8c394:	10849904 	addi	r2,r2,4708
   8c398:	10800017 	ldw	r2,0(r2)
   8c39c:	100170fa 	wrctl	ienable,r2
   8c3a0:	e0bffd17 	ldw	r2,-12(fp)
   8c3a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c3a8:	e0bffa17 	ldw	r2,-24(fp)
   8c3ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8c3b0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   8c3b4:	e037883a 	mov	sp,fp
   8c3b8:	df000017 	ldw	fp,0(sp)
   8c3bc:	dec00104 	addi	sp,sp,4
   8c3c0:	f800283a 	ret

0008c3c4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   8c3c4:	defffc04 	addi	sp,sp,-16
   8c3c8:	df000315 	stw	fp,12(sp)
   8c3cc:	df000304 	addi	fp,sp,12
   8c3d0:	e13ffe15 	stw	r4,-8(fp)
   8c3d4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8c3d8:	000530fa 	rdctl	r2,ienable
   8c3dc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8c3e0:	e0ffff17 	ldw	r3,-4(fp)
   8c3e4:	00800044 	movi	r2,1
   8c3e8:	10c4983a 	sll	r2,r2,r3
   8c3ec:	1007883a 	mov	r3,r2
   8c3f0:	e0bffd17 	ldw	r2,-12(fp)
   8c3f4:	1884703a 	and	r2,r3,r2
   8c3f8:	1004c03a 	cmpne	r2,r2,zero
}
   8c3fc:	e037883a 	mov	sp,fp
   8c400:	df000017 	ldw	fp,0(sp)
   8c404:	dec00104 	addi	sp,sp,4
   8c408:	f800283a 	ret

0008c40c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8c40c:	defff404 	addi	sp,sp,-48
   8c410:	dfc00b15 	stw	ra,44(sp)
   8c414:	df000a15 	stw	fp,40(sp)
   8c418:	df000a04 	addi	fp,sp,40
   8c41c:	e13ffb15 	stw	r4,-20(fp)
   8c420:	e17ffc15 	stw	r5,-16(fp)
   8c424:	e1bffd15 	stw	r6,-12(fp)
   8c428:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   8c42c:	00bffa84 	movi	r2,-22
   8c430:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8c434:	e0bffc17 	ldw	r2,-16(fp)
   8c438:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8c43c:	e0bff917 	ldw	r2,-28(fp)
   8c440:	10800808 	cmpgei	r2,r2,32
   8c444:	1000291e 	bne	r2,zero,8c4ec <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c448:	0005303a 	rdctl	r2,status
   8c44c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c450:	e0fff717 	ldw	r3,-36(fp)
   8c454:	00bfff84 	movi	r2,-2
   8c458:	1884703a 	and	r2,r3,r2
   8c45c:	1001703a 	wrctl	status,r2
  
  return context;
   8c460:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8c464:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   8c468:	e0bff917 	ldw	r2,-28(fp)
   8c46c:	00c00274 	movhi	r3,9
   8c470:	18c4a604 	addi	r3,r3,4760
   8c474:	100490fa 	slli	r2,r2,3
   8c478:	10c7883a 	add	r3,r2,r3
   8c47c:	e0bffd17 	ldw	r2,-12(fp)
   8c480:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   8c484:	e0bff917 	ldw	r2,-28(fp)
   8c488:	00c00274 	movhi	r3,9
   8c48c:	18c4a604 	addi	r3,r3,4760
   8c490:	100490fa 	slli	r2,r2,3
   8c494:	10c5883a 	add	r2,r2,r3
   8c498:	10c00104 	addi	r3,r2,4
   8c49c:	e0bffe17 	ldw	r2,-8(fp)
   8c4a0:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8c4a4:	e0bffd17 	ldw	r2,-12(fp)
   8c4a8:	1005003a 	cmpeq	r2,r2,zero
   8c4ac:	1000051e 	bne	r2,zero,8c4c4 <alt_iic_isr_register+0xb8>
   8c4b0:	e17ff917 	ldw	r5,-28(fp)
   8c4b4:	e13ffb17 	ldw	r4,-20(fp)
   8c4b8:	008c2880 	call	8c288 <alt_ic_irq_enable>
   8c4bc:	e0bfff15 	stw	r2,-4(fp)
   8c4c0:	00000406 	br	8c4d4 <alt_iic_isr_register+0xc8>
   8c4c4:	e17ff917 	ldw	r5,-28(fp)
   8c4c8:	e13ffb17 	ldw	r4,-20(fp)
   8c4cc:	008c3240 	call	8c324 <alt_ic_irq_disable>
   8c4d0:	e0bfff15 	stw	r2,-4(fp)
   8c4d4:	e0bfff17 	ldw	r2,-4(fp)
   8c4d8:	e0bffa15 	stw	r2,-24(fp)
   8c4dc:	e0bff817 	ldw	r2,-32(fp)
   8c4e0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c4e4:	e0bff617 	ldw	r2,-40(fp)
   8c4e8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8c4ec:	e0bffa17 	ldw	r2,-24(fp)
}
   8c4f0:	e037883a 	mov	sp,fp
   8c4f4:	dfc00117 	ldw	ra,4(sp)
   8c4f8:	df000017 	ldw	fp,0(sp)
   8c4fc:	dec00204 	addi	sp,sp,8
   8c500:	f800283a 	ret

0008c504 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   8c504:	defff804 	addi	sp,sp,-32
   8c508:	dfc00715 	stw	ra,28(sp)
   8c50c:	df000615 	stw	fp,24(sp)
   8c510:	dc000515 	stw	r16,20(sp)
   8c514:	df000504 	addi	fp,sp,20
   8c518:	e13ffc15 	stw	r4,-16(fp)
   8c51c:	e17ffd15 	stw	r5,-12(fp)
   8c520:	e1bffe15 	stw	r6,-8(fp)
   8c524:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   8c528:	e13ffd17 	ldw	r4,-12(fp)
   8c52c:	e17ffe17 	ldw	r5,-8(fp)
   8c530:	e1bfff17 	ldw	r6,-4(fp)
   8c534:	008c74c0 	call	8c74c <open>
   8c538:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   8c53c:	e0bffb17 	ldw	r2,-20(fp)
   8c540:	1004803a 	cmplt	r2,r2,zero
   8c544:	10001f1e 	bne	r2,zero,8c5c4 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   8c548:	e13ffb17 	ldw	r4,-20(fp)
   8c54c:	04000274 	movhi	r16,9
   8c550:	8438b304 	addi	r16,r16,-7476
   8c554:	01400304 	movi	r5,12
   8c558:	008a1740 	call	8a174 <__mulsi3>
   8c55c:	1405883a 	add	r2,r2,r16
   8c560:	10c00017 	ldw	r3,0(r2)
   8c564:	e0bffc17 	ldw	r2,-16(fp)
   8c568:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8c56c:	e13ffb17 	ldw	r4,-20(fp)
   8c570:	04000274 	movhi	r16,9
   8c574:	8438b304 	addi	r16,r16,-7476
   8c578:	01400304 	movi	r5,12
   8c57c:	008a1740 	call	8a174 <__mulsi3>
   8c580:	1405883a 	add	r2,r2,r16
   8c584:	10800104 	addi	r2,r2,4
   8c588:	10c00017 	ldw	r3,0(r2)
   8c58c:	e0bffc17 	ldw	r2,-16(fp)
   8c590:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8c594:	e13ffb17 	ldw	r4,-20(fp)
   8c598:	04000274 	movhi	r16,9
   8c59c:	8438b304 	addi	r16,r16,-7476
   8c5a0:	01400304 	movi	r5,12
   8c5a4:	008a1740 	call	8a174 <__mulsi3>
   8c5a8:	1405883a 	add	r2,r2,r16
   8c5ac:	10800204 	addi	r2,r2,8
   8c5b0:	10c00017 	ldw	r3,0(r2)
   8c5b4:	e0bffc17 	ldw	r2,-16(fp)
   8c5b8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   8c5bc:	e13ffb17 	ldw	r4,-20(fp)
   8c5c0:	008b0bc0 	call	8b0bc <alt_release_fd>
  }
} 
   8c5c4:	e037883a 	mov	sp,fp
   8c5c8:	dfc00217 	ldw	ra,8(sp)
   8c5cc:	df000117 	ldw	fp,4(sp)
   8c5d0:	dc000017 	ldw	r16,0(sp)
   8c5d4:	dec00304 	addi	sp,sp,12
   8c5d8:	f800283a 	ret

0008c5dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8c5dc:	defffb04 	addi	sp,sp,-20
   8c5e0:	dfc00415 	stw	ra,16(sp)
   8c5e4:	df000315 	stw	fp,12(sp)
   8c5e8:	df000304 	addi	fp,sp,12
   8c5ec:	e13ffd15 	stw	r4,-12(fp)
   8c5f0:	e17ffe15 	stw	r5,-8(fp)
   8c5f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8c5f8:	01000274 	movhi	r4,9
   8c5fc:	2138b604 	addi	r4,r4,-7464
   8c600:	e17ffd17 	ldw	r5,-12(fp)
   8c604:	01800044 	movi	r6,1
   8c608:	01c07fc4 	movi	r7,511
   8c60c:	008c5040 	call	8c504 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   8c610:	01000274 	movhi	r4,9
   8c614:	2138b304 	addi	r4,r4,-7476
   8c618:	e17ffe17 	ldw	r5,-8(fp)
   8c61c:	000d883a 	mov	r6,zero
   8c620:	01c07fc4 	movi	r7,511
   8c624:	008c5040 	call	8c504 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   8c628:	01000274 	movhi	r4,9
   8c62c:	2138b904 	addi	r4,r4,-7452
   8c630:	e17fff17 	ldw	r5,-4(fp)
   8c634:	01800044 	movi	r6,1
   8c638:	01c07fc4 	movi	r7,511
   8c63c:	008c5040 	call	8c504 <alt_open_fd>
}  
   8c640:	e037883a 	mov	sp,fp
   8c644:	dfc00117 	ldw	ra,4(sp)
   8c648:	df000017 	ldw	fp,0(sp)
   8c64c:	dec00204 	addi	sp,sp,8
   8c650:	f800283a 	ret

0008c654 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8c654:	defffa04 	addi	sp,sp,-24
   8c658:	dfc00515 	stw	ra,20(sp)
   8c65c:	df000415 	stw	fp,16(sp)
   8c660:	dc000315 	stw	r16,12(sp)
   8c664:	df000304 	addi	fp,sp,12
   8c668:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8c66c:	e0bffe17 	ldw	r2,-8(fp)
   8c670:	10800217 	ldw	r2,8(r2)
   8c674:	10d00034 	orhi	r3,r2,16384
   8c678:	e0bffe17 	ldw	r2,-8(fp)
   8c67c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8c680:	e03ffd15 	stw	zero,-12(fp)
   8c684:	00002306 	br	8c714 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8c688:	e13ffd17 	ldw	r4,-12(fp)
   8c68c:	04000274 	movhi	r16,9
   8c690:	8438b304 	addi	r16,r16,-7476
   8c694:	01400304 	movi	r5,12
   8c698:	008a1740 	call	8a174 <__mulsi3>
   8c69c:	1405883a 	add	r2,r2,r16
   8c6a0:	10c00017 	ldw	r3,0(r2)
   8c6a4:	e0bffe17 	ldw	r2,-8(fp)
   8c6a8:	10800017 	ldw	r2,0(r2)
   8c6ac:	1880161e 	bne	r3,r2,8c708 <alt_file_locked+0xb4>
   8c6b0:	e13ffd17 	ldw	r4,-12(fp)
   8c6b4:	04000274 	movhi	r16,9
   8c6b8:	8438b304 	addi	r16,r16,-7476
   8c6bc:	01400304 	movi	r5,12
   8c6c0:	008a1740 	call	8a174 <__mulsi3>
   8c6c4:	1405883a 	add	r2,r2,r16
   8c6c8:	10800204 	addi	r2,r2,8
   8c6cc:	10800017 	ldw	r2,0(r2)
   8c6d0:	1004403a 	cmpge	r2,r2,zero
   8c6d4:	10000c1e 	bne	r2,zero,8c708 <alt_file_locked+0xb4>
   8c6d8:	e13ffd17 	ldw	r4,-12(fp)
   8c6dc:	01400304 	movi	r5,12
   8c6e0:	008a1740 	call	8a174 <__mulsi3>
   8c6e4:	1007883a 	mov	r3,r2
   8c6e8:	00800274 	movhi	r2,9
   8c6ec:	10b8b304 	addi	r2,r2,-7476
   8c6f0:	1887883a 	add	r3,r3,r2
   8c6f4:	e0bffe17 	ldw	r2,-8(fp)
   8c6f8:	18800326 	beq	r3,r2,8c708 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   8c6fc:	00bffcc4 	movi	r2,-13
   8c700:	e0bfff15 	stw	r2,-4(fp)
   8c704:	00000a06 	br	8c730 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8c708:	e0bffd17 	ldw	r2,-12(fp)
   8c70c:	10800044 	addi	r2,r2,1
   8c710:	e0bffd15 	stw	r2,-12(fp)
   8c714:	00800274 	movhi	r2,9
   8c718:	10bd3604 	addi	r2,r2,-2856
   8c71c:	10800017 	ldw	r2,0(r2)
   8c720:	1007883a 	mov	r3,r2
   8c724:	e0bffd17 	ldw	r2,-12(fp)
   8c728:	18bfd72e 	bgeu	r3,r2,8c688 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   8c72c:	e03fff15 	stw	zero,-4(fp)
   8c730:	e0bfff17 	ldw	r2,-4(fp)
}
   8c734:	e037883a 	mov	sp,fp
   8c738:	dfc00217 	ldw	ra,8(sp)
   8c73c:	df000117 	ldw	fp,4(sp)
   8c740:	dc000017 	ldw	r16,0(sp)
   8c744:	dec00304 	addi	sp,sp,12
   8c748:	f800283a 	ret

0008c74c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8c74c:	defff404 	addi	sp,sp,-48
   8c750:	dfc00b15 	stw	ra,44(sp)
   8c754:	df000a15 	stw	fp,40(sp)
   8c758:	df000a04 	addi	fp,sp,40
   8c75c:	e13ffb15 	stw	r4,-20(fp)
   8c760:	e17ffc15 	stw	r5,-16(fp)
   8c764:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8c768:	00bfffc4 	movi	r2,-1
   8c76c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   8c770:	00bffb44 	movi	r2,-19
   8c774:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   8c778:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8c77c:	e13ffb17 	ldw	r4,-20(fp)
   8c780:	01400274 	movhi	r5,9
   8c784:	297d3404 	addi	r5,r5,-2864
   8c788:	008cafc0 	call	8cafc <alt_find_dev>
   8c78c:	e0bffa15 	stw	r2,-24(fp)
   8c790:	e0bffa17 	ldw	r2,-24(fp)
   8c794:	1004c03a 	cmpne	r2,r2,zero
   8c798:	1000051e 	bne	r2,zero,8c7b0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8c79c:	e13ffb17 	ldw	r4,-20(fp)
   8c7a0:	008cb900 	call	8cb90 <alt_find_file>
   8c7a4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   8c7a8:	00800044 	movi	r2,1
   8c7ac:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8c7b0:	e0bffa17 	ldw	r2,-24(fp)
   8c7b4:	1005003a 	cmpeq	r2,r2,zero
   8c7b8:	1000311e 	bne	r2,zero,8c880 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   8c7bc:	e13ffa17 	ldw	r4,-24(fp)
   8c7c0:	008ccb00 	call	8ccb0 <alt_get_fd>
   8c7c4:	e0bff815 	stw	r2,-32(fp)
   8c7c8:	e0bff817 	ldw	r2,-32(fp)
   8c7cc:	1004403a 	cmpge	r2,r2,zero
   8c7d0:	1000031e 	bne	r2,zero,8c7e0 <open+0x94>
    {
      status = index;
   8c7d4:	e0bff817 	ldw	r2,-32(fp)
   8c7d8:	e0bff715 	stw	r2,-36(fp)
   8c7dc:	00002a06 	br	8c888 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   8c7e0:	e13ff817 	ldw	r4,-32(fp)
   8c7e4:	01400304 	movi	r5,12
   8c7e8:	008a1740 	call	8a174 <__mulsi3>
   8c7ec:	1007883a 	mov	r3,r2
   8c7f0:	00800274 	movhi	r2,9
   8c7f4:	10b8b304 	addi	r2,r2,-7476
   8c7f8:	1885883a 	add	r2,r3,r2
   8c7fc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8c800:	e0fffc17 	ldw	r3,-16(fp)
   8c804:	00900034 	movhi	r2,16384
   8c808:	10bfffc4 	addi	r2,r2,-1
   8c80c:	1886703a 	and	r3,r3,r2
   8c810:	e0bff917 	ldw	r2,-28(fp)
   8c814:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   8c818:	e0bff617 	ldw	r2,-40(fp)
   8c81c:	1004c03a 	cmpne	r2,r2,zero
   8c820:	1000061e 	bne	r2,zero,8c83c <open+0xf0>
   8c824:	e13ff917 	ldw	r4,-28(fp)
   8c828:	008c6540 	call	8c654 <alt_file_locked>
   8c82c:	e0bff715 	stw	r2,-36(fp)
   8c830:	e0bff717 	ldw	r2,-36(fp)
   8c834:	1004803a 	cmplt	r2,r2,zero
   8c838:	1000131e 	bne	r2,zero,8c888 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8c83c:	e0bffa17 	ldw	r2,-24(fp)
   8c840:	10800317 	ldw	r2,12(r2)
   8c844:	1005003a 	cmpeq	r2,r2,zero
   8c848:	1000091e 	bne	r2,zero,8c870 <open+0x124>
   8c84c:	e0bffa17 	ldw	r2,-24(fp)
   8c850:	10800317 	ldw	r2,12(r2)
   8c854:	e13ff917 	ldw	r4,-28(fp)
   8c858:	e17ffb17 	ldw	r5,-20(fp)
   8c85c:	e1bffc17 	ldw	r6,-16(fp)
   8c860:	e1fffd17 	ldw	r7,-12(fp)
   8c864:	103ee83a 	callr	r2
   8c868:	e0bfff15 	stw	r2,-4(fp)
   8c86c:	00000106 	br	8c874 <open+0x128>
   8c870:	e03fff15 	stw	zero,-4(fp)
   8c874:	e0bfff17 	ldw	r2,-4(fp)
   8c878:	e0bff715 	stw	r2,-36(fp)
   8c87c:	00000206 	br	8c888 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8c880:	00bffb44 	movi	r2,-19
   8c884:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8c888:	e0bff717 	ldw	r2,-36(fp)
   8c88c:	1004403a 	cmpge	r2,r2,zero
   8c890:	1000091e 	bne	r2,zero,8c8b8 <open+0x16c>
  {
    alt_release_fd (index);  
   8c894:	e13ff817 	ldw	r4,-32(fp)
   8c898:	008b0bc0 	call	8b0bc <alt_release_fd>
    ALT_ERRNO = -status;
   8c89c:	008c8d80 	call	8c8d8 <alt_get_errno>
   8c8a0:	e0fff717 	ldw	r3,-36(fp)
   8c8a4:	00c7c83a 	sub	r3,zero,r3
   8c8a8:	10c00015 	stw	r3,0(r2)
    return -1;
   8c8ac:	00bfffc4 	movi	r2,-1
   8c8b0:	e0bffe15 	stw	r2,-8(fp)
   8c8b4:	00000206 	br	8c8c0 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   8c8b8:	e0bff817 	ldw	r2,-32(fp)
   8c8bc:	e0bffe15 	stw	r2,-8(fp)
   8c8c0:	e0bffe17 	ldw	r2,-8(fp)
}
   8c8c4:	e037883a 	mov	sp,fp
   8c8c8:	dfc00117 	ldw	ra,4(sp)
   8c8cc:	df000017 	ldw	fp,0(sp)
   8c8d0:	dec00204 	addi	sp,sp,8
   8c8d4:	f800283a 	ret

0008c8d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8c8d8:	defffd04 	addi	sp,sp,-12
   8c8dc:	dfc00215 	stw	ra,8(sp)
   8c8e0:	df000115 	stw	fp,4(sp)
   8c8e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8c8e8:	00800274 	movhi	r2,9
   8c8ec:	10bd3704 	addi	r2,r2,-2852
   8c8f0:	10800017 	ldw	r2,0(r2)
   8c8f4:	1005003a 	cmpeq	r2,r2,zero
   8c8f8:	1000061e 	bne	r2,zero,8c914 <alt_get_errno+0x3c>
   8c8fc:	00800274 	movhi	r2,9
   8c900:	10bd3704 	addi	r2,r2,-2852
   8c904:	10800017 	ldw	r2,0(r2)
   8c908:	103ee83a 	callr	r2
   8c90c:	e0bfff15 	stw	r2,-4(fp)
   8c910:	00000306 	br	8c920 <alt_get_errno+0x48>
   8c914:	00800274 	movhi	r2,9
   8c918:	10849504 	addi	r2,r2,4692
   8c91c:	e0bfff15 	stw	r2,-4(fp)
   8c920:	e0bfff17 	ldw	r2,-4(fp)
}
   8c924:	e037883a 	mov	sp,fp
   8c928:	dfc00117 	ldw	ra,4(sp)
   8c92c:	df000017 	ldw	fp,0(sp)
   8c930:	dec00204 	addi	sp,sp,8
   8c934:	f800283a 	ret

0008c938 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   8c938:	defffa04 	addi	sp,sp,-24
   8c93c:	df000515 	stw	fp,20(sp)
   8c940:	df000504 	addi	fp,sp,20
   8c944:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c948:	0005303a 	rdctl	r2,status
   8c94c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c950:	e0fffd17 	ldw	r3,-12(fp)
   8c954:	00bfff84 	movi	r2,-2
   8c958:	1884703a 	and	r2,r3,r2
   8c95c:	1001703a 	wrctl	status,r2
  
  return context;
   8c960:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   8c964:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   8c968:	e0bfff17 	ldw	r2,-4(fp)
   8c96c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8c970:	e0bffc17 	ldw	r2,-16(fp)
   8c974:	10c00017 	ldw	r3,0(r2)
   8c978:	e0bffc17 	ldw	r2,-16(fp)
   8c97c:	10800117 	ldw	r2,4(r2)
   8c980:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   8c984:	e0bffc17 	ldw	r2,-16(fp)
   8c988:	10c00117 	ldw	r3,4(r2)
   8c98c:	e0bffc17 	ldw	r2,-16(fp)
   8c990:	10800017 	ldw	r2,0(r2)
   8c994:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8c998:	e0fffc17 	ldw	r3,-16(fp)
   8c99c:	e0bffc17 	ldw	r2,-16(fp)
   8c9a0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   8c9a4:	e0fffc17 	ldw	r3,-16(fp)
   8c9a8:	e0bffc17 	ldw	r2,-16(fp)
   8c9ac:	18800015 	stw	r2,0(r3)
   8c9b0:	e0bffe17 	ldw	r2,-8(fp)
   8c9b4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c9b8:	e0bffb17 	ldw	r2,-20(fp)
   8c9bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8c9c0:	e037883a 	mov	sp,fp
   8c9c4:	df000017 	ldw	fp,0(sp)
   8c9c8:	dec00104 	addi	sp,sp,4
   8c9cc:	f800283a 	ret

0008c9d0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8c9d0:	defffb04 	addi	sp,sp,-20
   8c9d4:	dfc00415 	stw	ra,16(sp)
   8c9d8:	df000315 	stw	fp,12(sp)
   8c9dc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8c9e0:	d0a00f17 	ldw	r2,-32708(gp)
   8c9e4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8c9e8:	d0a77017 	ldw	r2,-25152(gp)
   8c9ec:	10800044 	addi	r2,r2,1
   8c9f0:	d0a77015 	stw	r2,-25152(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8c9f4:	00003106 	br	8cabc <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   8c9f8:	e0bffe17 	ldw	r2,-8(fp)
   8c9fc:	10800017 	ldw	r2,0(r2)
   8ca00:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8ca04:	e0bffe17 	ldw	r2,-8(fp)
   8ca08:	10800403 	ldbu	r2,16(r2)
   8ca0c:	10803fcc 	andi	r2,r2,255
   8ca10:	1005003a 	cmpeq	r2,r2,zero
   8ca14:	1000051e 	bne	r2,zero,8ca2c <alt_tick+0x5c>
   8ca18:	d0a77017 	ldw	r2,-25152(gp)
   8ca1c:	1004c03a 	cmpne	r2,r2,zero
   8ca20:	1000021e 	bne	r2,zero,8ca2c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   8ca24:	e0bffe17 	ldw	r2,-8(fp)
   8ca28:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8ca2c:	e0bffe17 	ldw	r2,-8(fp)
   8ca30:	10c00217 	ldw	r3,8(r2)
   8ca34:	d0a77017 	ldw	r2,-25152(gp)
   8ca38:	10c01e36 	bltu	r2,r3,8cab4 <alt_tick+0xe4>
   8ca3c:	e0bffe17 	ldw	r2,-8(fp)
   8ca40:	10800403 	ldbu	r2,16(r2)
   8ca44:	10803fcc 	andi	r2,r2,255
   8ca48:	1004c03a 	cmpne	r2,r2,zero
   8ca4c:	1000191e 	bne	r2,zero,8cab4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   8ca50:	e0bffe17 	ldw	r2,-8(fp)
   8ca54:	10c00317 	ldw	r3,12(r2)
   8ca58:	e0bffe17 	ldw	r2,-8(fp)
   8ca5c:	11000517 	ldw	r4,20(r2)
   8ca60:	183ee83a 	callr	r3
   8ca64:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8ca68:	e0bffd17 	ldw	r2,-12(fp)
   8ca6c:	1004c03a 	cmpne	r2,r2,zero
   8ca70:	1000031e 	bne	r2,zero,8ca80 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   8ca74:	e13ffe17 	ldw	r4,-8(fp)
   8ca78:	008c9380 	call	8c938 <alt_alarm_stop>
   8ca7c:	00000d06 	br	8cab4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   8ca80:	e0bffe17 	ldw	r2,-8(fp)
   8ca84:	10c00217 	ldw	r3,8(r2)
   8ca88:	e0bffd17 	ldw	r2,-12(fp)
   8ca8c:	1887883a 	add	r3,r3,r2
   8ca90:	e0bffe17 	ldw	r2,-8(fp)
   8ca94:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8ca98:	e0bffe17 	ldw	r2,-8(fp)
   8ca9c:	10c00217 	ldw	r3,8(r2)
   8caa0:	d0a77017 	ldw	r2,-25152(gp)
   8caa4:	1880032e 	bgeu	r3,r2,8cab4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   8caa8:	e0fffe17 	ldw	r3,-8(fp)
   8caac:	00800044 	movi	r2,1
   8cab0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   8cab4:	e0bfff17 	ldw	r2,-4(fp)
   8cab8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8cabc:	d0e00f04 	addi	r3,gp,-32708
   8cac0:	e0bffe17 	ldw	r2,-8(fp)
   8cac4:	10ffcc1e 	bne	r2,r3,8c9f8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   8cac8:	e037883a 	mov	sp,fp
   8cacc:	dfc00117 	ldw	ra,4(sp)
   8cad0:	df000017 	ldw	fp,0(sp)
   8cad4:	dec00204 	addi	sp,sp,8
   8cad8:	f800283a 	ret

0008cadc <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
   8cadc:	deffff04 	addi	sp,sp,-4
   8cae0:	df000015 	stw	fp,0(sp)
   8cae4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   8cae8:	000170fa 	wrctl	ienable,zero
}
   8caec:	e037883a 	mov	sp,fp
   8caf0:	df000017 	ldw	fp,0(sp)
   8caf4:	dec00104 	addi	sp,sp,4
   8caf8:	f800283a 	ret

0008cafc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8cafc:	defff904 	addi	sp,sp,-28
   8cb00:	dfc00615 	stw	ra,24(sp)
   8cb04:	df000515 	stw	fp,20(sp)
   8cb08:	df000504 	addi	fp,sp,20
   8cb0c:	e13ffd15 	stw	r4,-12(fp)
   8cb10:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   8cb14:	e0bffe17 	ldw	r2,-8(fp)
   8cb18:	10800017 	ldw	r2,0(r2)
   8cb1c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   8cb20:	e13ffd17 	ldw	r4,-12(fp)
   8cb24:	0080f240 	call	80f24 <strlen>
   8cb28:	10800044 	addi	r2,r2,1
   8cb2c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8cb30:	00000d06 	br	8cb68 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8cb34:	e0bffc17 	ldw	r2,-16(fp)
   8cb38:	11000217 	ldw	r4,8(r2)
   8cb3c:	e1bffb17 	ldw	r6,-20(fp)
   8cb40:	e17ffd17 	ldw	r5,-12(fp)
   8cb44:	008cdcc0 	call	8cdcc <memcmp>
   8cb48:	1004c03a 	cmpne	r2,r2,zero
   8cb4c:	1000031e 	bne	r2,zero,8cb5c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8cb50:	e0bffc17 	ldw	r2,-16(fp)
   8cb54:	e0bfff15 	stw	r2,-4(fp)
   8cb58:	00000706 	br	8cb78 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   8cb5c:	e0bffc17 	ldw	r2,-16(fp)
   8cb60:	10800017 	ldw	r2,0(r2)
   8cb64:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8cb68:	e0fffe17 	ldw	r3,-8(fp)
   8cb6c:	e0bffc17 	ldw	r2,-16(fp)
   8cb70:	10fff01e 	bne	r2,r3,8cb34 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   8cb74:	e03fff15 	stw	zero,-4(fp)
   8cb78:	e0bfff17 	ldw	r2,-4(fp)
}
   8cb7c:	e037883a 	mov	sp,fp
   8cb80:	dfc00117 	ldw	ra,4(sp)
   8cb84:	df000017 	ldw	fp,0(sp)
   8cb88:	dec00204 	addi	sp,sp,8
   8cb8c:	f800283a 	ret

0008cb90 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8cb90:	defffa04 	addi	sp,sp,-24
   8cb94:	dfc00515 	stw	ra,20(sp)
   8cb98:	df000415 	stw	fp,16(sp)
   8cb9c:	df000404 	addi	fp,sp,16
   8cba0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8cba4:	00800274 	movhi	r2,9
   8cba8:	10bd3204 	addi	r2,r2,-2872
   8cbac:	10800017 	ldw	r2,0(r2)
   8cbb0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8cbb4:	00003306 	br	8cc84 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   8cbb8:	e0bffd17 	ldw	r2,-12(fp)
   8cbbc:	11000217 	ldw	r4,8(r2)
   8cbc0:	0080f240 	call	80f24 <strlen>
   8cbc4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   8cbc8:	e0bffd17 	ldw	r2,-12(fp)
   8cbcc:	10c00217 	ldw	r3,8(r2)
   8cbd0:	e0bffc17 	ldw	r2,-16(fp)
   8cbd4:	1885883a 	add	r2,r3,r2
   8cbd8:	10bfffc4 	addi	r2,r2,-1
   8cbdc:	10800003 	ldbu	r2,0(r2)
   8cbe0:	10803fcc 	andi	r2,r2,255
   8cbe4:	1080201c 	xori	r2,r2,128
   8cbe8:	10bfe004 	addi	r2,r2,-128
   8cbec:	10800bd8 	cmpnei	r2,r2,47
   8cbf0:	1000031e 	bne	r2,zero,8cc00 <alt_find_file+0x70>
    {
      len -= 1;
   8cbf4:	e0bffc17 	ldw	r2,-16(fp)
   8cbf8:	10bfffc4 	addi	r2,r2,-1
   8cbfc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8cc00:	e0bffc17 	ldw	r2,-16(fp)
   8cc04:	1007883a 	mov	r3,r2
   8cc08:	e0bffe17 	ldw	r2,-8(fp)
   8cc0c:	1885883a 	add	r2,r3,r2
   8cc10:	10800003 	ldbu	r2,0(r2)
   8cc14:	10803fcc 	andi	r2,r2,255
   8cc18:	1080201c 	xori	r2,r2,128
   8cc1c:	10bfe004 	addi	r2,r2,-128
   8cc20:	10800be0 	cmpeqi	r2,r2,47
   8cc24:	10000a1e 	bne	r2,zero,8cc50 <alt_find_file+0xc0>
   8cc28:	e0bffc17 	ldw	r2,-16(fp)
   8cc2c:	1007883a 	mov	r3,r2
   8cc30:	e0bffe17 	ldw	r2,-8(fp)
   8cc34:	1885883a 	add	r2,r3,r2
   8cc38:	10800003 	ldbu	r2,0(r2)
   8cc3c:	10803fcc 	andi	r2,r2,255
   8cc40:	1080201c 	xori	r2,r2,128
   8cc44:	10bfe004 	addi	r2,r2,-128
   8cc48:	1004c03a 	cmpne	r2,r2,zero
   8cc4c:	10000a1e 	bne	r2,zero,8cc78 <alt_find_file+0xe8>
   8cc50:	e0bffd17 	ldw	r2,-12(fp)
   8cc54:	11000217 	ldw	r4,8(r2)
   8cc58:	e1bffc17 	ldw	r6,-16(fp)
   8cc5c:	e17ffe17 	ldw	r5,-8(fp)
   8cc60:	008cdcc0 	call	8cdcc <memcmp>
   8cc64:	1004c03a 	cmpne	r2,r2,zero
   8cc68:	1000031e 	bne	r2,zero,8cc78 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   8cc6c:	e0bffd17 	ldw	r2,-12(fp)
   8cc70:	e0bfff15 	stw	r2,-4(fp)
   8cc74:	00000806 	br	8cc98 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   8cc78:	e0bffd17 	ldw	r2,-12(fp)
   8cc7c:	10800017 	ldw	r2,0(r2)
   8cc80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8cc84:	00c00274 	movhi	r3,9
   8cc88:	18fd3204 	addi	r3,r3,-2872
   8cc8c:	e0bffd17 	ldw	r2,-12(fp)
   8cc90:	10ffc91e 	bne	r2,r3,8cbb8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8cc94:	e03fff15 	stw	zero,-4(fp)
   8cc98:	e0bfff17 	ldw	r2,-4(fp)
}
   8cc9c:	e037883a 	mov	sp,fp
   8cca0:	dfc00117 	ldw	ra,4(sp)
   8cca4:	df000017 	ldw	fp,0(sp)
   8cca8:	dec00204 	addi	sp,sp,8
   8ccac:	f800283a 	ret

0008ccb0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   8ccb0:	defffa04 	addi	sp,sp,-24
   8ccb4:	dfc00515 	stw	ra,20(sp)
   8ccb8:	df000415 	stw	fp,16(sp)
   8ccbc:	dc000315 	stw	r16,12(sp)
   8ccc0:	df000304 	addi	fp,sp,12
   8ccc4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   8ccc8:	00bffa04 	movi	r2,-24
   8cccc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8ccd0:	e03ffe15 	stw	zero,-8(fp)
   8ccd4:	00002006 	br	8cd58 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   8ccd8:	e13ffe17 	ldw	r4,-8(fp)
   8ccdc:	04000274 	movhi	r16,9
   8cce0:	8438b304 	addi	r16,r16,-7476
   8cce4:	01400304 	movi	r5,12
   8cce8:	008a1740 	call	8a174 <__mulsi3>
   8ccec:	1405883a 	add	r2,r2,r16
   8ccf0:	10800017 	ldw	r2,0(r2)
   8ccf4:	1004c03a 	cmpne	r2,r2,zero
   8ccf8:	1000141e 	bne	r2,zero,8cd4c <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   8ccfc:	e13ffe17 	ldw	r4,-8(fp)
   8cd00:	04000274 	movhi	r16,9
   8cd04:	8438b304 	addi	r16,r16,-7476
   8cd08:	01400304 	movi	r5,12
   8cd0c:	008a1740 	call	8a174 <__mulsi3>
   8cd10:	1407883a 	add	r3,r2,r16
   8cd14:	e0bfff17 	ldw	r2,-4(fp)
   8cd18:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   8cd1c:	00800274 	movhi	r2,9
   8cd20:	10bd3604 	addi	r2,r2,-2856
   8cd24:	10c00017 	ldw	r3,0(r2)
   8cd28:	e0bffe17 	ldw	r2,-8(fp)
   8cd2c:	1880040e 	bge	r3,r2,8cd40 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   8cd30:	00c00274 	movhi	r3,9
   8cd34:	18fd3604 	addi	r3,r3,-2856
   8cd38:	e0bffe17 	ldw	r2,-8(fp)
   8cd3c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   8cd40:	e0bffe17 	ldw	r2,-8(fp)
   8cd44:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   8cd48:	00000606 	br	8cd64 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8cd4c:	e0bffe17 	ldw	r2,-8(fp)
   8cd50:	10800044 	addi	r2,r2,1
   8cd54:	e0bffe15 	stw	r2,-8(fp)
   8cd58:	e0bffe17 	ldw	r2,-8(fp)
   8cd5c:	10800810 	cmplti	r2,r2,32
   8cd60:	103fdd1e 	bne	r2,zero,8ccd8 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   8cd64:	e0bffd17 	ldw	r2,-12(fp)
}
   8cd68:	e037883a 	mov	sp,fp
   8cd6c:	dfc00217 	ldw	ra,8(sp)
   8cd70:	df000117 	ldw	fp,4(sp)
   8cd74:	dc000017 	ldw	r16,0(sp)
   8cd78:	dec00304 	addi	sp,sp,12
   8cd7c:	f800283a 	ret

0008cd80 <atexit>:
   8cd80:	200b883a 	mov	r5,r4
   8cd84:	000d883a 	mov	r6,zero
   8cd88:	0009883a 	mov	r4,zero
   8cd8c:	000f883a 	mov	r7,zero
   8cd90:	008ce401 	jmpi	8ce40 <__register_exitproc>

0008cd94 <exit>:
   8cd94:	defffe04 	addi	sp,sp,-8
   8cd98:	000b883a 	mov	r5,zero
   8cd9c:	dc000015 	stw	r16,0(sp)
   8cda0:	dfc00115 	stw	ra,4(sp)
   8cda4:	2021883a 	mov	r16,r4
   8cda8:	008cf780 	call	8cf78 <__call_exitprocs>
   8cdac:	00800274 	movhi	r2,9
   8cdb0:	10bd2d04 	addi	r2,r2,-2892
   8cdb4:	11000017 	ldw	r4,0(r2)
   8cdb8:	20800f17 	ldw	r2,60(r4)
   8cdbc:	10000126 	beq	r2,zero,8cdc4 <exit+0x30>
   8cdc0:	103ee83a 	callr	r2
   8cdc4:	8009883a 	mov	r4,r16
   8cdc8:	008d1680 	call	8d168 <_exit>

0008cdcc <memcmp>:
   8cdcc:	00c000c4 	movi	r3,3
   8cdd0:	1980032e 	bgeu	r3,r6,8cde0 <memcmp+0x14>
   8cdd4:	2144b03a 	or	r2,r4,r5
   8cdd8:	10c4703a 	and	r2,r2,r3
   8cddc:	10000f26 	beq	r2,zero,8ce1c <memcmp+0x50>
   8cde0:	31ffffc4 	addi	r7,r6,-1
   8cde4:	3000061e 	bne	r6,zero,8ce00 <memcmp+0x34>
   8cde8:	00000a06 	br	8ce14 <memcmp+0x48>
   8cdec:	39ffffc4 	addi	r7,r7,-1
   8cdf0:	00bfffc4 	movi	r2,-1
   8cdf4:	21000044 	addi	r4,r4,1
   8cdf8:	29400044 	addi	r5,r5,1
   8cdfc:	38800526 	beq	r7,r2,8ce14 <memcmp+0x48>
   8ce00:	20c00003 	ldbu	r3,0(r4)
   8ce04:	28800003 	ldbu	r2,0(r5)
   8ce08:	18bff826 	beq	r3,r2,8cdec <memcmp+0x20>
   8ce0c:	1885c83a 	sub	r2,r3,r2
   8ce10:	f800283a 	ret
   8ce14:	0005883a 	mov	r2,zero
   8ce18:	f800283a 	ret
   8ce1c:	180f883a 	mov	r7,r3
   8ce20:	20c00017 	ldw	r3,0(r4)
   8ce24:	28800017 	ldw	r2,0(r5)
   8ce28:	18bfed1e 	bne	r3,r2,8cde0 <memcmp+0x14>
   8ce2c:	31bfff04 	addi	r6,r6,-4
   8ce30:	21000104 	addi	r4,r4,4
   8ce34:	29400104 	addi	r5,r5,4
   8ce38:	39bff936 	bltu	r7,r6,8ce20 <memcmp+0x54>
   8ce3c:	003fe806 	br	8cde0 <memcmp+0x14>

0008ce40 <__register_exitproc>:
   8ce40:	defffa04 	addi	sp,sp,-24
   8ce44:	00800274 	movhi	r2,9
   8ce48:	10bd2d04 	addi	r2,r2,-2892
   8ce4c:	dc000015 	stw	r16,0(sp)
   8ce50:	14000017 	ldw	r16,0(r2)
   8ce54:	dd000415 	stw	r20,16(sp)
   8ce58:	2829883a 	mov	r20,r5
   8ce5c:	81405217 	ldw	r5,328(r16)
   8ce60:	dcc00315 	stw	r19,12(sp)
   8ce64:	dc800215 	stw	r18,8(sp)
   8ce68:	dc400115 	stw	r17,4(sp)
   8ce6c:	dfc00515 	stw	ra,20(sp)
   8ce70:	2023883a 	mov	r17,r4
   8ce74:	3027883a 	mov	r19,r6
   8ce78:	3825883a 	mov	r18,r7
   8ce7c:	28002526 	beq	r5,zero,8cf14 <__register_exitproc+0xd4>
   8ce80:	29000117 	ldw	r4,4(r5)
   8ce84:	008007c4 	movi	r2,31
   8ce88:	11002716 	blt	r2,r4,8cf28 <__register_exitproc+0xe8>
   8ce8c:	8800101e 	bne	r17,zero,8ced0 <__register_exitproc+0x90>
   8ce90:	2105883a 	add	r2,r4,r4
   8ce94:	1085883a 	add	r2,r2,r2
   8ce98:	20c00044 	addi	r3,r4,1
   8ce9c:	1145883a 	add	r2,r2,r5
   8cea0:	0009883a 	mov	r4,zero
   8cea4:	15000215 	stw	r20,8(r2)
   8cea8:	28c00115 	stw	r3,4(r5)
   8ceac:	2005883a 	mov	r2,r4
   8ceb0:	dfc00517 	ldw	ra,20(sp)
   8ceb4:	dd000417 	ldw	r20,16(sp)
   8ceb8:	dcc00317 	ldw	r19,12(sp)
   8cebc:	dc800217 	ldw	r18,8(sp)
   8cec0:	dc400117 	ldw	r17,4(sp)
   8cec4:	dc000017 	ldw	r16,0(sp)
   8cec8:	dec00604 	addi	sp,sp,24
   8cecc:	f800283a 	ret
   8ced0:	29802204 	addi	r6,r5,136
   8ced4:	00800044 	movi	r2,1
   8ced8:	110e983a 	sll	r7,r2,r4
   8cedc:	30c04017 	ldw	r3,256(r6)
   8cee0:	2105883a 	add	r2,r4,r4
   8cee4:	1085883a 	add	r2,r2,r2
   8cee8:	1185883a 	add	r2,r2,r6
   8ceec:	19c6b03a 	or	r3,r3,r7
   8cef0:	14802015 	stw	r18,128(r2)
   8cef4:	14c00015 	stw	r19,0(r2)
   8cef8:	00800084 	movi	r2,2
   8cefc:	30c04015 	stw	r3,256(r6)
   8cf00:	88bfe31e 	bne	r17,r2,8ce90 <__register_exitproc+0x50>
   8cf04:	30804117 	ldw	r2,260(r6)
   8cf08:	11c4b03a 	or	r2,r2,r7
   8cf0c:	30804115 	stw	r2,260(r6)
   8cf10:	003fdf06 	br	8ce90 <__register_exitproc+0x50>
   8cf14:	00800274 	movhi	r2,9
   8cf18:	1084e604 	addi	r2,r2,5016
   8cf1c:	100b883a 	mov	r5,r2
   8cf20:	80805215 	stw	r2,328(r16)
   8cf24:	003fd606 	br	8ce80 <__register_exitproc+0x40>
   8cf28:	00800034 	movhi	r2,0
   8cf2c:	10800004 	addi	r2,r2,0
   8cf30:	1000021e 	bne	r2,zero,8cf3c <__register_exitproc+0xfc>
   8cf34:	013fffc4 	movi	r4,-1
   8cf38:	003fdc06 	br	8ceac <__register_exitproc+0x6c>
   8cf3c:	01006404 	movi	r4,400
   8cf40:	103ee83a 	callr	r2
   8cf44:	1007883a 	mov	r3,r2
   8cf48:	103ffa26 	beq	r2,zero,8cf34 <__register_exitproc+0xf4>
   8cf4c:	80805217 	ldw	r2,328(r16)
   8cf50:	180b883a 	mov	r5,r3
   8cf54:	18000115 	stw	zero,4(r3)
   8cf58:	18800015 	stw	r2,0(r3)
   8cf5c:	80c05215 	stw	r3,328(r16)
   8cf60:	18006215 	stw	zero,392(r3)
   8cf64:	18006315 	stw	zero,396(r3)
   8cf68:	0009883a 	mov	r4,zero
   8cf6c:	883fc826 	beq	r17,zero,8ce90 <__register_exitproc+0x50>
   8cf70:	003fd706 	br	8ced0 <__register_exitproc+0x90>

0008cf74 <register_fini>:
   8cf74:	f800283a 	ret

0008cf78 <__call_exitprocs>:
   8cf78:	00800274 	movhi	r2,9
   8cf7c:	10bd2d04 	addi	r2,r2,-2892
   8cf80:	10800017 	ldw	r2,0(r2)
   8cf84:	defff304 	addi	sp,sp,-52
   8cf88:	df000b15 	stw	fp,44(sp)
   8cf8c:	d8800115 	stw	r2,4(sp)
   8cf90:	00800034 	movhi	r2,0
   8cf94:	10800004 	addi	r2,r2,0
   8cf98:	1005003a 	cmpeq	r2,r2,zero
   8cf9c:	d8800215 	stw	r2,8(sp)
   8cfa0:	d8800117 	ldw	r2,4(sp)
   8cfa4:	dd400815 	stw	r21,32(sp)
   8cfa8:	dd000715 	stw	r20,28(sp)
   8cfac:	10805204 	addi	r2,r2,328
   8cfb0:	dfc00c15 	stw	ra,48(sp)
   8cfb4:	ddc00a15 	stw	r23,40(sp)
   8cfb8:	dd800915 	stw	r22,36(sp)
   8cfbc:	dcc00615 	stw	r19,24(sp)
   8cfc0:	dc800515 	stw	r18,20(sp)
   8cfc4:	dc400415 	stw	r17,16(sp)
   8cfc8:	dc000315 	stw	r16,12(sp)
   8cfcc:	282b883a 	mov	r21,r5
   8cfd0:	2039883a 	mov	fp,r4
   8cfd4:	d8800015 	stw	r2,0(sp)
   8cfd8:	2829003a 	cmpeq	r20,r5,zero
   8cfdc:	d8800117 	ldw	r2,4(sp)
   8cfe0:	14405217 	ldw	r17,328(r2)
   8cfe4:	88001026 	beq	r17,zero,8d028 <__call_exitprocs+0xb0>
   8cfe8:	ddc00017 	ldw	r23,0(sp)
   8cfec:	88800117 	ldw	r2,4(r17)
   8cff0:	8c802204 	addi	r18,r17,136
   8cff4:	143fffc4 	addi	r16,r2,-1
   8cff8:	80000916 	blt	r16,zero,8d020 <__call_exitprocs+0xa8>
   8cffc:	05bfffc4 	movi	r22,-1
   8d000:	a000151e 	bne	r20,zero,8d058 <__call_exitprocs+0xe0>
   8d004:	8409883a 	add	r4,r16,r16
   8d008:	2105883a 	add	r2,r4,r4
   8d00c:	1485883a 	add	r2,r2,r18
   8d010:	10c02017 	ldw	r3,128(r2)
   8d014:	a8c01126 	beq	r21,r3,8d05c <__call_exitprocs+0xe4>
   8d018:	843fffc4 	addi	r16,r16,-1
   8d01c:	85bff81e 	bne	r16,r22,8d000 <__call_exitprocs+0x88>
   8d020:	d8800217 	ldw	r2,8(sp)
   8d024:	10003126 	beq	r2,zero,8d0ec <__call_exitprocs+0x174>
   8d028:	dfc00c17 	ldw	ra,48(sp)
   8d02c:	df000b17 	ldw	fp,44(sp)
   8d030:	ddc00a17 	ldw	r23,40(sp)
   8d034:	dd800917 	ldw	r22,36(sp)
   8d038:	dd400817 	ldw	r21,32(sp)
   8d03c:	dd000717 	ldw	r20,28(sp)
   8d040:	dcc00617 	ldw	r19,24(sp)
   8d044:	dc800517 	ldw	r18,20(sp)
   8d048:	dc400417 	ldw	r17,16(sp)
   8d04c:	dc000317 	ldw	r16,12(sp)
   8d050:	dec00d04 	addi	sp,sp,52
   8d054:	f800283a 	ret
   8d058:	8409883a 	add	r4,r16,r16
   8d05c:	88c00117 	ldw	r3,4(r17)
   8d060:	2105883a 	add	r2,r4,r4
   8d064:	1445883a 	add	r2,r2,r17
   8d068:	18ffffc4 	addi	r3,r3,-1
   8d06c:	11800217 	ldw	r6,8(r2)
   8d070:	1c001526 	beq	r3,r16,8d0c8 <__call_exitprocs+0x150>
   8d074:	10000215 	stw	zero,8(r2)
   8d078:	303fe726 	beq	r6,zero,8d018 <__call_exitprocs+0xa0>
   8d07c:	00c00044 	movi	r3,1
   8d080:	1c06983a 	sll	r3,r3,r16
   8d084:	90804017 	ldw	r2,256(r18)
   8d088:	8cc00117 	ldw	r19,4(r17)
   8d08c:	1884703a 	and	r2,r3,r2
   8d090:	10001426 	beq	r2,zero,8d0e4 <__call_exitprocs+0x16c>
   8d094:	90804117 	ldw	r2,260(r18)
   8d098:	1884703a 	and	r2,r3,r2
   8d09c:	10000c1e 	bne	r2,zero,8d0d0 <__call_exitprocs+0x158>
   8d0a0:	2105883a 	add	r2,r4,r4
   8d0a4:	1485883a 	add	r2,r2,r18
   8d0a8:	11400017 	ldw	r5,0(r2)
   8d0ac:	e009883a 	mov	r4,fp
   8d0b0:	303ee83a 	callr	r6
   8d0b4:	88800117 	ldw	r2,4(r17)
   8d0b8:	98bfc81e 	bne	r19,r2,8cfdc <__call_exitprocs+0x64>
   8d0bc:	b8800017 	ldw	r2,0(r23)
   8d0c0:	147fd526 	beq	r2,r17,8d018 <__call_exitprocs+0xa0>
   8d0c4:	003fc506 	br	8cfdc <__call_exitprocs+0x64>
   8d0c8:	8c000115 	stw	r16,4(r17)
   8d0cc:	003fea06 	br	8d078 <__call_exitprocs+0x100>
   8d0d0:	2105883a 	add	r2,r4,r4
   8d0d4:	1485883a 	add	r2,r2,r18
   8d0d8:	11000017 	ldw	r4,0(r2)
   8d0dc:	303ee83a 	callr	r6
   8d0e0:	003ff406 	br	8d0b4 <__call_exitprocs+0x13c>
   8d0e4:	303ee83a 	callr	r6
   8d0e8:	003ff206 	br	8d0b4 <__call_exitprocs+0x13c>
   8d0ec:	88800117 	ldw	r2,4(r17)
   8d0f0:	1000081e 	bne	r2,zero,8d114 <__call_exitprocs+0x19c>
   8d0f4:	89000017 	ldw	r4,0(r17)
   8d0f8:	20000726 	beq	r4,zero,8d118 <__call_exitprocs+0x1a0>
   8d0fc:	b9000015 	stw	r4,0(r23)
   8d100:	8809883a 	mov	r4,r17
   8d104:	00000000 	call	0 <__alt_mem_sram-0x80000>
   8d108:	bc400017 	ldw	r17,0(r23)
   8d10c:	883fb71e 	bne	r17,zero,8cfec <__call_exitprocs+0x74>
   8d110:	003fc506 	br	8d028 <__call_exitprocs+0xb0>
   8d114:	89000017 	ldw	r4,0(r17)
   8d118:	882f883a 	mov	r23,r17
   8d11c:	2023883a 	mov	r17,r4
   8d120:	883fb21e 	bne	r17,zero,8cfec <__call_exitprocs+0x74>
   8d124:	003fc006 	br	8d028 <__call_exitprocs+0xb0>

0008d128 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   8d128:	defffd04 	addi	sp,sp,-12
   8d12c:	df000215 	stw	fp,8(sp)
   8d130:	df000204 	addi	fp,sp,8
   8d134:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   8d138:	e0bfff17 	ldw	r2,-4(fp)
   8d13c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   8d140:	e0bffe17 	ldw	r2,-8(fp)
   8d144:	1005003a 	cmpeq	r2,r2,zero
   8d148:	1000021e 	bne	r2,zero,8d154 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   8d14c:	002af070 	cmpltui	zero,zero,43969
   8d150:	00000106 	br	8d158 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   8d154:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   8d158:	e037883a 	mov	sp,fp
   8d15c:	df000017 	ldw	fp,0(sp)
   8d160:	dec00104 	addi	sp,sp,4
   8d164:	f800283a 	ret

0008d168 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   8d168:	defffd04 	addi	sp,sp,-12
   8d16c:	dfc00215 	stw	ra,8(sp)
   8d170:	df000115 	stw	fp,4(sp)
   8d174:	df000104 	addi	fp,sp,4
   8d178:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   8d17c:	e13fff17 	ldw	r4,-4(fp)
   8d180:	008d1280 	call	8d128 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   8d184:	003fff06 	br	8d184 <_exit+0x1c>
   8d188:	0008cf74 	movhi	zero,9021
