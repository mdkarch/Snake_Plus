
snake_software.elf:     file format elf32-littlenios2
snake_software.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0000e048 memsz 0x0000e048 flags r-x
    LOAD off    0x0000f068 vaddr 0x0008e068 paddr 0x0008fda8 align 2**12
         filesz 0x00001d40 memsz 0x00001d40 flags rw-
    LOAD off    0x00011ae8 vaddr 0x00091ae8 paddr 0x00091ae8 align 2**12
         filesz 0x00000000 memsz 0x0000030c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d8e0  000801b4  000801b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005d4  0008da94  0008da94  0000ea94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d40  0008e068  0008fda8  0000f068  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000030c  00091ae8  00091ae8  00011ae8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010da8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cb8  00000000  00000000  00010dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000165d  00000000  00000000  00011a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023d73  00000000  00000000  000130e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007b21  00000000  00000000  00036e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001473c  00000000  00000000  0003e979  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001c10  00000000  00000000  000530b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000022af  00000000  00000000  00054cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c329  00000000  00000000  00056f77  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000632a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  000632b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00067069  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0006706c  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00067071  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  00067072  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  0006707d  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00067088  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000c  00000000  00000000  00067093  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000032  00000000  00000000  0006709f  2**0
                  CONTENTS, READONLY
 25 .jdi          000041ce  00000000  00000000  000670d1  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0002890e  00000000  00000000  0006b29f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b4 l    d  .text	00000000 .text
0008da94 l    d  .rodata	00000000 .rodata
0008e068 l    d  .rwdata	00000000 .rwdata
00091ae8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 PS2.c
00000000 l    df *ABS*	00000000 alt_up_ps2_port.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 main.c
00080dac l     F .text	00000030 moveLeft
00080ddc l     F .text	00000030 moveRight
00080e0c l     F .text	00000030 moveUp
00080e3c l     F .text	00000030 moveDown
00080fbc l     F .text	000001f8 movement
00000000 l    df *ABS*	00000000 ps2_keyboard.c
00000000 l    df *ABS*	00000000 snake.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000818a0 l     F .text	00000058 __sprint_r
0008dd96 l     O .rodata	00000010 blanks.3452
0008dd86 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0008391c l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00085344 l     F .text	00000058 std
00085450 l     F .text	00000008 __fp_lock
00085458 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0008e334 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0008fd74 l     O .rwdata	00000004 charset
0008ddcc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0008df14 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00089804 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0008a930 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0008b26c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008b2cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008b3d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0008b4f4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008b5d4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008b734 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0008b964 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0008fd98 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0008bc1c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008ecf0 l     O .rwdata	00001060 jtag_uart_0
0008bcf4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008bf34 l     F .text	00000228 altera_avalon_jtag_uart_irq
0008c15c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0008c9fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0008ce0c l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0008cf5c l     F .text	000000f8 alt_file_locked
0008d1e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0008d87c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0008da30 l     F .text	00000040 alt_sim_halt
00087134 g     F .text	00000094 _mprec_log10
00087220 g     F .text	00000088 __any_on
000889d8 g     F .text	00000070 _isatty_r
0008deec g     O .rodata	00000028 __mprec_tinytens
0008b794 g     F .text	0000006c alt_main
00081778 g     F .text	000000a0 _puts_r
00091b64 g     O .bss	00000100 alt_irq
00088a48 g     F .text	00000078 _lseek_r
0008fda8 g       *ABS*	00000000 __flash_rwdata_start
0008a324 g     F .text	00000088 __eqdf2
00091df4 g       *ABS*	00000000 __alt_heap_start
0008045c g     F .text	00000030 read_data_reg
00081700 g     F .text	00000044 printf
00080000 g       *ABS*	00000000 __alt_mem_sram
00088490 g     F .text	00000068 __sseek
000853ac g     F .text	000000a4 __sinit
00080428 g     F .text	00000034 read_CE_bit
000860b8 g     F .text	00000084 _setlocale_r
000854ac g     F .text	0000009c __sfmoreglue
0008b820 g     F .text	00000020 __malloc_unlock
00080d68 g     F .text	00000044 removeFood
00086bb0 g     F .text	000000e0 memmove
0008e068 g     O .rwdata	00000198 key_table
0008549c g     F .text	00000010 _cleanup
000872a8 g     F .text	000000bc _Balloc
0008a434 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000000c __reset
000812e0 g     F .text	00000078 get_multi_byte_make_code_index
00080020 g       *ABS*	00000000 __flash_exceptions_start
00088964 g     F .text	00000074 _fstat_r
00091b20 g     O .bss	00000004 errno
00081640 g     F .text	00000064 set_keyboard_rate
00091b28 g     O .bss	00000004 alt_argv
00097d50 g       *ABS*	00000000 _gp
00091aec g     O .bss	00000004 up
000816a4 g     F .text	0000005c reset_keyboard
0008eb70 g     O .rwdata	00000180 alt_fd_list
0008d404 g     F .text	00000094 alt_find_dev
00086b10 g     F .text	000000a0 memcpy
00085490 g     F .text	0000000c _cleanup_r
0008a5cc g     F .text	000000f8 __floatsidf
0008cee4 g     F .text	00000078 alt_io_redirect
0008a544 g     F .text	00000088 __ltdf2
00080318 g     F .text	0000004c clear_FIFO
0008da94 g       *ABS*	00000000 __DTOR_END__
00081818 g     F .text	00000014 puts
000805c4 g     F .text	000000a8 read_data_byte_with_timeout
0008d3e4 g     F .text	00000020 altera_nios2_irq_init
00087084 g     F .text	000000b0 __ratio
0008c374 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00081744 g     F .text	00000034 _printf_r
0008aa6c g     F .text	00000008 __udivsi3
0008b430 g     F .text	000000c4 isatty
0008ddfc g     O .rodata	000000c8 __mprec_tens
0008fd50 g     O .rwdata	00000004 SNAKE_SIZE
00086094 g     F .text	00000008 __locale_charset
00091b14 g     O .bss	00000004 __malloc_top_pad
0008fd70 g     O .rwdata	00000004 __mb_cur_max
0008609c g     F .text	0000000c _localeconv_r
00087a0c g     F .text	0000003c __i2b
00085a78 g     F .text	0000049c __sfvwrite_r
0008fd64 g     O .rwdata	00000004 right
00088418 g     F .text	00000070 _sbrk_r
00088ac0 g     F .text	00000078 _read_r
0008e734 g     O .rwdata	0000000c __lc_ctype
0008fd90 g     O .rwdata	00000004 alt_max_fd
0008af6c g     F .text	00000138 __unpack_d
00088840 g     F .text	00000110 _fclose_r
0008048c g     F .text	00000034 read_num_bytes_available
00085310 g     F .text	00000034 fflush
0008e200 g     O .rwdata	00000066 ascii_codes
00091b18 g     O .bss	00000004 __malloc_max_sbrked_mem
0008fd58 g     O .rwdata	00000004 FOOD_SIZE
000803c4 g     F .text	00000034 read_RI_bit
000804ec g     F .text	00000070 write_data_byte
00089c94 g     F .text	00000074 __adddf3
000801f0 g     F .text	00000058 getInput
00086f64 g     F .text	00000120 __b2d
000891a4 g     F .text	00000660 __umoddi3
0008b640 g     F .text	000000f4 lseek
0008fd6c g     O .rwdata	00000004 _global_impure_ptr
00087db4 g     F .text	000005f4 _realloc_r
00091df4 g       *ABS*	00000000 __bss_end
0008cd14 g     F .text	000000f8 alt_iic_isr_register
0008d2d8 g     F .text	0000010c alt_tick
00080cb0 g     F .text	00000058 updateSnake
00088b38 g     F .text	0000066c __udivdi3
0008dec4 g     O .rodata	00000028 __mprec_bigtens
00087c94 g     F .text	00000120 __s2b
0008a79c g     F .text	00000194 __floatunsidf
00086e84 g     F .text	00000060 __mcmp
000804c0 g     F .text	0000002c read_data_byte
00080c30 g     F .text	00000080 updateBody
00085478 g     F .text	00000018 __fp_lock_all
0008cccc g     F .text	00000048 alt_ic_irq_enabled
0008d240 g     F .text	00000098 alt_alarm_stop
000803f8 g     F .text	00000030 read_RE_bit
00091b30 g     O .bss	00000004 alt_irq_active
00091ae8 g     O .bss	00000004 left
000800ec g     F .exceptions	000000c8 alt_irq_handler
0008eb48 g     O .rwdata	00000028 alt_dev_null
00080364 g     F .text	00000030 write_ctrl_reg
0008c92c g     F .text	0000001c alt_dcache_flush_all
00086d50 g     F .text	00000070 __hi0bits
0008a6c4 g     F .text	000000d8 __fixdfsi
0008fda8 g       *ABS*	00000000 __ram_rwdata_end
0008e2cc g     O .rwdata	00000066 multi_byte_make_code
0008fd88 g     O .rwdata	00000008 alt_dev_list
0008baf8 g     F .text	00000124 write
00091afc g     O .bss	00000004 tail
0008e068 g       *ABS*	00000000 __ram_rodata_end
0008b2f8 g     F .text	000000d8 fstat
00087b74 g     F .text	00000120 __pow5mult
0008055c g     F .text	00000068 write_data_byte_with_ack
00091b08 g     O .bss	00000004 __nlocale_changed
0008aa74 g     F .text	00000008 __umodsi3
00091df4 g       *ABS*	00000000 end
00091b00 g     O .bss	00000004 head
0008be74 g     F .text	000000c0 altera_avalon_jtag_uart_init
0008da90 g       *ABS*	00000000 __CTOR_LIST__
00100000 g       *ABS*	00000000 __alt_stack_pointer
0008abd8 g     F .text	00000080 __clzsi2
0008c598 g     F .text	00000240 altera_avalon_jtag_uart_write
0008539c g     F .text	00000004 __sfp_lock_acquire
00086a2c g     F .text	000000e4 memchr
000818f8 g     F .text	00001ec4 ___vfprintf_internal_r
00085764 g     F .text	00000314 _free_r
0008d880 g     F .text	000001b0 __call_exitprocs
00091b0c g     O .bss	00000004 __mlocale_changed
0008fd7c g     O .rwdata	00000004 __malloc_sbrk_base
000801b4 g     F .text	0000003c _start
00091af0 g     O .bss	00000004 down
00091b34 g     O .bss	00000004 _alt_tick_rate
0008766c g     F .text	0000014c __lshift
00091b38 g     O .bss	00000004 _alt_nticks
0008b840 g     F .text	00000124 read
0008bcb0 g     F .text	00000044 alt_sys_init
0008d748 g     F .text	00000134 __register_exitproc
000877b8 g     F .text	00000254 __multiply
0008c20c g     F .text	00000074 altera_avalon_jtag_uart_close
0008aa7c g     F .text	00000038 __mulsi3
0008e068 g       *ABS*	00000000 __ram_rwdata_start
0008da94 g       *ABS*	00000000 __ram_rodata_start
00091b3c g     O .bss	00000028 __malloc_current_mallinfo
00087364 g     F .text	0000017c __d2b
0008bd2c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0008d5b8 g     F .text	000000d0 alt_get_fd
00080248 g     F .text	000000d0 get_mode
0008b0a4 g     F .text	000000c8 __fpcmp_parts_d
000887d0 g     F .text	00000070 _close_r
00091b04 g     O .bss	00000004 decode_mode
0008d6d4 g     F .text	00000074 memcmp
0008bddc g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00091df4 g       *ABS*	00000000 __alt_stack_base
0008be24 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000837e0 g     F .text	0000013c __swsetup_r
00080960 g     F .text	000002d0 addEnd
0008a0cc g     F .text	00000258 __divdf3
00085548 g     F .text	000000f0 __sfp
000871c8 g     F .text	00000058 __copybits
0008e740 g     O .rwdata	00000408 __malloc_av_
000853a8 g     F .text	00000004 __sinit_lock_release
00089d08 g     F .text	000003c4 __muldf3
00088574 g     F .text	00000060 __sread
0008d498 g     F .text	00000120 alt_find_file
0008c948 g     F .text	000000b4 alt_dev_llist_insert
0008b800 g     F .text	00000020 __malloc_lock
0008ba3c g     F .text	000000bc sbrk
00085114 g     F .text	000001fc _fflush_r
00088708 g     F .text	000000c8 _calloc_r
00091ae8 g       *ABS*	00000000 __bss_start
00086c90 g     F .text	00000098 memset
00081250 g     F .text	00000090 main
00081358 g     F .text	00000078 get_single_byte_make_code_index
00091b2c g     O .bss	00000004 alt_envp
00091b1c g     O .bss	00000004 __malloc_max_total_mem
0008066c g     F .text	00000074 wait_for_ack
0008bd84 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00088488 g     F .text	00000008 __sclose
00100000 g       *ABS*	00000000 __alt_heap_limit
00088950 g     F .text	00000014 fclose
00091c64 g     O .bss	00000190 _atexit0
00083b60 g     F .text	000015b4 _dtoa_r
000862ec g     F .text	00000740 _malloc_r
0008fd94 g     O .rwdata	00000004 alt_errno
00091af8 g     O .bss	00000001 key
00085fdc g     F .text	000000b8 _fwalk
0008a9ac g     F .text	00000060 __divsi3
0008df20 g     O .rodata	00000014 __thenan_df
00080394 g     F .text	00000030 read_ctrl_reg
00085638 g     F .text	0000012c _malloc_trim_r
0008da94 g       *ABS*	00000000 __CTOR_END__
000885d4 g     F .text	000000bc strcmp
0008da94 g       *ABS*	00000000 __flash_rodata_start
0008da94 g       *ABS*	00000000 __DTOR_LIST__
0008fd5c g     O .rwdata	00000004 xCoor
0008a3ac g     F .text	00000088 __nedf2
0008bc7c g     F .text	00000034 alt_irq_init
0008b9c4 g     F .text	00000078 alt_release_fd
0008df34 g     O .rodata	00000100 __clz_tab
00091b10 g     O .bss	00000004 _PathLocale
0008d688 g     F .text	00000014 atexit
00088690 g     F .text	00000078 _write_r
00080830 g     F .text	00000130 traverseList
0008613c g     F .text	0000001c setlocale
0008fd68 g     O .rwdata	00000004 _impure_ptr
00091b24 g     O .bss	00000004 alt_argc
0008cac0 g     F .text	00000064 _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
00086ee4 g     F .text	00000080 __ulp
000883a8 g     F .text	00000040 __isinfd
00085460 g     F .text	00000018 __fp_unlock_all
0008fd80 g     O .rwdata	00000008 alt_fs_list
0008fd54 g     O .rwdata	00000004 offset
00080020 g       *ABS*	00000000 __ram_exceptions_start
000860a8 g     F .text	00000010 localeconv
0008cb40 g     F .text	00000050 alt_ic_isr_register
0008fda8 g       *ABS*	00000000 _edata
00091df4 g       *ABS*	00000000 _end
000806e0 g     F .text	00000114 initSnake
000801b4 g       *ABS*	00000000 __ram_exceptions_end
0008c280 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0008cc2c g     F .text	000000a0 alt_ic_irq_disable
00080e6c g     F .text	00000150 checkFood
000884f8 g     F .text	0000007c __swrite
0008fd78 g     O .rwdata	00000004 __malloc_trim_threshold
0008d69c g     F .text	00000038 exit
00085f14 g     F .text	000000c8 _fwalk_reent
000874e0 g     F .text	0000018c __mdiff
0008aa0c g     F .text	00000060 __modsi3
00100000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
000853a0 g     F .text	00000004 __sfp_lock_release
00080d08 g     F .text	00000060 initFood
0008da70 g     F .text	00000020 _exit
000883e8 g     F .text	00000030 __isnand
0008c7d8 g     F .text	00000154 alt_alarm_start
0008aab4 g     F .text	00000124 __muldi3
000813d0 g     F .text	000001d4 get_next_state
00086158 g     F .text	00000194 __smakebuf_r
0008182c g     F .text	00000074 strlen
0008d054 g     F .text	0000018c open
0008a4bc g     F .text	00000088 __gedf2
000807f4 g     F .text	0000003c abs
0008cb24 g     F .text	0000001c alt_icache_flush_all
000815a4 g     F .text	0000009c read_make_code
0008fd9c g     O .rwdata	00000004 alt_priority_mask
0008cb90 g     F .text	0000009c alt_ic_irq_enable
000837bc g     F .text	00000024 __vfprintf_internal
00089c14 g     F .text	00000080 __subdf3
0008e266 g     O .rwdata	00000066 single_byte_make_code
00086dc0 g     F .text	000000c4 __lo0bits
0008fda0 g     O .rwdata	00000008 alt_alarm_list
0008ca5c g     F .text	00000064 _do_ctors
00091af4 g     O .bss	00000004 status
0008b16c g     F .text	00000100 close
0008fd60 g     O .rwdata	00000004 yCoor
0008b554 g     F .text	00000080 alt_load
0008ac58 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
000853a4 g     F .text	00000004 __sinit_lock_acquire
00087a48 g     F .text	0000012c __multadd
00086d28 g     F .text	00000028 _Bfree
000811b4 g     F .text	0000009c read_make_code_with_timeout



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406d14 	ori	at,at,436
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800fc:	0005313a 	rdctl	r2,ipending
   80100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80110:	00800044 	movi	r2,1
   80114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	e0ffff17 	ldw	r3,-4(fp)
   8011c:	e0bffe17 	ldw	r2,-8(fp)
   80120:	1884703a 	and	r2,r3,r2
   80124:	1005003a 	cmpeq	r2,r2,zero
   80128:	1000161e 	bne	r2,zero,80184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	e0bffd17 	ldw	r2,-12(fp)
   80130:	00c00274 	movhi	r3,9
   80134:	18c6d904 	addi	r3,r3,7012
   80138:	100490fa 	slli	r2,r2,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	11400017 	ldw	r5,0(r2)
   80144:	e0bffd17 	ldw	r2,-12(fp)
   80148:	00c00274 	movhi	r3,9
   8014c:	18c6d904 	addi	r3,r3,7012
   80150:	100490fa 	slli	r2,r2,3
   80154:	10c5883a 	add	r2,r2,r3
   80158:	10800104 	addi	r2,r2,4
   8015c:	11000017 	ldw	r4,0(r2)
   80160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80164:	0005313a 	rdctl	r2,ipending
   80168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   8016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	1004c03a 	cmpne	r2,r2,zero
   8017c:	103fe31e 	bne	r2,zero,8010c <alt_irq_handler+0x20>
   80180:	00000706 	br	801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80184:	e0bffe17 	ldw	r2,-8(fp)
   80188:	1085883a 	add	r2,r2,r2
   8018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80190:	e0bffd17 	ldw	r2,-12(fp)
   80194:	10800044 	addi	r2,r2,1
   80198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   8019c:	003fde06 	br	80118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a0:	e037883a 	mov	sp,fp
   801a4:	dfc00117 	ldw	ra,4(sp)
   801a8:	df000017 	ldw	fp,0(sp)
   801ac:	dec00204 	addi	sp,sp,8
   801b0:	f800283a 	ret

Disassembly of section .text:

000801b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b4:	06c00434 	movhi	sp,16
    ori sp, sp, %lo(__alt_stack_pointer)
   801b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801bc:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   801c0:	d69f5414 	ori	gp,gp,32080
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c4:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   801c8:	1086ba14 	ori	r2,r2,6888

    movhi r3, %hi(__bss_end)
   801cc:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   801d0:	18c77d14 	ori	r3,r3,7668

    beq r2, r3, 1f
   801d4:	10c00326 	beq	r2,r3,801e4 <_start+0x30>

0:
    stw zero, (r2)
   801d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e0:	10fffd36 	bltu	r2,r3,801d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e4:	008b5540 	call	8b554 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801e8:	008b7940 	call	8b794 <alt_main>

000801ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801ec:	003fff06 	br	801ec <alt_after_alt_main>

000801f0 <getInput>:
#include <io.h>
#include <system.h>
#include <stdio.h>

char* getInput()
{
   801f0:	defffd04 	addi	sp,sp,-12
   801f4:	dfc00215 	stw	ra,8(sp)
   801f8:	df000115 	stw	fp,4(sp)
   801fc:	df000104 	addi	fp,sp,4
	char* code;
	while(!IORD_8DIRECT(PS2_BASE, 0));
   80200:	00800434 	movhi	r2,16
   80204:	10841004 	addi	r2,r2,4160
   80208:	10800023 	ldbuio	r2,0(r2)
   8020c:	1005003a 	cmpeq	r2,r2,zero
   80210:	103ffb1e 	bne	r2,zero,80200 <getInput+0x10>
	code = IORD_8DIRECT(PS2_BASE,4);
   80214:	00800434 	movhi	r2,16
   80218:	10841104 	addi	r2,r2,4164
   8021c:	10800023 	ldbuio	r2,0(r2)
   80220:	e0bfff15 	stw	r2,-4(fp)
	printf("Key recieved: %x", code);
   80224:	01000274 	movhi	r4,9
   80228:	2136a504 	addi	r4,r4,-9580
   8022c:	e17fff17 	ldw	r5,-4(fp)
   80230:	00817000 	call	81700 <printf>

}
   80234:	e037883a 	mov	sp,fp
   80238:	dfc00117 	ldw	ra,4(sp)
   8023c:	df000017 	ldw	fp,0(sp)
   80240:	dec00204 	addi	sp,sp,8
   80244:	f800283a 	ret

00080248 <get_mode>:
#include <nios2.h>
#include "alt_up_ps2_port.h"

PS2_DEVICE get_mode()
{
   80248:	defffb04 	addi	sp,sp,-20
   8024c:	dfc00415 	stw	ra,16(sp)
   80250:	df000315 	stw	fp,12(sp)
   80254:	df000304 	addi	fp,sp,12
  alt_u8 byte;
  //send the reset request, wait for ACK
  int status = write_data_byte_with_ack(0xff, DEFAULT_PS2_TIMEOUT_VAL);
   80258:	01003fc4 	movi	r4,255
   8025c:	014002f4 	movhi	r5,11
   80260:	296b9804 	addi	r5,r5,-20896
   80264:	008055c0 	call	8055c <write_data_byte_with_ack>
   80268:	e0bffd15 	stw	r2,-12(fp)
  if (status == PS2_SUCCESS) {
   8026c:	e0bffd17 	ldw	r2,-12(fp)
   80270:	1004c03a 	cmpne	r2,r2,zero
   80274:	1000201e 	bne	r2,zero,802f8 <get_mode+0xb0>
    // reset succeed, now try to get the BAT result, AA means passed
    status = read_data_byte_with_timeout(&byte, DEFAULT_PS2_TIMEOUT_VAL);
   80278:	e13ffe04 	addi	r4,fp,-8
   8027c:	014002f4 	movhi	r5,11
   80280:	296b9804 	addi	r5,r5,-20896
   80284:	00805c40 	call	805c4 <read_data_byte_with_timeout>
   80288:	e0bffd15 	stw	r2,-12(fp)
    if (status == PS2_SUCCESS && byte == 0xAA) {
   8028c:	e0bffd17 	ldw	r2,-12(fp)
   80290:	1004c03a 	cmpne	r2,r2,zero
   80294:	1000181e 	bne	r2,zero,802f8 <get_mode+0xb0>
   80298:	e0bffe03 	ldbu	r2,-8(fp)
   8029c:	10803fcc 	andi	r2,r2,255
   802a0:	10802a98 	cmpnei	r2,r2,170
   802a4:	1000141e 	bne	r2,zero,802f8 <get_mode+0xb0>
      //get the 2nd byte
      status = read_data_byte_with_timeout(&byte, DEFAULT_PS2_TIMEOUT_VAL);
   802a8:	e13ffe04 	addi	r4,fp,-8
   802ac:	014002f4 	movhi	r5,11
   802b0:	296b9804 	addi	r5,r5,-20896
   802b4:	00805c40 	call	805c4 <read_data_byte_with_timeout>
   802b8:	e0bffd15 	stw	r2,-12(fp)
      if (status == PS2_TIMEOUT) {
   802bc:	e0bffd17 	ldw	r2,-12(fp)
   802c0:	10bfffd8 	cmpnei	r2,r2,-1
   802c4:	1000031e 	bne	r2,zero,802d4 <get_mode+0x8c>
	//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
	return PS2_KEYBOARD;
   802c8:	00800044 	movi	r2,1
   802cc:	e0bfff15 	stw	r2,-4(fp)
   802d0:	00000b06 	br	80300 <get_mode+0xb8>
      } else if (status == PS2_SUCCESS && byte == 0x00) {
   802d4:	e0bffd17 	ldw	r2,-12(fp)
   802d8:	1004c03a 	cmpne	r2,r2,zero
   802dc:	1000061e 	bne	r2,zero,802f8 <get_mode+0xb0>
   802e0:	e0bffe03 	ldbu	r2,-8(fp)
   802e4:	10803fcc 	andi	r2,r2,255
   802e8:	1004c03a 	cmpne	r2,r2,zero
   802ec:	1000021e 	bne	r2,zero,802f8 <get_mode+0xb0>
	//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
	return PS2_MOUSE;
   802f0:	e03fff15 	stw	zero,-4(fp)
   802f4:	00000206 	br	80300 <get_mode+0xb8>
      }
    }
  }
  // when writing data to the PS/2 device, error occurs...
  return PS2_UNKNOWN;
   802f8:	00800084 	movi	r2,2
   802fc:	e0bfff15 	stw	r2,-4(fp)
   80300:	e0bfff17 	ldw	r2,-4(fp)
}
   80304:	e037883a 	mov	sp,fp
   80308:	dfc00117 	ldw	ra,4(sp)
   8030c:	df000017 	ldw	fp,0(sp)
   80310:	dec00204 	addi	sp,sp,8
   80314:	f800283a 	ret

00080318 <clear_FIFO>:

void clear_FIFO()
{
   80318:	defffc04 	addi	sp,sp,-16
   8031c:	dfc00315 	stw	ra,12(sp)
   80320:	df000215 	stw	fp,8(sp)
   80324:	df000204 	addi	fp,sp,8
  // The DATA byte of the data register will be automatically cleared after
  // a read, so we simply keep reading it until there are no available bytes
  alt_u16 num = 0;
   80328:	e03fff0d 	sth	zero,-4(fp)
  alt_u32 data_reg = 0;
   8032c:	e03ffe15 	stw	zero,-8(fp)
  do {
    // read the data register (the DATA byte is cleared)
    data_reg = read_data_reg();
   80330:	008045c0 	call	8045c <read_data_reg>
   80334:	e0bffe15 	stw	r2,-8(fp)
    // get the number of available bytes from the RAVAIL part of data register
    num = read_num_bytes_available(data_reg);
   80338:	e13ffe17 	ldw	r4,-8(fp)
   8033c:	008048c0 	call	8048c <read_num_bytes_available>
   80340:	e0bfff0d 	sth	r2,-4(fp)
  } while (num > 0);
   80344:	e0bfff0b 	ldhu	r2,-4(fp)
   80348:	1004c03a 	cmpne	r2,r2,zero
   8034c:	103ff81e 	bne	r2,zero,80330 <clear_FIFO+0x18>
}
   80350:	e037883a 	mov	sp,fp
   80354:	dfc00117 	ldw	ra,4(sp)
   80358:	df000017 	ldw	fp,0(sp)
   8035c:	dec00204 	addi	sp,sp,8
   80360:	f800283a 	ret

00080364 <write_ctrl_reg>:

////////////////////////////////////////////////////////////
// Control Register Operations
void write_ctrl_reg(alt_u32 ctrl_data)
{
   80364:	defffe04 	addi	sp,sp,-8
   80368:	df000115 	stw	fp,4(sp)
   8036c:	df000104 	addi	fp,sp,4
   80370:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALT_UP_PS2_PORT_CONTROL(PS2_BASE, ctrl_data);
   80374:	e0ffff17 	ldw	r3,-4(fp)
   80378:	00800434 	movhi	r2,16
   8037c:	10841104 	addi	r2,r2,4164
   80380:	10c00035 	stwio	r3,0(r2)
}
   80384:	e037883a 	mov	sp,fp
   80388:	df000017 	ldw	fp,0(sp)
   8038c:	dec00104 	addi	sp,sp,4
   80390:	f800283a 	ret

00080394 <read_ctrl_reg>:

alt_u32 read_ctrl_reg()
{
   80394:	defffe04 	addi	sp,sp,-8
   80398:	df000115 	stw	fp,4(sp)
   8039c:	df000104 	addi	fp,sp,4
  alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CONTROL(PS2_BASE);
   803a0:	00800434 	movhi	r2,16
   803a4:	10841104 	addi	r2,r2,4164
   803a8:	10800037 	ldwio	r2,0(r2)
   803ac:	e0bfff15 	stw	r2,-4(fp)
  return ctrl_reg;
   803b0:	e0bfff17 	ldw	r2,-4(fp)
}
   803b4:	e037883a 	mov	sp,fp
   803b8:	df000017 	ldw	fp,0(sp)
   803bc:	dec00104 	addi	sp,sp,4
   803c0:	f800283a 	ret

000803c4 <read_RI_bit>:

alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   803c4:	defffd04 	addi	sp,sp,-12
   803c8:	df000215 	stw	fp,8(sp)
   803cc:	df000204 	addi	fp,sp,8
   803d0:	e13fff15 	stw	r4,-4(fp)
  alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CONTROL_RI_MSK)
			>> ALT_UP_PS2_PORT_CONTROL_RI_OFST);
   803d4:	e0bfff17 	ldw	r2,-4(fp)
   803d8:	1080400c 	andi	r2,r2,256
   803dc:	1004d23a 	srli	r2,r2,8
   803e0:	e0bffe05 	stb	r2,-8(fp)
  return ri;
   803e4:	e0bffe03 	ldbu	r2,-8(fp)
}
   803e8:	e037883a 	mov	sp,fp
   803ec:	df000017 	ldw	fp,0(sp)
   803f0:	dec00104 	addi	sp,sp,4
   803f4:	f800283a 	ret

000803f8 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   803f8:	defffd04 	addi	sp,sp,-12
   803fc:	df000215 	stw	fp,8(sp)
   80400:	df000204 	addi	fp,sp,8
   80404:	e13fff15 	stw	r4,-4(fp)
  alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CONTROL_RE_MSK)
			>> ALT_UP_PS2_PORT_CONTROL_RE_OFST);
   80408:	e0bfff17 	ldw	r2,-4(fp)
   8040c:	1080004c 	andi	r2,r2,1
   80410:	e0bffe05 	stb	r2,-8(fp)
  return re;
   80414:	e0bffe03 	ldbu	r2,-8(fp)
}
   80418:	e037883a 	mov	sp,fp
   8041c:	df000017 	ldw	fp,0(sp)
   80420:	dec00104 	addi	sp,sp,4
   80424:	f800283a 	ret

00080428 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   80428:	defffd04 	addi	sp,sp,-12
   8042c:	df000215 	stw	fp,8(sp)
   80430:	df000204 	addi	fp,sp,8
   80434:	e13fff15 	stw	r4,-4(fp)
  alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CONTROL_CE_MSK)
			>> ALT_UP_PS2_PORT_CONTROL_CE_OFST);
   80438:	e0bfff17 	ldw	r2,-4(fp)
   8043c:	1081000c 	andi	r2,r2,1024
   80440:	1004d2ba 	srli	r2,r2,10
   80444:	e0bffe05 	stb	r2,-8(fp)
  return re;
   80448:	e0bffe03 	ldbu	r2,-8(fp)
}
   8044c:	e037883a 	mov	sp,fp
   80450:	df000017 	ldw	fp,0(sp)
   80454:	dec00104 	addi	sp,sp,4
   80458:	f800283a 	ret

0008045c <read_data_reg>:

////////////////////////////////////////////////////////////
// Data Register Operations

alt_u32 read_data_reg()
{
   8045c:	defffe04 	addi	sp,sp,-8
   80460:	df000115 	stw	fp,4(sp)
   80464:	df000104 	addi	fp,sp,4
  alt_u32 data_reg = IORD_ALT_UP_PS2_PORT_DATA(PS2_BASE);
   80468:	00800434 	movhi	r2,16
   8046c:	10841004 	addi	r2,r2,4160
   80470:	10800037 	ldwio	r2,0(r2)
   80474:	e0bfff15 	stw	r2,-4(fp)
  return data_reg;
   80478:	e0bfff17 	ldw	r2,-4(fp)
}
   8047c:	e037883a 	mov	sp,fp
   80480:	df000017 	ldw	fp,0(sp)
   80484:	dec00104 	addi	sp,sp,4
   80488:	f800283a 	ret

0008048c <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   8048c:	defffd04 	addi	sp,sp,-12
   80490:	df000215 	stw	fp,8(sp)
   80494:	df000204 	addi	fp,sp,8
   80498:	e13fff15 	stw	r4,-4(fp)
  alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK )
			     >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   8049c:	e0bfff17 	ldw	r2,-4(fp)
   804a0:	10bfffec 	andhi	r2,r2,65535
   804a4:	1004d43a 	srli	r2,r2,16
   804a8:	e0bffe0d 	sth	r2,-8(fp)
  return ravail;
   804ac:	e0bffe0b 	ldhu	r2,-8(fp)
}
   804b0:	e037883a 	mov	sp,fp
   804b4:	df000017 	ldw	fp,0(sp)
   804b8:	dec00104 	addi	sp,sp,4
   804bc:	f800283a 	ret

000804c0 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   804c0:	defffd04 	addi	sp,sp,-12
   804c4:	df000215 	stw	fp,8(sp)
   804c8:	df000204 	addi	fp,sp,8
   804cc:	e13fff15 	stw	r4,-4(fp)
  alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK)
			   >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   804d0:	e0bfff17 	ldw	r2,-4(fp)
   804d4:	e0bffe05 	stb	r2,-8(fp)
  return data;
   804d8:	e0bffe03 	ldbu	r2,-8(fp)
}
   804dc:	e037883a 	mov	sp,fp
   804e0:	df000017 	ldw	fp,0(sp)
   804e4:	dec00104 	addi	sp,sp,4
   804e8:	f800283a 	ret

000804ec <write_data_byte>:

int write_data_byte(alt_u8 byte)
{
   804ec:	defffb04 	addi	sp,sp,-20
   804f0:	dfc00415 	stw	ra,16(sp)
   804f4:	df000315 	stw	fp,12(sp)
   804f8:	df000304 	addi	fp,sp,12
   804fc:	e13ffe05 	stb	r4,-8(fp)
  //note: data are only located at the lower 8 bits
  //note: the software send command to the PS2 peripheral through the data
  //		register rather than the control register
  IOWR_ALT_UP_PS2_PORT_DATA(PS2_BASE, byte);
   80500:	e0fffe03 	ldbu	r3,-8(fp)
   80504:	00800434 	movhi	r2,16
   80508:	10841004 	addi	r2,r2,4160
   8050c:	10c00035 	stwio	r3,0(r2)
  alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_DATA(PS2_BASE);
   80510:	00800434 	movhi	r2,16
   80514:	10841004 	addi	r2,r2,4160
   80518:	10800037 	ldwio	r2,0(r2)
   8051c:	e0bffd15 	stw	r2,-12(fp)
  if ( read_CE_bit(ctrl_reg) ) {
   80520:	e13ffd17 	ldw	r4,-12(fp)
   80524:	00804280 	call	80428 <read_CE_bit>
   80528:	10803fcc 	andi	r2,r2,255
   8052c:	1005003a 	cmpeq	r2,r2,zero
   80530:	1000031e 	bne	r2,zero,80540 <write_data_byte+0x54>
    //CE bit is set --> error occurs on sending commands
    return PS2_ERROR;
   80534:	00bfff84 	movi	r2,-2
   80538:	e0bfff15 	stw	r2,-4(fp)
   8053c:	00000106 	br	80544 <write_data_byte+0x58>
  }
  return PS2_SUCCESS;
   80540:	e03fff15 	stw	zero,-4(fp)
   80544:	e0bfff17 	ldw	r2,-4(fp)
}
   80548:	e037883a 	mov	sp,fp
   8054c:	dfc00117 	ldw	ra,4(sp)
   80550:	df000017 	ldw	fp,0(sp)
   80554:	dec00204 	addi	sp,sp,8
   80558:	f800283a 	ret

0008055c <write_data_byte_with_ack>:

int write_data_byte_with_ack(alt_u8 byte, unsigned timeout)
{
   8055c:	defff904 	addi	sp,sp,-28
   80560:	dfc00615 	stw	ra,24(sp)
   80564:	df000515 	stw	fp,20(sp)
   80568:	df000504 	addi	fp,sp,20
   8056c:	e17ffe15 	stw	r5,-8(fp)
   80570:	e13ffd05 	stb	r4,-12(fp)
  //note: data are only located at the lower 8 bits
  //note: the software send command to the PS2 peripheral through the data
  //		register rather than the control register
  int send_status = write_data_byte(byte);
   80574:	e13ffd03 	ldbu	r4,-12(fp)
   80578:	00804ec0 	call	804ec <write_data_byte>
   8057c:	e0bffc15 	stw	r2,-16(fp)
  if ( send_status != PS2_SUCCESS ) {
   80580:	e0bffc17 	ldw	r2,-16(fp)
   80584:	1005003a 	cmpeq	r2,r2,zero
   80588:	1000031e 	bne	r2,zero,80598 <write_data_byte_with_ack+0x3c>
    // return on sending error
    return send_status;
   8058c:	e0bffc17 	ldw	r2,-16(fp)
   80590:	e0bfff15 	stw	r2,-4(fp)
   80594:	00000506 	br	805ac <write_data_byte_with_ack+0x50>
  }

  int ack_status = wait_for_ack(timeout);
   80598:	e13ffe17 	ldw	r4,-8(fp)
   8059c:	008066c0 	call	8066c <wait_for_ack>
   805a0:	e0bffb15 	stw	r2,-20(fp)
  return ack_status;
   805a4:	e0bffb17 	ldw	r2,-20(fp)
   805a8:	e0bfff15 	stw	r2,-4(fp)
   805ac:	e0bfff17 	ldw	r2,-4(fp)
}
   805b0:	e037883a 	mov	sp,fp
   805b4:	dfc00117 	ldw	ra,4(sp)
   805b8:	df000017 	ldw	fp,0(sp)
   805bc:	dec00204 	addi	sp,sp,8
   805c0:	f800283a 	ret

000805c4 <read_data_byte_with_timeout>:

int read_data_byte_with_timeout(alt_u8 *byte, alt_u32 time_out)
{
   805c4:	defff804 	addi	sp,sp,-32
   805c8:	dfc00715 	stw	ra,28(sp)
   805cc:	df000615 	stw	fp,24(sp)
   805d0:	df000604 	addi	fp,sp,24
   805d4:	e13ffd15 	stw	r4,-12(fp)
   805d8:	e17ffe15 	stw	r5,-8(fp)
  alt_u32 data_reg = 0; 
   805dc:	e03ffc15 	stw	zero,-16(fp)
  alt_u16 num = 0; 
   805e0:	e03ffb0d 	sth	zero,-20(fp)
  alt_u32 count = 0;
   805e4:	e03ffa15 	stw	zero,-24(fp)
   805e8:	00000006 	br	805ec <read_data_byte_with_timeout+0x28>
  for (;;) {
    count++;
   805ec:	e0bffa17 	ldw	r2,-24(fp)
   805f0:	10800044 	addi	r2,r2,1
   805f4:	e0bffa15 	stw	r2,-24(fp)
    data_reg = read_data_reg();
   805f8:	008045c0 	call	8045c <read_data_reg>
   805fc:	e0bffc15 	stw	r2,-16(fp)
    num = read_num_bytes_available(data_reg);
   80600:	e13ffc17 	ldw	r4,-16(fp)
   80604:	008048c0 	call	8048c <read_num_bytes_available>
   80608:	e0bffb0d 	sth	r2,-20(fp)
    if (num > 0) {
   8060c:	e0bffb0b 	ldhu	r2,-20(fp)
   80610:	1005003a 	cmpeq	r2,r2,zero
   80614:	1000071e 	bne	r2,zero,80634 <read_data_byte_with_timeout+0x70>
      *byte = read_data_byte(data_reg);
   80618:	e13ffc17 	ldw	r4,-16(fp)
   8061c:	00804c00 	call	804c0 <read_data_byte>
   80620:	1007883a 	mov	r3,r2
   80624:	e0bffd17 	ldw	r2,-12(fp)
   80628:	10c00005 	stb	r3,0(r2)
      return PS2_SUCCESS;
   8062c:	e03fff15 	stw	zero,-4(fp)
   80630:	00000806 	br	80654 <read_data_byte_with_timeout+0x90>
    }
    //timeout = 0 means to disable the timeout
    if ( time_out!= 0 && count > time_out) {
   80634:	e0bffe17 	ldw	r2,-8(fp)
   80638:	1005003a 	cmpeq	r2,r2,zero
   8063c:	103feb1e 	bne	r2,zero,805ec <read_data_byte_with_timeout+0x28>
   80640:	e0fffa17 	ldw	r3,-24(fp)
   80644:	e0bffe17 	ldw	r2,-8(fp)
   80648:	10ffe82e 	bgeu	r2,r3,805ec <read_data_byte_with_timeout+0x28>
      return PS2_TIMEOUT;
   8064c:	00bfffc4 	movi	r2,-1
   80650:	e0bfff15 	stw	r2,-4(fp)
    }
  }
   80654:	e0bfff17 	ldw	r2,-4(fp)
}
   80658:	e037883a 	mov	sp,fp
   8065c:	dfc00117 	ldw	ra,4(sp)
   80660:	df000017 	ldw	fp,0(sp)
   80664:	dec00204 	addi	sp,sp,8
   80668:	f800283a 	ret

0008066c <wait_for_ack>:

int wait_for_ack(unsigned timeout)
{
   8066c:	defffb04 	addi	sp,sp,-20
   80670:	dfc00415 	stw	ra,16(sp)
   80674:	df000315 	stw	fp,12(sp)
   80678:	df000304 	addi	fp,sp,12
   8067c:	e13ffe15 	stw	r4,-8(fp)
  alt_u8 ack = 0;
   80680:	e03ffd45 	stb	zero,-11(fp)
  alt_u8 data = 0;
   80684:	e03ffd85 	stb	zero,-10(fp)
  alt_u8 status = PS2_SUCCESS;
   80688:	e03ffd05 	stb	zero,-12(fp)
  for (;;) {
    status = read_data_byte_with_timeout(&data, timeout); 
   8068c:	e13ffd84 	addi	r4,fp,-10
   80690:	e17ffe17 	ldw	r5,-8(fp)
   80694:	00805c40 	call	805c4 <read_data_byte_with_timeout>
   80698:	e0bffd05 	stb	r2,-12(fp)
    if ( status == PS2_SUCCESS ) {
   8069c:	e0bffd03 	ldbu	r2,-12(fp)
   806a0:	1004c03a 	cmpne	r2,r2,zero
   806a4:	1000061e 	bne	r2,zero,806c0 <wait_for_ack+0x54>
      if (data == PS2_ACK)
   806a8:	e0bffd83 	ldbu	r2,-10(fp)
   806ac:	10803fcc 	andi	r2,r2,255
   806b0:	10803e98 	cmpnei	r2,r2,250
   806b4:	103ff51e 	bne	r2,zero,8068c <wait_for_ack+0x20>
	return PS2_SUCCESS;
   806b8:	e03fff15 	stw	zero,-4(fp)
   806bc:	00000206 	br	806c8 <wait_for_ack+0x5c>
    } else {
      return status;
   806c0:	e0bffd03 	ldbu	r2,-12(fp)
   806c4:	e0bfff15 	stw	r2,-4(fp)
   806c8:	e0bfff17 	ldw	r2,-4(fp)
    }
  }
  return PS2_TIMEOUT;
}
   806cc:	e037883a 	mov	sp,fp
   806d0:	dfc00117 	ldw	ra,4(sp)
   806d4:	df000017 	ldw	fp,0(sp)
   806d8:	dec00204 	addi	sp,sp,8
   806dc:	f800283a 	ret

000806e0 <initSnake>:
	snake[0]->yCoord = 8;
	printf("snake x: %d y: %d\n",snake[0]->xCoord, snake[0]->yCoord);

}*/

void initSnake(struct Snake *snake[], int xCoord, int yCoord){
   806e0:	defffb04 	addi	sp,sp,-20
   806e4:	df000415 	stw	fp,16(sp)
   806e8:	df000404 	addi	fp,sp,16
   806ec:	e13ffd15 	stw	r4,-12(fp)
   806f0:	e17ffe15 	stw	r5,-8(fp)
   806f4:	e1bfff15 	stw	r6,-4(fp)
	head = 0;
   806f8:	d0276c15 	stw	zero,-25168(gp)
	tail = 1;
   806fc:	00800044 	movi	r2,1
   80700:	d0a76b15 	stw	r2,-25172(gp)
	snake[0]->xCoord = xCoord;
   80704:	e0bffd17 	ldw	r2,-12(fp)
   80708:	10c00017 	ldw	r3,0(r2)
   8070c:	e0bffe17 	ldw	r2,-8(fp)
   80710:	18800015 	stw	r2,0(r3)
	snake[0]->yCoord = yCoord;
   80714:	e0bffd17 	ldw	r2,-12(fp)
   80718:	10c00017 	ldw	r3,0(r2)
   8071c:	e0bfff17 	ldw	r2,-4(fp)
   80720:	18800115 	stw	r2,4(r3)
	snake[0]->enable = 1;
   80724:	e0bffd17 	ldw	r2,-12(fp)
   80728:	10c00017 	ldw	r3,0(r2)
   8072c:	00800044 	movi	r2,1
   80730:	18800215 	stw	r2,8(r3)
	//printf("IN INIT xCoord: %d yCoord: %d\n", xCoord, yCoord);
	//printf("IN INIT x: %d y: %d\n",snake[0]->xCoord, snake[0]->yCoord);

	snake[tail]->xCoord = 8;
   80734:	d0a76b17 	ldw	r2,-25172(gp)
   80738:	1085883a 	add	r2,r2,r2
   8073c:	1085883a 	add	r2,r2,r2
   80740:	1007883a 	mov	r3,r2
   80744:	e0bffd17 	ldw	r2,-12(fp)
   80748:	1885883a 	add	r2,r3,r2
   8074c:	10c00017 	ldw	r3,0(r2)
   80750:	00800204 	movi	r2,8
   80754:	18800015 	stw	r2,0(r3)
	snake[tail]->yCoord = 8;
   80758:	d0a76b17 	ldw	r2,-25172(gp)
   8075c:	1085883a 	add	r2,r2,r2
   80760:	1085883a 	add	r2,r2,r2
   80764:	1007883a 	mov	r3,r2
   80768:	e0bffd17 	ldw	r2,-12(fp)
   8076c:	1885883a 	add	r2,r3,r2
   80770:	10c00017 	ldw	r3,0(r2)
   80774:	00800204 	movi	r2,8
   80778:	18800115 	stw	r2,4(r3)
	snake[tail]->enable = 1;
   8077c:	d0a76b17 	ldw	r2,-25172(gp)
   80780:	1085883a 	add	r2,r2,r2
   80784:	1085883a 	add	r2,r2,r2
   80788:	1007883a 	mov	r3,r2
   8078c:	e0bffd17 	ldw	r2,-12(fp)
   80790:	1885883a 	add	r2,r3,r2
   80794:	10c00017 	ldw	r3,0(r2)
   80798:	00800044 	movi	r2,1
   8079c:	18800215 	stw	r2,8(r3)
	int i;
	for(i = 2; i < SNAKE_SIZE; i++){
   807a0:	00800084 	movi	r2,2
   807a4:	e0bffc15 	stw	r2,-16(fp)
   807a8:	00000b06 	br	807d8 <initSnake+0xf8>
		snake[i]->enable = 0;
   807ac:	e0bffc17 	ldw	r2,-16(fp)
   807b0:	1085883a 	add	r2,r2,r2
   807b4:	1085883a 	add	r2,r2,r2
   807b8:	1007883a 	mov	r3,r2
   807bc:	e0bffd17 	ldw	r2,-12(fp)
   807c0:	1885883a 	add	r2,r3,r2
   807c4:	10800017 	ldw	r2,0(r2)
   807c8:	10000215 	stw	zero,8(r2)

	snake[tail]->xCoord = 8;
	snake[tail]->yCoord = 8;
	snake[tail]->enable = 1;
	int i;
	for(i = 2; i < SNAKE_SIZE; i++){
   807cc:	e0bffc17 	ldw	r2,-16(fp)
   807d0:	10800044 	addi	r2,r2,1
   807d4:	e0bffc15 	stw	r2,-16(fp)
   807d8:	d0e00017 	ldw	r3,-32768(gp)
   807dc:	e0bffc17 	ldw	r2,-16(fp)
   807e0:	10fff216 	blt	r2,r3,807ac <initSnake+0xcc>
		snake[i]->enable = 0;
	}
}
   807e4:	e037883a 	mov	sp,fp
   807e8:	df000017 	ldw	fp,0(sp)
   807ec:	dec00104 	addi	sp,sp,4
   807f0:	f800283a 	ret

000807f4 <abs>:

int abs(int n)
{
   807f4:	defffe04 	addi	sp,sp,-8
   807f8:	df000115 	stw	fp,4(sp)
   807fc:	df000104 	addi	fp,sp,4
   80800:	e13fff15 	stw	r4,-4(fp)
    if (n < 0)
   80804:	e0bfff17 	ldw	r2,-4(fp)
   80808:	1004403a 	cmpge	r2,r2,zero
   8080c:	1000031e 	bne	r2,zero,8081c <abs+0x28>
        n = -n;
   80810:	e0bfff17 	ldw	r2,-4(fp)
   80814:	0085c83a 	sub	r2,zero,r2
   80818:	e0bfff15 	stw	r2,-4(fp)

    return n;
   8081c:	e0bfff17 	ldw	r2,-4(fp)
}
   80820:	e037883a 	mov	sp,fp
   80824:	df000017 	ldw	fp,0(sp)
   80828:	dec00104 	addi	sp,sp,4
   8082c:	f800283a 	ret

00080830 <traverseList>:

/*
 * check collision between head and other parts of body
 */
void traverseList(struct Snake *snake[])
{
   80830:	defff804 	addi	sp,sp,-32
   80834:	dfc00715 	stw	ra,28(sp)
   80838:	df000615 	stw	fp,24(sp)
   8083c:	df000604 	addi	fp,sp,24
   80840:	e13fff15 	stw	r4,-4(fp)
	struct Snake *head = snake[0];
   80844:	e0bfff17 	ldw	r2,-4(fp)
   80848:	10800017 	ldw	r2,0(r2)
   8084c:	e0bffe15 	stw	r2,-8(fp)
	int count = 1;
   80850:	00800044 	movi	r2,1
   80854:	e0bffd15 	stw	r2,-12(fp)
	/* collision offset - distance between two pieces to be considered a collision */
	int col_offset = 14;
   80858:	00800384 	movi	r2,14
   8085c:	e0bffc15 	stw	r2,-16(fp)
	while(snake[count]->enable)
   80860:	00003006 	br	80924 <traverseList+0xf4>
	{
		int xDiff = abs(head->xCoord - snake[count]->xCoord);
   80864:	e0bffe17 	ldw	r2,-8(fp)
   80868:	11000017 	ldw	r4,0(r2)
   8086c:	e0bffd17 	ldw	r2,-12(fp)
   80870:	1085883a 	add	r2,r2,r2
   80874:	1085883a 	add	r2,r2,r2
   80878:	1007883a 	mov	r3,r2
   8087c:	e0bfff17 	ldw	r2,-4(fp)
   80880:	1885883a 	add	r2,r3,r2
   80884:	10800017 	ldw	r2,0(r2)
   80888:	10800017 	ldw	r2,0(r2)
   8088c:	2085c83a 	sub	r2,r4,r2
   80890:	e0bffb15 	stw	r2,-20(fp)
   80894:	e0bffb17 	ldw	r2,-20(fp)
   80898:	1004403a 	cmpge	r2,r2,zero
   8089c:	1000031e 	bne	r2,zero,808ac <traverseList+0x7c>
   808a0:	e0bffb17 	ldw	r2,-20(fp)
   808a4:	0085c83a 	sub	r2,zero,r2
   808a8:	e0bffb15 	stw	r2,-20(fp)
		int yDiff = abs(head->yCoord - snake[count]->yCoord);
   808ac:	e0bffe17 	ldw	r2,-8(fp)
   808b0:	11000117 	ldw	r4,4(r2)
   808b4:	e0bffd17 	ldw	r2,-12(fp)
   808b8:	1085883a 	add	r2,r2,r2
   808bc:	1085883a 	add	r2,r2,r2
   808c0:	1007883a 	mov	r3,r2
   808c4:	e0bfff17 	ldw	r2,-4(fp)
   808c8:	1885883a 	add	r2,r3,r2
   808cc:	10800017 	ldw	r2,0(r2)
   808d0:	10800117 	ldw	r2,4(r2)
   808d4:	2085c83a 	sub	r2,r4,r2
   808d8:	e0bffa15 	stw	r2,-24(fp)
   808dc:	e0bffa17 	ldw	r2,-24(fp)
   808e0:	1004403a 	cmpge	r2,r2,zero
   808e4:	1000031e 	bne	r2,zero,808f4 <traverseList+0xc4>
   808e8:	e0bffa17 	ldw	r2,-24(fp)
   808ec:	0085c83a 	sub	r2,zero,r2
   808f0:	e0bffa15 	stw	r2,-24(fp)
		if(xDiff <= col_offset && yDiff <= col_offset){
   808f4:	e0fffb17 	ldw	r3,-20(fp)
   808f8:	e0bffc17 	ldw	r2,-16(fp)
   808fc:	10c00616 	blt	r2,r3,80918 <traverseList+0xe8>
   80900:	e0fffa17 	ldw	r3,-24(fp)
   80904:	e0bffc17 	ldw	r2,-16(fp)
   80908:	10c00316 	blt	r2,r3,80918 <traverseList+0xe8>
			printf("Collision!");
   8090c:	01000274 	movhi	r4,9
   80910:	2136aa04 	addi	r4,r4,-9560
   80914:	00817000 	call	81700 <printf>
		}
		count++;
   80918:	e0bffd17 	ldw	r2,-12(fp)
   8091c:	10800044 	addi	r2,r2,1
   80920:	e0bffd15 	stw	r2,-12(fp)
{
	struct Snake *head = snake[0];
	int count = 1;
	/* collision offset - distance between two pieces to be considered a collision */
	int col_offset = 14;
	while(snake[count]->enable)
   80924:	e0bffd17 	ldw	r2,-12(fp)
   80928:	1085883a 	add	r2,r2,r2
   8092c:	1085883a 	add	r2,r2,r2
   80930:	1007883a 	mov	r3,r2
   80934:	e0bfff17 	ldw	r2,-4(fp)
   80938:	1885883a 	add	r2,r3,r2
   8093c:	10800017 	ldw	r2,0(r2)
   80940:	10800217 	ldw	r2,8(r2)
   80944:	1004c03a 	cmpne	r2,r2,zero
   80948:	103fc61e 	bne	r2,zero,80864 <traverseList+0x34>
		if(xDiff <= col_offset && yDiff <= col_offset){
			printf("Collision!");
		}
		count++;
	}
};
   8094c:	e037883a 	mov	sp,fp
   80950:	dfc00117 	ldw	ra,4(sp)
   80954:	df000017 	ldw	fp,0(sp)
   80958:	dec00204 	addi	sp,sp,8
   8095c:	f800283a 	ret

00080960 <addEnd>:

void addEnd(struct Snake *snake[], int dir)
{
   80960:	defffd04 	addi	sp,sp,-12
   80964:	df000215 	stw	fp,8(sp)
   80968:	df000204 	addi	fp,sp,8
   8096c:	e13ffe15 	stw	r4,-8(fp)
   80970:	e17fff15 	stw	r5,-4(fp)
	tail++;
   80974:	d0a76b17 	ldw	r2,-25172(gp)
   80978:	10800044 	addi	r2,r2,1
   8097c:	d0a76b15 	stw	r2,-25172(gp)
	snake[tail]->enable = 1;
   80980:	d0a76b17 	ldw	r2,-25172(gp)
   80984:	1085883a 	add	r2,r2,r2
   80988:	1085883a 	add	r2,r2,r2
   8098c:	1007883a 	mov	r3,r2
   80990:	e0bffe17 	ldw	r2,-8(fp)
   80994:	1885883a 	add	r2,r3,r2
   80998:	10c00017 	ldw	r3,0(r2)
   8099c:	00800044 	movi	r2,1
   809a0:	18800215 	stw	r2,8(r3)

	if(dir == 0){//left
   809a4:	e0bfff17 	ldw	r2,-4(fp)
   809a8:	1004c03a 	cmpne	r2,r2,zero
   809ac:	1000251e 	bne	r2,zero,80a44 <addEnd+0xe4>
		snake[tail]->xCoord = snake[tail-1]->xCoord + offset;
   809b0:	d0a76b17 	ldw	r2,-25172(gp)
   809b4:	1085883a 	add	r2,r2,r2
   809b8:	1085883a 	add	r2,r2,r2
   809bc:	1007883a 	mov	r3,r2
   809c0:	e0bffe17 	ldw	r2,-8(fp)
   809c4:	1885883a 	add	r2,r3,r2
   809c8:	11000017 	ldw	r4,0(r2)
   809cc:	d0a76b17 	ldw	r2,-25172(gp)
   809d0:	1085883a 	add	r2,r2,r2
   809d4:	1085883a 	add	r2,r2,r2
   809d8:	1007883a 	mov	r3,r2
   809dc:	e0bffe17 	ldw	r2,-8(fp)
   809e0:	1885883a 	add	r2,r3,r2
   809e4:	10bfff04 	addi	r2,r2,-4
   809e8:	10800017 	ldw	r2,0(r2)
   809ec:	10c00017 	ldw	r3,0(r2)
   809f0:	d0a00117 	ldw	r2,-32764(gp)
   809f4:	1885883a 	add	r2,r3,r2
   809f8:	20800015 	stw	r2,0(r4)
		snake[tail]->yCoord = snake[tail-1]->yCoord;
   809fc:	d0a76b17 	ldw	r2,-25172(gp)
   80a00:	1085883a 	add	r2,r2,r2
   80a04:	1085883a 	add	r2,r2,r2
   80a08:	1007883a 	mov	r3,r2
   80a0c:	e0bffe17 	ldw	r2,-8(fp)
   80a10:	1885883a 	add	r2,r3,r2
   80a14:	11000017 	ldw	r4,0(r2)
   80a18:	d0a76b17 	ldw	r2,-25172(gp)
   80a1c:	1085883a 	add	r2,r2,r2
   80a20:	1085883a 	add	r2,r2,r2
   80a24:	1007883a 	mov	r3,r2
   80a28:	e0bffe17 	ldw	r2,-8(fp)
   80a2c:	1885883a 	add	r2,r3,r2
   80a30:	10bfff04 	addi	r2,r2,-4
   80a34:	10800017 	ldw	r2,0(r2)
   80a38:	10800117 	ldw	r2,4(r2)
   80a3c:	20800115 	stw	r2,4(r4)
   80a40:	00007706 	br	80c20 <addEnd+0x2c0>
	}else if(dir == 1){//right
   80a44:	e0bfff17 	ldw	r2,-4(fp)
   80a48:	10800058 	cmpnei	r2,r2,1
   80a4c:	1000251e 	bne	r2,zero,80ae4 <addEnd+0x184>
		snake[tail]->xCoord = snake[tail-1]->xCoord - offset;
   80a50:	d0a76b17 	ldw	r2,-25172(gp)
   80a54:	1085883a 	add	r2,r2,r2
   80a58:	1085883a 	add	r2,r2,r2
   80a5c:	1007883a 	mov	r3,r2
   80a60:	e0bffe17 	ldw	r2,-8(fp)
   80a64:	1885883a 	add	r2,r3,r2
   80a68:	11000017 	ldw	r4,0(r2)
   80a6c:	d0a76b17 	ldw	r2,-25172(gp)
   80a70:	1085883a 	add	r2,r2,r2
   80a74:	1085883a 	add	r2,r2,r2
   80a78:	1007883a 	mov	r3,r2
   80a7c:	e0bffe17 	ldw	r2,-8(fp)
   80a80:	1885883a 	add	r2,r3,r2
   80a84:	10bfff04 	addi	r2,r2,-4
   80a88:	10800017 	ldw	r2,0(r2)
   80a8c:	10c00017 	ldw	r3,0(r2)
   80a90:	d0a00117 	ldw	r2,-32764(gp)
   80a94:	1885c83a 	sub	r2,r3,r2
   80a98:	20800015 	stw	r2,0(r4)
		snake[tail]->yCoord = snake[tail-1]->yCoord;
   80a9c:	d0a76b17 	ldw	r2,-25172(gp)
   80aa0:	1085883a 	add	r2,r2,r2
   80aa4:	1085883a 	add	r2,r2,r2
   80aa8:	1007883a 	mov	r3,r2
   80aac:	e0bffe17 	ldw	r2,-8(fp)
   80ab0:	1885883a 	add	r2,r3,r2
   80ab4:	11000017 	ldw	r4,0(r2)
   80ab8:	d0a76b17 	ldw	r2,-25172(gp)
   80abc:	1085883a 	add	r2,r2,r2
   80ac0:	1085883a 	add	r2,r2,r2
   80ac4:	1007883a 	mov	r3,r2
   80ac8:	e0bffe17 	ldw	r2,-8(fp)
   80acc:	1885883a 	add	r2,r3,r2
   80ad0:	10bfff04 	addi	r2,r2,-4
   80ad4:	10800017 	ldw	r2,0(r2)
   80ad8:	10800117 	ldw	r2,4(r2)
   80adc:	20800115 	stw	r2,4(r4)
   80ae0:	00004f06 	br	80c20 <addEnd+0x2c0>
	}else if(dir == 2){//up
   80ae4:	e0bfff17 	ldw	r2,-4(fp)
   80ae8:	10800098 	cmpnei	r2,r2,2
   80aec:	1000251e 	bne	r2,zero,80b84 <addEnd+0x224>
		snake[tail]->xCoord = snake[tail-1]->xCoord;
   80af0:	d0a76b17 	ldw	r2,-25172(gp)
   80af4:	1085883a 	add	r2,r2,r2
   80af8:	1085883a 	add	r2,r2,r2
   80afc:	1007883a 	mov	r3,r2
   80b00:	e0bffe17 	ldw	r2,-8(fp)
   80b04:	1885883a 	add	r2,r3,r2
   80b08:	11000017 	ldw	r4,0(r2)
   80b0c:	d0a76b17 	ldw	r2,-25172(gp)
   80b10:	1085883a 	add	r2,r2,r2
   80b14:	1085883a 	add	r2,r2,r2
   80b18:	1007883a 	mov	r3,r2
   80b1c:	e0bffe17 	ldw	r2,-8(fp)
   80b20:	1885883a 	add	r2,r3,r2
   80b24:	10bfff04 	addi	r2,r2,-4
   80b28:	10800017 	ldw	r2,0(r2)
   80b2c:	10800017 	ldw	r2,0(r2)
   80b30:	20800015 	stw	r2,0(r4)
		snake[tail]->yCoord = snake[tail-1]->yCoord + offset;
   80b34:	d0a76b17 	ldw	r2,-25172(gp)
   80b38:	1085883a 	add	r2,r2,r2
   80b3c:	1085883a 	add	r2,r2,r2
   80b40:	1007883a 	mov	r3,r2
   80b44:	e0bffe17 	ldw	r2,-8(fp)
   80b48:	1885883a 	add	r2,r3,r2
   80b4c:	11000017 	ldw	r4,0(r2)
   80b50:	d0a76b17 	ldw	r2,-25172(gp)
   80b54:	1085883a 	add	r2,r2,r2
   80b58:	1085883a 	add	r2,r2,r2
   80b5c:	1007883a 	mov	r3,r2
   80b60:	e0bffe17 	ldw	r2,-8(fp)
   80b64:	1885883a 	add	r2,r3,r2
   80b68:	10bfff04 	addi	r2,r2,-4
   80b6c:	10800017 	ldw	r2,0(r2)
   80b70:	10c00117 	ldw	r3,4(r2)
   80b74:	d0a00117 	ldw	r2,-32764(gp)
   80b78:	1885883a 	add	r2,r3,r2
   80b7c:	20800115 	stw	r2,4(r4)
   80b80:	00002706 	br	80c20 <addEnd+0x2c0>
	}else if(dir == 3){//down
   80b84:	e0bfff17 	ldw	r2,-4(fp)
   80b88:	108000d8 	cmpnei	r2,r2,3
   80b8c:	1000241e 	bne	r2,zero,80c20 <addEnd+0x2c0>
		snake[tail]->xCoord = snake[tail-1]->xCoord;
   80b90:	d0a76b17 	ldw	r2,-25172(gp)
   80b94:	1085883a 	add	r2,r2,r2
   80b98:	1085883a 	add	r2,r2,r2
   80b9c:	1007883a 	mov	r3,r2
   80ba0:	e0bffe17 	ldw	r2,-8(fp)
   80ba4:	1885883a 	add	r2,r3,r2
   80ba8:	11000017 	ldw	r4,0(r2)
   80bac:	d0a76b17 	ldw	r2,-25172(gp)
   80bb0:	1085883a 	add	r2,r2,r2
   80bb4:	1085883a 	add	r2,r2,r2
   80bb8:	1007883a 	mov	r3,r2
   80bbc:	e0bffe17 	ldw	r2,-8(fp)
   80bc0:	1885883a 	add	r2,r3,r2
   80bc4:	10bfff04 	addi	r2,r2,-4
   80bc8:	10800017 	ldw	r2,0(r2)
   80bcc:	10800017 	ldw	r2,0(r2)
   80bd0:	20800015 	stw	r2,0(r4)
		snake[tail]->yCoord = snake[tail-1]->yCoord - offset;
   80bd4:	d0a76b17 	ldw	r2,-25172(gp)
   80bd8:	1085883a 	add	r2,r2,r2
   80bdc:	1085883a 	add	r2,r2,r2
   80be0:	1007883a 	mov	r3,r2
   80be4:	e0bffe17 	ldw	r2,-8(fp)
   80be8:	1885883a 	add	r2,r3,r2
   80bec:	11000017 	ldw	r4,0(r2)
   80bf0:	d0a76b17 	ldw	r2,-25172(gp)
   80bf4:	1085883a 	add	r2,r2,r2
   80bf8:	1085883a 	add	r2,r2,r2
   80bfc:	1007883a 	mov	r3,r2
   80c00:	e0bffe17 	ldw	r2,-8(fp)
   80c04:	1885883a 	add	r2,r3,r2
   80c08:	10bfff04 	addi	r2,r2,-4
   80c0c:	10800017 	ldw	r2,0(r2)
   80c10:	10c00117 	ldw	r3,4(r2)
   80c14:	d0a00117 	ldw	r2,-32764(gp)
   80c18:	1885c83a 	sub	r2,r3,r2
   80c1c:	20800115 	stw	r2,4(r4)
	}
}
   80c20:	e037883a 	mov	sp,fp
   80c24:	df000017 	ldw	fp,0(sp)
   80c28:	dec00104 	addi	sp,sp,4
   80c2c:	f800283a 	ret

00080c30 <updateBody>:

void updateBody(struct Snake *snake[]){
   80c30:	defffd04 	addi	sp,sp,-12
   80c34:	df000215 	stw	fp,8(sp)
   80c38:	df000204 	addi	fp,sp,8
   80c3c:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i = 1; i <= tail; i++){
   80c40:	00800044 	movi	r2,1
   80c44:	e0bffe15 	stw	r2,-8(fp)
   80c48:	00001206 	br	80c94 <updateBody+0x64>
		snake[i] = snake[i-1];
   80c4c:	e0bffe17 	ldw	r2,-8(fp)
   80c50:	1085883a 	add	r2,r2,r2
   80c54:	1085883a 	add	r2,r2,r2
   80c58:	1007883a 	mov	r3,r2
   80c5c:	e0bfff17 	ldw	r2,-4(fp)
   80c60:	1889883a 	add	r4,r3,r2
   80c64:	e0bffe17 	ldw	r2,-8(fp)
   80c68:	1085883a 	add	r2,r2,r2
   80c6c:	1085883a 	add	r2,r2,r2
   80c70:	1007883a 	mov	r3,r2
   80c74:	e0bfff17 	ldw	r2,-4(fp)
   80c78:	1885883a 	add	r2,r3,r2
   80c7c:	10bfff04 	addi	r2,r2,-4
   80c80:	10800017 	ldw	r2,0(r2)
   80c84:	20800015 	stw	r2,0(r4)
	}
}

void updateBody(struct Snake *snake[]){
	int i;
	for(i = 1; i <= tail; i++){
   80c88:	e0bffe17 	ldw	r2,-8(fp)
   80c8c:	10800044 	addi	r2,r2,1
   80c90:	e0bffe15 	stw	r2,-8(fp)
   80c94:	d0e76b17 	ldw	r3,-25172(gp)
   80c98:	e0bffe17 	ldw	r2,-8(fp)
   80c9c:	18bfeb0e 	bge	r3,r2,80c4c <updateBody+0x1c>
		snake[i] = snake[i-1];
	}
}
   80ca0:	e037883a 	mov	sp,fp
   80ca4:	df000017 	ldw	fp,0(sp)
   80ca8:	dec00104 	addi	sp,sp,4
   80cac:	f800283a 	ret

00080cb0 <updateSnake>:

void updateSnake(struct Snake *snake[], int xCoord, int yCoord){
   80cb0:	defffb04 	addi	sp,sp,-20
   80cb4:	dfc00415 	stw	ra,16(sp)
   80cb8:	df000315 	stw	fp,12(sp)
   80cbc:	df000304 	addi	fp,sp,12
   80cc0:	e13ffd15 	stw	r4,-12(fp)
   80cc4:	e17ffe15 	stw	r5,-8(fp)
   80cc8:	e1bfff15 	stw	r6,-4(fp)
	updateBody(snake);
   80ccc:	e13ffd17 	ldw	r4,-12(fp)
   80cd0:	0080c300 	call	80c30 <updateBody>
	snake[0]->xCoord = xCoord;
   80cd4:	e0bffd17 	ldw	r2,-12(fp)
   80cd8:	10c00017 	ldw	r3,0(r2)
   80cdc:	e0bffe17 	ldw	r2,-8(fp)
   80ce0:	18800015 	stw	r2,0(r3)
	snake[0]->yCoord = yCoord;
   80ce4:	e0bffd17 	ldw	r2,-12(fp)
   80ce8:	10c00017 	ldw	r3,0(r2)
   80cec:	e0bfff17 	ldw	r2,-4(fp)
   80cf0:	18800115 	stw	r2,4(r3)
}
   80cf4:	e037883a 	mov	sp,fp
   80cf8:	dfc00117 	ldw	ra,4(sp)
   80cfc:	df000017 	ldw	fp,0(sp)
   80d00:	dec00204 	addi	sp,sp,8
   80d04:	f800283a 	ret

00080d08 <initFood>:
	int xCoord;
	int yCoord;
	int enable;
};

void initFood(struct Food *food[]){
   80d08:	defffc04 	addi	sp,sp,-16
   80d0c:	df000315 	stw	fp,12(sp)
   80d10:	df000304 	addi	fp,sp,12
   80d14:	e13fff15 	stw	r4,-4(fp)
	int x = 50;
   80d18:	00800c84 	movi	r2,50
   80d1c:	e0bffe15 	stw	r2,-8(fp)
	int y = 50;
   80d20:	00800c84 	movi	r2,50
   80d24:	e0bffd15 	stw	r2,-12(fp)
	food[0]->enable = 1;
   80d28:	e0bfff17 	ldw	r2,-4(fp)
   80d2c:	10c00017 	ldw	r3,0(r2)
   80d30:	00800044 	movi	r2,1
   80d34:	18800215 	stw	r2,8(r3)
	food[0]->xCoord = 50;
   80d38:	e0bfff17 	ldw	r2,-4(fp)
   80d3c:	10c00017 	ldw	r3,0(r2)
   80d40:	00800c84 	movi	r2,50
   80d44:	18800015 	stw	r2,0(r3)
	food[0]->yCoord = 50;
   80d48:	e0bfff17 	ldw	r2,-4(fp)
   80d4c:	10c00017 	ldw	r3,0(r2)
   80d50:	00800c84 	movi	r2,50
   80d54:	18800115 	stw	r2,4(r3)
}
   80d58:	e037883a 	mov	sp,fp
   80d5c:	df000017 	ldw	fp,0(sp)
   80d60:	dec00104 	addi	sp,sp,4
   80d64:	f800283a 	ret

00080d68 <removeFood>:

void removeFood(struct Food *food[], int index){
   80d68:	defffd04 	addi	sp,sp,-12
   80d6c:	df000215 	stw	fp,8(sp)
   80d70:	df000204 	addi	fp,sp,8
   80d74:	e13ffe15 	stw	r4,-8(fp)
   80d78:	e17fff15 	stw	r5,-4(fp)
	food[index]->enable = 0;
   80d7c:	e0bfff17 	ldw	r2,-4(fp)
   80d80:	1085883a 	add	r2,r2,r2
   80d84:	1085883a 	add	r2,r2,r2
   80d88:	1007883a 	mov	r3,r2
   80d8c:	e0bffe17 	ldw	r2,-8(fp)
   80d90:	1885883a 	add	r2,r3,r2
   80d94:	10800017 	ldw	r2,0(r2)
   80d98:	10000215 	stw	zero,8(r2)
}
   80d9c:	e037883a 	mov	sp,fp
   80da0:	df000017 	ldw	fp,0(sp)
   80da4:	dec00104 	addi	sp,sp,4
   80da8:	f800283a 	ret

00080dac <moveLeft>:
}*/

/* should update snake when new direction is known*/

/* go left */
static void moveLeft(){
   80dac:	deffff04 	addi	sp,sp,-4
   80db0:	df000015 	stw	fp,0(sp)
   80db4:	d839883a 	mov	fp,sp
	right = 0;
   80db8:	d0200515 	stw	zero,-32748(gp)
	left = 1;
   80dbc:	00800044 	movi	r2,1
   80dc0:	d0a76615 	stw	r2,-25192(gp)
	up = 0;
   80dc4:	d0276715 	stw	zero,-25188(gp)
	down = 0;
   80dc8:	d0276815 	stw	zero,-25184(gp)
}
   80dcc:	e037883a 	mov	sp,fp
   80dd0:	df000017 	ldw	fp,0(sp)
   80dd4:	dec00104 	addi	sp,sp,4
   80dd8:	f800283a 	ret

00080ddc <moveRight>:

/* go right */
static void moveRight(){
   80ddc:	deffff04 	addi	sp,sp,-4
   80de0:	df000015 	stw	fp,0(sp)
   80de4:	d839883a 	mov	fp,sp
	right = 1;
   80de8:	00800044 	movi	r2,1
   80dec:	d0a00515 	stw	r2,-32748(gp)
	left = 0;
   80df0:	d0276615 	stw	zero,-25192(gp)
	up = 0;
   80df4:	d0276715 	stw	zero,-25188(gp)
	down = 0;
   80df8:	d0276815 	stw	zero,-25184(gp)
}
   80dfc:	e037883a 	mov	sp,fp
   80e00:	df000017 	ldw	fp,0(sp)
   80e04:	dec00104 	addi	sp,sp,4
   80e08:	f800283a 	ret

00080e0c <moveUp>:

/* go up */
static void moveUp(){
   80e0c:	deffff04 	addi	sp,sp,-4
   80e10:	df000015 	stw	fp,0(sp)
   80e14:	d839883a 	mov	fp,sp
	right = 0;
   80e18:	d0200515 	stw	zero,-32748(gp)
	left = 0;
   80e1c:	d0276615 	stw	zero,-25192(gp)
	up = 1;
   80e20:	00800044 	movi	r2,1
   80e24:	d0a76715 	stw	r2,-25188(gp)
	down = 0;
   80e28:	d0276815 	stw	zero,-25184(gp)
}
   80e2c:	e037883a 	mov	sp,fp
   80e30:	df000017 	ldw	fp,0(sp)
   80e34:	dec00104 	addi	sp,sp,4
   80e38:	f800283a 	ret

00080e3c <moveDown>:

/* go down */
static void moveDown(){
   80e3c:	deffff04 	addi	sp,sp,-4
   80e40:	df000015 	stw	fp,0(sp)
   80e44:	d839883a 	mov	fp,sp
	right = 0;
   80e48:	d0200515 	stw	zero,-32748(gp)
	left = 0;
   80e4c:	d0276615 	stw	zero,-25192(gp)
	up = 0;
   80e50:	d0276715 	stw	zero,-25188(gp)
	down = 1;
   80e54:	00800044 	movi	r2,1
   80e58:	d0a76815 	stw	r2,-25184(gp)
}
   80e5c:	e037883a 	mov	sp,fp
   80e60:	df000017 	ldw	fp,0(sp)
   80e64:	dec00104 	addi	sp,sp,4
   80e68:	f800283a 	ret

00080e6c <checkFood>:

int checkFood(struct Snake *snake[], struct Food *food[], int dir)
{
   80e6c:	defff804 	addi	sp,sp,-32
   80e70:	dfc00715 	stw	ra,28(sp)
   80e74:	df000615 	stw	fp,24(sp)
   80e78:	df000604 	addi	fp,sp,24
   80e7c:	e13ffd15 	stw	r4,-12(fp)
   80e80:	e17ffe15 	stw	r5,-8(fp)
   80e84:	e1bfff15 	stw	r6,-4(fp)
	//struct Snake *head = snake[0];
	int j;
	for(j = 0; j < MAX_FOOD; j++){
   80e88:	e03ffc15 	stw	zero,-16(fp)
   80e8c:	00004206 	br	80f98 <checkFood+0x12c>
			if(food[j]->enable){
   80e90:	e0bffc17 	ldw	r2,-16(fp)
   80e94:	1085883a 	add	r2,r2,r2
   80e98:	1085883a 	add	r2,r2,r2
   80e9c:	1007883a 	mov	r3,r2
   80ea0:	e0bffe17 	ldw	r2,-8(fp)
   80ea4:	1885883a 	add	r2,r3,r2
   80ea8:	10800017 	ldw	r2,0(r2)
   80eac:	10800217 	ldw	r2,8(r2)
   80eb0:	1005003a 	cmpeq	r2,r2,zero
   80eb4:	1000351e 	bne	r2,zero,80f8c <checkFood+0x120>
				int xDiff = abs(snake[0]->xCoord - food[j]->xCoord);
   80eb8:	e0bffd17 	ldw	r2,-12(fp)
   80ebc:	10800017 	ldw	r2,0(r2)
   80ec0:	11000017 	ldw	r4,0(r2)
   80ec4:	e0bffc17 	ldw	r2,-16(fp)
   80ec8:	1085883a 	add	r2,r2,r2
   80ecc:	1085883a 	add	r2,r2,r2
   80ed0:	1007883a 	mov	r3,r2
   80ed4:	e0bffe17 	ldw	r2,-8(fp)
   80ed8:	1885883a 	add	r2,r3,r2
   80edc:	10800017 	ldw	r2,0(r2)
   80ee0:	10800017 	ldw	r2,0(r2)
   80ee4:	2085c83a 	sub	r2,r4,r2
   80ee8:	e0bffb15 	stw	r2,-20(fp)
   80eec:	e0bffb17 	ldw	r2,-20(fp)
   80ef0:	1004403a 	cmpge	r2,r2,zero
   80ef4:	1000031e 	bne	r2,zero,80f04 <checkFood+0x98>
   80ef8:	e0bffb17 	ldw	r2,-20(fp)
   80efc:	0085c83a 	sub	r2,zero,r2
   80f00:	e0bffb15 	stw	r2,-20(fp)
				int yDiff = abs(snake[0]->yCoord - food[j]->yCoord);
   80f04:	e0bffd17 	ldw	r2,-12(fp)
   80f08:	10800017 	ldw	r2,0(r2)
   80f0c:	11000117 	ldw	r4,4(r2)
   80f10:	e0bffc17 	ldw	r2,-16(fp)
   80f14:	1085883a 	add	r2,r2,r2
   80f18:	1085883a 	add	r2,r2,r2
   80f1c:	1007883a 	mov	r3,r2
   80f20:	e0bffe17 	ldw	r2,-8(fp)
   80f24:	1885883a 	add	r2,r3,r2
   80f28:	10800017 	ldw	r2,0(r2)
   80f2c:	10800117 	ldw	r2,4(r2)
   80f30:	2085c83a 	sub	r2,r4,r2
   80f34:	e0bffa15 	stw	r2,-24(fp)
   80f38:	e0bffa17 	ldw	r2,-24(fp)
   80f3c:	1004403a 	cmpge	r2,r2,zero
   80f40:	1000031e 	bne	r2,zero,80f50 <checkFood+0xe4>
   80f44:	e0bffa17 	ldw	r2,-24(fp)
   80f48:	0085c83a 	sub	r2,zero,r2
   80f4c:	e0bffa15 	stw	r2,-24(fp)
				//printf("snake x: %d y: %d\n",snake[0]->xCoord, snake[0]->yCoord);
				//printf("food x: %d y: %d\n",food[j]->xCoord, food[j]->yCoord);
				if(xDiff <= col_offset && yDiff <= col_offset){
   80f50:	e0bffb17 	ldw	r2,-20(fp)
   80f54:	108003c8 	cmpgei	r2,r2,15
   80f58:	10000c1e 	bne	r2,zero,80f8c <checkFood+0x120>
   80f5c:	e0bffa17 	ldw	r2,-24(fp)
   80f60:	108003c8 	cmpgei	r2,r2,15
   80f64:	1000091e 	bne	r2,zero,80f8c <checkFood+0x120>
					printf("Eating Food!\n");
   80f68:	01000274 	movhi	r4,9
   80f6c:	2136ad04 	addi	r4,r4,-9548
   80f70:	00818180 	call	81818 <puts>
					removeFood(food,j);
   80f74:	e13ffe17 	ldw	r4,-8(fp)
   80f78:	e17ffc17 	ldw	r5,-16(fp)
   80f7c:	0080d680 	call	80d68 <removeFood>
					addEnd(snake, dir);
   80f80:	e13ffd17 	ldw	r4,-12(fp)
   80f84:	e17fff17 	ldw	r5,-4(fp)
   80f88:	00809600 	call	80960 <addEnd>

int checkFood(struct Snake *snake[], struct Food *food[], int dir)
{
	//struct Snake *head = snake[0];
	int j;
	for(j = 0; j < MAX_FOOD; j++){
   80f8c:	e0bffc17 	ldw	r2,-16(fp)
   80f90:	10800044 	addi	r2,r2,1
   80f94:	e0bffc15 	stw	r2,-16(fp)
   80f98:	e0bffc17 	ldw	r2,-16(fp)
   80f9c:	10800050 	cmplti	r2,r2,1
   80fa0:	103fbb1e 	bne	r2,zero,80e90 <checkFood+0x24>
					addEnd(snake, dir);
					//break;
				}
			}
	}
	return 0;
   80fa4:	0005883a 	mov	r2,zero
}
   80fa8:	e037883a 	mov	sp,fp
   80fac:	dfc00117 	ldw	ra,4(sp)
   80fb0:	df000017 	ldw	fp,0(sp)
   80fb4:	dec00204 	addi	sp,sp,8
   80fb8:	f800283a 	ret

00080fbc <movement>:

// track snake movement
static void movement(alt_u8 key, struct Snake *snake[], struct Food *food[]){
   80fbc:	defffa04 	addi	sp,sp,-24
   80fc0:	dfc00515 	stw	ra,20(sp)
   80fc4:	df000415 	stw	fp,16(sp)
   80fc8:	df000404 	addi	fp,sp,16
   80fcc:	e17ffd15 	stw	r5,-12(fp)
   80fd0:	e1bffe15 	stw	r6,-8(fp)
   80fd4:	e13ffc05 	stb	r4,-16(fp)
	switch(key){
   80fd8:	e0bffc03 	ldbu	r2,-16(fp)
   80fdc:	e0bfff15 	stw	r2,-4(fp)
   80fe0:	e0ffff17 	ldw	r3,-4(fp)
   80fe4:	18800720 	cmpeqi	r2,r3,28
   80fe8:	10000e1e 	bne	r2,zero,81024 <movement+0x68>
   80fec:	e0ffff17 	ldw	r3,-4(fp)
   80ff0:	18800748 	cmpgei	r2,r3,29
   80ff4:	1000041e 	bne	r2,zero,81008 <movement+0x4c>
   80ff8:	e0ffff17 	ldw	r3,-4(fp)
   80ffc:	188006e0 	cmpeqi	r2,r3,27
   81000:	1000101e 	bne	r2,zero,81044 <movement+0x88>
   81004:	00002606 	br	810a0 <movement+0xe4>
   81008:	e0ffff17 	ldw	r3,-4(fp)
   8100c:	18800760 	cmpeqi	r2,r3,29
   81010:	10001c1e 	bne	r2,zero,81084 <movement+0xc8>
   81014:	e0ffff17 	ldw	r3,-4(fp)
   81018:	188008e0 	cmpeqi	r2,r3,35
   8101c:	1000111e 	bne	r2,zero,81064 <movement+0xa8>
   81020:	00001f06 	br	810a0 <movement+0xe4>
		case 0x1C://'a'
			if(up || down)
   81024:	d0a76717 	ldw	r2,-25188(gp)
   81028:	1004c03a 	cmpne	r2,r2,zero
   8102c:	1000031e 	bne	r2,zero,8103c <movement+0x80>
   81030:	d0a76817 	ldw	r2,-25184(gp)
   81034:	1005003a 	cmpeq	r2,r2,zero
   81038:	1000191e 	bne	r2,zero,810a0 <movement+0xe4>
				moveLeft();
   8103c:	0080dac0 	call	80dac <moveLeft>
			break;
   81040:	00001706 	br	810a0 <movement+0xe4>
		case 0x1B://'s'
			if(left || right)
   81044:	d0a76617 	ldw	r2,-25192(gp)
   81048:	1004c03a 	cmpne	r2,r2,zero
   8104c:	1000031e 	bne	r2,zero,8105c <movement+0xa0>
   81050:	d0a00517 	ldw	r2,-32748(gp)
   81054:	1005003a 	cmpeq	r2,r2,zero
   81058:	1000111e 	bne	r2,zero,810a0 <movement+0xe4>
				moveDown();
   8105c:	0080e3c0 	call	80e3c <moveDown>
			break;
   81060:	00000f06 	br	810a0 <movement+0xe4>
		case 0x23://'d'
			if(up || down)
   81064:	d0a76717 	ldw	r2,-25188(gp)
   81068:	1004c03a 	cmpne	r2,r2,zero
   8106c:	1000031e 	bne	r2,zero,8107c <movement+0xc0>
   81070:	d0a76817 	ldw	r2,-25184(gp)
   81074:	1005003a 	cmpeq	r2,r2,zero
   81078:	1000091e 	bne	r2,zero,810a0 <movement+0xe4>
				moveRight();
   8107c:	0080ddc0 	call	80ddc <moveRight>
			break;
   81080:	00000706 	br	810a0 <movement+0xe4>
		case 0x1D://'w'
			if(left || right)
   81084:	d0a76617 	ldw	r2,-25192(gp)
   81088:	1004c03a 	cmpne	r2,r2,zero
   8108c:	1000031e 	bne	r2,zero,8109c <movement+0xe0>
   81090:	d0a00517 	ldw	r2,-32748(gp)
   81094:	1005003a 	cmpeq	r2,r2,zero
   81098:	1000011e 	bne	r2,zero,810a0 <movement+0xe4>
				moveUp();
   8109c:	0080e0c0 	call	80e0c <moveUp>
			break;
		default:
			break;
	}
	if(right){
   810a0:	d0a00517 	ldw	r2,-32748(gp)
   810a4:	1005003a 	cmpeq	r2,r2,zero
   810a8:	10000c1e 	bne	r2,zero,810dc <movement+0x120>
		xCoor++;
   810ac:	d0a00317 	ldw	r2,-32756(gp)
   810b0:	10800044 	addi	r2,r2,1
   810b4:	d0a00315 	stw	r2,-32756(gp)
		if(xCoor >= RIGHT_BOUND){
			// collision
		}
		updateSnake(snake, xCoor, yCoor);
   810b8:	d1600317 	ldw	r5,-32756(gp)
   810bc:	d1a00417 	ldw	r6,-32752(gp)
   810c0:	e13ffd17 	ldw	r4,-12(fp)
   810c4:	0080cb00 	call	80cb0 <updateSnake>
		checkFood(snake, food, left_dir);
   810c8:	e13ffd17 	ldw	r4,-12(fp)
   810cc:	e17ffe17 	ldw	r5,-8(fp)
   810d0:	000d883a 	mov	r6,zero
   810d4:	0080e6c0 	call	80e6c <checkFood>
   810d8:	00002c06 	br	8118c <movement+0x1d0>
	}else if(left){
   810dc:	d0a76617 	ldw	r2,-25192(gp)
   810e0:	1005003a 	cmpeq	r2,r2,zero
   810e4:	10000c1e 	bne	r2,zero,81118 <movement+0x15c>
		xCoor--;
   810e8:	d0a00317 	ldw	r2,-32756(gp)
   810ec:	10bfffc4 	addi	r2,r2,-1
   810f0:	d0a00315 	stw	r2,-32756(gp)
		if(xCoor <= LEFT_BOUND){
			//collision
		}
		updateSnake(snake, xCoor, yCoor);
   810f4:	d1600317 	ldw	r5,-32756(gp)
   810f8:	d1a00417 	ldw	r6,-32752(gp)
   810fc:	e13ffd17 	ldw	r4,-12(fp)
   81100:	0080cb00 	call	80cb0 <updateSnake>
		checkFood(snake, food, right_dir);
   81104:	e13ffd17 	ldw	r4,-12(fp)
   81108:	e17ffe17 	ldw	r5,-8(fp)
   8110c:	01800044 	movi	r6,1
   81110:	0080e6c0 	call	80e6c <checkFood>
   81114:	00001d06 	br	8118c <movement+0x1d0>
	}else if(up){
   81118:	d0a76717 	ldw	r2,-25188(gp)
   8111c:	1005003a 	cmpeq	r2,r2,zero
   81120:	10000c1e 	bne	r2,zero,81154 <movement+0x198>
		yCoor++;
   81124:	d0a00417 	ldw	r2,-32752(gp)
   81128:	10800044 	addi	r2,r2,1
   8112c:	d0a00415 	stw	r2,-32752(gp)
		if(yCoor <= TOP_BOUND){
			//collision
		}
		updateSnake(snake, xCoor, yCoor);
   81130:	d1600317 	ldw	r5,-32756(gp)
   81134:	d1a00417 	ldw	r6,-32752(gp)
   81138:	e13ffd17 	ldw	r4,-12(fp)
   8113c:	0080cb00 	call	80cb0 <updateSnake>
		checkFood(snake, food, up_dir);
   81140:	e13ffd17 	ldw	r4,-12(fp)
   81144:	e17ffe17 	ldw	r5,-8(fp)
   81148:	01800084 	movi	r6,2
   8114c:	0080e6c0 	call	80e6c <checkFood>
   81150:	00000e06 	br	8118c <movement+0x1d0>
	}else if(down){
   81154:	d0a76817 	ldw	r2,-25184(gp)
   81158:	1005003a 	cmpeq	r2,r2,zero
   8115c:	10000b1e 	bne	r2,zero,8118c <movement+0x1d0>
		yCoor--;
   81160:	d0a00417 	ldw	r2,-32752(gp)
   81164:	10bfffc4 	addi	r2,r2,-1
   81168:	d0a00415 	stw	r2,-32752(gp)
		if(yCoor >= BOT_BOUND){
			//collision
		}
		updateSnake(snake, xCoor, yCoor);
   8116c:	d1600317 	ldw	r5,-32756(gp)
   81170:	d1a00417 	ldw	r6,-32752(gp)
   81174:	e13ffd17 	ldw	r4,-12(fp)
   81178:	0080cb00 	call	80cb0 <updateSnake>
		checkFood(snake, food, down_dir);
   8117c:	e13ffd17 	ldw	r4,-12(fp)
   81180:	e17ffe17 	ldw	r5,-8(fp)
   81184:	018000c4 	movi	r6,3
   81188:	0080e6c0 	call	80e6c <checkFood>
	}
	printf("x: %d y: %d\n", xCoor, yCoor);
   8118c:	d1600317 	ldw	r5,-32756(gp)
   81190:	d1a00417 	ldw	r6,-32752(gp)
   81194:	01000274 	movhi	r4,9
   81198:	2136b104 	addi	r4,r4,-9532
   8119c:	00817000 	call	81700 <printf>
}
   811a0:	e037883a 	mov	sp,fp
   811a4:	dfc00117 	ldw	ra,4(sp)
   811a8:	df000017 	ldw	fp,0(sp)
   811ac:	dec00204 	addi	sp,sp,8
   811b0:	f800283a 	ret

000811b4 <read_make_code_with_timeout>:
    STATE_DONE
  } DECODE_STATE;


/* "interrupt" */
int read_make_code_with_timeout(KB_CODE_TYPE *decode_mode, alt_u8 *buf) {
   811b4:	defff804 	addi	sp,sp,-32
   811b8:	dfc00715 	stw	ra,28(sp)
   811bc:	df000615 	stw	fp,24(sp)
   811c0:	df000604 	addi	fp,sp,24
   811c4:	e13ffd15 	stw	r4,-12(fp)
   811c8:	e17ffe15 	stw	r5,-8(fp)
	alt_u8 byte = 0;
   811cc:	e03ffc05 	stb	zero,-16(fp)
	int status_read =0;
   811d0:	e03ffb15 	stw	zero,-20(fp)
	*decode_mode = KB_INVALID_CODE;
   811d4:	e0fffd17 	ldw	r3,-12(fp)
   811d8:	00800184 	movi	r2,6
   811dc:	18800015 	stw	r2,0(r3)
	DECODE_STATE state = STATE_INIT;
   811e0:	e03ffa15 	stw	zero,-24(fp)
	do {
		status_read = read_data_byte_with_timeout(&byte, 10000);
   811e4:	e13ffc04 	addi	r4,fp,-16
   811e8:	0149c404 	movi	r5,10000
   811ec:	00805c40 	call	805c4 <read_data_byte_with_timeout>
   811f0:	e0bffb15 	stw	r2,-20(fp)
		//FIXME: When the user press the keyboard extremely fast, data may get
		//occasionally get lost

	    if (status_read == PS2_ERROR)
   811f4:	e0bffb17 	ldw	r2,-20(fp)
   811f8:	10bfff98 	cmpnei	r2,r2,-2
   811fc:	1000031e 	bne	r2,zero,8120c <read_make_code_with_timeout+0x58>
			return PS2_ERROR;
   81200:	00bfff84 	movi	r2,-2
   81204:	e0bfff15 	stw	r2,-4(fp)
   81208:	00000b06 	br	81238 <read_make_code_with_timeout+0x84>

		state = get_next_state(state, byte, decode_mode, buf);
   8120c:	e0bffc03 	ldbu	r2,-16(fp)
   81210:	11403fcc 	andi	r5,r2,255
   81214:	e13ffa17 	ldw	r4,-24(fp)
   81218:	e1bffd17 	ldw	r6,-12(fp)
   8121c:	e1fffe17 	ldw	r7,-8(fp)
   81220:	00813d00 	call	813d0 <get_next_state>
   81224:	e0bffa15 	stw	r2,-24(fp)
  } while (state != STATE_DONE);
   81228:	e0bffa17 	ldw	r2,-24(fp)
   8122c:	108000d8 	cmpnei	r2,r2,3
   81230:	103fec1e 	bne	r2,zero,811e4 <read_make_code_with_timeout+0x30>

  return PS2_SUCCESS;
   81234:	e03fff15 	stw	zero,-4(fp)
   81238:	e0bfff17 	ldw	r2,-4(fp)
}
   8123c:	e037883a 	mov	sp,fp
   81240:	dfc00117 	ldw	ra,4(sp)
   81244:	df000017 	ldw	fp,0(sp)
   81248:	dec00204 	addi	sp,sp,8
   8124c:	f800283a 	ret

00081250 <main>:

int main(){
   81250:	def1ea04 	addi	sp,sp,-14424
   81254:	dfce1515 	stw	ra,14420(sp)
   81258:	df0e1415 	stw	fp,14416(sp)
   8125c:	df0e1404 	addi	fp,sp,14416
	alt_u8 key = 0;
   81260:	e031ec05 	stb	zero,-14416(fp)
			break;
	}*/
	//alt_irq_register(PS2_0_IRQ, NULL, (void*)kb_interrupt_handler);

	//0000 00 1 00001 0101111111 0001111111
	WRITE_SPRITE(1,0x215FC7F); // Add
   81264:	00c00104 	movi	r3,4
   81268:	008085b4 	movhi	r2,534
   8126c:	10bf1fc4 	addi	r2,r2,-897
   81270:	18800035 	stwio	r2,0(r3)
	//WRITE_SPRITE(1,0x213FCFF); //Add
	//WRITE_SPRITE(1,0xC13FCFF); //Remove
	//WRITE_SPRITE(1,0x813FCFF);

	printf("H: %x\n",READ_SNAKE1_HEAD());
   81274:	0005883a 	mov	r2,zero
   81278:	11400037 	ldwio	r5,0(r2)
   8127c:	01000274 	movhi	r4,9
   81280:	2136b504 	addi	r4,r4,-9516
   81284:	00817000 	call	81700 <printf>
	printf("T: %x\n",READ_SNAKE1_TAIL());
   81288:	00800104 	movi	r2,4
   8128c:	11400037 	ldwio	r5,0(r2)
   81290:	01000274 	movhi	r4,9
   81294:	2136b704 	addi	r4,r4,-9508
   81298:	00817000 	call	81700 <printf>
	printf("L: %x\n",READ_SNAKE1_LENGTH());
   8129c:	00800304 	movi	r2,12
   812a0:	11400037 	ldwio	r5,0(r2)
   812a4:	01000274 	movhi	r4,9
   812a8:	2136b904 	addi	r4,r4,-9500
   812ac:	00817000 	call	81700 <printf>

	struct Snake snake[1200];
	initSnake(&snake, xCoor, yCoor);
   812b0:	e131ed04 	addi	r4,fp,-14412
   812b4:	d1600317 	ldw	r5,-32756(gp)
   812b8:	d1a00417 	ldw	r6,-32752(gp)
   812bc:	00806e00 	call	806e0 <initSnake>
	struct Food food[MAX_FOOD];
	initFood(&food);
   812c0:	e13ffd04 	addi	r4,fp,-12
   812c4:	0080d080 	call	80d08 <initFood>

	return 0;
   812c8:	0005883a 	mov	r2,zero
		movement(key, &snake, &food);
	}


	return 0;
}
   812cc:	e037883a 	mov	sp,fp
   812d0:	dfc00117 	ldw	ra,4(sp)
   812d4:	df000017 	ldw	fp,0(sp)
   812d8:	dec00204 	addi	sp,sp,8
   812dc:	f800283a 	ret

000812e0 <get_multi_byte_make_code_index>:
    STATE_DONE 
  } DECODE_STATE;

//helper function for get_next_state
alt_u8 get_multi_byte_make_code_index(alt_u8 code)
{
   812e0:	defffc04 	addi	sp,sp,-16
   812e4:	df000315 	stw	fp,12(sp)
   812e8:	df000304 	addi	fp,sp,12
   812ec:	e13ffe05 	stb	r4,-8(fp)
  alt_u8 i;
  for (i = 0; i < NUM_SCAN_CODES; i++ ) {
   812f0:	e03ffd05 	stb	zero,-12(fp)
   812f4:	00000e06 	br	81330 <get_multi_byte_make_code_index+0x50>
    if ( multi_byte_make_code[i] == code )
   812f8:	e0fffd03 	ldbu	r3,-12(fp)
   812fc:	00800274 	movhi	r2,9
   81300:	10b8b304 	addi	r2,r2,-7476
   81304:	10c5883a 	add	r2,r2,r3
   81308:	10800003 	ldbu	r2,0(r2)
   8130c:	10c03fcc 	andi	r3,r2,255
   81310:	e0bffe03 	ldbu	r2,-8(fp)
   81314:	1880031e 	bne	r3,r2,81324 <get_multi_byte_make_code_index+0x44>
      return i;
   81318:	e0bffd03 	ldbu	r2,-12(fp)
   8131c:	e0bfff15 	stw	r2,-4(fp)
   81320:	00000806 	br	81344 <get_multi_byte_make_code_index+0x64>

//helper function for get_next_state
alt_u8 get_multi_byte_make_code_index(alt_u8 code)
{
  alt_u8 i;
  for (i = 0; i < NUM_SCAN_CODES; i++ ) {
   81324:	e0bffd03 	ldbu	r2,-12(fp)
   81328:	10800044 	addi	r2,r2,1
   8132c:	e0bffd05 	stb	r2,-12(fp)
   81330:	e0bffd03 	ldbu	r2,-12(fp)
   81334:	108019b0 	cmpltui	r2,r2,102
   81338:	103fef1e 	bne	r2,zero,812f8 <get_multi_byte_make_code_index+0x18>
    if ( multi_byte_make_code[i] == code )
      return i;
  }
  return NUM_SCAN_CODES;
   8133c:	00801984 	movi	r2,102
   81340:	e0bfff15 	stw	r2,-4(fp)
   81344:	e0bfff17 	ldw	r2,-4(fp)
}
   81348:	e037883a 	mov	sp,fp
   8134c:	df000017 	ldw	fp,0(sp)
   81350:	dec00104 	addi	sp,sp,4
   81354:	f800283a 	ret

00081358 <get_single_byte_make_code_index>:

//helper function for get_next_state
alt_u8 get_single_byte_make_code_index(alt_u8 code)
{
   81358:	defffc04 	addi	sp,sp,-16
   8135c:	df000315 	stw	fp,12(sp)
   81360:	df000304 	addi	fp,sp,12
   81364:	e13ffe05 	stb	r4,-8(fp)
  alt_u8 i;
  for (i = 0; i < NUM_SCAN_CODES; i++ ) {
   81368:	e03ffd05 	stb	zero,-12(fp)
   8136c:	00000e06 	br	813a8 <get_single_byte_make_code_index+0x50>
    if ( single_byte_make_code[i] == code )
   81370:	e0fffd03 	ldbu	r3,-12(fp)
   81374:	00800274 	movhi	r2,9
   81378:	10b89984 	addi	r2,r2,-7578
   8137c:	10c5883a 	add	r2,r2,r3
   81380:	10800003 	ldbu	r2,0(r2)
   81384:	10c03fcc 	andi	r3,r2,255
   81388:	e0bffe03 	ldbu	r2,-8(fp)
   8138c:	1880031e 	bne	r3,r2,8139c <get_single_byte_make_code_index+0x44>
      return i;
   81390:	e0bffd03 	ldbu	r2,-12(fp)
   81394:	e0bfff15 	stw	r2,-4(fp)
   81398:	00000806 	br	813bc <get_single_byte_make_code_index+0x64>

//helper function for get_next_state
alt_u8 get_single_byte_make_code_index(alt_u8 code)
{
  alt_u8 i;
  for (i = 0; i < NUM_SCAN_CODES; i++ ) {
   8139c:	e0bffd03 	ldbu	r2,-12(fp)
   813a0:	10800044 	addi	r2,r2,1
   813a4:	e0bffd05 	stb	r2,-12(fp)
   813a8:	e0bffd03 	ldbu	r2,-12(fp)
   813ac:	108019b0 	cmpltui	r2,r2,102
   813b0:	103fef1e 	bne	r2,zero,81370 <get_single_byte_make_code_index+0x18>
    if ( single_byte_make_code[i] == code )
      return i;
  }
  return NUM_SCAN_CODES;
   813b4:	00801984 	movi	r2,102
   813b8:	e0bfff15 	stw	r2,-4(fp)
   813bc:	e0bfff17 	ldw	r2,-4(fp)
}
   813c0:	e037883a 	mov	sp,fp
   813c4:	df000017 	ldw	fp,0(sp)
   813c8:	dec00104 	addi	sp,sp,4
   813cc:	f800283a 	ret

000813d0 <get_next_state>:

DECODE_STATE get_next_state(DECODE_STATE state, 
			    alt_u8 byte,
			    KB_CODE_TYPE *decode_mode,
			    alt_u8 *buf)
{
   813d0:	defff704 	addi	sp,sp,-36
   813d4:	dfc00815 	stw	ra,32(sp)
   813d8:	df000715 	stw	fp,28(sp)
   813dc:	df000704 	addi	fp,sp,28
   813e0:	e13ffb15 	stw	r4,-20(fp)
   813e4:	e1bffd15 	stw	r6,-12(fp)
   813e8:	e1fffe15 	stw	r7,-8(fp)
   813ec:	e17ffc05 	stb	r5,-16(fp)
  DECODE_STATE next_state = STATE_INIT;
   813f0:	e03ffa15 	stw	zero,-24(fp)
  alt_u16 idx = NUM_SCAN_CODES;
   813f4:	00801984 	movi	r2,102
   813f8:	e0bff90d 	sth	r2,-28(fp)
  switch (state) {
   813fc:	e0bffb17 	ldw	r2,-20(fp)
   81400:	e0bfff15 	stw	r2,-4(fp)
   81404:	e0ffff17 	ldw	r3,-4(fp)
   81408:	18800060 	cmpeqi	r2,r3,1
   8140c:	1000371e 	bne	r2,zero,814ec <get_next_state+0x11c>
   81410:	e0ffff17 	ldw	r3,-4(fp)
   81414:	18800070 	cmpltui	r2,r3,1
   81418:	1000041e 	bne	r2,zero,8142c <get_next_state+0x5c>
   8141c:	e0ffff17 	ldw	r3,-4(fp)
   81420:	188000a0 	cmpeqi	r2,r3,2
   81424:	1000431e 	bne	r2,zero,81534 <get_next_state+0x164>
   81428:	00005406 	br	8157c <get_next_state+0x1ac>
  case STATE_INIT:
    if ( byte == 0xE0 ) {
   8142c:	e0bffc03 	ldbu	r2,-16(fp)
   81430:	10803818 	cmpnei	r2,r2,224
   81434:	1000031e 	bne	r2,zero,81444 <get_next_state+0x74>
      next_state = STATE_LONG_BINARY_MAKE_CODE;
   81438:	00800044 	movi	r2,1
   8143c:	e0bffa15 	stw	r2,-24(fp)
   81440:	00005206 	br	8158c <get_next_state+0x1bc>
    } else if (byte == 0xF0) {
   81444:	e0bffc03 	ldbu	r2,-16(fp)
   81448:	10803c18 	cmpnei	r2,r2,240
   8144c:	1000031e 	bne	r2,zero,8145c <get_next_state+0x8c>
      next_state = STATE_BREAK_CODE;
   81450:	00800084 	movi	r2,2
   81454:	e0bffa15 	stw	r2,-24(fp)
   81458:	00004c06 	br	8158c <get_next_state+0x1bc>
    } else {
      idx = get_single_byte_make_code_index(byte);
   8145c:	e13ffc03 	ldbu	r4,-16(fp)
   81460:	00813580 	call	81358 <get_single_byte_make_code_index>
   81464:	10803fcc 	andi	r2,r2,255
   81468:	e0bff90d 	sth	r2,-28(fp)
      if ( (idx < 40 || idx == 68 || idx > 79) && ( idx != NUM_SCAN_CODES ) ) {
   8146c:	e0bff90b 	ldhu	r2,-28(fp)
   81470:	10800a30 	cmpltui	r2,r2,40
   81474:	1000061e 	bne	r2,zero,81490 <get_next_state+0xc0>
   81478:	e0bff90b 	ldhu	r2,-28(fp)
   8147c:	10801120 	cmpeqi	r2,r2,68
   81480:	1000031e 	bne	r2,zero,81490 <get_next_state+0xc0>
   81484:	e0bff90b 	ldhu	r2,-28(fp)
   81488:	10801430 	cmpltui	r2,r2,80
   8148c:	10000e1e 	bne	r2,zero,814c8 <get_next_state+0xf8>
   81490:	e0bff90b 	ldhu	r2,-28(fp)
   81494:	108019a0 	cmpeqi	r2,r2,102
   81498:	10000b1e 	bne	r2,zero,814c8 <get_next_state+0xf8>
	*decode_mode = KB_ASCII_MAKE_CODE;
   8149c:	e0fffd17 	ldw	r3,-12(fp)
   814a0:	00800044 	movi	r2,1
   814a4:	18800015 	stw	r2,0(r3)
	*buf= ascii_codes[idx];
   814a8:	e0fff90b 	ldhu	r3,-28(fp)
   814ac:	00800274 	movhi	r2,9
   814b0:	10b88004 	addi	r2,r2,-7680
   814b4:	10c5883a 	add	r2,r2,r3
   814b8:	10c00003 	ldbu	r3,0(r2)
   814bc:	e0bffe17 	ldw	r2,-8(fp)
   814c0:	10c00005 	stb	r3,0(r2)
      next_state = STATE_LONG_BINARY_MAKE_CODE;
    } else if (byte == 0xF0) {
      next_state = STATE_BREAK_CODE;
    } else {
      idx = get_single_byte_make_code_index(byte);
      if ( (idx < 40 || idx == 68 || idx > 79) && ( idx != NUM_SCAN_CODES ) ) {
   814c4:	00000606 	br	814e0 <get_next_state+0x110>
	*decode_mode = KB_ASCII_MAKE_CODE;
	*buf= ascii_codes[idx];
      } else {
	*decode_mode = KB_BINARY_MAKE_CODE;
   814c8:	e0fffd17 	ldw	r3,-12(fp)
   814cc:	00800084 	movi	r2,2
   814d0:	18800015 	stw	r2,0(r3)
	*buf = byte;
   814d4:	e0fffe17 	ldw	r3,-8(fp)
   814d8:	e0bffc03 	ldbu	r2,-16(fp)
   814dc:	18800005 	stb	r2,0(r3)
      }
      next_state = STATE_DONE;
   814e0:	008000c4 	movi	r2,3
   814e4:	e0bffa15 	stw	r2,-24(fp)
    }
    break;
   814e8:	00002806 	br	8158c <get_next_state+0x1bc>
  case STATE_LONG_BINARY_MAKE_CODE:
    if ( byte != 0xF0 && byte!= 0xE0) {
   814ec:	e0bffc03 	ldbu	r2,-16(fp)
   814f0:	10803c20 	cmpeqi	r2,r2,240
   814f4:	10000c1e 	bne	r2,zero,81528 <get_next_state+0x158>
   814f8:	e0bffc03 	ldbu	r2,-16(fp)
   814fc:	10803820 	cmpeqi	r2,r2,224
   81500:	1000091e 	bne	r2,zero,81528 <get_next_state+0x158>
      *decode_mode = KB_LONG_BINARY_MAKE_CODE;
   81504:	e0fffd17 	ldw	r3,-12(fp)
   81508:	008000c4 	movi	r2,3
   8150c:	18800015 	stw	r2,0(r3)
      *buf = byte;
   81510:	e0fffe17 	ldw	r3,-8(fp)
   81514:	e0bffc03 	ldbu	r2,-16(fp)
   81518:	18800005 	stb	r2,0(r3)
      next_state = STATE_DONE;
   8151c:	008000c4 	movi	r2,3
   81520:	e0bffa15 	stw	r2,-24(fp)
      }
      next_state = STATE_DONE;
    }
    break;
  case STATE_LONG_BINARY_MAKE_CODE:
    if ( byte != 0xF0 && byte!= 0xE0) {
   81524:	00001906 	br	8158c <get_next_state+0x1bc>
      *decode_mode = KB_LONG_BINARY_MAKE_CODE;
      *buf = byte;
      next_state = STATE_DONE;
    } else {
      next_state = STATE_BREAK_CODE;
   81528:	00800084 	movi	r2,2
   8152c:	e0bffa15 	stw	r2,-24(fp)
    }
    break;
   81530:	00001606 	br	8158c <get_next_state+0x1bc>
  case STATE_BREAK_CODE:
    if ( byte != 0xF0 && byte != 0xE0) {
   81534:	e0bffc03 	ldbu	r2,-16(fp)
   81538:	10803c20 	cmpeqi	r2,r2,240
   8153c:	10000c1e 	bne	r2,zero,81570 <get_next_state+0x1a0>
   81540:	e0bffc03 	ldbu	r2,-16(fp)
   81544:	10803820 	cmpeqi	r2,r2,224
   81548:	1000091e 	bne	r2,zero,81570 <get_next_state+0x1a0>
      *decode_mode = KB_BREAK_CODE;
   8154c:	e0fffd17 	ldw	r3,-12(fp)
   81550:	00800104 	movi	r2,4
   81554:	18800015 	stw	r2,0(r3)
      *buf = byte;
   81558:	e0fffe17 	ldw	r3,-8(fp)
   8155c:	e0bffc03 	ldbu	r2,-16(fp)
   81560:	18800005 	stb	r2,0(r3)
      next_state = STATE_DONE;
   81564:	008000c4 	movi	r2,3
   81568:	e0bffa15 	stw	r2,-24(fp)
    } else {
      next_state = STATE_BREAK_CODE;
    }
    break;
  case STATE_BREAK_CODE:
    if ( byte != 0xF0 && byte != 0xE0) {
   8156c:	00000706 	br	8158c <get_next_state+0x1bc>
      *decode_mode = KB_BREAK_CODE;
      *buf = byte;
      next_state = STATE_DONE;
    } else {
      next_state = STATE_BREAK_CODE;
   81570:	00800084 	movi	r2,2
   81574:	e0bffa15 	stw	r2,-24(fp)
    }
    break;
   81578:	00000406 	br	8158c <get_next_state+0x1bc>
  default:
    *decode_mode = KB_INVALID_CODE;
   8157c:	e0fffd17 	ldw	r3,-12(fp)
   81580:	00800184 	movi	r2,6
   81584:	18800015 	stw	r2,0(r3)
    next_state = STATE_INIT;
   81588:	e03ffa15 	stw	zero,-24(fp)
  }
  return next_state;
   8158c:	e0bffa17 	ldw	r2,-24(fp)
}
   81590:	e037883a 	mov	sp,fp
   81594:	dfc00117 	ldw	ra,4(sp)
   81598:	df000017 	ldw	fp,0(sp)
   8159c:	dec00204 	addi	sp,sp,8
   815a0:	f800283a 	ret

000815a4 <read_make_code>:

int read_make_code(KB_CODE_TYPE *decode_mode, alt_u8 *buf)
{
   815a4:	defff804 	addi	sp,sp,-32
   815a8:	dfc00715 	stw	ra,28(sp)
   815ac:	df000615 	stw	fp,24(sp)
   815b0:	df000604 	addi	fp,sp,24
   815b4:	e13ffd15 	stw	r4,-12(fp)
   815b8:	e17ffe15 	stw	r5,-8(fp)
  alt_u8 byte = 0;
   815bc:	e03ffc05 	stb	zero,-16(fp)
  int status_read =0;
   815c0:	e03ffb15 	stw	zero,-20(fp)
  *decode_mode = KB_INVALID_CODE;
   815c4:	e0fffd17 	ldw	r3,-12(fp)
   815c8:	00800184 	movi	r2,6
   815cc:	18800015 	stw	r2,0(r3)
  DECODE_STATE state = STATE_INIT;
   815d0:	e03ffa15 	stw	zero,-24(fp)
  do {
    status_read = read_data_byte_with_timeout(&byte, 0);
   815d4:	e13ffc04 	addi	r4,fp,-16
   815d8:	000b883a 	mov	r5,zero
   815dc:	00805c40 	call	805c4 <read_data_byte_with_timeout>
   815e0:	e0bffb15 	stw	r2,-20(fp)
    //FIXME: When the user press the keyboard extremely fast, data may get
    //occasionally get lost 

    if (status_read == PS2_ERROR)
   815e4:	e0bffb17 	ldw	r2,-20(fp)
   815e8:	10bfff98 	cmpnei	r2,r2,-2
   815ec:	1000031e 	bne	r2,zero,815fc <read_make_code+0x58>
      return PS2_ERROR;
   815f0:	00bfff84 	movi	r2,-2
   815f4:	e0bfff15 	stw	r2,-4(fp)
   815f8:	00000b06 	br	81628 <read_make_code+0x84>

    state = get_next_state(state, byte, decode_mode, buf);
   815fc:	e0bffc03 	ldbu	r2,-16(fp)
   81600:	11403fcc 	andi	r5,r2,255
   81604:	e13ffa17 	ldw	r4,-24(fp)
   81608:	e1bffd17 	ldw	r6,-12(fp)
   8160c:	e1fffe17 	ldw	r7,-8(fp)
   81610:	00813d00 	call	813d0 <get_next_state>
   81614:	e0bffa15 	stw	r2,-24(fp)
  } while (state != STATE_DONE);
   81618:	e0bffa17 	ldw	r2,-24(fp)
   8161c:	108000d8 	cmpnei	r2,r2,3
   81620:	103fec1e 	bne	r2,zero,815d4 <read_make_code+0x30>

  return PS2_SUCCESS;
   81624:	e03fff15 	stw	zero,-4(fp)
   81628:	e0bfff17 	ldw	r2,-4(fp)
}
   8162c:	e037883a 	mov	sp,fp
   81630:	dfc00117 	ldw	ra,4(sp)
   81634:	df000017 	ldw	fp,0(sp)
   81638:	dec00204 	addi	sp,sp,8
   8163c:	f800283a 	ret

00081640 <set_keyboard_rate>:

alt_u32 set_keyboard_rate(alt_u8 rate)
{
   81640:	defffb04 	addi	sp,sp,-20
   81644:	dfc00415 	stw	ra,16(sp)
   81648:	df000315 	stw	fp,12(sp)
   8164c:	df000304 	addi	fp,sp,12
   81650:	e13fff05 	stb	r4,-4(fp)
  alt_u8 byte;
  // send the set keyboard rate command
  int status_send = write_data_byte_with_ack(0xF3, DEFAULT_PS2_TIMEOUT_VAL);
   81654:	01003cc4 	movi	r4,243
   81658:	014002f4 	movhi	r5,11
   8165c:	296b9804 	addi	r5,r5,-20896
   81660:	008055c0 	call	8055c <write_data_byte_with_ack>
   81664:	e0bffd15 	stw	r2,-12(fp)
  if ( status_send == PS2_SUCCESS ) {
   81668:	e0bffd17 	ldw	r2,-12(fp)
   8166c:	1004c03a 	cmpne	r2,r2,zero
   81670:	1000061e 	bne	r2,zero,8168c <set_keyboard_rate+0x4c>
    // we received ACK, so send out the desired rate now
    status_send = write_data_byte_with_ack(rate & 0x1F,
   81674:	e0bfff03 	ldbu	r2,-4(fp)
   81678:	110007cc 	andi	r4,r2,31
   8167c:	014002f4 	movhi	r5,11
   81680:	296b9804 	addi	r5,r5,-20896
   81684:	008055c0 	call	8055c <write_data_byte_with_ack>
   81688:	e0bffd15 	stw	r2,-12(fp)
					   DEFAULT_PS2_TIMEOUT_VAL);
  }
  return status_send;
   8168c:	e0bffd17 	ldw	r2,-12(fp)
}
   81690:	e037883a 	mov	sp,fp
   81694:	dfc00117 	ldw	ra,4(sp)
   81698:	df000017 	ldw	fp,0(sp)
   8169c:	dec00204 	addi	sp,sp,8
   816a0:	f800283a 	ret

000816a4 <reset_keyboard>:

alt_u32 reset_keyboard()
{
   816a4:	defffc04 	addi	sp,sp,-16
   816a8:	dfc00315 	stw	ra,12(sp)
   816ac:	df000215 	stw	fp,8(sp)
   816b0:	df000204 	addi	fp,sp,8
  alt_u8 byte;
  // send out the reset command
  int status = write_data_byte_with_ack(0xff, DEFAULT_PS2_TIMEOUT_VAL); 
   816b4:	01003fc4 	movi	r4,255
   816b8:	014002f4 	movhi	r5,11
   816bc:	296b9804 	addi	r5,r5,-20896
   816c0:	008055c0 	call	8055c <write_data_byte_with_ack>
   816c4:	e0bffe15 	stw	r2,-8(fp)
  if ( status == PS2_SUCCESS) {
   816c8:	e0bffe17 	ldw	r2,-8(fp)
   816cc:	1004c03a 	cmpne	r2,r2,zero
   816d0:	1000051e 	bne	r2,zero,816e8 <reset_keyboard+0x44>
    // received the ACK for reset, now check the BAT result
    status = read_data_byte_with_timeout(&byte, DEFAULT_PS2_TIMEOUT_VAL);
   816d4:	e13fff04 	addi	r4,fp,-4
   816d8:	014002f4 	movhi	r5,11
   816dc:	296b9804 	addi	r5,r5,-20896
   816e0:	00805c40 	call	805c4 <read_data_byte_with_timeout>
   816e4:	e0bffe15 	stw	r2,-8(fp)
    } else {
      // BAT failed
      status == PS2_ERROR;
    }
  }	
  return status;
   816e8:	e0bffe17 	ldw	r2,-8(fp)
}
   816ec:	e037883a 	mov	sp,fp
   816f0:	dfc00117 	ldw	ra,4(sp)
   816f4:	df000017 	ldw	fp,0(sp)
   816f8:	dec00204 	addi	sp,sp,8
   816fc:	f800283a 	ret

00081700 <printf>:
   81700:	defffb04 	addi	sp,sp,-20
   81704:	dfc00115 	stw	ra,4(sp)
   81708:	d9400215 	stw	r5,8(sp)
   8170c:	d9800315 	stw	r6,12(sp)
   81710:	d9c00415 	stw	r7,16(sp)
   81714:	00800274 	movhi	r2,9
   81718:	10bf5a04 	addi	r2,r2,-664
   8171c:	10c00017 	ldw	r3,0(r2)
   81720:	200b883a 	mov	r5,r4
   81724:	d8800204 	addi	r2,sp,8
   81728:	19000217 	ldw	r4,8(r3)
   8172c:	100d883a 	mov	r6,r2
   81730:	d8800015 	stw	r2,0(sp)
   81734:	00837bc0 	call	837bc <__vfprintf_internal>
   81738:	dfc00117 	ldw	ra,4(sp)
   8173c:	dec00504 	addi	sp,sp,20
   81740:	f800283a 	ret

00081744 <_printf_r>:
   81744:	defffc04 	addi	sp,sp,-16
   81748:	dfc00115 	stw	ra,4(sp)
   8174c:	d9800215 	stw	r6,8(sp)
   81750:	d9c00315 	stw	r7,12(sp)
   81754:	280d883a 	mov	r6,r5
   81758:	21400217 	ldw	r5,8(r4)
   8175c:	d8c00204 	addi	r3,sp,8
   81760:	180f883a 	mov	r7,r3
   81764:	d8c00015 	stw	r3,0(sp)
   81768:	00818f80 	call	818f8 <___vfprintf_internal_r>
   8176c:	dfc00117 	ldw	ra,4(sp)
   81770:	dec00404 	addi	sp,sp,16
   81774:	f800283a 	ret

00081778 <_puts_r>:
   81778:	defff604 	addi	sp,sp,-40
   8177c:	dc400715 	stw	r17,28(sp)
   81780:	2023883a 	mov	r17,r4
   81784:	2809883a 	mov	r4,r5
   81788:	dfc00915 	stw	ra,36(sp)
   8178c:	dcc00815 	stw	r19,32(sp)
   81790:	2827883a 	mov	r19,r5
   81794:	008182c0 	call	8182c <strlen>
   81798:	89400217 	ldw	r5,8(r17)
   8179c:	00c00274 	movhi	r3,9
   817a0:	18f74904 	addi	r3,r3,-8924
   817a4:	01c00044 	movi	r7,1
   817a8:	12000044 	addi	r8,r2,1
   817ac:	d8c00515 	stw	r3,20(sp)
   817b0:	d9c00615 	stw	r7,24(sp)
   817b4:	d8c00304 	addi	r3,sp,12
   817b8:	01c00084 	movi	r7,2
   817bc:	8809883a 	mov	r4,r17
   817c0:	d80d883a 	mov	r6,sp
   817c4:	d8c00015 	stw	r3,0(sp)
   817c8:	dcc00315 	stw	r19,12(sp)
   817cc:	da000215 	stw	r8,8(sp)
   817d0:	d9c00115 	stw	r7,4(sp)
   817d4:	d8800415 	stw	r2,16(sp)
   817d8:	0085a780 	call	85a78 <__sfvwrite_r>
   817dc:	00ffffc4 	movi	r3,-1
   817e0:	10000626 	beq	r2,zero,817fc <_puts_r+0x84>
   817e4:	1805883a 	mov	r2,r3
   817e8:	dfc00917 	ldw	ra,36(sp)
   817ec:	dcc00817 	ldw	r19,32(sp)
   817f0:	dc400717 	ldw	r17,28(sp)
   817f4:	dec00a04 	addi	sp,sp,40
   817f8:	f800283a 	ret
   817fc:	00c00284 	movi	r3,10
   81800:	1805883a 	mov	r2,r3
   81804:	dfc00917 	ldw	ra,36(sp)
   81808:	dcc00817 	ldw	r19,32(sp)
   8180c:	dc400717 	ldw	r17,28(sp)
   81810:	dec00a04 	addi	sp,sp,40
   81814:	f800283a 	ret

00081818 <puts>:
   81818:	00800274 	movhi	r2,9
   8181c:	10bf5a04 	addi	r2,r2,-664
   81820:	200b883a 	mov	r5,r4
   81824:	11000017 	ldw	r4,0(r2)
   81828:	00817781 	jmpi	81778 <_puts_r>

0008182c <strlen>:
   8182c:	208000cc 	andi	r2,r4,3
   81830:	2011883a 	mov	r8,r4
   81834:	1000161e 	bne	r2,zero,81890 <strlen+0x64>
   81838:	20c00017 	ldw	r3,0(r4)
   8183c:	017fbff4 	movhi	r5,65279
   81840:	297fbfc4 	addi	r5,r5,-257
   81844:	01e02074 	movhi	r7,32897
   81848:	39e02004 	addi	r7,r7,-32640
   8184c:	1945883a 	add	r2,r3,r5
   81850:	11c4703a 	and	r2,r2,r7
   81854:	00c6303a 	nor	r3,zero,r3
   81858:	1886703a 	and	r3,r3,r2
   8185c:	18000c1e 	bne	r3,zero,81890 <strlen+0x64>
   81860:	280d883a 	mov	r6,r5
   81864:	380b883a 	mov	r5,r7
   81868:	21000104 	addi	r4,r4,4
   8186c:	20800017 	ldw	r2,0(r4)
   81870:	1187883a 	add	r3,r2,r6
   81874:	1946703a 	and	r3,r3,r5
   81878:	0084303a 	nor	r2,zero,r2
   8187c:	10c4703a 	and	r2,r2,r3
   81880:	103ff926 	beq	r2,zero,81868 <strlen+0x3c>
   81884:	20800007 	ldb	r2,0(r4)
   81888:	10000326 	beq	r2,zero,81898 <strlen+0x6c>
   8188c:	21000044 	addi	r4,r4,1
   81890:	20800007 	ldb	r2,0(r4)
   81894:	103ffd1e 	bne	r2,zero,8188c <strlen+0x60>
   81898:	2205c83a 	sub	r2,r4,r8
   8189c:	f800283a 	ret

000818a0 <__sprint_r>:
   818a0:	30800217 	ldw	r2,8(r6)
   818a4:	defffe04 	addi	sp,sp,-8
   818a8:	dc000015 	stw	r16,0(sp)
   818ac:	dfc00115 	stw	ra,4(sp)
   818b0:	3021883a 	mov	r16,r6
   818b4:	0007883a 	mov	r3,zero
   818b8:	1000061e 	bne	r2,zero,818d4 <__sprint_r+0x34>
   818bc:	1805883a 	mov	r2,r3
   818c0:	30000115 	stw	zero,4(r6)
   818c4:	dfc00117 	ldw	ra,4(sp)
   818c8:	dc000017 	ldw	r16,0(sp)
   818cc:	dec00204 	addi	sp,sp,8
   818d0:	f800283a 	ret
   818d4:	0085a780 	call	85a78 <__sfvwrite_r>
   818d8:	1007883a 	mov	r3,r2
   818dc:	1805883a 	mov	r2,r3
   818e0:	80000115 	stw	zero,4(r16)
   818e4:	80000215 	stw	zero,8(r16)
   818e8:	dfc00117 	ldw	ra,4(sp)
   818ec:	dc000017 	ldw	r16,0(sp)
   818f0:	dec00204 	addi	sp,sp,8
   818f4:	f800283a 	ret

000818f8 <___vfprintf_internal_r>:
   818f8:	defea404 	addi	sp,sp,-1392
   818fc:	dd815815 	stw	r22,1376(sp)
   81900:	dc015215 	stw	r16,1352(sp)
   81904:	d9c15115 	stw	r7,1348(sp)
   81908:	dfc15b15 	stw	ra,1388(sp)
   8190c:	df015a15 	stw	fp,1384(sp)
   81910:	ddc15915 	stw	r23,1380(sp)
   81914:	dd415715 	stw	r21,1372(sp)
   81918:	dd015615 	stw	r20,1368(sp)
   8191c:	dcc15515 	stw	r19,1364(sp)
   81920:	dc815415 	stw	r18,1360(sp)
   81924:	dc415315 	stw	r17,1356(sp)
   81928:	282d883a 	mov	r22,r5
   8192c:	3021883a 	mov	r16,r6
   81930:	d9014f15 	stw	r4,1340(sp)
   81934:	008609c0 	call	8609c <_localeconv_r>
   81938:	10800017 	ldw	r2,0(r2)
   8193c:	d9c15117 	ldw	r7,1348(sp)
   81940:	d8814915 	stw	r2,1316(sp)
   81944:	d8814f17 	ldw	r2,1340(sp)
   81948:	10000226 	beq	r2,zero,81954 <___vfprintf_internal_r+0x5c>
   8194c:	10800e17 	ldw	r2,56(r2)
   81950:	10020d26 	beq	r2,zero,82188 <___vfprintf_internal_r+0x890>
   81954:	b080030b 	ldhu	r2,12(r22)
   81958:	1080020c 	andi	r2,r2,8
   8195c:	10020e26 	beq	r2,zero,82198 <___vfprintf_internal_r+0x8a0>
   81960:	b0800417 	ldw	r2,16(r22)
   81964:	10020c26 	beq	r2,zero,82198 <___vfprintf_internal_r+0x8a0>
   81968:	b200030b 	ldhu	r8,12(r22)
   8196c:	00800284 	movi	r2,10
   81970:	40c0068c 	andi	r3,r8,26
   81974:	18802f1e 	bne	r3,r2,81a34 <___vfprintf_internal_r+0x13c>
   81978:	b080038f 	ldh	r2,14(r22)
   8197c:	10002d16 	blt	r2,zero,81a34 <___vfprintf_internal_r+0x13c>
   81980:	b240038b 	ldhu	r9,14(r22)
   81984:	b2800717 	ldw	r10,28(r22)
   81988:	b2c00917 	ldw	r11,36(r22)
   8198c:	d9014f17 	ldw	r4,1340(sp)
   81990:	dc402904 	addi	r17,sp,164
   81994:	d8804004 	addi	r2,sp,256
   81998:	00c10004 	movi	r3,1024
   8199c:	423fff4c 	andi	r8,r8,65533
   819a0:	800d883a 	mov	r6,r16
   819a4:	880b883a 	mov	r5,r17
   819a8:	da002c0d 	sth	r8,176(sp)
   819ac:	da402c8d 	sth	r9,178(sp)
   819b0:	da803015 	stw	r10,192(sp)
   819b4:	dac03215 	stw	r11,200(sp)
   819b8:	d8802d15 	stw	r2,180(sp)
   819bc:	d8c02e15 	stw	r3,184(sp)
   819c0:	d8802915 	stw	r2,164(sp)
   819c4:	d8c02b15 	stw	r3,172(sp)
   819c8:	d8002f15 	stw	zero,188(sp)
   819cc:	00818f80 	call	818f8 <___vfprintf_internal_r>
   819d0:	d8814b15 	stw	r2,1324(sp)
   819d4:	10000416 	blt	r2,zero,819e8 <___vfprintf_internal_r+0xf0>
   819d8:	d9014f17 	ldw	r4,1340(sp)
   819dc:	880b883a 	mov	r5,r17
   819e0:	00851140 	call	85114 <_fflush_r>
   819e4:	1002321e 	bne	r2,zero,822b0 <___vfprintf_internal_r+0x9b8>
   819e8:	d8802c0b 	ldhu	r2,176(sp)
   819ec:	1080100c 	andi	r2,r2,64
   819f0:	10000326 	beq	r2,zero,81a00 <___vfprintf_internal_r+0x108>
   819f4:	b080030b 	ldhu	r2,12(r22)
   819f8:	10801014 	ori	r2,r2,64
   819fc:	b080030d 	sth	r2,12(r22)
   81a00:	d8814b17 	ldw	r2,1324(sp)
   81a04:	dfc15b17 	ldw	ra,1388(sp)
   81a08:	df015a17 	ldw	fp,1384(sp)
   81a0c:	ddc15917 	ldw	r23,1380(sp)
   81a10:	dd815817 	ldw	r22,1376(sp)
   81a14:	dd415717 	ldw	r21,1372(sp)
   81a18:	dd015617 	ldw	r20,1368(sp)
   81a1c:	dcc15517 	ldw	r19,1364(sp)
   81a20:	dc815417 	ldw	r18,1360(sp)
   81a24:	dc415317 	ldw	r17,1356(sp)
   81a28:	dc015217 	ldw	r16,1352(sp)
   81a2c:	dec15c04 	addi	sp,sp,1392
   81a30:	f800283a 	ret
   81a34:	0005883a 	mov	r2,zero
   81a38:	0007883a 	mov	r3,zero
   81a3c:	dd401904 	addi	r21,sp,100
   81a40:	d8814215 	stw	r2,1288(sp)
   81a44:	802f883a 	mov	r23,r16
   81a48:	d8c14315 	stw	r3,1292(sp)
   81a4c:	d8014b15 	stw	zero,1324(sp)
   81a50:	d8014815 	stw	zero,1312(sp)
   81a54:	d8014415 	stw	zero,1296(sp)
   81a58:	d8014715 	stw	zero,1308(sp)
   81a5c:	dd400c15 	stw	r21,48(sp)
   81a60:	d8000e15 	stw	zero,56(sp)
   81a64:	d8000d15 	stw	zero,52(sp)
   81a68:	b8800007 	ldb	r2,0(r23)
   81a6c:	10001926 	beq	r2,zero,81ad4 <___vfprintf_internal_r+0x1dc>
   81a70:	00c00944 	movi	r3,37
   81a74:	10c01726 	beq	r2,r3,81ad4 <___vfprintf_internal_r+0x1dc>
   81a78:	b821883a 	mov	r16,r23
   81a7c:	00000106 	br	81a84 <___vfprintf_internal_r+0x18c>
   81a80:	10c00326 	beq	r2,r3,81a90 <___vfprintf_internal_r+0x198>
   81a84:	84000044 	addi	r16,r16,1
   81a88:	80800007 	ldb	r2,0(r16)
   81a8c:	103ffc1e 	bne	r2,zero,81a80 <___vfprintf_internal_r+0x188>
   81a90:	85e7c83a 	sub	r19,r16,r23
   81a94:	98000e26 	beq	r19,zero,81ad0 <___vfprintf_internal_r+0x1d8>
   81a98:	dc800e17 	ldw	r18,56(sp)
   81a9c:	dc400d17 	ldw	r17,52(sp)
   81aa0:	008001c4 	movi	r2,7
   81aa4:	94e5883a 	add	r18,r18,r19
   81aa8:	8c400044 	addi	r17,r17,1
   81aac:	adc00015 	stw	r23,0(r21)
   81ab0:	dc800e15 	stw	r18,56(sp)
   81ab4:	acc00115 	stw	r19,4(r21)
   81ab8:	dc400d15 	stw	r17,52(sp)
   81abc:	14428b16 	blt	r2,r17,824ec <___vfprintf_internal_r+0xbf4>
   81ac0:	ad400204 	addi	r21,r21,8
   81ac4:	d9014b17 	ldw	r4,1324(sp)
   81ac8:	24c9883a 	add	r4,r4,r19
   81acc:	d9014b15 	stw	r4,1324(sp)
   81ad0:	802f883a 	mov	r23,r16
   81ad4:	b8800007 	ldb	r2,0(r23)
   81ad8:	10013c26 	beq	r2,zero,81fcc <___vfprintf_internal_r+0x6d4>
   81adc:	bdc00044 	addi	r23,r23,1
   81ae0:	d8000405 	stb	zero,16(sp)
   81ae4:	b8c00007 	ldb	r3,0(r23)
   81ae8:	04ffffc4 	movi	r19,-1
   81aec:	d8014c15 	stw	zero,1328(sp)
   81af0:	d8014a15 	stw	zero,1320(sp)
   81af4:	d8c14d15 	stw	r3,1332(sp)
   81af8:	bdc00044 	addi	r23,r23,1
   81afc:	d9414d17 	ldw	r5,1332(sp)
   81b00:	00801604 	movi	r2,88
   81b04:	28fff804 	addi	r3,r5,-32
   81b08:	10c06036 	bltu	r2,r3,81c8c <___vfprintf_internal_r+0x394>
   81b0c:	18c5883a 	add	r2,r3,r3
   81b10:	1085883a 	add	r2,r2,r2
   81b14:	00c00234 	movhi	r3,8
   81b18:	18c6ca04 	addi	r3,r3,6952
   81b1c:	10c5883a 	add	r2,r2,r3
   81b20:	11000017 	ldw	r4,0(r2)
   81b24:	2000683a 	jmp	r4
   81b28:	00082a9c 	xori	zero,zero,8362
   81b2c:	00081c8c 	andi	zero,zero,8306
   81b30:	00081c8c 	andi	zero,zero,8306
   81b34:	00082a88 	cmpgei	zero,zero,8362
   81b38:	00081c8c 	andi	zero,zero,8306
   81b3c:	00081c8c 	andi	zero,zero,8306
   81b40:	00081c8c 	andi	zero,zero,8306
   81b44:	00081c8c 	andi	zero,zero,8306
   81b48:	00081c8c 	andi	zero,zero,8306
   81b4c:	00081c8c 	andi	zero,zero,8306
   81b50:	00082868 	cmpgeui	zero,zero,8353
   81b54:	00082a78 	rdprs	zero,zero,8361
   81b58:	00081c8c 	andi	zero,zero,8306
   81b5c:	00082880 	call	8288 <__alt_mem_sram-0x77d78>
   81b60:	00082b20 	cmpeqi	zero,zero,8364
   81b64:	00081c8c 	andi	zero,zero,8306
   81b68:	00082b0c 	andi	zero,zero,8364
   81b6c:	00082ac8 	cmpgei	zero,zero,8363
   81b70:	00082ac8 	cmpgei	zero,zero,8363
   81b74:	00082ac8 	cmpgei	zero,zero,8363
   81b78:	00082ac8 	cmpgei	zero,zero,8363
   81b7c:	00082ac8 	cmpgei	zero,zero,8363
   81b80:	00082ac8 	cmpgei	zero,zero,8363
   81b84:	00082ac8 	cmpgei	zero,zero,8363
   81b88:	00082ac8 	cmpgei	zero,zero,8363
   81b8c:	00082ac8 	cmpgei	zero,zero,8363
   81b90:	00081c8c 	andi	zero,zero,8306
   81b94:	00081c8c 	andi	zero,zero,8306
   81b98:	00081c8c 	andi	zero,zero,8306
   81b9c:	00081c8c 	andi	zero,zero,8306
   81ba0:	00081c8c 	andi	zero,zero,8306
   81ba4:	00081c8c 	andi	zero,zero,8306
   81ba8:	00081c8c 	andi	zero,zero,8306
   81bac:	00081c8c 	andi	zero,zero,8306
   81bb0:	00081c8c 	andi	zero,zero,8306
   81bb4:	00081c8c 	andi	zero,zero,8306
   81bb8:	000822e4 	muli	zero,zero,8331
   81bbc:	00082950 	cmplti	zero,zero,8357
   81bc0:	00081c8c 	andi	zero,zero,8306
   81bc4:	00082950 	cmplti	zero,zero,8357
   81bc8:	00081c8c 	andi	zero,zero,8306
   81bcc:	00081c8c 	andi	zero,zero,8306
   81bd0:	00081c8c 	andi	zero,zero,8306
   81bd4:	00081c8c 	andi	zero,zero,8306
   81bd8:	00082ab4 	movhi	zero,8362
   81bdc:	00081c8c 	andi	zero,zero,8306
   81be0:	00081c8c 	andi	zero,zero,8306
   81be4:	00082398 	cmpnei	zero,zero,8334
   81be8:	00081c8c 	andi	zero,zero,8306
   81bec:	00081c8c 	andi	zero,zero,8306
   81bf0:	00081c8c 	andi	zero,zero,8306
   81bf4:	00081c8c 	andi	zero,zero,8306
   81bf8:	00081c8c 	andi	zero,zero,8306
   81bfc:	000823e4 	muli	zero,zero,8335
   81c00:	00081c8c 	andi	zero,zero,8306
   81c04:	00081c8c 	andi	zero,zero,8306
   81c08:	00082a04 	movi	zero,8360
   81c0c:	00081c8c 	andi	zero,zero,8306
   81c10:	00081c8c 	andi	zero,zero,8306
   81c14:	00081c8c 	andi	zero,zero,8306
   81c18:	00081c8c 	andi	zero,zero,8306
   81c1c:	00081c8c 	andi	zero,zero,8306
   81c20:	00081c8c 	andi	zero,zero,8306
   81c24:	00081c8c 	andi	zero,zero,8306
   81c28:	00081c8c 	andi	zero,zero,8306
   81c2c:	00081c8c 	andi	zero,zero,8306
   81c30:	00081c8c 	andi	zero,zero,8306
   81c34:	000829d8 	cmpnei	zero,zero,8359
   81c38:	000822f0 	cmpltui	zero,zero,8331
   81c3c:	00082950 	cmplti	zero,zero,8357
   81c40:	00082950 	cmplti	zero,zero,8357
   81c44:	00082950 	cmplti	zero,zero,8357
   81c48:	0008293c 	xorhi	zero,zero,8356
   81c4c:	000822f0 	cmpltui	zero,zero,8331
   81c50:	00081c8c 	andi	zero,zero,8306
   81c54:	00081c8c 	andi	zero,zero,8306
   81c58:	000828c4 	movi	zero,8355
   81c5c:	00081c8c 	andi	zero,zero,8306
   81c60:	00082894 	movui	zero,8354
   81c64:	000823a4 	muli	zero,zero,8334
   81c68:	000828f4 	movhi	zero,8355
   81c6c:	000828e0 	cmpeqi	zero,zero,8355
   81c70:	00081c8c 	andi	zero,zero,8306
   81c74:	00082b88 	cmpgei	zero,zero,8366
   81c78:	00081c8c 	andi	zero,zero,8306
   81c7c:	000823f0 	cmpltui	zero,zero,8335
   81c80:	00081c8c 	andi	zero,zero,8306
   81c84:	00081c8c 	andi	zero,zero,8306
   81c88:	00082a68 	cmpgeui	zero,zero,8361
   81c8c:	d9014d17 	ldw	r4,1332(sp)
   81c90:	2000ce26 	beq	r4,zero,81fcc <___vfprintf_internal_r+0x6d4>
   81c94:	01400044 	movi	r5,1
   81c98:	d9800f04 	addi	r6,sp,60
   81c9c:	d9c14015 	stw	r7,1280(sp)
   81ca0:	d9414515 	stw	r5,1300(sp)
   81ca4:	d9814115 	stw	r6,1284(sp)
   81ca8:	280f883a 	mov	r7,r5
   81cac:	d9000f05 	stb	r4,60(sp)
   81cb0:	d8000405 	stb	zero,16(sp)
   81cb4:	d8014615 	stw	zero,1304(sp)
   81cb8:	d8c14c17 	ldw	r3,1328(sp)
   81cbc:	1880008c 	andi	r2,r3,2
   81cc0:	1005003a 	cmpeq	r2,r2,zero
   81cc4:	d8815015 	stw	r2,1344(sp)
   81cc8:	1000031e 	bne	r2,zero,81cd8 <___vfprintf_internal_r+0x3e0>
   81ccc:	d9014517 	ldw	r4,1300(sp)
   81cd0:	21000084 	addi	r4,r4,2
   81cd4:	d9014515 	stw	r4,1300(sp)
   81cd8:	d9414c17 	ldw	r5,1328(sp)
   81cdc:	2940210c 	andi	r5,r5,132
   81ce0:	d9414e15 	stw	r5,1336(sp)
   81ce4:	28002d1e 	bne	r5,zero,81d9c <___vfprintf_internal_r+0x4a4>
   81ce8:	d9814a17 	ldw	r6,1320(sp)
   81cec:	d8814517 	ldw	r2,1300(sp)
   81cf0:	30a1c83a 	sub	r16,r6,r2
   81cf4:	0400290e 	bge	zero,r16,81d9c <___vfprintf_internal_r+0x4a4>
   81cf8:	00800404 	movi	r2,16
   81cfc:	14045e0e 	bge	r2,r16,82e78 <___vfprintf_internal_r+0x1580>
   81d00:	dc800e17 	ldw	r18,56(sp)
   81d04:	dc400d17 	ldw	r17,52(sp)
   81d08:	1027883a 	mov	r19,r2
   81d0c:	07000274 	movhi	fp,9
   81d10:	e7376584 	addi	fp,fp,-8810
   81d14:	050001c4 	movi	r20,7
   81d18:	00000306 	br	81d28 <___vfprintf_internal_r+0x430>
   81d1c:	843ffc04 	addi	r16,r16,-16
   81d20:	ad400204 	addi	r21,r21,8
   81d24:	9c00130e 	bge	r19,r16,81d74 <___vfprintf_internal_r+0x47c>
   81d28:	94800404 	addi	r18,r18,16
   81d2c:	8c400044 	addi	r17,r17,1
   81d30:	af000015 	stw	fp,0(r21)
   81d34:	acc00115 	stw	r19,4(r21)
   81d38:	dc800e15 	stw	r18,56(sp)
   81d3c:	dc400d15 	stw	r17,52(sp)
   81d40:	a47ff60e 	bge	r20,r17,81d1c <___vfprintf_internal_r+0x424>
   81d44:	d9014f17 	ldw	r4,1340(sp)
   81d48:	b00b883a 	mov	r5,r22
   81d4c:	d9800c04 	addi	r6,sp,48
   81d50:	d9c15115 	stw	r7,1348(sp)
   81d54:	00818a00 	call	818a0 <__sprint_r>
   81d58:	d9c15117 	ldw	r7,1348(sp)
   81d5c:	10009e1e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   81d60:	843ffc04 	addi	r16,r16,-16
   81d64:	dc800e17 	ldw	r18,56(sp)
   81d68:	dc400d17 	ldw	r17,52(sp)
   81d6c:	dd401904 	addi	r21,sp,100
   81d70:	9c3fed16 	blt	r19,r16,81d28 <___vfprintf_internal_r+0x430>
   81d74:	9425883a 	add	r18,r18,r16
   81d78:	8c400044 	addi	r17,r17,1
   81d7c:	008001c4 	movi	r2,7
   81d80:	af000015 	stw	fp,0(r21)
   81d84:	ac000115 	stw	r16,4(r21)
   81d88:	dc800e15 	stw	r18,56(sp)
   81d8c:	dc400d15 	stw	r17,52(sp)
   81d90:	1441f516 	blt	r2,r17,82568 <___vfprintf_internal_r+0xc70>
   81d94:	ad400204 	addi	r21,r21,8
   81d98:	00000206 	br	81da4 <___vfprintf_internal_r+0x4ac>
   81d9c:	dc800e17 	ldw	r18,56(sp)
   81da0:	dc400d17 	ldw	r17,52(sp)
   81da4:	d8800407 	ldb	r2,16(sp)
   81da8:	10000b26 	beq	r2,zero,81dd8 <___vfprintf_internal_r+0x4e0>
   81dac:	00800044 	movi	r2,1
   81db0:	94800044 	addi	r18,r18,1
   81db4:	8c400044 	addi	r17,r17,1
   81db8:	a8800115 	stw	r2,4(r21)
   81dbc:	d8c00404 	addi	r3,sp,16
   81dc0:	008001c4 	movi	r2,7
   81dc4:	a8c00015 	stw	r3,0(r21)
   81dc8:	dc800e15 	stw	r18,56(sp)
   81dcc:	dc400d15 	stw	r17,52(sp)
   81dd0:	1441da16 	blt	r2,r17,8253c <___vfprintf_internal_r+0xc44>
   81dd4:	ad400204 	addi	r21,r21,8
   81dd8:	d9015017 	ldw	r4,1344(sp)
   81ddc:	20000b1e 	bne	r4,zero,81e0c <___vfprintf_internal_r+0x514>
   81de0:	d8800444 	addi	r2,sp,17
   81de4:	94800084 	addi	r18,r18,2
   81de8:	8c400044 	addi	r17,r17,1
   81dec:	a8800015 	stw	r2,0(r21)
   81df0:	00c00084 	movi	r3,2
   81df4:	008001c4 	movi	r2,7
   81df8:	a8c00115 	stw	r3,4(r21)
   81dfc:	dc800e15 	stw	r18,56(sp)
   81e00:	dc400d15 	stw	r17,52(sp)
   81e04:	1441c216 	blt	r2,r17,82510 <___vfprintf_internal_r+0xc18>
   81e08:	ad400204 	addi	r21,r21,8
   81e0c:	d9414e17 	ldw	r5,1336(sp)
   81e10:	00802004 	movi	r2,128
   81e14:	2880b126 	beq	r5,r2,820dc <___vfprintf_internal_r+0x7e4>
   81e18:	d8c14617 	ldw	r3,1304(sp)
   81e1c:	19e1c83a 	sub	r16,r3,r7
   81e20:	0400260e 	bge	zero,r16,81ebc <___vfprintf_internal_r+0x5c4>
   81e24:	00800404 	movi	r2,16
   81e28:	1403cf0e 	bge	r2,r16,82d68 <___vfprintf_internal_r+0x1470>
   81e2c:	1027883a 	mov	r19,r2
   81e30:	07000274 	movhi	fp,9
   81e34:	e7376184 	addi	fp,fp,-8826
   81e38:	050001c4 	movi	r20,7
   81e3c:	00000306 	br	81e4c <___vfprintf_internal_r+0x554>
   81e40:	843ffc04 	addi	r16,r16,-16
   81e44:	ad400204 	addi	r21,r21,8
   81e48:	9c00130e 	bge	r19,r16,81e98 <___vfprintf_internal_r+0x5a0>
   81e4c:	94800404 	addi	r18,r18,16
   81e50:	8c400044 	addi	r17,r17,1
   81e54:	af000015 	stw	fp,0(r21)
   81e58:	acc00115 	stw	r19,4(r21)
   81e5c:	dc800e15 	stw	r18,56(sp)
   81e60:	dc400d15 	stw	r17,52(sp)
   81e64:	a47ff60e 	bge	r20,r17,81e40 <___vfprintf_internal_r+0x548>
   81e68:	d9014f17 	ldw	r4,1340(sp)
   81e6c:	b00b883a 	mov	r5,r22
   81e70:	d9800c04 	addi	r6,sp,48
   81e74:	d9c15115 	stw	r7,1348(sp)
   81e78:	00818a00 	call	818a0 <__sprint_r>
   81e7c:	d9c15117 	ldw	r7,1348(sp)
   81e80:	1000551e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   81e84:	843ffc04 	addi	r16,r16,-16
   81e88:	dc800e17 	ldw	r18,56(sp)
   81e8c:	dc400d17 	ldw	r17,52(sp)
   81e90:	dd401904 	addi	r21,sp,100
   81e94:	9c3fed16 	blt	r19,r16,81e4c <___vfprintf_internal_r+0x554>
   81e98:	9425883a 	add	r18,r18,r16
   81e9c:	8c400044 	addi	r17,r17,1
   81ea0:	008001c4 	movi	r2,7
   81ea4:	af000015 	stw	fp,0(r21)
   81ea8:	ac000115 	stw	r16,4(r21)
   81eac:	dc800e15 	stw	r18,56(sp)
   81eb0:	dc400d15 	stw	r17,52(sp)
   81eb4:	14418216 	blt	r2,r17,824c0 <___vfprintf_internal_r+0xbc8>
   81eb8:	ad400204 	addi	r21,r21,8
   81ebc:	d9014c17 	ldw	r4,1328(sp)
   81ec0:	2080400c 	andi	r2,r4,256
   81ec4:	10004a1e 	bne	r2,zero,81ff0 <___vfprintf_internal_r+0x6f8>
   81ec8:	d9414117 	ldw	r5,1284(sp)
   81ecc:	91e5883a 	add	r18,r18,r7
   81ed0:	8c400044 	addi	r17,r17,1
   81ed4:	008001c4 	movi	r2,7
   81ed8:	a9400015 	stw	r5,0(r21)
   81edc:	a9c00115 	stw	r7,4(r21)
   81ee0:	dc800e15 	stw	r18,56(sp)
   81ee4:	dc400d15 	stw	r17,52(sp)
   81ee8:	14416716 	blt	r2,r17,82488 <___vfprintf_internal_r+0xb90>
   81eec:	a8c00204 	addi	r3,r21,8
   81ef0:	d9814c17 	ldw	r6,1328(sp)
   81ef4:	3080010c 	andi	r2,r6,4
   81ef8:	10002826 	beq	r2,zero,81f9c <___vfprintf_internal_r+0x6a4>
   81efc:	d8814a17 	ldw	r2,1320(sp)
   81f00:	d9014517 	ldw	r4,1300(sp)
   81f04:	1121c83a 	sub	r16,r2,r4
   81f08:	0400240e 	bge	zero,r16,81f9c <___vfprintf_internal_r+0x6a4>
   81f0c:	00800404 	movi	r2,16
   81f10:	1404550e 	bge	r2,r16,83068 <___vfprintf_internal_r+0x1770>
   81f14:	dc400d17 	ldw	r17,52(sp)
   81f18:	1027883a 	mov	r19,r2
   81f1c:	07000274 	movhi	fp,9
   81f20:	e7376584 	addi	fp,fp,-8810
   81f24:	050001c4 	movi	r20,7
   81f28:	00000306 	br	81f38 <___vfprintf_internal_r+0x640>
   81f2c:	843ffc04 	addi	r16,r16,-16
   81f30:	18c00204 	addi	r3,r3,8
   81f34:	9c00110e 	bge	r19,r16,81f7c <___vfprintf_internal_r+0x684>
   81f38:	94800404 	addi	r18,r18,16
   81f3c:	8c400044 	addi	r17,r17,1
   81f40:	1f000015 	stw	fp,0(r3)
   81f44:	1cc00115 	stw	r19,4(r3)
   81f48:	dc800e15 	stw	r18,56(sp)
   81f4c:	dc400d15 	stw	r17,52(sp)
   81f50:	a47ff60e 	bge	r20,r17,81f2c <___vfprintf_internal_r+0x634>
   81f54:	d9014f17 	ldw	r4,1340(sp)
   81f58:	b00b883a 	mov	r5,r22
   81f5c:	d9800c04 	addi	r6,sp,48
   81f60:	00818a00 	call	818a0 <__sprint_r>
   81f64:	10001c1e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   81f68:	843ffc04 	addi	r16,r16,-16
   81f6c:	dc800e17 	ldw	r18,56(sp)
   81f70:	dc400d17 	ldw	r17,52(sp)
   81f74:	d8c01904 	addi	r3,sp,100
   81f78:	9c3fef16 	blt	r19,r16,81f38 <___vfprintf_internal_r+0x640>
   81f7c:	9425883a 	add	r18,r18,r16
   81f80:	8c400044 	addi	r17,r17,1
   81f84:	008001c4 	movi	r2,7
   81f88:	1f000015 	stw	fp,0(r3)
   81f8c:	1c000115 	stw	r16,4(r3)
   81f90:	dc800e15 	stw	r18,56(sp)
   81f94:	dc400d15 	stw	r17,52(sp)
   81f98:	1440cb16 	blt	r2,r17,822c8 <___vfprintf_internal_r+0x9d0>
   81f9c:	d8814a17 	ldw	r2,1320(sp)
   81fa0:	d9414517 	ldw	r5,1300(sp)
   81fa4:	1140010e 	bge	r2,r5,81fac <___vfprintf_internal_r+0x6b4>
   81fa8:	2805883a 	mov	r2,r5
   81fac:	d9814b17 	ldw	r6,1324(sp)
   81fb0:	308d883a 	add	r6,r6,r2
   81fb4:	d9814b15 	stw	r6,1324(sp)
   81fb8:	90013b1e 	bne	r18,zero,824a8 <___vfprintf_internal_r+0xbb0>
   81fbc:	d9c14017 	ldw	r7,1280(sp)
   81fc0:	dd401904 	addi	r21,sp,100
   81fc4:	d8000d15 	stw	zero,52(sp)
   81fc8:	003ea706 	br	81a68 <___vfprintf_internal_r+0x170>
   81fcc:	d8800e17 	ldw	r2,56(sp)
   81fd0:	1005451e 	bne	r2,zero,834e8 <___vfprintf_internal_r+0x1bf0>
   81fd4:	d8000d15 	stw	zero,52(sp)
   81fd8:	b080030b 	ldhu	r2,12(r22)
   81fdc:	1080100c 	andi	r2,r2,64
   81fe0:	103e8726 	beq	r2,zero,81a00 <___vfprintf_internal_r+0x108>
   81fe4:	00bfffc4 	movi	r2,-1
   81fe8:	d8814b15 	stw	r2,1324(sp)
   81fec:	003e8406 	br	81a00 <___vfprintf_internal_r+0x108>
   81ff0:	d9814d17 	ldw	r6,1332(sp)
   81ff4:	00801944 	movi	r2,101
   81ff8:	11806e16 	blt	r2,r6,821b4 <___vfprintf_internal_r+0x8bc>
   81ffc:	d9414717 	ldw	r5,1308(sp)
   82000:	00c00044 	movi	r3,1
   82004:	1943490e 	bge	r3,r5,82d2c <___vfprintf_internal_r+0x1434>
   82008:	d8814117 	ldw	r2,1284(sp)
   8200c:	94800044 	addi	r18,r18,1
   82010:	8c400044 	addi	r17,r17,1
   82014:	a8800015 	stw	r2,0(r21)
   82018:	008001c4 	movi	r2,7
   8201c:	a8c00115 	stw	r3,4(r21)
   82020:	dc800e15 	stw	r18,56(sp)
   82024:	dc400d15 	stw	r17,52(sp)
   82028:	1441ca16 	blt	r2,r17,82754 <___vfprintf_internal_r+0xe5c>
   8202c:	a8c00204 	addi	r3,r21,8
   82030:	d9014917 	ldw	r4,1316(sp)
   82034:	00800044 	movi	r2,1
   82038:	94800044 	addi	r18,r18,1
   8203c:	8c400044 	addi	r17,r17,1
   82040:	18800115 	stw	r2,4(r3)
   82044:	008001c4 	movi	r2,7
   82048:	19000015 	stw	r4,0(r3)
   8204c:	dc800e15 	stw	r18,56(sp)
   82050:	dc400d15 	stw	r17,52(sp)
   82054:	1441b616 	blt	r2,r17,82730 <___vfprintf_internal_r+0xe38>
   82058:	1cc00204 	addi	r19,r3,8
   8205c:	d9014217 	ldw	r4,1288(sp)
   82060:	d9414317 	ldw	r5,1292(sp)
   82064:	000d883a 	mov	r6,zero
   82068:	000f883a 	mov	r7,zero
   8206c:	008a3ac0 	call	8a3ac <__nedf2>
   82070:	10017426 	beq	r2,zero,82644 <___vfprintf_internal_r+0xd4c>
   82074:	d9414717 	ldw	r5,1308(sp)
   82078:	d9814117 	ldw	r6,1284(sp)
   8207c:	8c400044 	addi	r17,r17,1
   82080:	2c85883a 	add	r2,r5,r18
   82084:	14bfffc4 	addi	r18,r2,-1
   82088:	28bfffc4 	addi	r2,r5,-1
   8208c:	30c00044 	addi	r3,r6,1
   82090:	98800115 	stw	r2,4(r19)
   82094:	008001c4 	movi	r2,7
   82098:	98c00015 	stw	r3,0(r19)
   8209c:	dc800e15 	stw	r18,56(sp)
   820a0:	dc400d15 	stw	r17,52(sp)
   820a4:	14418e16 	blt	r2,r17,826e0 <___vfprintf_internal_r+0xde8>
   820a8:	9cc00204 	addi	r19,r19,8
   820ac:	d9414817 	ldw	r5,1312(sp)
   820b0:	d8800804 	addi	r2,sp,32
   820b4:	8c400044 	addi	r17,r17,1
   820b8:	9165883a 	add	r18,r18,r5
   820bc:	98800015 	stw	r2,0(r19)
   820c0:	008001c4 	movi	r2,7
   820c4:	99400115 	stw	r5,4(r19)
   820c8:	dc800e15 	stw	r18,56(sp)
   820cc:	dc400d15 	stw	r17,52(sp)
   820d0:	1440ed16 	blt	r2,r17,82488 <___vfprintf_internal_r+0xb90>
   820d4:	98c00204 	addi	r3,r19,8
   820d8:	003f8506 	br	81ef0 <___vfprintf_internal_r+0x5f8>
   820dc:	d9814a17 	ldw	r6,1320(sp)
   820e0:	d8814517 	ldw	r2,1300(sp)
   820e4:	30a1c83a 	sub	r16,r6,r2
   820e8:	043f4b0e 	bge	zero,r16,81e18 <___vfprintf_internal_r+0x520>
   820ec:	00800404 	movi	r2,16
   820f0:	14043a0e 	bge	r2,r16,831dc <___vfprintf_internal_r+0x18e4>
   820f4:	1027883a 	mov	r19,r2
   820f8:	07000274 	movhi	fp,9
   820fc:	e7376184 	addi	fp,fp,-8826
   82100:	050001c4 	movi	r20,7
   82104:	00000306 	br	82114 <___vfprintf_internal_r+0x81c>
   82108:	843ffc04 	addi	r16,r16,-16
   8210c:	ad400204 	addi	r21,r21,8
   82110:	9c00130e 	bge	r19,r16,82160 <___vfprintf_internal_r+0x868>
   82114:	94800404 	addi	r18,r18,16
   82118:	8c400044 	addi	r17,r17,1
   8211c:	af000015 	stw	fp,0(r21)
   82120:	acc00115 	stw	r19,4(r21)
   82124:	dc800e15 	stw	r18,56(sp)
   82128:	dc400d15 	stw	r17,52(sp)
   8212c:	a47ff60e 	bge	r20,r17,82108 <___vfprintf_internal_r+0x810>
   82130:	d9014f17 	ldw	r4,1340(sp)
   82134:	b00b883a 	mov	r5,r22
   82138:	d9800c04 	addi	r6,sp,48
   8213c:	d9c15115 	stw	r7,1348(sp)
   82140:	00818a00 	call	818a0 <__sprint_r>
   82144:	d9c15117 	ldw	r7,1348(sp)
   82148:	103fa31e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   8214c:	843ffc04 	addi	r16,r16,-16
   82150:	dc800e17 	ldw	r18,56(sp)
   82154:	dc400d17 	ldw	r17,52(sp)
   82158:	dd401904 	addi	r21,sp,100
   8215c:	9c3fed16 	blt	r19,r16,82114 <___vfprintf_internal_r+0x81c>
   82160:	9425883a 	add	r18,r18,r16
   82164:	8c400044 	addi	r17,r17,1
   82168:	008001c4 	movi	r2,7
   8216c:	af000015 	stw	fp,0(r21)
   82170:	ac000115 	stw	r16,4(r21)
   82174:	dc800e15 	stw	r18,56(sp)
   82178:	dc400d15 	stw	r17,52(sp)
   8217c:	14416116 	blt	r2,r17,82704 <___vfprintf_internal_r+0xe0c>
   82180:	ad400204 	addi	r21,r21,8
   82184:	003f2406 	br	81e18 <___vfprintf_internal_r+0x520>
   82188:	d9014f17 	ldw	r4,1340(sp)
   8218c:	00853ac0 	call	853ac <__sinit>
   82190:	d9c15117 	ldw	r7,1348(sp)
   82194:	003def06 	br	81954 <___vfprintf_internal_r+0x5c>
   82198:	d9014f17 	ldw	r4,1340(sp)
   8219c:	b00b883a 	mov	r5,r22
   821a0:	d9c15115 	stw	r7,1348(sp)
   821a4:	00837e00 	call	837e0 <__swsetup_r>
   821a8:	d9c15117 	ldw	r7,1348(sp)
   821ac:	103dee26 	beq	r2,zero,81968 <___vfprintf_internal_r+0x70>
   821b0:	003f8c06 	br	81fe4 <___vfprintf_internal_r+0x6ec>
   821b4:	d9014217 	ldw	r4,1288(sp)
   821b8:	d9414317 	ldw	r5,1292(sp)
   821bc:	000d883a 	mov	r6,zero
   821c0:	000f883a 	mov	r7,zero
   821c4:	008a3240 	call	8a324 <__eqdf2>
   821c8:	1000f21e 	bne	r2,zero,82594 <___vfprintf_internal_r+0xc9c>
   821cc:	00800274 	movhi	r2,9
   821d0:	10b76104 	addi	r2,r2,-8828
   821d4:	94800044 	addi	r18,r18,1
   821d8:	8c400044 	addi	r17,r17,1
   821dc:	a8800015 	stw	r2,0(r21)
   821e0:	00c00044 	movi	r3,1
   821e4:	008001c4 	movi	r2,7
   821e8:	a8c00115 	stw	r3,4(r21)
   821ec:	dc800e15 	stw	r18,56(sp)
   821f0:	dc400d15 	stw	r17,52(sp)
   821f4:	14430016 	blt	r2,r17,82df8 <___vfprintf_internal_r+0x1500>
   821f8:	a8c00204 	addi	r3,r21,8
   821fc:	d8800517 	ldw	r2,20(sp)
   82200:	d9014717 	ldw	r4,1308(sp)
   82204:	11015c0e 	bge	r2,r4,82778 <___vfprintf_internal_r+0xe80>
   82208:	dc400d17 	ldw	r17,52(sp)
   8220c:	d9814917 	ldw	r6,1316(sp)
   82210:	00800044 	movi	r2,1
   82214:	94800044 	addi	r18,r18,1
   82218:	8c400044 	addi	r17,r17,1
   8221c:	18800115 	stw	r2,4(r3)
   82220:	008001c4 	movi	r2,7
   82224:	19800015 	stw	r6,0(r3)
   82228:	dc800e15 	stw	r18,56(sp)
   8222c:	dc400d15 	stw	r17,52(sp)
   82230:	14431616 	blt	r2,r17,82e8c <___vfprintf_internal_r+0x1594>
   82234:	18c00204 	addi	r3,r3,8
   82238:	d8814717 	ldw	r2,1308(sp)
   8223c:	143fffc4 	addi	r16,r2,-1
   82240:	043f2b0e 	bge	zero,r16,81ef0 <___vfprintf_internal_r+0x5f8>
   82244:	00800404 	movi	r2,16
   82248:	1402a80e 	bge	r2,r16,82cec <___vfprintf_internal_r+0x13f4>
   8224c:	dc400d17 	ldw	r17,52(sp)
   82250:	1027883a 	mov	r19,r2
   82254:	07000274 	movhi	fp,9
   82258:	e7376184 	addi	fp,fp,-8826
   8225c:	050001c4 	movi	r20,7
   82260:	00000306 	br	82270 <___vfprintf_internal_r+0x978>
   82264:	18c00204 	addi	r3,r3,8
   82268:	843ffc04 	addi	r16,r16,-16
   8226c:	9c02a20e 	bge	r19,r16,82cf8 <___vfprintf_internal_r+0x1400>
   82270:	94800404 	addi	r18,r18,16
   82274:	8c400044 	addi	r17,r17,1
   82278:	1f000015 	stw	fp,0(r3)
   8227c:	1cc00115 	stw	r19,4(r3)
   82280:	dc800e15 	stw	r18,56(sp)
   82284:	dc400d15 	stw	r17,52(sp)
   82288:	a47ff60e 	bge	r20,r17,82264 <___vfprintf_internal_r+0x96c>
   8228c:	d9014f17 	ldw	r4,1340(sp)
   82290:	b00b883a 	mov	r5,r22
   82294:	d9800c04 	addi	r6,sp,48
   82298:	00818a00 	call	818a0 <__sprint_r>
   8229c:	103f4e1e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   822a0:	dc800e17 	ldw	r18,56(sp)
   822a4:	dc400d17 	ldw	r17,52(sp)
   822a8:	d8c01904 	addi	r3,sp,100
   822ac:	003fee06 	br	82268 <___vfprintf_internal_r+0x970>
   822b0:	d8802c0b 	ldhu	r2,176(sp)
   822b4:	00ffffc4 	movi	r3,-1
   822b8:	d8c14b15 	stw	r3,1324(sp)
   822bc:	1080100c 	andi	r2,r2,64
   822c0:	103dcc1e 	bne	r2,zero,819f4 <___vfprintf_internal_r+0xfc>
   822c4:	003dce06 	br	81a00 <___vfprintf_internal_r+0x108>
   822c8:	d9014f17 	ldw	r4,1340(sp)
   822cc:	b00b883a 	mov	r5,r22
   822d0:	d9800c04 	addi	r6,sp,48
   822d4:	00818a00 	call	818a0 <__sprint_r>
   822d8:	103f3f1e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   822dc:	dc800e17 	ldw	r18,56(sp)
   822e0:	003f2e06 	br	81f9c <___vfprintf_internal_r+0x6a4>
   822e4:	d9414c17 	ldw	r5,1328(sp)
   822e8:	29400414 	ori	r5,r5,16
   822ec:	d9414c15 	stw	r5,1328(sp)
   822f0:	d9814c17 	ldw	r6,1328(sp)
   822f4:	3080080c 	andi	r2,r6,32
   822f8:	10014f1e 	bne	r2,zero,82838 <___vfprintf_internal_r+0xf40>
   822fc:	d8c14c17 	ldw	r3,1328(sp)
   82300:	1880040c 	andi	r2,r3,16
   82304:	1002f01e 	bne	r2,zero,82ec8 <___vfprintf_internal_r+0x15d0>
   82308:	d9014c17 	ldw	r4,1328(sp)
   8230c:	2080100c 	andi	r2,r4,64
   82310:	1002ed26 	beq	r2,zero,82ec8 <___vfprintf_internal_r+0x15d0>
   82314:	3880000f 	ldh	r2,0(r7)
   82318:	39c00104 	addi	r7,r7,4
   8231c:	d9c14015 	stw	r7,1280(sp)
   82320:	1023d7fa 	srai	r17,r2,31
   82324:	1021883a 	mov	r16,r2
   82328:	88037816 	blt	r17,zero,8310c <___vfprintf_internal_r+0x1814>
   8232c:	01000044 	movi	r4,1
   82330:	98000416 	blt	r19,zero,82344 <___vfprintf_internal_r+0xa4c>
   82334:	d8c14c17 	ldw	r3,1328(sp)
   82338:	00bfdfc4 	movi	r2,-129
   8233c:	1886703a 	and	r3,r3,r2
   82340:	d8c14c15 	stw	r3,1328(sp)
   82344:	8444b03a 	or	r2,r16,r17
   82348:	10022c1e 	bne	r2,zero,82bfc <___vfprintf_internal_r+0x1304>
   8234c:	98022b1e 	bne	r19,zero,82bfc <___vfprintf_internal_r+0x1304>
   82350:	20803fcc 	andi	r2,r4,255
   82354:	1002a126 	beq	r2,zero,82ddc <___vfprintf_internal_r+0x14e4>
   82358:	d8c01904 	addi	r3,sp,100
   8235c:	dd000f04 	addi	r20,sp,60
   82360:	d8c14115 	stw	r3,1284(sp)
   82364:	d8c14117 	ldw	r3,1284(sp)
   82368:	dcc14515 	stw	r19,1300(sp)
   8236c:	a0c5c83a 	sub	r2,r20,r3
   82370:	11c00a04 	addi	r7,r2,40
   82374:	99c0010e 	bge	r19,r7,8237c <___vfprintf_internal_r+0xa84>
   82378:	d9c14515 	stw	r7,1300(sp)
   8237c:	dcc14615 	stw	r19,1304(sp)
   82380:	d8800407 	ldb	r2,16(sp)
   82384:	103e4c26 	beq	r2,zero,81cb8 <___vfprintf_internal_r+0x3c0>
   82388:	d8814517 	ldw	r2,1300(sp)
   8238c:	10800044 	addi	r2,r2,1
   82390:	d8814515 	stw	r2,1300(sp)
   82394:	003e4806 	br	81cb8 <___vfprintf_internal_r+0x3c0>
   82398:	d9814c17 	ldw	r6,1328(sp)
   8239c:	31800414 	ori	r6,r6,16
   823a0:	d9814c15 	stw	r6,1328(sp)
   823a4:	d8c14c17 	ldw	r3,1328(sp)
   823a8:	1880080c 	andi	r2,r3,32
   823ac:	1001271e 	bne	r2,zero,8284c <___vfprintf_internal_r+0xf54>
   823b0:	d9414c17 	ldw	r5,1328(sp)
   823b4:	2880040c 	andi	r2,r5,16
   823b8:	1002bc1e 	bne	r2,zero,82eac <___vfprintf_internal_r+0x15b4>
   823bc:	d9814c17 	ldw	r6,1328(sp)
   823c0:	3080100c 	andi	r2,r6,64
   823c4:	1002b926 	beq	r2,zero,82eac <___vfprintf_internal_r+0x15b4>
   823c8:	3c00000b 	ldhu	r16,0(r7)
   823cc:	0009883a 	mov	r4,zero
   823d0:	39c00104 	addi	r7,r7,4
   823d4:	0023883a 	mov	r17,zero
   823d8:	d9c14015 	stw	r7,1280(sp)
   823dc:	d8000405 	stb	zero,16(sp)
   823e0:	003fd306 	br	82330 <___vfprintf_internal_r+0xa38>
   823e4:	d9014c17 	ldw	r4,1328(sp)
   823e8:	21000414 	ori	r4,r4,16
   823ec:	d9014c15 	stw	r4,1328(sp)
   823f0:	d9414c17 	ldw	r5,1328(sp)
   823f4:	2880080c 	andi	r2,r5,32
   823f8:	1001081e 	bne	r2,zero,8281c <___vfprintf_internal_r+0xf24>
   823fc:	d8c14c17 	ldw	r3,1328(sp)
   82400:	1880040c 	andi	r2,r3,16
   82404:	1002b61e 	bne	r2,zero,82ee0 <___vfprintf_internal_r+0x15e8>
   82408:	d9014c17 	ldw	r4,1328(sp)
   8240c:	2080100c 	andi	r2,r4,64
   82410:	1002b326 	beq	r2,zero,82ee0 <___vfprintf_internal_r+0x15e8>
   82414:	3c00000b 	ldhu	r16,0(r7)
   82418:	01000044 	movi	r4,1
   8241c:	39c00104 	addi	r7,r7,4
   82420:	0023883a 	mov	r17,zero
   82424:	d9c14015 	stw	r7,1280(sp)
   82428:	d8000405 	stb	zero,16(sp)
   8242c:	003fc006 	br	82330 <___vfprintf_internal_r+0xa38>
   82430:	d9014f17 	ldw	r4,1340(sp)
   82434:	b00b883a 	mov	r5,r22
   82438:	d9800c04 	addi	r6,sp,48
   8243c:	00818a00 	call	818a0 <__sprint_r>
   82440:	103ee51e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   82444:	dc800e17 	ldw	r18,56(sp)
   82448:	d8c01904 	addi	r3,sp,100
   8244c:	d9814c17 	ldw	r6,1328(sp)
   82450:	3080004c 	andi	r2,r6,1
   82454:	1005003a 	cmpeq	r2,r2,zero
   82458:	103ea51e 	bne	r2,zero,81ef0 <___vfprintf_internal_r+0x5f8>
   8245c:	00800044 	movi	r2,1
   82460:	dc400d17 	ldw	r17,52(sp)
   82464:	18800115 	stw	r2,4(r3)
   82468:	d8814917 	ldw	r2,1316(sp)
   8246c:	94800044 	addi	r18,r18,1
   82470:	8c400044 	addi	r17,r17,1
   82474:	18800015 	stw	r2,0(r3)
   82478:	008001c4 	movi	r2,7
   8247c:	dc800e15 	stw	r18,56(sp)
   82480:	dc400d15 	stw	r17,52(sp)
   82484:	1442240e 	bge	r2,r17,82d18 <___vfprintf_internal_r+0x1420>
   82488:	d9014f17 	ldw	r4,1340(sp)
   8248c:	b00b883a 	mov	r5,r22
   82490:	d9800c04 	addi	r6,sp,48
   82494:	00818a00 	call	818a0 <__sprint_r>
   82498:	103ecf1e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   8249c:	dc800e17 	ldw	r18,56(sp)
   824a0:	d8c01904 	addi	r3,sp,100
   824a4:	003e9206 	br	81ef0 <___vfprintf_internal_r+0x5f8>
   824a8:	d9014f17 	ldw	r4,1340(sp)
   824ac:	b00b883a 	mov	r5,r22
   824b0:	d9800c04 	addi	r6,sp,48
   824b4:	00818a00 	call	818a0 <__sprint_r>
   824b8:	103ec026 	beq	r2,zero,81fbc <___vfprintf_internal_r+0x6c4>
   824bc:	003ec606 	br	81fd8 <___vfprintf_internal_r+0x6e0>
   824c0:	d9014f17 	ldw	r4,1340(sp)
   824c4:	b00b883a 	mov	r5,r22
   824c8:	d9800c04 	addi	r6,sp,48
   824cc:	d9c15115 	stw	r7,1348(sp)
   824d0:	00818a00 	call	818a0 <__sprint_r>
   824d4:	d9c15117 	ldw	r7,1348(sp)
   824d8:	103ebf1e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   824dc:	dc800e17 	ldw	r18,56(sp)
   824e0:	dc400d17 	ldw	r17,52(sp)
   824e4:	dd401904 	addi	r21,sp,100
   824e8:	003e7406 	br	81ebc <___vfprintf_internal_r+0x5c4>
   824ec:	d9014f17 	ldw	r4,1340(sp)
   824f0:	b00b883a 	mov	r5,r22
   824f4:	d9800c04 	addi	r6,sp,48
   824f8:	d9c15115 	stw	r7,1348(sp)
   824fc:	00818a00 	call	818a0 <__sprint_r>
   82500:	d9c15117 	ldw	r7,1348(sp)
   82504:	103eb41e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   82508:	dd401904 	addi	r21,sp,100
   8250c:	003d6d06 	br	81ac4 <___vfprintf_internal_r+0x1cc>
   82510:	d9014f17 	ldw	r4,1340(sp)
   82514:	b00b883a 	mov	r5,r22
   82518:	d9800c04 	addi	r6,sp,48
   8251c:	d9c15115 	stw	r7,1348(sp)
   82520:	00818a00 	call	818a0 <__sprint_r>
   82524:	d9c15117 	ldw	r7,1348(sp)
   82528:	103eab1e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   8252c:	dc800e17 	ldw	r18,56(sp)
   82530:	dc400d17 	ldw	r17,52(sp)
   82534:	dd401904 	addi	r21,sp,100
   82538:	003e3406 	br	81e0c <___vfprintf_internal_r+0x514>
   8253c:	d9014f17 	ldw	r4,1340(sp)
   82540:	b00b883a 	mov	r5,r22
   82544:	d9800c04 	addi	r6,sp,48
   82548:	d9c15115 	stw	r7,1348(sp)
   8254c:	00818a00 	call	818a0 <__sprint_r>
   82550:	d9c15117 	ldw	r7,1348(sp)
   82554:	103ea01e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   82558:	dc800e17 	ldw	r18,56(sp)
   8255c:	dc400d17 	ldw	r17,52(sp)
   82560:	dd401904 	addi	r21,sp,100
   82564:	003e1c06 	br	81dd8 <___vfprintf_internal_r+0x4e0>
   82568:	d9014f17 	ldw	r4,1340(sp)
   8256c:	b00b883a 	mov	r5,r22
   82570:	d9800c04 	addi	r6,sp,48
   82574:	d9c15115 	stw	r7,1348(sp)
   82578:	00818a00 	call	818a0 <__sprint_r>
   8257c:	d9c15117 	ldw	r7,1348(sp)
   82580:	103e951e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   82584:	dc800e17 	ldw	r18,56(sp)
   82588:	dc400d17 	ldw	r17,52(sp)
   8258c:	dd401904 	addi	r21,sp,100
   82590:	003e0406 	br	81da4 <___vfprintf_internal_r+0x4ac>
   82594:	d9000517 	ldw	r4,20(sp)
   82598:	0102580e 	bge	zero,r4,82efc <___vfprintf_internal_r+0x1604>
   8259c:	d9814717 	ldw	r6,1308(sp)
   825a0:	21807a16 	blt	r4,r6,8278c <___vfprintf_internal_r+0xe94>
   825a4:	d8814117 	ldw	r2,1284(sp)
   825a8:	91a5883a 	add	r18,r18,r6
   825ac:	8c400044 	addi	r17,r17,1
   825b0:	a8800015 	stw	r2,0(r21)
   825b4:	008001c4 	movi	r2,7
   825b8:	a9800115 	stw	r6,4(r21)
   825bc:	dc800e15 	stw	r18,56(sp)
   825c0:	dc400d15 	stw	r17,52(sp)
   825c4:	1442fc16 	blt	r2,r17,831b8 <___vfprintf_internal_r+0x18c0>
   825c8:	a8c00204 	addi	r3,r21,8
   825cc:	d9414717 	ldw	r5,1308(sp)
   825d0:	2161c83a 	sub	r16,r4,r5
   825d4:	043f9d0e 	bge	zero,r16,8244c <___vfprintf_internal_r+0xb54>
   825d8:	00800404 	movi	r2,16
   825dc:	1402190e 	bge	r2,r16,82e44 <___vfprintf_internal_r+0x154c>
   825e0:	dc400d17 	ldw	r17,52(sp)
   825e4:	1027883a 	mov	r19,r2
   825e8:	07000274 	movhi	fp,9
   825ec:	e7376184 	addi	fp,fp,-8826
   825f0:	050001c4 	movi	r20,7
   825f4:	00000306 	br	82604 <___vfprintf_internal_r+0xd0c>
   825f8:	18c00204 	addi	r3,r3,8
   825fc:	843ffc04 	addi	r16,r16,-16
   82600:	9c02130e 	bge	r19,r16,82e50 <___vfprintf_internal_r+0x1558>
   82604:	94800404 	addi	r18,r18,16
   82608:	8c400044 	addi	r17,r17,1
   8260c:	1f000015 	stw	fp,0(r3)
   82610:	1cc00115 	stw	r19,4(r3)
   82614:	dc800e15 	stw	r18,56(sp)
   82618:	dc400d15 	stw	r17,52(sp)
   8261c:	a47ff60e 	bge	r20,r17,825f8 <___vfprintf_internal_r+0xd00>
   82620:	d9014f17 	ldw	r4,1340(sp)
   82624:	b00b883a 	mov	r5,r22
   82628:	d9800c04 	addi	r6,sp,48
   8262c:	00818a00 	call	818a0 <__sprint_r>
   82630:	103e691e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   82634:	dc800e17 	ldw	r18,56(sp)
   82638:	dc400d17 	ldw	r17,52(sp)
   8263c:	d8c01904 	addi	r3,sp,100
   82640:	003fee06 	br	825fc <___vfprintf_internal_r+0xd04>
   82644:	d8814717 	ldw	r2,1308(sp)
   82648:	143fffc4 	addi	r16,r2,-1
   8264c:	043e970e 	bge	zero,r16,820ac <___vfprintf_internal_r+0x7b4>
   82650:	00800404 	movi	r2,16
   82654:	1400180e 	bge	r2,r16,826b8 <___vfprintf_internal_r+0xdc0>
   82658:	1029883a 	mov	r20,r2
   8265c:	07000274 	movhi	fp,9
   82660:	e7376184 	addi	fp,fp,-8826
   82664:	054001c4 	movi	r21,7
   82668:	00000306 	br	82678 <___vfprintf_internal_r+0xd80>
   8266c:	9cc00204 	addi	r19,r19,8
   82670:	843ffc04 	addi	r16,r16,-16
   82674:	a400120e 	bge	r20,r16,826c0 <___vfprintf_internal_r+0xdc8>
   82678:	94800404 	addi	r18,r18,16
   8267c:	8c400044 	addi	r17,r17,1
   82680:	9f000015 	stw	fp,0(r19)
   82684:	9d000115 	stw	r20,4(r19)
   82688:	dc800e15 	stw	r18,56(sp)
   8268c:	dc400d15 	stw	r17,52(sp)
   82690:	ac7ff60e 	bge	r21,r17,8266c <___vfprintf_internal_r+0xd74>
   82694:	d9014f17 	ldw	r4,1340(sp)
   82698:	b00b883a 	mov	r5,r22
   8269c:	d9800c04 	addi	r6,sp,48
   826a0:	00818a00 	call	818a0 <__sprint_r>
   826a4:	103e4c1e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   826a8:	dc800e17 	ldw	r18,56(sp)
   826ac:	dc400d17 	ldw	r17,52(sp)
   826b0:	dcc01904 	addi	r19,sp,100
   826b4:	003fee06 	br	82670 <___vfprintf_internal_r+0xd78>
   826b8:	07000274 	movhi	fp,9
   826bc:	e7376184 	addi	fp,fp,-8826
   826c0:	9425883a 	add	r18,r18,r16
   826c4:	8c400044 	addi	r17,r17,1
   826c8:	008001c4 	movi	r2,7
   826cc:	9f000015 	stw	fp,0(r19)
   826d0:	9c000115 	stw	r16,4(r19)
   826d4:	dc800e15 	stw	r18,56(sp)
   826d8:	dc400d15 	stw	r17,52(sp)
   826dc:	147e720e 	bge	r2,r17,820a8 <___vfprintf_internal_r+0x7b0>
   826e0:	d9014f17 	ldw	r4,1340(sp)
   826e4:	b00b883a 	mov	r5,r22
   826e8:	d9800c04 	addi	r6,sp,48
   826ec:	00818a00 	call	818a0 <__sprint_r>
   826f0:	103e391e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   826f4:	dc800e17 	ldw	r18,56(sp)
   826f8:	dc400d17 	ldw	r17,52(sp)
   826fc:	dcc01904 	addi	r19,sp,100
   82700:	003e6a06 	br	820ac <___vfprintf_internal_r+0x7b4>
   82704:	d9014f17 	ldw	r4,1340(sp)
   82708:	b00b883a 	mov	r5,r22
   8270c:	d9800c04 	addi	r6,sp,48
   82710:	d9c15115 	stw	r7,1348(sp)
   82714:	00818a00 	call	818a0 <__sprint_r>
   82718:	d9c15117 	ldw	r7,1348(sp)
   8271c:	103e2e1e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   82720:	dc800e17 	ldw	r18,56(sp)
   82724:	dc400d17 	ldw	r17,52(sp)
   82728:	dd401904 	addi	r21,sp,100
   8272c:	003dba06 	br	81e18 <___vfprintf_internal_r+0x520>
   82730:	d9014f17 	ldw	r4,1340(sp)
   82734:	b00b883a 	mov	r5,r22
   82738:	d9800c04 	addi	r6,sp,48
   8273c:	00818a00 	call	818a0 <__sprint_r>
   82740:	103e251e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   82744:	dc800e17 	ldw	r18,56(sp)
   82748:	dc400d17 	ldw	r17,52(sp)
   8274c:	dcc01904 	addi	r19,sp,100
   82750:	003e4206 	br	8205c <___vfprintf_internal_r+0x764>
   82754:	d9014f17 	ldw	r4,1340(sp)
   82758:	b00b883a 	mov	r5,r22
   8275c:	d9800c04 	addi	r6,sp,48
   82760:	00818a00 	call	818a0 <__sprint_r>
   82764:	103e1c1e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   82768:	dc800e17 	ldw	r18,56(sp)
   8276c:	dc400d17 	ldw	r17,52(sp)
   82770:	d8c01904 	addi	r3,sp,100
   82774:	003e2e06 	br	82030 <___vfprintf_internal_r+0x738>
   82778:	d9414c17 	ldw	r5,1328(sp)
   8277c:	2880004c 	andi	r2,r5,1
   82780:	1005003a 	cmpeq	r2,r2,zero
   82784:	103dda1e 	bne	r2,zero,81ef0 <___vfprintf_internal_r+0x5f8>
   82788:	003e9f06 	br	82208 <___vfprintf_internal_r+0x910>
   8278c:	d8c14117 	ldw	r3,1284(sp)
   82790:	9125883a 	add	r18,r18,r4
   82794:	8c400044 	addi	r17,r17,1
   82798:	008001c4 	movi	r2,7
   8279c:	a8c00015 	stw	r3,0(r21)
   827a0:	a9000115 	stw	r4,4(r21)
   827a4:	dc800e15 	stw	r18,56(sp)
   827a8:	dc400d15 	stw	r17,52(sp)
   827ac:	14426c16 	blt	r2,r17,83160 <___vfprintf_internal_r+0x1868>
   827b0:	a8c00204 	addi	r3,r21,8
   827b4:	d9414917 	ldw	r5,1316(sp)
   827b8:	00800044 	movi	r2,1
   827bc:	94800044 	addi	r18,r18,1
   827c0:	8c400044 	addi	r17,r17,1
   827c4:	18800115 	stw	r2,4(r3)
   827c8:	008001c4 	movi	r2,7
   827cc:	19400015 	stw	r5,0(r3)
   827d0:	dc800e15 	stw	r18,56(sp)
   827d4:	dc400d15 	stw	r17,52(sp)
   827d8:	2021883a 	mov	r16,r4
   827dc:	14425616 	blt	r2,r17,83138 <___vfprintf_internal_r+0x1840>
   827e0:	19400204 	addi	r5,r3,8
   827e4:	d9814717 	ldw	r6,1308(sp)
   827e8:	8c400044 	addi	r17,r17,1
   827ec:	dc400d15 	stw	r17,52(sp)
   827f0:	3107c83a 	sub	r3,r6,r4
   827f4:	d9014117 	ldw	r4,1284(sp)
   827f8:	90e5883a 	add	r18,r18,r3
   827fc:	28c00115 	stw	r3,4(r5)
   82800:	8105883a 	add	r2,r16,r4
   82804:	28800015 	stw	r2,0(r5)
   82808:	008001c4 	movi	r2,7
   8280c:	dc800e15 	stw	r18,56(sp)
   82810:	147f1d16 	blt	r2,r17,82488 <___vfprintf_internal_r+0xb90>
   82814:	28c00204 	addi	r3,r5,8
   82818:	003db506 	br	81ef0 <___vfprintf_internal_r+0x5f8>
   8281c:	3c000017 	ldw	r16,0(r7)
   82820:	3c400117 	ldw	r17,4(r7)
   82824:	39800204 	addi	r6,r7,8
   82828:	01000044 	movi	r4,1
   8282c:	d9814015 	stw	r6,1280(sp)
   82830:	d8000405 	stb	zero,16(sp)
   82834:	003ebe06 	br	82330 <___vfprintf_internal_r+0xa38>
   82838:	3c000017 	ldw	r16,0(r7)
   8283c:	3c400117 	ldw	r17,4(r7)
   82840:	38800204 	addi	r2,r7,8
   82844:	d8814015 	stw	r2,1280(sp)
   82848:	003eb706 	br	82328 <___vfprintf_internal_r+0xa30>
   8284c:	3c000017 	ldw	r16,0(r7)
   82850:	3c400117 	ldw	r17,4(r7)
   82854:	39000204 	addi	r4,r7,8
   82858:	d9014015 	stw	r4,1280(sp)
   8285c:	0009883a 	mov	r4,zero
   82860:	d8000405 	stb	zero,16(sp)
   82864:	003eb206 	br	82330 <___vfprintf_internal_r+0xa38>
   82868:	38c00017 	ldw	r3,0(r7)
   8286c:	39c00104 	addi	r7,r7,4
   82870:	d8c14a15 	stw	r3,1320(sp)
   82874:	1800d70e 	bge	r3,zero,82bd4 <___vfprintf_internal_r+0x12dc>
   82878:	00c7c83a 	sub	r3,zero,r3
   8287c:	d8c14a15 	stw	r3,1320(sp)
   82880:	d9014c17 	ldw	r4,1328(sp)
   82884:	b8c00007 	ldb	r3,0(r23)
   82888:	21000114 	ori	r4,r4,4
   8288c:	d9014c15 	stw	r4,1328(sp)
   82890:	003c9806 	br	81af4 <___vfprintf_internal_r+0x1fc>
   82894:	d9814c17 	ldw	r6,1328(sp)
   82898:	3080080c 	andi	r2,r6,32
   8289c:	1001f626 	beq	r2,zero,83078 <___vfprintf_internal_r+0x1780>
   828a0:	d9014b17 	ldw	r4,1324(sp)
   828a4:	38800017 	ldw	r2,0(r7)
   828a8:	39c00104 	addi	r7,r7,4
   828ac:	d9c14015 	stw	r7,1280(sp)
   828b0:	2007d7fa 	srai	r3,r4,31
   828b4:	d9c14017 	ldw	r7,1280(sp)
   828b8:	11000015 	stw	r4,0(r2)
   828bc:	10c00115 	stw	r3,4(r2)
   828c0:	003c6906 	br	81a68 <___vfprintf_internal_r+0x170>
   828c4:	b8c00007 	ldb	r3,0(r23)
   828c8:	00801b04 	movi	r2,108
   828cc:	18825526 	beq	r3,r2,83224 <___vfprintf_internal_r+0x192c>
   828d0:	d9414c17 	ldw	r5,1328(sp)
   828d4:	29400414 	ori	r5,r5,16
   828d8:	d9414c15 	stw	r5,1328(sp)
   828dc:	003c8506 	br	81af4 <___vfprintf_internal_r+0x1fc>
   828e0:	d9814c17 	ldw	r6,1328(sp)
   828e4:	b8c00007 	ldb	r3,0(r23)
   828e8:	31800814 	ori	r6,r6,32
   828ec:	d9814c15 	stw	r6,1328(sp)
   828f0:	003c8006 	br	81af4 <___vfprintf_internal_r+0x1fc>
   828f4:	d8814c17 	ldw	r2,1328(sp)
   828f8:	3c000017 	ldw	r16,0(r7)
   828fc:	00c01e04 	movi	r3,120
   82900:	10800094 	ori	r2,r2,2
   82904:	d8814c15 	stw	r2,1328(sp)
   82908:	39c00104 	addi	r7,r7,4
   8290c:	01400274 	movhi	r5,9
   82910:	29774a04 	addi	r5,r5,-8920
   82914:	00800c04 	movi	r2,48
   82918:	0023883a 	mov	r17,zero
   8291c:	01000084 	movi	r4,2
   82920:	d9c14015 	stw	r7,1280(sp)
   82924:	d8c14d15 	stw	r3,1332(sp)
   82928:	d9414415 	stw	r5,1296(sp)
   8292c:	d8800445 	stb	r2,17(sp)
   82930:	d8c00485 	stb	r3,18(sp)
   82934:	d8000405 	stb	zero,16(sp)
   82938:	003e7d06 	br	82330 <___vfprintf_internal_r+0xa38>
   8293c:	d8814c17 	ldw	r2,1328(sp)
   82940:	b8c00007 	ldb	r3,0(r23)
   82944:	10801014 	ori	r2,r2,64
   82948:	d8814c15 	stw	r2,1328(sp)
   8294c:	003c6906 	br	81af4 <___vfprintf_internal_r+0x1fc>
   82950:	d9414c17 	ldw	r5,1328(sp)
   82954:	2880020c 	andi	r2,r5,8
   82958:	1001e526 	beq	r2,zero,830f0 <___vfprintf_internal_r+0x17f8>
   8295c:	39800017 	ldw	r6,0(r7)
   82960:	38800204 	addi	r2,r7,8
   82964:	d8814015 	stw	r2,1280(sp)
   82968:	d9814215 	stw	r6,1288(sp)
   8296c:	39c00117 	ldw	r7,4(r7)
   82970:	d9c14315 	stw	r7,1292(sp)
   82974:	d9014217 	ldw	r4,1288(sp)
   82978:	d9414317 	ldw	r5,1292(sp)
   8297c:	00883a80 	call	883a8 <__isinfd>
   82980:	10021d26 	beq	r2,zero,831f8 <___vfprintf_internal_r+0x1900>
   82984:	d9014217 	ldw	r4,1288(sp)
   82988:	d9414317 	ldw	r5,1292(sp)
   8298c:	000d883a 	mov	r6,zero
   82990:	000f883a 	mov	r7,zero
   82994:	008a5440 	call	8a544 <__ltdf2>
   82998:	1002d016 	blt	r2,zero,834dc <___vfprintf_internal_r+0x1be4>
   8299c:	d9414d17 	ldw	r5,1332(sp)
   829a0:	008011c4 	movi	r2,71
   829a4:	11421016 	blt	r2,r5,831e8 <___vfprintf_internal_r+0x18f0>
   829a8:	01800274 	movhi	r6,9
   829ac:	31b74f04 	addi	r6,r6,-8900
   829b0:	d9814115 	stw	r6,1284(sp)
   829b4:	d9014c17 	ldw	r4,1328(sp)
   829b8:	00c000c4 	movi	r3,3
   829bc:	00bfdfc4 	movi	r2,-129
   829c0:	2088703a 	and	r4,r4,r2
   829c4:	180f883a 	mov	r7,r3
   829c8:	d8c14515 	stw	r3,1300(sp)
   829cc:	d9014c15 	stw	r4,1328(sp)
   829d0:	d8014615 	stw	zero,1304(sp)
   829d4:	003e6a06 	br	82380 <___vfprintf_internal_r+0xa88>
   829d8:	38800017 	ldw	r2,0(r7)
   829dc:	00c00044 	movi	r3,1
   829e0:	39c00104 	addi	r7,r7,4
   829e4:	d9c14015 	stw	r7,1280(sp)
   829e8:	d9000f04 	addi	r4,sp,60
   829ec:	180f883a 	mov	r7,r3
   829f0:	d8c14515 	stw	r3,1300(sp)
   829f4:	d9014115 	stw	r4,1284(sp)
   829f8:	d8800f05 	stb	r2,60(sp)
   829fc:	d8000405 	stb	zero,16(sp)
   82a00:	003cac06 	br	81cb4 <___vfprintf_internal_r+0x3bc>
   82a04:	01400274 	movhi	r5,9
   82a08:	29775504 	addi	r5,r5,-8876
   82a0c:	d9414415 	stw	r5,1296(sp)
   82a10:	d9814c17 	ldw	r6,1328(sp)
   82a14:	3080080c 	andi	r2,r6,32
   82a18:	1000ff26 	beq	r2,zero,82e18 <___vfprintf_internal_r+0x1520>
   82a1c:	3c000017 	ldw	r16,0(r7)
   82a20:	3c400117 	ldw	r17,4(r7)
   82a24:	38800204 	addi	r2,r7,8
   82a28:	d8814015 	stw	r2,1280(sp)
   82a2c:	d9414c17 	ldw	r5,1328(sp)
   82a30:	2880004c 	andi	r2,r5,1
   82a34:	1005003a 	cmpeq	r2,r2,zero
   82a38:	1000b91e 	bne	r2,zero,82d20 <___vfprintf_internal_r+0x1428>
   82a3c:	8444b03a 	or	r2,r16,r17
   82a40:	1000b726 	beq	r2,zero,82d20 <___vfprintf_internal_r+0x1428>
   82a44:	d9814d17 	ldw	r6,1332(sp)
   82a48:	29400094 	ori	r5,r5,2
   82a4c:	00800c04 	movi	r2,48
   82a50:	01000084 	movi	r4,2
   82a54:	d9414c15 	stw	r5,1328(sp)
   82a58:	d8800445 	stb	r2,17(sp)
   82a5c:	d9800485 	stb	r6,18(sp)
   82a60:	d8000405 	stb	zero,16(sp)
   82a64:	003e3206 	br	82330 <___vfprintf_internal_r+0xa38>
   82a68:	01800274 	movhi	r6,9
   82a6c:	31b74a04 	addi	r6,r6,-8920
   82a70:	d9814415 	stw	r6,1296(sp)
   82a74:	003fe606 	br	82a10 <___vfprintf_internal_r+0x1118>
   82a78:	00800ac4 	movi	r2,43
   82a7c:	d8800405 	stb	r2,16(sp)
   82a80:	b8c00007 	ldb	r3,0(r23)
   82a84:	003c1b06 	br	81af4 <___vfprintf_internal_r+0x1fc>
   82a88:	d8814c17 	ldw	r2,1328(sp)
   82a8c:	b8c00007 	ldb	r3,0(r23)
   82a90:	10800054 	ori	r2,r2,1
   82a94:	d8814c15 	stw	r2,1328(sp)
   82a98:	003c1606 	br	81af4 <___vfprintf_internal_r+0x1fc>
   82a9c:	d8800407 	ldb	r2,16(sp)
   82aa0:	10004c1e 	bne	r2,zero,82bd4 <___vfprintf_internal_r+0x12dc>
   82aa4:	00800804 	movi	r2,32
   82aa8:	d8800405 	stb	r2,16(sp)
   82aac:	b8c00007 	ldb	r3,0(r23)
   82ab0:	003c1006 	br	81af4 <___vfprintf_internal_r+0x1fc>
   82ab4:	d9814c17 	ldw	r6,1328(sp)
   82ab8:	b8c00007 	ldb	r3,0(r23)
   82abc:	31800214 	ori	r6,r6,8
   82ac0:	d9814c15 	stw	r6,1328(sp)
   82ac4:	003c0b06 	br	81af4 <___vfprintf_internal_r+0x1fc>
   82ac8:	0009883a 	mov	r4,zero
   82acc:	04000244 	movi	r16,9
   82ad0:	01400284 	movi	r5,10
   82ad4:	d9c15115 	stw	r7,1348(sp)
   82ad8:	008aa7c0 	call	8aa7c <__mulsi3>
   82adc:	b9000007 	ldb	r4,0(r23)
   82ae0:	d8c14d17 	ldw	r3,1332(sp)
   82ae4:	bdc00044 	addi	r23,r23,1
   82ae8:	d9014d15 	stw	r4,1332(sp)
   82aec:	d9414d17 	ldw	r5,1332(sp)
   82af0:	1885883a 	add	r2,r3,r2
   82af4:	113ff404 	addi	r4,r2,-48
   82af8:	28bff404 	addi	r2,r5,-48
   82afc:	d9c15117 	ldw	r7,1348(sp)
   82b00:	80bff32e 	bgeu	r16,r2,82ad0 <___vfprintf_internal_r+0x11d8>
   82b04:	d9014a15 	stw	r4,1320(sp)
   82b08:	003bfc06 	br	81afc <___vfprintf_internal_r+0x204>
   82b0c:	d8814c17 	ldw	r2,1328(sp)
   82b10:	b8c00007 	ldb	r3,0(r23)
   82b14:	10802014 	ori	r2,r2,128
   82b18:	d8814c15 	stw	r2,1328(sp)
   82b1c:	003bf506 	br	81af4 <___vfprintf_internal_r+0x1fc>
   82b20:	b8c00007 	ldb	r3,0(r23)
   82b24:	00800a84 	movi	r2,42
   82b28:	bdc00044 	addi	r23,r23,1
   82b2c:	18831826 	beq	r3,r2,83790 <___vfprintf_internal_r+0x1e98>
   82b30:	d8c14d15 	stw	r3,1332(sp)
   82b34:	18bff404 	addi	r2,r3,-48
   82b38:	00c00244 	movi	r3,9
   82b3c:	18827b36 	bltu	r3,r2,8352c <___vfprintf_internal_r+0x1c34>
   82b40:	1821883a 	mov	r16,r3
   82b44:	0009883a 	mov	r4,zero
   82b48:	01400284 	movi	r5,10
   82b4c:	d9c15115 	stw	r7,1348(sp)
   82b50:	008aa7c0 	call	8aa7c <__mulsi3>
   82b54:	d9414d17 	ldw	r5,1332(sp)
   82b58:	b9800007 	ldb	r6,0(r23)
   82b5c:	d9c15117 	ldw	r7,1348(sp)
   82b60:	1145883a 	add	r2,r2,r5
   82b64:	113ff404 	addi	r4,r2,-48
   82b68:	30bff404 	addi	r2,r6,-48
   82b6c:	d9814d15 	stw	r6,1332(sp)
   82b70:	bdc00044 	addi	r23,r23,1
   82b74:	80bff42e 	bgeu	r16,r2,82b48 <___vfprintf_internal_r+0x1250>
   82b78:	2027883a 	mov	r19,r4
   82b7c:	203bdf0e 	bge	r4,zero,81afc <___vfprintf_internal_r+0x204>
   82b80:	04ffffc4 	movi	r19,-1
   82b84:	003bdd06 	br	81afc <___vfprintf_internal_r+0x204>
   82b88:	d8000405 	stb	zero,16(sp)
   82b8c:	39800017 	ldw	r6,0(r7)
   82b90:	39c00104 	addi	r7,r7,4
   82b94:	d9c14015 	stw	r7,1280(sp)
   82b98:	d9814115 	stw	r6,1284(sp)
   82b9c:	3001c926 	beq	r6,zero,832c4 <___vfprintf_internal_r+0x19cc>
   82ba0:	98000e16 	blt	r19,zero,82bdc <___vfprintf_internal_r+0x12e4>
   82ba4:	d9014117 	ldw	r4,1284(sp)
   82ba8:	000b883a 	mov	r5,zero
   82bac:	980d883a 	mov	r6,r19
   82bb0:	0086a2c0 	call	86a2c <memchr>
   82bb4:	10025926 	beq	r2,zero,8351c <___vfprintf_internal_r+0x1c24>
   82bb8:	d8c14117 	ldw	r3,1284(sp)
   82bbc:	10cfc83a 	sub	r7,r2,r3
   82bc0:	99c19e16 	blt	r19,r7,8323c <___vfprintf_internal_r+0x1944>
   82bc4:	d9c14515 	stw	r7,1300(sp)
   82bc8:	38000916 	blt	r7,zero,82bf0 <___vfprintf_internal_r+0x12f8>
   82bcc:	d8014615 	stw	zero,1304(sp)
   82bd0:	003deb06 	br	82380 <___vfprintf_internal_r+0xa88>
   82bd4:	b8c00007 	ldb	r3,0(r23)
   82bd8:	003bc606 	br	81af4 <___vfprintf_internal_r+0x1fc>
   82bdc:	d9014117 	ldw	r4,1284(sp)
   82be0:	008182c0 	call	8182c <strlen>
   82be4:	d8814515 	stw	r2,1300(sp)
   82be8:	100f883a 	mov	r7,r2
   82bec:	103ff70e 	bge	r2,zero,82bcc <___vfprintf_internal_r+0x12d4>
   82bf0:	d8014515 	stw	zero,1300(sp)
   82bf4:	d8014615 	stw	zero,1304(sp)
   82bf8:	003de106 	br	82380 <___vfprintf_internal_r+0xa88>
   82bfc:	20c03fcc 	andi	r3,r4,255
   82c00:	00800044 	movi	r2,1
   82c04:	18802d26 	beq	r3,r2,82cbc <___vfprintf_internal_r+0x13c4>
   82c08:	18800e36 	bltu	r3,r2,82c44 <___vfprintf_internal_r+0x134c>
   82c0c:	00800084 	movi	r2,2
   82c10:	1880fa26 	beq	r3,r2,82ffc <___vfprintf_internal_r+0x1704>
   82c14:	01000274 	movhi	r4,9
   82c18:	21375a04 	addi	r4,r4,-8856
   82c1c:	008182c0 	call	8182c <strlen>
   82c20:	100f883a 	mov	r7,r2
   82c24:	dcc14515 	stw	r19,1300(sp)
   82c28:	9880010e 	bge	r19,r2,82c30 <___vfprintf_internal_r+0x1338>
   82c2c:	d8814515 	stw	r2,1300(sp)
   82c30:	00800274 	movhi	r2,9
   82c34:	10b75a04 	addi	r2,r2,-8856
   82c38:	dcc14615 	stw	r19,1304(sp)
   82c3c:	d8814115 	stw	r2,1284(sp)
   82c40:	003dcf06 	br	82380 <___vfprintf_internal_r+0xa88>
   82c44:	d9401904 	addi	r5,sp,100
   82c48:	dd000f04 	addi	r20,sp,60
   82c4c:	d9414115 	stw	r5,1284(sp)
   82c50:	880a977a 	slli	r5,r17,29
   82c54:	d9814117 	ldw	r6,1284(sp)
   82c58:	8004d0fa 	srli	r2,r16,3
   82c5c:	8806d0fa 	srli	r3,r17,3
   82c60:	810001cc 	andi	r4,r16,7
   82c64:	2884b03a 	or	r2,r5,r2
   82c68:	31bfffc4 	addi	r6,r6,-1
   82c6c:	21000c04 	addi	r4,r4,48
   82c70:	d9814115 	stw	r6,1284(sp)
   82c74:	10cab03a 	or	r5,r2,r3
   82c78:	31000005 	stb	r4,0(r6)
   82c7c:	1021883a 	mov	r16,r2
   82c80:	1823883a 	mov	r17,r3
   82c84:	283ff21e 	bne	r5,zero,82c50 <___vfprintf_internal_r+0x1358>
   82c88:	d8c14c17 	ldw	r3,1328(sp)
   82c8c:	1880004c 	andi	r2,r3,1
   82c90:	1005003a 	cmpeq	r2,r2,zero
   82c94:	103db31e 	bne	r2,zero,82364 <___vfprintf_internal_r+0xa6c>
   82c98:	20803fcc 	andi	r2,r4,255
   82c9c:	1080201c 	xori	r2,r2,128
   82ca0:	10bfe004 	addi	r2,r2,-128
   82ca4:	00c00c04 	movi	r3,48
   82ca8:	10fdae26 	beq	r2,r3,82364 <___vfprintf_internal_r+0xa6c>
   82cac:	31bfffc4 	addi	r6,r6,-1
   82cb0:	d9814115 	stw	r6,1284(sp)
   82cb4:	30c00005 	stb	r3,0(r6)
   82cb8:	003daa06 	br	82364 <___vfprintf_internal_r+0xa6c>
   82cbc:	88800068 	cmpgeui	r2,r17,1
   82cc0:	10002c1e 	bne	r2,zero,82d74 <___vfprintf_internal_r+0x147c>
   82cc4:	8800021e 	bne	r17,zero,82cd0 <___vfprintf_internal_r+0x13d8>
   82cc8:	00800244 	movi	r2,9
   82ccc:	14002936 	bltu	r2,r16,82d74 <___vfprintf_internal_r+0x147c>
   82cd0:	d90018c4 	addi	r4,sp,99
   82cd4:	dd000f04 	addi	r20,sp,60
   82cd8:	d9014115 	stw	r4,1284(sp)
   82cdc:	d9014117 	ldw	r4,1284(sp)
   82ce0:	80800c04 	addi	r2,r16,48
   82ce4:	20800005 	stb	r2,0(r4)
   82ce8:	003d9e06 	br	82364 <___vfprintf_internal_r+0xa6c>
   82cec:	dc400d17 	ldw	r17,52(sp)
   82cf0:	07000274 	movhi	fp,9
   82cf4:	e7376184 	addi	fp,fp,-8826
   82cf8:	9425883a 	add	r18,r18,r16
   82cfc:	8c400044 	addi	r17,r17,1
   82d00:	008001c4 	movi	r2,7
   82d04:	1f000015 	stw	fp,0(r3)
   82d08:	1c000115 	stw	r16,4(r3)
   82d0c:	dc800e15 	stw	r18,56(sp)
   82d10:	dc400d15 	stw	r17,52(sp)
   82d14:	147ddc16 	blt	r2,r17,82488 <___vfprintf_internal_r+0xb90>
   82d18:	18c00204 	addi	r3,r3,8
   82d1c:	003c7406 	br	81ef0 <___vfprintf_internal_r+0x5f8>
   82d20:	01000084 	movi	r4,2
   82d24:	d8000405 	stb	zero,16(sp)
   82d28:	003d8106 	br	82330 <___vfprintf_internal_r+0xa38>
   82d2c:	d9814c17 	ldw	r6,1328(sp)
   82d30:	30c4703a 	and	r2,r6,r3
   82d34:	1005003a 	cmpeq	r2,r2,zero
   82d38:	103cb326 	beq	r2,zero,82008 <___vfprintf_internal_r+0x710>
   82d3c:	d9014117 	ldw	r4,1284(sp)
   82d40:	94800044 	addi	r18,r18,1
   82d44:	8c400044 	addi	r17,r17,1
   82d48:	008001c4 	movi	r2,7
   82d4c:	a9000015 	stw	r4,0(r21)
   82d50:	a8c00115 	stw	r3,4(r21)
   82d54:	dc800e15 	stw	r18,56(sp)
   82d58:	dc400d15 	stw	r17,52(sp)
   82d5c:	147e6016 	blt	r2,r17,826e0 <___vfprintf_internal_r+0xde8>
   82d60:	acc00204 	addi	r19,r21,8
   82d64:	003cd106 	br	820ac <___vfprintf_internal_r+0x7b4>
   82d68:	07000274 	movhi	fp,9
   82d6c:	e7376184 	addi	fp,fp,-8826
   82d70:	003c4906 	br	81e98 <___vfprintf_internal_r+0x5a0>
   82d74:	dd000f04 	addi	r20,sp,60
   82d78:	dc801904 	addi	r18,sp,100
   82d7c:	8009883a 	mov	r4,r16
   82d80:	880b883a 	mov	r5,r17
   82d84:	01800284 	movi	r6,10
   82d88:	000f883a 	mov	r7,zero
   82d8c:	00891a40 	call	891a4 <__umoddi3>
   82d90:	12000c04 	addi	r8,r2,48
   82d94:	94bfffc4 	addi	r18,r18,-1
   82d98:	8009883a 	mov	r4,r16
   82d9c:	880b883a 	mov	r5,r17
   82da0:	01800284 	movi	r6,10
   82da4:	000f883a 	mov	r7,zero
   82da8:	92000005 	stb	r8,0(r18)
   82dac:	0088b380 	call	88b38 <__udivdi3>
   82db0:	1009883a 	mov	r4,r2
   82db4:	1021883a 	mov	r16,r2
   82db8:	18800068 	cmpgeui	r2,r3,1
   82dbc:	1823883a 	mov	r17,r3
   82dc0:	103fee1e 	bne	r2,zero,82d7c <___vfprintf_internal_r+0x1484>
   82dc4:	1800021e 	bne	r3,zero,82dd0 <___vfprintf_internal_r+0x14d8>
   82dc8:	00800244 	movi	r2,9
   82dcc:	113feb36 	bltu	r2,r4,82d7c <___vfprintf_internal_r+0x1484>
   82dd0:	94bfffc4 	addi	r18,r18,-1
   82dd4:	dc814115 	stw	r18,1284(sp)
   82dd8:	003fc006 	br	82cdc <___vfprintf_internal_r+0x13e4>
   82ddc:	d9014c17 	ldw	r4,1328(sp)
   82de0:	2080004c 	andi	r2,r4,1
   82de4:	10009a1e 	bne	r2,zero,83050 <___vfprintf_internal_r+0x1758>
   82de8:	d9401904 	addi	r5,sp,100
   82dec:	dd000f04 	addi	r20,sp,60
   82df0:	d9414115 	stw	r5,1284(sp)
   82df4:	003d5b06 	br	82364 <___vfprintf_internal_r+0xa6c>
   82df8:	d9014f17 	ldw	r4,1340(sp)
   82dfc:	b00b883a 	mov	r5,r22
   82e00:	d9800c04 	addi	r6,sp,48
   82e04:	00818a00 	call	818a0 <__sprint_r>
   82e08:	103c731e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   82e0c:	dc800e17 	ldw	r18,56(sp)
   82e10:	d8c01904 	addi	r3,sp,100
   82e14:	003cf906 	br	821fc <___vfprintf_internal_r+0x904>
   82e18:	d8c14c17 	ldw	r3,1328(sp)
   82e1c:	1880040c 	andi	r2,r3,16
   82e20:	1000711e 	bne	r2,zero,82fe8 <___vfprintf_internal_r+0x16f0>
   82e24:	d9014c17 	ldw	r4,1328(sp)
   82e28:	2080100c 	andi	r2,r4,64
   82e2c:	10006e26 	beq	r2,zero,82fe8 <___vfprintf_internal_r+0x16f0>
   82e30:	3c00000b 	ldhu	r16,0(r7)
   82e34:	0023883a 	mov	r17,zero
   82e38:	39c00104 	addi	r7,r7,4
   82e3c:	d9c14015 	stw	r7,1280(sp)
   82e40:	003efa06 	br	82a2c <___vfprintf_internal_r+0x1134>
   82e44:	dc400d17 	ldw	r17,52(sp)
   82e48:	07000274 	movhi	fp,9
   82e4c:	e7376184 	addi	fp,fp,-8826
   82e50:	9425883a 	add	r18,r18,r16
   82e54:	8c400044 	addi	r17,r17,1
   82e58:	008001c4 	movi	r2,7
   82e5c:	1f000015 	stw	fp,0(r3)
   82e60:	1c000115 	stw	r16,4(r3)
   82e64:	dc800e15 	stw	r18,56(sp)
   82e68:	dc400d15 	stw	r17,52(sp)
   82e6c:	147d7016 	blt	r2,r17,82430 <___vfprintf_internal_r+0xb38>
   82e70:	18c00204 	addi	r3,r3,8
   82e74:	003d7506 	br	8244c <___vfprintf_internal_r+0xb54>
   82e78:	dc800e17 	ldw	r18,56(sp)
   82e7c:	dc400d17 	ldw	r17,52(sp)
   82e80:	07000274 	movhi	fp,9
   82e84:	e7376584 	addi	fp,fp,-8810
   82e88:	003bba06 	br	81d74 <___vfprintf_internal_r+0x47c>
   82e8c:	d9014f17 	ldw	r4,1340(sp)
   82e90:	b00b883a 	mov	r5,r22
   82e94:	d9800c04 	addi	r6,sp,48
   82e98:	00818a00 	call	818a0 <__sprint_r>
   82e9c:	103c4e1e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   82ea0:	dc800e17 	ldw	r18,56(sp)
   82ea4:	d8c01904 	addi	r3,sp,100
   82ea8:	003ce306 	br	82238 <___vfprintf_internal_r+0x940>
   82eac:	3c000017 	ldw	r16,0(r7)
   82eb0:	0009883a 	mov	r4,zero
   82eb4:	39c00104 	addi	r7,r7,4
   82eb8:	0023883a 	mov	r17,zero
   82ebc:	d9c14015 	stw	r7,1280(sp)
   82ec0:	d8000405 	stb	zero,16(sp)
   82ec4:	003d1a06 	br	82330 <___vfprintf_internal_r+0xa38>
   82ec8:	38800017 	ldw	r2,0(r7)
   82ecc:	39c00104 	addi	r7,r7,4
   82ed0:	d9c14015 	stw	r7,1280(sp)
   82ed4:	1023d7fa 	srai	r17,r2,31
   82ed8:	1021883a 	mov	r16,r2
   82edc:	003d1206 	br	82328 <___vfprintf_internal_r+0xa30>
   82ee0:	3c000017 	ldw	r16,0(r7)
   82ee4:	01000044 	movi	r4,1
   82ee8:	39c00104 	addi	r7,r7,4
   82eec:	0023883a 	mov	r17,zero
   82ef0:	d9c14015 	stw	r7,1280(sp)
   82ef4:	d8000405 	stb	zero,16(sp)
   82ef8:	003d0d06 	br	82330 <___vfprintf_internal_r+0xa38>
   82efc:	00800274 	movhi	r2,9
   82f00:	10b76104 	addi	r2,r2,-8828
   82f04:	94800044 	addi	r18,r18,1
   82f08:	8c400044 	addi	r17,r17,1
   82f0c:	a8800015 	stw	r2,0(r21)
   82f10:	00c00044 	movi	r3,1
   82f14:	008001c4 	movi	r2,7
   82f18:	a8c00115 	stw	r3,4(r21)
   82f1c:	dc800e15 	stw	r18,56(sp)
   82f20:	dc400d15 	stw	r17,52(sp)
   82f24:	1440ca16 	blt	r2,r17,83250 <___vfprintf_internal_r+0x1958>
   82f28:	a8c00204 	addi	r3,r21,8
   82f2c:	2000061e 	bne	r4,zero,82f48 <___vfprintf_internal_r+0x1650>
   82f30:	d9414717 	ldw	r5,1308(sp)
   82f34:	2800041e 	bne	r5,zero,82f48 <___vfprintf_internal_r+0x1650>
   82f38:	d9814c17 	ldw	r6,1328(sp)
   82f3c:	3080004c 	andi	r2,r6,1
   82f40:	1005003a 	cmpeq	r2,r2,zero
   82f44:	103bea1e 	bne	r2,zero,81ef0 <___vfprintf_internal_r+0x5f8>
   82f48:	00800044 	movi	r2,1
   82f4c:	dc400d17 	ldw	r17,52(sp)
   82f50:	18800115 	stw	r2,4(r3)
   82f54:	d8814917 	ldw	r2,1316(sp)
   82f58:	94800044 	addi	r18,r18,1
   82f5c:	8c400044 	addi	r17,r17,1
   82f60:	18800015 	stw	r2,0(r3)
   82f64:	008001c4 	movi	r2,7
   82f68:	dc800e15 	stw	r18,56(sp)
   82f6c:	dc400d15 	stw	r17,52(sp)
   82f70:	1440ca16 	blt	r2,r17,8329c <___vfprintf_internal_r+0x19a4>
   82f74:	18c00204 	addi	r3,r3,8
   82f78:	0121c83a 	sub	r16,zero,r4
   82f7c:	0400500e 	bge	zero,r16,830c0 <___vfprintf_internal_r+0x17c8>
   82f80:	00800404 	movi	r2,16
   82f84:	1400800e 	bge	r2,r16,83188 <___vfprintf_internal_r+0x1890>
   82f88:	1027883a 	mov	r19,r2
   82f8c:	07000274 	movhi	fp,9
   82f90:	e7376184 	addi	fp,fp,-8826
   82f94:	050001c4 	movi	r20,7
   82f98:	00000306 	br	82fa8 <___vfprintf_internal_r+0x16b0>
   82f9c:	18c00204 	addi	r3,r3,8
   82fa0:	843ffc04 	addi	r16,r16,-16
   82fa4:	9c007a0e 	bge	r19,r16,83190 <___vfprintf_internal_r+0x1898>
   82fa8:	94800404 	addi	r18,r18,16
   82fac:	8c400044 	addi	r17,r17,1
   82fb0:	1f000015 	stw	fp,0(r3)
   82fb4:	1cc00115 	stw	r19,4(r3)
   82fb8:	dc800e15 	stw	r18,56(sp)
   82fbc:	dc400d15 	stw	r17,52(sp)
   82fc0:	a47ff60e 	bge	r20,r17,82f9c <___vfprintf_internal_r+0x16a4>
   82fc4:	d9014f17 	ldw	r4,1340(sp)
   82fc8:	b00b883a 	mov	r5,r22
   82fcc:	d9800c04 	addi	r6,sp,48
   82fd0:	00818a00 	call	818a0 <__sprint_r>
   82fd4:	103c001e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   82fd8:	dc800e17 	ldw	r18,56(sp)
   82fdc:	dc400d17 	ldw	r17,52(sp)
   82fe0:	d8c01904 	addi	r3,sp,100
   82fe4:	003fee06 	br	82fa0 <___vfprintf_internal_r+0x16a8>
   82fe8:	3c000017 	ldw	r16,0(r7)
   82fec:	0023883a 	mov	r17,zero
   82ff0:	39c00104 	addi	r7,r7,4
   82ff4:	d9c14015 	stw	r7,1280(sp)
   82ff8:	003e8c06 	br	82a2c <___vfprintf_internal_r+0x1134>
   82ffc:	d9401904 	addi	r5,sp,100
   83000:	dd000f04 	addi	r20,sp,60
   83004:	d9414115 	stw	r5,1284(sp)
   83008:	d9814417 	ldw	r6,1296(sp)
   8300c:	880a973a 	slli	r5,r17,28
   83010:	8004d13a 	srli	r2,r16,4
   83014:	810003cc 	andi	r4,r16,15
   83018:	3109883a 	add	r4,r6,r4
   8301c:	2884b03a 	or	r2,r5,r2
   83020:	21400003 	ldbu	r5,0(r4)
   83024:	d9014117 	ldw	r4,1284(sp)
   83028:	8806d13a 	srli	r3,r17,4
   8302c:	1021883a 	mov	r16,r2
   83030:	213fffc4 	addi	r4,r4,-1
   83034:	d9014115 	stw	r4,1284(sp)
   83038:	d9814117 	ldw	r6,1284(sp)
   8303c:	10c8b03a 	or	r4,r2,r3
   83040:	1823883a 	mov	r17,r3
   83044:	31400005 	stb	r5,0(r6)
   83048:	203fef1e 	bne	r4,zero,83008 <___vfprintf_internal_r+0x1710>
   8304c:	003cc506 	br	82364 <___vfprintf_internal_r+0xa6c>
   83050:	00800c04 	movi	r2,48
   83054:	d98018c4 	addi	r6,sp,99
   83058:	dd000f04 	addi	r20,sp,60
   8305c:	d88018c5 	stb	r2,99(sp)
   83060:	d9814115 	stw	r6,1284(sp)
   83064:	003cbf06 	br	82364 <___vfprintf_internal_r+0xa6c>
   83068:	dc400d17 	ldw	r17,52(sp)
   8306c:	07000274 	movhi	fp,9
   83070:	e7376584 	addi	fp,fp,-8810
   83074:	003bc106 	br	81f7c <___vfprintf_internal_r+0x684>
   83078:	d9414c17 	ldw	r5,1328(sp)
   8307c:	2880040c 	andi	r2,r5,16
   83080:	10007c26 	beq	r2,zero,83274 <___vfprintf_internal_r+0x197c>
   83084:	38800017 	ldw	r2,0(r7)
   83088:	39c00104 	addi	r7,r7,4
   8308c:	d9c14015 	stw	r7,1280(sp)
   83090:	d9814b17 	ldw	r6,1324(sp)
   83094:	d9c14017 	ldw	r7,1280(sp)
   83098:	11800015 	stw	r6,0(r2)
   8309c:	003a7206 	br	81a68 <___vfprintf_internal_r+0x170>
   830a0:	d9014f17 	ldw	r4,1340(sp)
   830a4:	b00b883a 	mov	r5,r22
   830a8:	d9800c04 	addi	r6,sp,48
   830ac:	00818a00 	call	818a0 <__sprint_r>
   830b0:	103bc91e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   830b4:	dc800e17 	ldw	r18,56(sp)
   830b8:	dc400d17 	ldw	r17,52(sp)
   830bc:	d8c01904 	addi	r3,sp,100
   830c0:	d9014717 	ldw	r4,1308(sp)
   830c4:	d9414117 	ldw	r5,1284(sp)
   830c8:	8c400044 	addi	r17,r17,1
   830cc:	9125883a 	add	r18,r18,r4
   830d0:	008001c4 	movi	r2,7
   830d4:	19400015 	stw	r5,0(r3)
   830d8:	19000115 	stw	r4,4(r3)
   830dc:	dc800e15 	stw	r18,56(sp)
   830e0:	dc400d15 	stw	r17,52(sp)
   830e4:	147ce816 	blt	r2,r17,82488 <___vfprintf_internal_r+0xb90>
   830e8:	18c00204 	addi	r3,r3,8
   830ec:	003b8006 	br	81ef0 <___vfprintf_internal_r+0x5f8>
   830f0:	38c00017 	ldw	r3,0(r7)
   830f4:	39000204 	addi	r4,r7,8
   830f8:	d9014015 	stw	r4,1280(sp)
   830fc:	d8c14215 	stw	r3,1288(sp)
   83100:	39c00117 	ldw	r7,4(r7)
   83104:	d9c14315 	stw	r7,1292(sp)
   83108:	003e1a06 	br	82974 <___vfprintf_internal_r+0x107c>
   8310c:	0005883a 	mov	r2,zero
   83110:	1409c83a 	sub	r4,r2,r16
   83114:	1105803a 	cmpltu	r2,r2,r4
   83118:	044bc83a 	sub	r5,zero,r17
   8311c:	2885c83a 	sub	r2,r5,r2
   83120:	2021883a 	mov	r16,r4
   83124:	1023883a 	mov	r17,r2
   83128:	01000044 	movi	r4,1
   8312c:	00800b44 	movi	r2,45
   83130:	d8800405 	stb	r2,16(sp)
   83134:	003c7e06 	br	82330 <___vfprintf_internal_r+0xa38>
   83138:	d9014f17 	ldw	r4,1340(sp)
   8313c:	b00b883a 	mov	r5,r22
   83140:	d9800c04 	addi	r6,sp,48
   83144:	00818a00 	call	818a0 <__sprint_r>
   83148:	103ba31e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   8314c:	dc800e17 	ldw	r18,56(sp)
   83150:	dc400d17 	ldw	r17,52(sp)
   83154:	d9000517 	ldw	r4,20(sp)
   83158:	d9401904 	addi	r5,sp,100
   8315c:	003da106 	br	827e4 <___vfprintf_internal_r+0xeec>
   83160:	d9014f17 	ldw	r4,1340(sp)
   83164:	b00b883a 	mov	r5,r22
   83168:	d9800c04 	addi	r6,sp,48
   8316c:	00818a00 	call	818a0 <__sprint_r>
   83170:	103b991e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   83174:	dc800e17 	ldw	r18,56(sp)
   83178:	dc400d17 	ldw	r17,52(sp)
   8317c:	d9000517 	ldw	r4,20(sp)
   83180:	d8c01904 	addi	r3,sp,100
   83184:	003d8b06 	br	827b4 <___vfprintf_internal_r+0xebc>
   83188:	07000274 	movhi	fp,9
   8318c:	e7376184 	addi	fp,fp,-8826
   83190:	9425883a 	add	r18,r18,r16
   83194:	8c400044 	addi	r17,r17,1
   83198:	008001c4 	movi	r2,7
   8319c:	1f000015 	stw	fp,0(r3)
   831a0:	1c000115 	stw	r16,4(r3)
   831a4:	dc800e15 	stw	r18,56(sp)
   831a8:	dc400d15 	stw	r17,52(sp)
   831ac:	147fbc16 	blt	r2,r17,830a0 <___vfprintf_internal_r+0x17a8>
   831b0:	18c00204 	addi	r3,r3,8
   831b4:	003fc206 	br	830c0 <___vfprintf_internal_r+0x17c8>
   831b8:	d9014f17 	ldw	r4,1340(sp)
   831bc:	b00b883a 	mov	r5,r22
   831c0:	d9800c04 	addi	r6,sp,48
   831c4:	00818a00 	call	818a0 <__sprint_r>
   831c8:	103b831e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   831cc:	dc800e17 	ldw	r18,56(sp)
   831d0:	d9000517 	ldw	r4,20(sp)
   831d4:	d8c01904 	addi	r3,sp,100
   831d8:	003cfc06 	br	825cc <___vfprintf_internal_r+0xcd4>
   831dc:	07000274 	movhi	fp,9
   831e0:	e7376184 	addi	fp,fp,-8826
   831e4:	003bde06 	br	82160 <___vfprintf_internal_r+0x868>
   831e8:	00800274 	movhi	r2,9
   831ec:	10b75004 	addi	r2,r2,-8896
   831f0:	d8814115 	stw	r2,1284(sp)
   831f4:	003def06 	br	829b4 <___vfprintf_internal_r+0x10bc>
   831f8:	d9014217 	ldw	r4,1288(sp)
   831fc:	d9414317 	ldw	r5,1292(sp)
   83200:	00883e80 	call	883e8 <__isnand>
   83204:	10003926 	beq	r2,zero,832ec <___vfprintf_internal_r+0x19f4>
   83208:	d9414d17 	ldw	r5,1332(sp)
   8320c:	008011c4 	movi	r2,71
   83210:	1140ce16 	blt	r2,r5,8354c <___vfprintf_internal_r+0x1c54>
   83214:	01800274 	movhi	r6,9
   83218:	31b75104 	addi	r6,r6,-8892
   8321c:	d9814115 	stw	r6,1284(sp)
   83220:	003de406 	br	829b4 <___vfprintf_internal_r+0x10bc>
   83224:	d9014c17 	ldw	r4,1328(sp)
   83228:	bdc00044 	addi	r23,r23,1
   8322c:	b8c00007 	ldb	r3,0(r23)
   83230:	21000814 	ori	r4,r4,32
   83234:	d9014c15 	stw	r4,1328(sp)
   83238:	003a2e06 	br	81af4 <___vfprintf_internal_r+0x1fc>
   8323c:	dcc14515 	stw	r19,1300(sp)
   83240:	98011016 	blt	r19,zero,83684 <___vfprintf_internal_r+0x1d8c>
   83244:	980f883a 	mov	r7,r19
   83248:	d8014615 	stw	zero,1304(sp)
   8324c:	003c4c06 	br	82380 <___vfprintf_internal_r+0xa88>
   83250:	d9014f17 	ldw	r4,1340(sp)
   83254:	b00b883a 	mov	r5,r22
   83258:	d9800c04 	addi	r6,sp,48
   8325c:	00818a00 	call	818a0 <__sprint_r>
   83260:	103b5d1e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   83264:	dc800e17 	ldw	r18,56(sp)
   83268:	d9000517 	ldw	r4,20(sp)
   8326c:	d8c01904 	addi	r3,sp,100
   83270:	003f2e06 	br	82f2c <___vfprintf_internal_r+0x1634>
   83274:	d8c14c17 	ldw	r3,1328(sp)
   83278:	1880100c 	andi	r2,r3,64
   8327c:	1000a026 	beq	r2,zero,83500 <___vfprintf_internal_r+0x1c08>
   83280:	38800017 	ldw	r2,0(r7)
   83284:	39c00104 	addi	r7,r7,4
   83288:	d9c14015 	stw	r7,1280(sp)
   8328c:	d9014b17 	ldw	r4,1324(sp)
   83290:	d9c14017 	ldw	r7,1280(sp)
   83294:	1100000d 	sth	r4,0(r2)
   83298:	0039f306 	br	81a68 <___vfprintf_internal_r+0x170>
   8329c:	d9014f17 	ldw	r4,1340(sp)
   832a0:	b00b883a 	mov	r5,r22
   832a4:	d9800c04 	addi	r6,sp,48
   832a8:	00818a00 	call	818a0 <__sprint_r>
   832ac:	103b4a1e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   832b0:	dc800e17 	ldw	r18,56(sp)
   832b4:	dc400d17 	ldw	r17,52(sp)
   832b8:	d9000517 	ldw	r4,20(sp)
   832bc:	d8c01904 	addi	r3,sp,100
   832c0:	003f2d06 	br	82f78 <___vfprintf_internal_r+0x1680>
   832c4:	00800184 	movi	r2,6
   832c8:	14c09a36 	bltu	r2,r19,83534 <___vfprintf_internal_r+0x1c3c>
   832cc:	dcc14515 	stw	r19,1300(sp)
   832d0:	9800010e 	bge	r19,zero,832d8 <___vfprintf_internal_r+0x19e0>
   832d4:	d8014515 	stw	zero,1300(sp)
   832d8:	00800274 	movhi	r2,9
   832dc:	10b75304 	addi	r2,r2,-8884
   832e0:	980f883a 	mov	r7,r19
   832e4:	d8814115 	stw	r2,1284(sp)
   832e8:	003a7206 	br	81cb4 <___vfprintf_internal_r+0x3bc>
   832ec:	00bfffc4 	movi	r2,-1
   832f0:	9880e226 	beq	r19,r2,8367c <___vfprintf_internal_r+0x1d84>
   832f4:	d9414d17 	ldw	r5,1332(sp)
   832f8:	008019c4 	movi	r2,103
   832fc:	2880dc26 	beq	r5,r2,83670 <___vfprintf_internal_r+0x1d78>
   83300:	008011c4 	movi	r2,71
   83304:	2880da26 	beq	r5,r2,83670 <___vfprintf_internal_r+0x1d78>
   83308:	d9414c17 	ldw	r5,1328(sp)
   8330c:	d9014317 	ldw	r4,1292(sp)
   83310:	d9814217 	ldw	r6,1288(sp)
   83314:	29404014 	ori	r5,r5,256
   83318:	d9414c15 	stw	r5,1328(sp)
   8331c:	2000cc16 	blt	r4,zero,83650 <___vfprintf_internal_r+0x1d58>
   83320:	3021883a 	mov	r16,r6
   83324:	2023883a 	mov	r17,r4
   83328:	0039883a 	mov	fp,zero
   8332c:	d9414d17 	ldw	r5,1332(sp)
   83330:	00801984 	movi	r2,102
   83334:	2880b726 	beq	r5,r2,83614 <___vfprintf_internal_r+0x1d1c>
   83338:	00801184 	movi	r2,70
   8333c:	2880b526 	beq	r5,r2,83614 <___vfprintf_internal_r+0x1d1c>
   83340:	00801944 	movi	r2,101
   83344:	2880c826 	beq	r5,r2,83668 <___vfprintf_internal_r+0x1d70>
   83348:	00801144 	movi	r2,69
   8334c:	2880c626 	beq	r5,r2,83668 <___vfprintf_internal_r+0x1d70>
   83350:	9829883a 	mov	r20,r19
   83354:	d9014f17 	ldw	r4,1340(sp)
   83358:	d8800504 	addi	r2,sp,20
   8335c:	880d883a 	mov	r6,r17
   83360:	d8800115 	stw	r2,4(sp)
   83364:	d8c00604 	addi	r3,sp,24
   83368:	d8800704 	addi	r2,sp,28
   8336c:	800b883a 	mov	r5,r16
   83370:	01c00084 	movi	r7,2
   83374:	d8c00215 	stw	r3,8(sp)
   83378:	d8800315 	stw	r2,12(sp)
   8337c:	dd000015 	stw	r20,0(sp)
   83380:	0083b600 	call	83b60 <_dtoa_r>
   83384:	d9814d17 	ldw	r6,1332(sp)
   83388:	d8814115 	stw	r2,1284(sp)
   8338c:	008019c4 	movi	r2,103
   83390:	30809526 	beq	r6,r2,835e8 <___vfprintf_internal_r+0x1cf0>
   83394:	d8c14d17 	ldw	r3,1332(sp)
   83398:	008011c4 	movi	r2,71
   8339c:	18809226 	beq	r3,r2,835e8 <___vfprintf_internal_r+0x1cf0>
   833a0:	d9414117 	ldw	r5,1284(sp)
   833a4:	d9814d17 	ldw	r6,1332(sp)
   833a8:	00801984 	movi	r2,102
   833ac:	2d25883a 	add	r18,r5,r20
   833b0:	30808626 	beq	r6,r2,835cc <___vfprintf_internal_r+0x1cd4>
   833b4:	00801184 	movi	r2,70
   833b8:	30808426 	beq	r6,r2,835cc <___vfprintf_internal_r+0x1cd4>
   833bc:	000d883a 	mov	r6,zero
   833c0:	000f883a 	mov	r7,zero
   833c4:	880b883a 	mov	r5,r17
   833c8:	8009883a 	mov	r4,r16
   833cc:	008a3240 	call	8a324 <__eqdf2>
   833d0:	1000751e 	bne	r2,zero,835a8 <___vfprintf_internal_r+0x1cb0>
   833d4:	9005883a 	mov	r2,r18
   833d8:	dc800715 	stw	r18,28(sp)
   833dc:	d9014117 	ldw	r4,1284(sp)
   833e0:	d9414d17 	ldw	r5,1332(sp)
   833e4:	00c019c4 	movi	r3,103
   833e8:	1125c83a 	sub	r18,r2,r4
   833ec:	28c06826 	beq	r5,r3,83590 <___vfprintf_internal_r+0x1c98>
   833f0:	008011c4 	movi	r2,71
   833f4:	28806626 	beq	r5,r2,83590 <___vfprintf_internal_r+0x1c98>
   833f8:	d9000517 	ldw	r4,20(sp)
   833fc:	d8c14d17 	ldw	r3,1332(sp)
   83400:	00801944 	movi	r2,101
   83404:	10c05516 	blt	r2,r3,8355c <___vfprintf_internal_r+0x1c64>
   83408:	213fffc4 	addi	r4,r4,-1
   8340c:	d9000515 	stw	r4,20(sp)
   83410:	d8c00805 	stb	r3,32(sp)
   83414:	2021883a 	mov	r16,r4
   83418:	2000c116 	blt	r4,zero,83720 <___vfprintf_internal_r+0x1e28>
   8341c:	00800ac4 	movi	r2,43
   83420:	d8800845 	stb	r2,33(sp)
   83424:	00800244 	movi	r2,9
   83428:	1400af0e 	bge	r2,r16,836e8 <___vfprintf_internal_r+0x1df0>
   8342c:	1027883a 	mov	r19,r2
   83430:	dc400b84 	addi	r17,sp,46
   83434:	8009883a 	mov	r4,r16
   83438:	01400284 	movi	r5,10
   8343c:	008aa0c0 	call	8aa0c <__modsi3>
   83440:	10800c04 	addi	r2,r2,48
   83444:	8c7fffc4 	addi	r17,r17,-1
   83448:	8009883a 	mov	r4,r16
   8344c:	01400284 	movi	r5,10
   83450:	88800005 	stb	r2,0(r17)
   83454:	008a9ac0 	call	8a9ac <__divsi3>
   83458:	1021883a 	mov	r16,r2
   8345c:	98bff516 	blt	r19,r2,83434 <___vfprintf_internal_r+0x1b3c>
   83460:	10c00c04 	addi	r3,r2,48
   83464:	d88009c4 	addi	r2,sp,39
   83468:	108001c4 	addi	r2,r2,7
   8346c:	897fffc4 	addi	r5,r17,-1
   83470:	88ffffc5 	stb	r3,-1(r17)
   83474:	2880a72e 	bgeu	r5,r2,83714 <___vfprintf_internal_r+0x1e1c>
   83478:	1009883a 	mov	r4,r2
   8347c:	d9800804 	addi	r6,sp,32
   83480:	d8c00884 	addi	r3,sp,34
   83484:	28800003 	ldbu	r2,0(r5)
   83488:	29400044 	addi	r5,r5,1
   8348c:	18800005 	stb	r2,0(r3)
   83490:	18c00044 	addi	r3,r3,1
   83494:	293ffb36 	bltu	r5,r4,83484 <___vfprintf_internal_r+0x1b8c>
   83498:	1987c83a 	sub	r3,r3,r6
   8349c:	00800044 	movi	r2,1
   834a0:	d8c14815 	stw	r3,1312(sp)
   834a4:	90cf883a 	add	r7,r18,r3
   834a8:	1480960e 	bge	r2,r18,83704 <___vfprintf_internal_r+0x1e0c>
   834ac:	39c00044 	addi	r7,r7,1
   834b0:	d9c14515 	stw	r7,1300(sp)
   834b4:	38003416 	blt	r7,zero,83588 <___vfprintf_internal_r+0x1c90>
   834b8:	e0803fcc 	andi	r2,fp,255
   834bc:	1080201c 	xori	r2,r2,128
   834c0:	10bfe004 	addi	r2,r2,-128
   834c4:	10004e26 	beq	r2,zero,83600 <___vfprintf_internal_r+0x1d08>
   834c8:	00800b44 	movi	r2,45
   834cc:	dc814715 	stw	r18,1308(sp)
   834d0:	d8014615 	stw	zero,1304(sp)
   834d4:	d8800405 	stb	r2,16(sp)
   834d8:	003bab06 	br	82388 <___vfprintf_internal_r+0xa90>
   834dc:	00800b44 	movi	r2,45
   834e0:	d8800405 	stb	r2,16(sp)
   834e4:	003d2d06 	br	8299c <___vfprintf_internal_r+0x10a4>
   834e8:	d9014f17 	ldw	r4,1340(sp)
   834ec:	b00b883a 	mov	r5,r22
   834f0:	d9800c04 	addi	r6,sp,48
   834f4:	00818a00 	call	818a0 <__sprint_r>
   834f8:	103ab71e 	bne	r2,zero,81fd8 <___vfprintf_internal_r+0x6e0>
   834fc:	003ab506 	br	81fd4 <___vfprintf_internal_r+0x6dc>
   83500:	38800017 	ldw	r2,0(r7)
   83504:	39c00104 	addi	r7,r7,4
   83508:	d9c14015 	stw	r7,1280(sp)
   8350c:	d9414b17 	ldw	r5,1324(sp)
   83510:	d9c14017 	ldw	r7,1280(sp)
   83514:	11400015 	stw	r5,0(r2)
   83518:	00395306 	br	81a68 <___vfprintf_internal_r+0x170>
   8351c:	980f883a 	mov	r7,r19
   83520:	dcc14515 	stw	r19,1300(sp)
   83524:	d8014615 	stw	zero,1304(sp)
   83528:	003b9506 	br	82380 <___vfprintf_internal_r+0xa88>
   8352c:	0027883a 	mov	r19,zero
   83530:	00397206 	br	81afc <___vfprintf_internal_r+0x204>
   83534:	00c00274 	movhi	r3,9
   83538:	18f75304 	addi	r3,r3,-8884
   8353c:	100f883a 	mov	r7,r2
   83540:	d8814515 	stw	r2,1300(sp)
   83544:	d8c14115 	stw	r3,1284(sp)
   83548:	0039da06 	br	81cb4 <___vfprintf_internal_r+0x3bc>
   8354c:	00800274 	movhi	r2,9
   83550:	10b75204 	addi	r2,r2,-8888
   83554:	d8814115 	stw	r2,1284(sp)
   83558:	003d1606 	br	829b4 <___vfprintf_internal_r+0x10bc>
   8355c:	d9414d17 	ldw	r5,1332(sp)
   83560:	00801984 	movi	r2,102
   83564:	28804926 	beq	r5,r2,8368c <___vfprintf_internal_r+0x1d94>
   83568:	200f883a 	mov	r7,r4
   8356c:	24805716 	blt	r4,r18,836cc <___vfprintf_internal_r+0x1dd4>
   83570:	d9414c17 	ldw	r5,1328(sp)
   83574:	2880004c 	andi	r2,r5,1
   83578:	10000126 	beq	r2,zero,83580 <___vfprintf_internal_r+0x1c88>
   8357c:	21c00044 	addi	r7,r4,1
   83580:	d9c14515 	stw	r7,1300(sp)
   83584:	383fcc0e 	bge	r7,zero,834b8 <___vfprintf_internal_r+0x1bc0>
   83588:	d8014515 	stw	zero,1300(sp)
   8358c:	003fca06 	br	834b8 <___vfprintf_internal_r+0x1bc0>
   83590:	d9000517 	ldw	r4,20(sp)
   83594:	00bfff04 	movi	r2,-4
   83598:	1100480e 	bge	r2,r4,836bc <___vfprintf_internal_r+0x1dc4>
   8359c:	99004716 	blt	r19,r4,836bc <___vfprintf_internal_r+0x1dc4>
   835a0:	d8c14d15 	stw	r3,1332(sp)
   835a4:	003ff006 	br	83568 <___vfprintf_internal_r+0x1c70>
   835a8:	d8800717 	ldw	r2,28(sp)
   835ac:	14bf8b2e 	bgeu	r2,r18,833dc <___vfprintf_internal_r+0x1ae4>
   835b0:	9007883a 	mov	r3,r18
   835b4:	01000c04 	movi	r4,48
   835b8:	11000005 	stb	r4,0(r2)
   835bc:	10800044 	addi	r2,r2,1
   835c0:	d8800715 	stw	r2,28(sp)
   835c4:	18bffc1e 	bne	r3,r2,835b8 <___vfprintf_internal_r+0x1cc0>
   835c8:	003f8406 	br	833dc <___vfprintf_internal_r+0x1ae4>
   835cc:	d8814117 	ldw	r2,1284(sp)
   835d0:	10c00007 	ldb	r3,0(r2)
   835d4:	00800c04 	movi	r2,48
   835d8:	18805b26 	beq	r3,r2,83748 <___vfprintf_internal_r+0x1e50>
   835dc:	d9000517 	ldw	r4,20(sp)
   835e0:	9125883a 	add	r18,r18,r4
   835e4:	003f7506 	br	833bc <___vfprintf_internal_r+0x1ac4>
   835e8:	d9014c17 	ldw	r4,1328(sp)
   835ec:	2080004c 	andi	r2,r4,1
   835f0:	1005003a 	cmpeq	r2,r2,zero
   835f4:	103f6a26 	beq	r2,zero,833a0 <___vfprintf_internal_r+0x1aa8>
   835f8:	d8800717 	ldw	r2,28(sp)
   835fc:	003f7706 	br	833dc <___vfprintf_internal_r+0x1ae4>
   83600:	d9c14515 	stw	r7,1300(sp)
   83604:	38004d16 	blt	r7,zero,8373c <___vfprintf_internal_r+0x1e44>
   83608:	dc814715 	stw	r18,1308(sp)
   8360c:	d8014615 	stw	zero,1304(sp)
   83610:	003b5b06 	br	82380 <___vfprintf_internal_r+0xa88>
   83614:	d9014f17 	ldw	r4,1340(sp)
   83618:	d8800504 	addi	r2,sp,20
   8361c:	d8800115 	stw	r2,4(sp)
   83620:	d8c00604 	addi	r3,sp,24
   83624:	d8800704 	addi	r2,sp,28
   83628:	800b883a 	mov	r5,r16
   8362c:	880d883a 	mov	r6,r17
   83630:	01c000c4 	movi	r7,3
   83634:	d8c00215 	stw	r3,8(sp)
   83638:	d8800315 	stw	r2,12(sp)
   8363c:	dcc00015 	stw	r19,0(sp)
   83640:	9829883a 	mov	r20,r19
   83644:	0083b600 	call	83b60 <_dtoa_r>
   83648:	d8814115 	stw	r2,1284(sp)
   8364c:	003f5106 	br	83394 <___vfprintf_internal_r+0x1a9c>
   83650:	d8c14217 	ldw	r3,1288(sp)
   83654:	d9014317 	ldw	r4,1292(sp)
   83658:	07000b44 	movi	fp,45
   8365c:	1821883a 	mov	r16,r3
   83660:	2460003c 	xorhi	r17,r4,32768
   83664:	003f3106 	br	8332c <___vfprintf_internal_r+0x1a34>
   83668:	9d000044 	addi	r20,r19,1
   8366c:	003f3906 	br	83354 <___vfprintf_internal_r+0x1a5c>
   83670:	983f251e 	bne	r19,zero,83308 <___vfprintf_internal_r+0x1a10>
   83674:	04c00044 	movi	r19,1
   83678:	003f2306 	br	83308 <___vfprintf_internal_r+0x1a10>
   8367c:	04c00184 	movi	r19,6
   83680:	003f2106 	br	83308 <___vfprintf_internal_r+0x1a10>
   83684:	d8014515 	stw	zero,1300(sp)
   83688:	003eee06 	br	83244 <___vfprintf_internal_r+0x194c>
   8368c:	200f883a 	mov	r7,r4
   83690:	0100370e 	bge	zero,r4,83770 <___vfprintf_internal_r+0x1e78>
   83694:	9800031e 	bne	r19,zero,836a4 <___vfprintf_internal_r+0x1dac>
   83698:	d9814c17 	ldw	r6,1328(sp)
   8369c:	3080004c 	andi	r2,r6,1
   836a0:	103fb726 	beq	r2,zero,83580 <___vfprintf_internal_r+0x1c88>
   836a4:	20800044 	addi	r2,r4,1
   836a8:	98a7883a 	add	r19,r19,r2
   836ac:	dcc14515 	stw	r19,1300(sp)
   836b0:	980f883a 	mov	r7,r19
   836b4:	983f800e 	bge	r19,zero,834b8 <___vfprintf_internal_r+0x1bc0>
   836b8:	003fb306 	br	83588 <___vfprintf_internal_r+0x1c90>
   836bc:	d9814d17 	ldw	r6,1332(sp)
   836c0:	31bfff84 	addi	r6,r6,-2
   836c4:	d9814d15 	stw	r6,1332(sp)
   836c8:	003f4c06 	br	833fc <___vfprintf_internal_r+0x1b04>
   836cc:	0100180e 	bge	zero,r4,83730 <___vfprintf_internal_r+0x1e38>
   836d0:	00800044 	movi	r2,1
   836d4:	1485883a 	add	r2,r2,r18
   836d8:	d8814515 	stw	r2,1300(sp)
   836dc:	100f883a 	mov	r7,r2
   836e0:	103f750e 	bge	r2,zero,834b8 <___vfprintf_internal_r+0x1bc0>
   836e4:	003fa806 	br	83588 <___vfprintf_internal_r+0x1c90>
   836e8:	80c00c04 	addi	r3,r16,48
   836ec:	00800c04 	movi	r2,48
   836f0:	d8c008c5 	stb	r3,35(sp)
   836f4:	d9800804 	addi	r6,sp,32
   836f8:	d8c00904 	addi	r3,sp,36
   836fc:	d8800885 	stb	r2,34(sp)
   83700:	003f6506 	br	83498 <___vfprintf_internal_r+0x1ba0>
   83704:	d9014c17 	ldw	r4,1328(sp)
   83708:	2084703a 	and	r2,r4,r2
   8370c:	103f9c26 	beq	r2,zero,83580 <___vfprintf_internal_r+0x1c88>
   83710:	003f6606 	br	834ac <___vfprintf_internal_r+0x1bb4>
   83714:	d9800804 	addi	r6,sp,32
   83718:	d8c00884 	addi	r3,sp,34
   8371c:	003f5e06 	br	83498 <___vfprintf_internal_r+0x1ba0>
   83720:	00800b44 	movi	r2,45
   83724:	0121c83a 	sub	r16,zero,r4
   83728:	d8800845 	stb	r2,33(sp)
   8372c:	003f3d06 	br	83424 <___vfprintf_internal_r+0x1b2c>
   83730:	00800084 	movi	r2,2
   83734:	1105c83a 	sub	r2,r2,r4
   83738:	003fe606 	br	836d4 <___vfprintf_internal_r+0x1ddc>
   8373c:	d8014515 	stw	zero,1300(sp)
   83740:	dc814715 	stw	r18,1308(sp)
   83744:	003fb106 	br	8360c <___vfprintf_internal_r+0x1d14>
   83748:	000d883a 	mov	r6,zero
   8374c:	000f883a 	mov	r7,zero
   83750:	8009883a 	mov	r4,r16
   83754:	880b883a 	mov	r5,r17
   83758:	008a3ac0 	call	8a3ac <__nedf2>
   8375c:	103f9f26 	beq	r2,zero,835dc <___vfprintf_internal_r+0x1ce4>
   83760:	00800044 	movi	r2,1
   83764:	1509c83a 	sub	r4,r2,r20
   83768:	d9000515 	stw	r4,20(sp)
   8376c:	003f9b06 	br	835dc <___vfprintf_internal_r+0x1ce4>
   83770:	98000d1e 	bne	r19,zero,837a8 <___vfprintf_internal_r+0x1eb0>
   83774:	d8c14c17 	ldw	r3,1328(sp)
   83778:	1880004c 	andi	r2,r3,1
   8377c:	10000a1e 	bne	r2,zero,837a8 <___vfprintf_internal_r+0x1eb0>
   83780:	01000044 	movi	r4,1
   83784:	200f883a 	mov	r7,r4
   83788:	d9014515 	stw	r4,1300(sp)
   8378c:	003f4a06 	br	834b8 <___vfprintf_internal_r+0x1bc0>
   83790:	3cc00017 	ldw	r19,0(r7)
   83794:	39c00104 	addi	r7,r7,4
   83798:	983d0e0e 	bge	r19,zero,82bd4 <___vfprintf_internal_r+0x12dc>
   8379c:	b8c00007 	ldb	r3,0(r23)
   837a0:	04ffffc4 	movi	r19,-1
   837a4:	0038d306 	br	81af4 <___vfprintf_internal_r+0x1fc>
   837a8:	9cc00084 	addi	r19,r19,2
   837ac:	dcc14515 	stw	r19,1300(sp)
   837b0:	980f883a 	mov	r7,r19
   837b4:	983f400e 	bge	r19,zero,834b8 <___vfprintf_internal_r+0x1bc0>
   837b8:	003f7306 	br	83588 <___vfprintf_internal_r+0x1c90>

000837bc <__vfprintf_internal>:
   837bc:	00800274 	movhi	r2,9
   837c0:	10bf5a04 	addi	r2,r2,-664
   837c4:	2013883a 	mov	r9,r4
   837c8:	11000017 	ldw	r4,0(r2)
   837cc:	2805883a 	mov	r2,r5
   837d0:	300f883a 	mov	r7,r6
   837d4:	480b883a 	mov	r5,r9
   837d8:	100d883a 	mov	r6,r2
   837dc:	00818f81 	jmpi	818f8 <___vfprintf_internal_r>

000837e0 <__swsetup_r>:
   837e0:	00800274 	movhi	r2,9
   837e4:	10bf5a04 	addi	r2,r2,-664
   837e8:	10c00017 	ldw	r3,0(r2)
   837ec:	defffd04 	addi	sp,sp,-12
   837f0:	dc400115 	stw	r17,4(sp)
   837f4:	dc000015 	stw	r16,0(sp)
   837f8:	dfc00215 	stw	ra,8(sp)
   837fc:	2023883a 	mov	r17,r4
   83800:	2821883a 	mov	r16,r5
   83804:	18000226 	beq	r3,zero,83810 <__swsetup_r+0x30>
   83808:	18800e17 	ldw	r2,56(r3)
   8380c:	10001f26 	beq	r2,zero,8388c <__swsetup_r+0xac>
   83810:	8100030b 	ldhu	r4,12(r16)
   83814:	2080020c 	andi	r2,r4,8
   83818:	10002826 	beq	r2,zero,838bc <__swsetup_r+0xdc>
   8381c:	81400417 	ldw	r5,16(r16)
   83820:	28001d26 	beq	r5,zero,83898 <__swsetup_r+0xb8>
   83824:	2080004c 	andi	r2,r4,1
   83828:	1005003a 	cmpeq	r2,r2,zero
   8382c:	10000b26 	beq	r2,zero,8385c <__swsetup_r+0x7c>
   83830:	2080008c 	andi	r2,r4,2
   83834:	10001226 	beq	r2,zero,83880 <__swsetup_r+0xa0>
   83838:	0005883a 	mov	r2,zero
   8383c:	80800215 	stw	r2,8(r16)
   83840:	28000b26 	beq	r5,zero,83870 <__swsetup_r+0x90>
   83844:	0005883a 	mov	r2,zero
   83848:	dfc00217 	ldw	ra,8(sp)
   8384c:	dc400117 	ldw	r17,4(sp)
   83850:	dc000017 	ldw	r16,0(sp)
   83854:	dec00304 	addi	sp,sp,12
   83858:	f800283a 	ret
   8385c:	80800517 	ldw	r2,20(r16)
   83860:	80000215 	stw	zero,8(r16)
   83864:	0085c83a 	sub	r2,zero,r2
   83868:	80800615 	stw	r2,24(r16)
   8386c:	283ff51e 	bne	r5,zero,83844 <__swsetup_r+0x64>
   83870:	2080200c 	andi	r2,r4,128
   83874:	103ff326 	beq	r2,zero,83844 <__swsetup_r+0x64>
   83878:	00bfffc4 	movi	r2,-1
   8387c:	003ff206 	br	83848 <__swsetup_r+0x68>
   83880:	80800517 	ldw	r2,20(r16)
   83884:	80800215 	stw	r2,8(r16)
   83888:	003fed06 	br	83840 <__swsetup_r+0x60>
   8388c:	1809883a 	mov	r4,r3
   83890:	00853ac0 	call	853ac <__sinit>
   83894:	003fde06 	br	83810 <__swsetup_r+0x30>
   83898:	20c0a00c 	andi	r3,r4,640
   8389c:	00808004 	movi	r2,512
   838a0:	18bfe026 	beq	r3,r2,83824 <__swsetup_r+0x44>
   838a4:	8809883a 	mov	r4,r17
   838a8:	800b883a 	mov	r5,r16
   838ac:	00861580 	call	86158 <__smakebuf_r>
   838b0:	8100030b 	ldhu	r4,12(r16)
   838b4:	81400417 	ldw	r5,16(r16)
   838b8:	003fda06 	br	83824 <__swsetup_r+0x44>
   838bc:	2080040c 	andi	r2,r4,16
   838c0:	103fed26 	beq	r2,zero,83878 <__swsetup_r+0x98>
   838c4:	2080010c 	andi	r2,r4,4
   838c8:	10001226 	beq	r2,zero,83914 <__swsetup_r+0x134>
   838cc:	81400c17 	ldw	r5,48(r16)
   838d0:	28000526 	beq	r5,zero,838e8 <__swsetup_r+0x108>
   838d4:	80801004 	addi	r2,r16,64
   838d8:	28800226 	beq	r5,r2,838e4 <__swsetup_r+0x104>
   838dc:	8809883a 	mov	r4,r17
   838e0:	00857640 	call	85764 <_free_r>
   838e4:	80000c15 	stw	zero,48(r16)
   838e8:	8080030b 	ldhu	r2,12(r16)
   838ec:	81400417 	ldw	r5,16(r16)
   838f0:	80000115 	stw	zero,4(r16)
   838f4:	10bff6cc 	andi	r2,r2,65499
   838f8:	8080030d 	sth	r2,12(r16)
   838fc:	81400015 	stw	r5,0(r16)
   83900:	8080030b 	ldhu	r2,12(r16)
   83904:	10800214 	ori	r2,r2,8
   83908:	113fffcc 	andi	r4,r2,65535
   8390c:	8080030d 	sth	r2,12(r16)
   83910:	003fc306 	br	83820 <__swsetup_r+0x40>
   83914:	81400417 	ldw	r5,16(r16)
   83918:	003ff906 	br	83900 <__swsetup_r+0x120>

0008391c <quorem>:
   8391c:	28c00417 	ldw	r3,16(r5)
   83920:	20800417 	ldw	r2,16(r4)
   83924:	defff104 	addi	sp,sp,-60
   83928:	dfc00e15 	stw	ra,56(sp)
   8392c:	df000d15 	stw	fp,52(sp)
   83930:	ddc00c15 	stw	r23,48(sp)
   83934:	dd800b15 	stw	r22,44(sp)
   83938:	dd400a15 	stw	r21,40(sp)
   8393c:	dd000915 	stw	r20,36(sp)
   83940:	dcc00815 	stw	r19,32(sp)
   83944:	dc800715 	stw	r18,28(sp)
   83948:	dc400615 	stw	r17,24(sp)
   8394c:	dc000515 	stw	r16,20(sp)
   83950:	d9000315 	stw	r4,12(sp)
   83954:	d9400415 	stw	r5,16(sp)
   83958:	10c07f16 	blt	r2,r3,83b58 <quorem+0x23c>
   8395c:	1d3fffc4 	addi	r20,r3,-1
   83960:	d8c00417 	ldw	r3,16(sp)
   83964:	d9000317 	ldw	r4,12(sp)
   83968:	a505883a 	add	r2,r20,r20
   8396c:	1085883a 	add	r2,r2,r2
   83970:	1cc00504 	addi	r19,r3,20
   83974:	25c00504 	addi	r23,r4,20
   83978:	98ad883a 	add	r22,r19,r2
   8397c:	15c7883a 	add	r3,r2,r23
   83980:	b1400017 	ldw	r5,0(r22)
   83984:	19000017 	ldw	r4,0(r3)
   83988:	d8c00015 	stw	r3,0(sp)
   8398c:	29400044 	addi	r5,r5,1
   83990:	d9000215 	stw	r4,8(sp)
   83994:	008aa6c0 	call	8aa6c <__udivsi3>
   83998:	1039883a 	mov	fp,r2
   8399c:	10003d1e 	bne	r2,zero,83a94 <quorem+0x178>
   839a0:	d9400417 	ldw	r5,16(sp)
   839a4:	d9000317 	ldw	r4,12(sp)
   839a8:	0086e840 	call	86e84 <__mcmp>
   839ac:	10002c16 	blt	r2,zero,83a60 <quorem+0x144>
   839b0:	e7000044 	addi	fp,fp,1
   839b4:	b80f883a 	mov	r7,r23
   839b8:	0011883a 	mov	r8,zero
   839bc:	0009883a 	mov	r4,zero
   839c0:	99400017 	ldw	r5,0(r19)
   839c4:	38c00017 	ldw	r3,0(r7)
   839c8:	9cc00104 	addi	r19,r19,4
   839cc:	28bfffcc 	andi	r2,r5,65535
   839d0:	2085883a 	add	r2,r4,r2
   839d4:	11bfffcc 	andi	r6,r2,65535
   839d8:	193fffcc 	andi	r4,r3,65535
   839dc:	1004d43a 	srli	r2,r2,16
   839e0:	280ad43a 	srli	r5,r5,16
   839e4:	2189c83a 	sub	r4,r4,r6
   839e8:	2209883a 	add	r4,r4,r8
   839ec:	1806d43a 	srli	r3,r3,16
   839f0:	288b883a 	add	r5,r5,r2
   839f4:	200dd43a 	srai	r6,r4,16
   839f8:	28bfffcc 	andi	r2,r5,65535
   839fc:	1887c83a 	sub	r3,r3,r2
   83a00:	1987883a 	add	r3,r3,r6
   83a04:	3900000d 	sth	r4,0(r7)
   83a08:	38c0008d 	sth	r3,2(r7)
   83a0c:	2808d43a 	srli	r4,r5,16
   83a10:	39c00104 	addi	r7,r7,4
   83a14:	1811d43a 	srai	r8,r3,16
   83a18:	b4ffe92e 	bgeu	r22,r19,839c0 <quorem+0xa4>
   83a1c:	a505883a 	add	r2,r20,r20
   83a20:	1085883a 	add	r2,r2,r2
   83a24:	b885883a 	add	r2,r23,r2
   83a28:	10c00017 	ldw	r3,0(r2)
   83a2c:	18000c1e 	bne	r3,zero,83a60 <quorem+0x144>
   83a30:	113fff04 	addi	r4,r2,-4
   83a34:	b900082e 	bgeu	r23,r4,83a58 <quorem+0x13c>
   83a38:	10bfff17 	ldw	r2,-4(r2)
   83a3c:	10000326 	beq	r2,zero,83a4c <quorem+0x130>
   83a40:	00000506 	br	83a58 <quorem+0x13c>
   83a44:	20800017 	ldw	r2,0(r4)
   83a48:	1000031e 	bne	r2,zero,83a58 <quorem+0x13c>
   83a4c:	213fff04 	addi	r4,r4,-4
   83a50:	a53fffc4 	addi	r20,r20,-1
   83a54:	b93ffb36 	bltu	r23,r4,83a44 <quorem+0x128>
   83a58:	d9000317 	ldw	r4,12(sp)
   83a5c:	25000415 	stw	r20,16(r4)
   83a60:	e005883a 	mov	r2,fp
   83a64:	dfc00e17 	ldw	ra,56(sp)
   83a68:	df000d17 	ldw	fp,52(sp)
   83a6c:	ddc00c17 	ldw	r23,48(sp)
   83a70:	dd800b17 	ldw	r22,44(sp)
   83a74:	dd400a17 	ldw	r21,40(sp)
   83a78:	dd000917 	ldw	r20,36(sp)
   83a7c:	dcc00817 	ldw	r19,32(sp)
   83a80:	dc800717 	ldw	r18,28(sp)
   83a84:	dc400617 	ldw	r17,24(sp)
   83a88:	dc000517 	ldw	r16,20(sp)
   83a8c:	dec00f04 	addi	sp,sp,60
   83a90:	f800283a 	ret
   83a94:	b823883a 	mov	r17,r23
   83a98:	9825883a 	mov	r18,r19
   83a9c:	d8000115 	stw	zero,4(sp)
   83aa0:	002b883a 	mov	r21,zero
   83aa4:	94000017 	ldw	r16,0(r18)
   83aa8:	e009883a 	mov	r4,fp
   83aac:	94800104 	addi	r18,r18,4
   83ab0:	817fffcc 	andi	r5,r16,65535
   83ab4:	008aa7c0 	call	8aa7c <__mulsi3>
   83ab8:	800ad43a 	srli	r5,r16,16
   83abc:	e009883a 	mov	r4,fp
   83ac0:	a8a1883a 	add	r16,r21,r2
   83ac4:	008aa7c0 	call	8aa7c <__mulsi3>
   83ac8:	89000017 	ldw	r4,0(r17)
   83acc:	80ffffcc 	andi	r3,r16,65535
   83ad0:	8020d43a 	srli	r16,r16,16
   83ad4:	217fffcc 	andi	r5,r4,65535
   83ad8:	28cbc83a 	sub	r5,r5,r3
   83adc:	d8c00117 	ldw	r3,4(sp)
   83ae0:	2008d43a 	srli	r4,r4,16
   83ae4:	1405883a 	add	r2,r2,r16
   83ae8:	28cb883a 	add	r5,r5,r3
   83aec:	280dd43a 	srai	r6,r5,16
   83af0:	10ffffcc 	andi	r3,r2,65535
   83af4:	20c9c83a 	sub	r4,r4,r3
   83af8:	2189883a 	add	r4,r4,r6
   83afc:	8900008d 	sth	r4,2(r17)
   83b00:	2009d43a 	srai	r4,r4,16
   83b04:	8940000d 	sth	r5,0(r17)
   83b08:	102ad43a 	srli	r21,r2,16
   83b0c:	8c400104 	addi	r17,r17,4
   83b10:	d9000115 	stw	r4,4(sp)
   83b14:	b4bfe32e 	bgeu	r22,r18,83aa4 <quorem+0x188>
   83b18:	d9000217 	ldw	r4,8(sp)
   83b1c:	203fa01e 	bne	r4,zero,839a0 <quorem+0x84>
   83b20:	d8800017 	ldw	r2,0(sp)
   83b24:	10ffff04 	addi	r3,r2,-4
   83b28:	b8c0082e 	bgeu	r23,r3,83b4c <quorem+0x230>
   83b2c:	10bfff17 	ldw	r2,-4(r2)
   83b30:	10000326 	beq	r2,zero,83b40 <quorem+0x224>
   83b34:	00000506 	br	83b4c <quorem+0x230>
   83b38:	18800017 	ldw	r2,0(r3)
   83b3c:	1000031e 	bne	r2,zero,83b4c <quorem+0x230>
   83b40:	18ffff04 	addi	r3,r3,-4
   83b44:	a53fffc4 	addi	r20,r20,-1
   83b48:	b8fffb36 	bltu	r23,r3,83b38 <quorem+0x21c>
   83b4c:	d8c00317 	ldw	r3,12(sp)
   83b50:	1d000415 	stw	r20,16(r3)
   83b54:	003f9206 	br	839a0 <quorem+0x84>
   83b58:	0005883a 	mov	r2,zero
   83b5c:	003fc106 	br	83a64 <quorem+0x148>

00083b60 <_dtoa_r>:
   83b60:	22001017 	ldw	r8,64(r4)
   83b64:	deffda04 	addi	sp,sp,-152
   83b68:	dd402115 	stw	r21,132(sp)
   83b6c:	dd002015 	stw	r20,128(sp)
   83b70:	dc801e15 	stw	r18,120(sp)
   83b74:	dc401d15 	stw	r17,116(sp)
   83b78:	dfc02515 	stw	ra,148(sp)
   83b7c:	df002415 	stw	fp,144(sp)
   83b80:	ddc02315 	stw	r23,140(sp)
   83b84:	dd802215 	stw	r22,136(sp)
   83b88:	dcc01f15 	stw	r19,124(sp)
   83b8c:	dc001c15 	stw	r16,112(sp)
   83b90:	d9001615 	stw	r4,88(sp)
   83b94:	3023883a 	mov	r17,r6
   83b98:	2829883a 	mov	r20,r5
   83b9c:	d9c01715 	stw	r7,92(sp)
   83ba0:	dc802817 	ldw	r18,160(sp)
   83ba4:	302b883a 	mov	r21,r6
   83ba8:	40000a26 	beq	r8,zero,83bd4 <_dtoa_r+0x74>
   83bac:	20801117 	ldw	r2,68(r4)
   83bb0:	400b883a 	mov	r5,r8
   83bb4:	40800115 	stw	r2,4(r8)
   83bb8:	20c01117 	ldw	r3,68(r4)
   83bbc:	00800044 	movi	r2,1
   83bc0:	10c4983a 	sll	r2,r2,r3
   83bc4:	40800215 	stw	r2,8(r8)
   83bc8:	0086d280 	call	86d28 <_Bfree>
   83bcc:	d8c01617 	ldw	r3,88(sp)
   83bd0:	18001015 	stw	zero,64(r3)
   83bd4:	8800a316 	blt	r17,zero,83e64 <_dtoa_r+0x304>
   83bd8:	90000015 	stw	zero,0(r18)
   83bdc:	a8dffc2c 	andhi	r3,r21,32752
   83be0:	009ffc34 	movhi	r2,32752
   83be4:	18809126 	beq	r3,r2,83e2c <_dtoa_r+0x2cc>
   83be8:	000d883a 	mov	r6,zero
   83bec:	000f883a 	mov	r7,zero
   83bf0:	a009883a 	mov	r4,r20
   83bf4:	a80b883a 	mov	r5,r21
   83bf8:	dd001215 	stw	r20,72(sp)
   83bfc:	dd401315 	stw	r21,76(sp)
   83c00:	008a3ac0 	call	8a3ac <__nedf2>
   83c04:	1000171e 	bne	r2,zero,83c64 <_dtoa_r+0x104>
   83c08:	d9802717 	ldw	r6,156(sp)
   83c0c:	00800044 	movi	r2,1
   83c10:	30800015 	stw	r2,0(r6)
   83c14:	d8802917 	ldw	r2,164(sp)
   83c18:	10029b26 	beq	r2,zero,84688 <_dtoa_r+0xb28>
   83c1c:	d9002917 	ldw	r4,164(sp)
   83c20:	00800274 	movhi	r2,9
   83c24:	10b76144 	addi	r2,r2,-8827
   83c28:	10ffffc4 	addi	r3,r2,-1
   83c2c:	20800015 	stw	r2,0(r4)
   83c30:	1805883a 	mov	r2,r3
   83c34:	dfc02517 	ldw	ra,148(sp)
   83c38:	df002417 	ldw	fp,144(sp)
   83c3c:	ddc02317 	ldw	r23,140(sp)
   83c40:	dd802217 	ldw	r22,136(sp)
   83c44:	dd402117 	ldw	r21,132(sp)
   83c48:	dd002017 	ldw	r20,128(sp)
   83c4c:	dcc01f17 	ldw	r19,124(sp)
   83c50:	dc801e17 	ldw	r18,120(sp)
   83c54:	dc401d17 	ldw	r17,116(sp)
   83c58:	dc001c17 	ldw	r16,112(sp)
   83c5c:	dec02604 	addi	sp,sp,152
   83c60:	f800283a 	ret
   83c64:	d9001617 	ldw	r4,88(sp)
   83c68:	d9401217 	ldw	r5,72(sp)
   83c6c:	d8800104 	addi	r2,sp,4
   83c70:	a80d883a 	mov	r6,r21
   83c74:	d9c00204 	addi	r7,sp,8
   83c78:	d8800015 	stw	r2,0(sp)
   83c7c:	00873640 	call	87364 <__d2b>
   83c80:	d8800715 	stw	r2,28(sp)
   83c84:	a804d53a 	srli	r2,r21,20
   83c88:	1101ffcc 	andi	r4,r2,2047
   83c8c:	20008626 	beq	r4,zero,83ea8 <_dtoa_r+0x348>
   83c90:	d8c01217 	ldw	r3,72(sp)
   83c94:	00800434 	movhi	r2,16
   83c98:	10bfffc4 	addi	r2,r2,-1
   83c9c:	ddc00117 	ldw	r23,4(sp)
   83ca0:	a884703a 	and	r2,r21,r2
   83ca4:	1811883a 	mov	r8,r3
   83ca8:	124ffc34 	orhi	r9,r2,16368
   83cac:	25bf0044 	addi	r22,r4,-1023
   83cb0:	d8000815 	stw	zero,32(sp)
   83cb4:	0005883a 	mov	r2,zero
   83cb8:	00cffe34 	movhi	r3,16376
   83cbc:	480b883a 	mov	r5,r9
   83cc0:	4009883a 	mov	r4,r8
   83cc4:	180f883a 	mov	r7,r3
   83cc8:	100d883a 	mov	r6,r2
   83ccc:	0089c140 	call	89c14 <__subdf3>
   83cd0:	0218dbf4 	movhi	r8,25455
   83cd4:	4210d844 	addi	r8,r8,17249
   83cd8:	024ff4f4 	movhi	r9,16339
   83cdc:	4a61e9c4 	addi	r9,r9,-30809
   83ce0:	480f883a 	mov	r7,r9
   83ce4:	400d883a 	mov	r6,r8
   83ce8:	180b883a 	mov	r5,r3
   83cec:	1009883a 	mov	r4,r2
   83cf0:	0089d080 	call	89d08 <__muldf3>
   83cf4:	0222d874 	movhi	r8,35681
   83cf8:	42322cc4 	addi	r8,r8,-14157
   83cfc:	024ff1f4 	movhi	r9,16327
   83d00:	4a628a04 	addi	r9,r9,-30168
   83d04:	480f883a 	mov	r7,r9
   83d08:	400d883a 	mov	r6,r8
   83d0c:	180b883a 	mov	r5,r3
   83d10:	1009883a 	mov	r4,r2
   83d14:	0089c940 	call	89c94 <__adddf3>
   83d18:	b009883a 	mov	r4,r22
   83d1c:	1021883a 	mov	r16,r2
   83d20:	1823883a 	mov	r17,r3
   83d24:	008a5cc0 	call	8a5cc <__floatsidf>
   83d28:	021427f4 	movhi	r8,20639
   83d2c:	421e7ec4 	addi	r8,r8,31227
   83d30:	024ff4f4 	movhi	r9,16339
   83d34:	4a5104c4 	addi	r9,r9,17427
   83d38:	480f883a 	mov	r7,r9
   83d3c:	400d883a 	mov	r6,r8
   83d40:	180b883a 	mov	r5,r3
   83d44:	1009883a 	mov	r4,r2
   83d48:	0089d080 	call	89d08 <__muldf3>
   83d4c:	180f883a 	mov	r7,r3
   83d50:	880b883a 	mov	r5,r17
   83d54:	100d883a 	mov	r6,r2
   83d58:	8009883a 	mov	r4,r16
   83d5c:	0089c940 	call	89c94 <__adddf3>
   83d60:	1009883a 	mov	r4,r2
   83d64:	180b883a 	mov	r5,r3
   83d68:	1021883a 	mov	r16,r2
   83d6c:	1823883a 	mov	r17,r3
   83d70:	008a6c40 	call	8a6c4 <__fixdfsi>
   83d74:	000d883a 	mov	r6,zero
   83d78:	000f883a 	mov	r7,zero
   83d7c:	8009883a 	mov	r4,r16
   83d80:	880b883a 	mov	r5,r17
   83d84:	d8800d15 	stw	r2,52(sp)
   83d88:	008a5440 	call	8a544 <__ltdf2>
   83d8c:	10031716 	blt	r2,zero,849ec <_dtoa_r+0xe8c>
   83d90:	d8c00d17 	ldw	r3,52(sp)
   83d94:	00800584 	movi	r2,22
   83d98:	10c1482e 	bgeu	r2,r3,842bc <_dtoa_r+0x75c>
   83d9c:	01000044 	movi	r4,1
   83da0:	d9000c15 	stw	r4,48(sp)
   83da4:	bd85c83a 	sub	r2,r23,r22
   83da8:	11bfffc4 	addi	r6,r2,-1
   83dac:	30030b16 	blt	r6,zero,849dc <_dtoa_r+0xe7c>
   83db0:	d9800a15 	stw	r6,40(sp)
   83db4:	d8001115 	stw	zero,68(sp)
   83db8:	d8c00d17 	ldw	r3,52(sp)
   83dbc:	1802ff16 	blt	r3,zero,849bc <_dtoa_r+0xe5c>
   83dc0:	d9000a17 	ldw	r4,40(sp)
   83dc4:	d8c00915 	stw	r3,36(sp)
   83dc8:	d8001015 	stw	zero,64(sp)
   83dcc:	20c9883a 	add	r4,r4,r3
   83dd0:	d9000a15 	stw	r4,40(sp)
   83dd4:	d9001717 	ldw	r4,92(sp)
   83dd8:	00800244 	movi	r2,9
   83ddc:	11004636 	bltu	r2,r4,83ef8 <_dtoa_r+0x398>
   83de0:	00800144 	movi	r2,5
   83de4:	11020416 	blt	r2,r4,845f8 <_dtoa_r+0xa98>
   83de8:	04400044 	movi	r17,1
   83dec:	d8c01717 	ldw	r3,92(sp)
   83df0:	00800144 	movi	r2,5
   83df4:	10c1ed36 	bltu	r2,r3,845ac <_dtoa_r+0xa4c>
   83df8:	18c5883a 	add	r2,r3,r3
   83dfc:	1085883a 	add	r2,r2,r2
   83e00:	00c00234 	movhi	r3,8
   83e04:	18cf8504 	addi	r3,r3,15892
   83e08:	10c5883a 	add	r2,r2,r3
   83e0c:	11000017 	ldw	r4,0(r2)
   83e10:	2000683a 	jmp	r4
   83e14:	00083f00 	call	83f0 <__alt_mem_sram-0x77c10>
   83e18:	00083f00 	call	83f0 <__alt_mem_sram-0x77c10>
   83e1c:	00084900 	call	8490 <__alt_mem_sram-0x77b70>
   83e20:	000848d8 	cmpnei	zero,zero,8483
   83e24:	0008491c 	xori	zero,zero,8484
   83e28:	00084928 	cmpgeui	zero,zero,8484
   83e2c:	d9002717 	ldw	r4,156(sp)
   83e30:	0089c3c4 	movi	r2,9999
   83e34:	20800015 	stw	r2,0(r4)
   83e38:	a0001026 	beq	r20,zero,83e7c <_dtoa_r+0x31c>
   83e3c:	00c00274 	movhi	r3,9
   83e40:	18f76d04 	addi	r3,r3,-8780
   83e44:	d9802917 	ldw	r6,164(sp)
   83e48:	303f7926 	beq	r6,zero,83c30 <_dtoa_r+0xd0>
   83e4c:	188000c7 	ldb	r2,3(r3)
   83e50:	190000c4 	addi	r4,r3,3
   83e54:	1000101e 	bne	r2,zero,83e98 <_dtoa_r+0x338>
   83e58:	d8802917 	ldw	r2,164(sp)
   83e5c:	11000015 	stw	r4,0(r2)
   83e60:	003f7306 	br	83c30 <_dtoa_r+0xd0>
   83e64:	00a00034 	movhi	r2,32768
   83e68:	10bfffc4 	addi	r2,r2,-1
   83e6c:	00c00044 	movi	r3,1
   83e70:	88aa703a 	and	r21,r17,r2
   83e74:	90c00015 	stw	r3,0(r18)
   83e78:	003f5806 	br	83bdc <_dtoa_r+0x7c>
   83e7c:	00800434 	movhi	r2,16
   83e80:	10bfffc4 	addi	r2,r2,-1
   83e84:	a884703a 	and	r2,r21,r2
   83e88:	103fec1e 	bne	r2,zero,83e3c <_dtoa_r+0x2dc>
   83e8c:	00c00274 	movhi	r3,9
   83e90:	18f76a04 	addi	r3,r3,-8792
   83e94:	003feb06 	br	83e44 <_dtoa_r+0x2e4>
   83e98:	d8802917 	ldw	r2,164(sp)
   83e9c:	19000204 	addi	r4,r3,8
   83ea0:	11000015 	stw	r4,0(r2)
   83ea4:	003f6206 	br	83c30 <_dtoa_r+0xd0>
   83ea8:	ddc00117 	ldw	r23,4(sp)
   83eac:	d8800217 	ldw	r2,8(sp)
   83eb0:	01000804 	movi	r4,32
   83eb4:	b8c10c84 	addi	r3,r23,1074
   83eb8:	18a3883a 	add	r17,r3,r2
   83ebc:	2441b80e 	bge	r4,r17,845a0 <_dtoa_r+0xa40>
   83ec0:	00c01004 	movi	r3,64
   83ec4:	1c47c83a 	sub	r3,r3,r17
   83ec8:	88bff804 	addi	r2,r17,-32
   83ecc:	a8c6983a 	sll	r3,r21,r3
   83ed0:	a084d83a 	srl	r2,r20,r2
   83ed4:	1888b03a 	or	r4,r3,r2
   83ed8:	008a79c0 	call	8a79c <__floatunsidf>
   83edc:	1011883a 	mov	r8,r2
   83ee0:	00bf8434 	movhi	r2,65040
   83ee4:	01000044 	movi	r4,1
   83ee8:	10d3883a 	add	r9,r2,r3
   83eec:	8dbef344 	addi	r22,r17,-1075
   83ef0:	d9000815 	stw	r4,32(sp)
   83ef4:	003f6f06 	br	83cb4 <_dtoa_r+0x154>
   83ef8:	d8001715 	stw	zero,92(sp)
   83efc:	04400044 	movi	r17,1
   83f00:	00bfffc4 	movi	r2,-1
   83f04:	00c00044 	movi	r3,1
   83f08:	d8800e15 	stw	r2,56(sp)
   83f0c:	d8002615 	stw	zero,152(sp)
   83f10:	d8800f15 	stw	r2,60(sp)
   83f14:	d8c00b15 	stw	r3,44(sp)
   83f18:	1021883a 	mov	r16,r2
   83f1c:	d8801617 	ldw	r2,88(sp)
   83f20:	10001115 	stw	zero,68(r2)
   83f24:	d8801617 	ldw	r2,88(sp)
   83f28:	11401117 	ldw	r5,68(r2)
   83f2c:	1009883a 	mov	r4,r2
   83f30:	00872a80 	call	872a8 <_Balloc>
   83f34:	d8c01617 	ldw	r3,88(sp)
   83f38:	d8800515 	stw	r2,20(sp)
   83f3c:	18801015 	stw	r2,64(r3)
   83f40:	00800384 	movi	r2,14
   83f44:	14006836 	bltu	r2,r16,840e8 <_dtoa_r+0x588>
   83f48:	8805003a 	cmpeq	r2,r17,zero
   83f4c:	1000661e 	bne	r2,zero,840e8 <_dtoa_r+0x588>
   83f50:	d9000d17 	ldw	r4,52(sp)
   83f54:	0102300e 	bge	zero,r4,84818 <_dtoa_r+0xcb8>
   83f58:	208003cc 	andi	r2,r4,15
   83f5c:	100490fa 	slli	r2,r2,3
   83f60:	2025d13a 	srai	r18,r4,4
   83f64:	00c00274 	movhi	r3,9
   83f68:	18f77f04 	addi	r3,r3,-8708
   83f6c:	10c5883a 	add	r2,r2,r3
   83f70:	90c0040c 	andi	r3,r18,16
   83f74:	14000017 	ldw	r16,0(r2)
   83f78:	14400117 	ldw	r17,4(r2)
   83f7c:	18036a1e 	bne	r3,zero,84d28 <_dtoa_r+0x11c8>
   83f80:	05800084 	movi	r22,2
   83f84:	90001026 	beq	r18,zero,83fc8 <_dtoa_r+0x468>
   83f88:	04c00274 	movhi	r19,9
   83f8c:	9cf7b104 	addi	r19,r19,-8508
   83f90:	9080004c 	andi	r2,r18,1
   83f94:	1005003a 	cmpeq	r2,r2,zero
   83f98:	1000081e 	bne	r2,zero,83fbc <_dtoa_r+0x45c>
   83f9c:	99800017 	ldw	r6,0(r19)
   83fa0:	99c00117 	ldw	r7,4(r19)
   83fa4:	880b883a 	mov	r5,r17
   83fa8:	8009883a 	mov	r4,r16
   83fac:	0089d080 	call	89d08 <__muldf3>
   83fb0:	1021883a 	mov	r16,r2
   83fb4:	b5800044 	addi	r22,r22,1
   83fb8:	1823883a 	mov	r17,r3
   83fbc:	9025d07a 	srai	r18,r18,1
   83fc0:	9cc00204 	addi	r19,r19,8
   83fc4:	903ff21e 	bne	r18,zero,83f90 <_dtoa_r+0x430>
   83fc8:	a80b883a 	mov	r5,r21
   83fcc:	a009883a 	mov	r4,r20
   83fd0:	880f883a 	mov	r7,r17
   83fd4:	800d883a 	mov	r6,r16
   83fd8:	008a0cc0 	call	8a0cc <__divdf3>
   83fdc:	1029883a 	mov	r20,r2
   83fe0:	182b883a 	mov	r21,r3
   83fe4:	d8c00c17 	ldw	r3,48(sp)
   83fe8:	1805003a 	cmpeq	r2,r3,zero
   83fec:	1000081e 	bne	r2,zero,84010 <_dtoa_r+0x4b0>
   83ff0:	0005883a 	mov	r2,zero
   83ff4:	00cffc34 	movhi	r3,16368
   83ff8:	180f883a 	mov	r7,r3
   83ffc:	a009883a 	mov	r4,r20
   84000:	a80b883a 	mov	r5,r21
   84004:	100d883a 	mov	r6,r2
   84008:	008a5440 	call	8a544 <__ltdf2>
   8400c:	1003fe16 	blt	r2,zero,85008 <_dtoa_r+0x14a8>
   84010:	b009883a 	mov	r4,r22
   84014:	008a5cc0 	call	8a5cc <__floatsidf>
   84018:	180b883a 	mov	r5,r3
   8401c:	1009883a 	mov	r4,r2
   84020:	a00d883a 	mov	r6,r20
   84024:	a80f883a 	mov	r7,r21
   84028:	0089d080 	call	89d08 <__muldf3>
   8402c:	0011883a 	mov	r8,zero
   84030:	02500734 	movhi	r9,16412
   84034:	1009883a 	mov	r4,r2
   84038:	180b883a 	mov	r5,r3
   8403c:	480f883a 	mov	r7,r9
   84040:	400d883a 	mov	r6,r8
   84044:	0089c940 	call	89c94 <__adddf3>
   84048:	d9000f17 	ldw	r4,60(sp)
   8404c:	102d883a 	mov	r22,r2
   84050:	00bf3034 	movhi	r2,64704
   84054:	18b9883a 	add	fp,r3,r2
   84058:	e02f883a 	mov	r23,fp
   8405c:	20028f1e 	bne	r4,zero,84a9c <_dtoa_r+0xf3c>
   84060:	0005883a 	mov	r2,zero
   84064:	00d00534 	movhi	r3,16404
   84068:	a009883a 	mov	r4,r20
   8406c:	a80b883a 	mov	r5,r21
   84070:	180f883a 	mov	r7,r3
   84074:	100d883a 	mov	r6,r2
   84078:	0089c140 	call	89c14 <__subdf3>
   8407c:	1009883a 	mov	r4,r2
   84080:	e00f883a 	mov	r7,fp
   84084:	180b883a 	mov	r5,r3
   84088:	b00d883a 	mov	r6,r22
   8408c:	1025883a 	mov	r18,r2
   84090:	1827883a 	mov	r19,r3
   84094:	008a4340 	call	8a434 <__gtdf2>
   84098:	00834f16 	blt	zero,r2,84dd8 <_dtoa_r+0x1278>
   8409c:	e0e0003c 	xorhi	r3,fp,32768
   840a0:	9009883a 	mov	r4,r18
   840a4:	980b883a 	mov	r5,r19
   840a8:	180f883a 	mov	r7,r3
   840ac:	b00d883a 	mov	r6,r22
   840b0:	008a5440 	call	8a544 <__ltdf2>
   840b4:	1000080e 	bge	r2,zero,840d8 <_dtoa_r+0x578>
   840b8:	0027883a 	mov	r19,zero
   840bc:	0025883a 	mov	r18,zero
   840c0:	d8802617 	ldw	r2,152(sp)
   840c4:	df000517 	ldw	fp,20(sp)
   840c8:	d8000615 	stw	zero,24(sp)
   840cc:	0084303a 	nor	r2,zero,r2
   840d0:	d8800d15 	stw	r2,52(sp)
   840d4:	00019b06 	br	84744 <_dtoa_r+0xbe4>
   840d8:	d9801217 	ldw	r6,72(sp)
   840dc:	d8801317 	ldw	r2,76(sp)
   840e0:	3029883a 	mov	r20,r6
   840e4:	102b883a 	mov	r21,r2
   840e8:	d8c00217 	ldw	r3,8(sp)
   840ec:	18008516 	blt	r3,zero,84304 <_dtoa_r+0x7a4>
   840f0:	d9000d17 	ldw	r4,52(sp)
   840f4:	00800384 	movi	r2,14
   840f8:	11008216 	blt	r2,r4,84304 <_dtoa_r+0x7a4>
   840fc:	200490fa 	slli	r2,r4,3
   84100:	d9802617 	ldw	r6,152(sp)
   84104:	00c00274 	movhi	r3,9
   84108:	18f77f04 	addi	r3,r3,-8708
   8410c:	10c5883a 	add	r2,r2,r3
   84110:	14800017 	ldw	r18,0(r2)
   84114:	14c00117 	ldw	r19,4(r2)
   84118:	30031e16 	blt	r6,zero,84d94 <_dtoa_r+0x1234>
   8411c:	d9000517 	ldw	r4,20(sp)
   84120:	d8c00f17 	ldw	r3,60(sp)
   84124:	a823883a 	mov	r17,r21
   84128:	a021883a 	mov	r16,r20
   8412c:	192b883a 	add	r21,r3,r4
   84130:	2039883a 	mov	fp,r4
   84134:	00000f06 	br	84174 <_dtoa_r+0x614>
   84138:	0005883a 	mov	r2,zero
   8413c:	00d00934 	movhi	r3,16420
   84140:	5009883a 	mov	r4,r10
   84144:	580b883a 	mov	r5,r11
   84148:	180f883a 	mov	r7,r3
   8414c:	100d883a 	mov	r6,r2
   84150:	0089d080 	call	89d08 <__muldf3>
   84154:	180b883a 	mov	r5,r3
   84158:	000d883a 	mov	r6,zero
   8415c:	000f883a 	mov	r7,zero
   84160:	1009883a 	mov	r4,r2
   84164:	1021883a 	mov	r16,r2
   84168:	1823883a 	mov	r17,r3
   8416c:	008a3ac0 	call	8a3ac <__nedf2>
   84170:	10004526 	beq	r2,zero,84288 <_dtoa_r+0x728>
   84174:	900d883a 	mov	r6,r18
   84178:	980f883a 	mov	r7,r19
   8417c:	8009883a 	mov	r4,r16
   84180:	880b883a 	mov	r5,r17
   84184:	008a0cc0 	call	8a0cc <__divdf3>
   84188:	180b883a 	mov	r5,r3
   8418c:	1009883a 	mov	r4,r2
   84190:	008a6c40 	call	8a6c4 <__fixdfsi>
   84194:	1009883a 	mov	r4,r2
   84198:	1029883a 	mov	r20,r2
   8419c:	008a5cc0 	call	8a5cc <__floatsidf>
   841a0:	180f883a 	mov	r7,r3
   841a4:	9009883a 	mov	r4,r18
   841a8:	980b883a 	mov	r5,r19
   841ac:	100d883a 	mov	r6,r2
   841b0:	0089d080 	call	89d08 <__muldf3>
   841b4:	180f883a 	mov	r7,r3
   841b8:	880b883a 	mov	r5,r17
   841bc:	8009883a 	mov	r4,r16
   841c0:	100d883a 	mov	r6,r2
   841c4:	0089c140 	call	89c14 <__subdf3>
   841c8:	1015883a 	mov	r10,r2
   841cc:	a0800c04 	addi	r2,r20,48
   841d0:	e0800005 	stb	r2,0(fp)
   841d4:	e7000044 	addi	fp,fp,1
   841d8:	1817883a 	mov	r11,r3
   841dc:	e57fd61e 	bne	fp,r21,84138 <_dtoa_r+0x5d8>
   841e0:	500d883a 	mov	r6,r10
   841e4:	180f883a 	mov	r7,r3
   841e8:	5009883a 	mov	r4,r10
   841ec:	180b883a 	mov	r5,r3
   841f0:	0089c940 	call	89c94 <__adddf3>
   841f4:	100d883a 	mov	r6,r2
   841f8:	9009883a 	mov	r4,r18
   841fc:	980b883a 	mov	r5,r19
   84200:	180f883a 	mov	r7,r3
   84204:	1021883a 	mov	r16,r2
   84208:	1823883a 	mov	r17,r3
   8420c:	008a5440 	call	8a544 <__ltdf2>
   84210:	10000816 	blt	r2,zero,84234 <_dtoa_r+0x6d4>
   84214:	980b883a 	mov	r5,r19
   84218:	800d883a 	mov	r6,r16
   8421c:	880f883a 	mov	r7,r17
   84220:	9009883a 	mov	r4,r18
   84224:	008a3240 	call	8a324 <__eqdf2>
   84228:	1000171e 	bne	r2,zero,84288 <_dtoa_r+0x728>
   8422c:	a080004c 	andi	r2,r20,1
   84230:	10001526 	beq	r2,zero,84288 <_dtoa_r+0x728>
   84234:	d8800d17 	ldw	r2,52(sp)
   84238:	d8800415 	stw	r2,16(sp)
   8423c:	e009883a 	mov	r4,fp
   84240:	213fffc4 	addi	r4,r4,-1
   84244:	20c00007 	ldb	r3,0(r4)
   84248:	00800e44 	movi	r2,57
   8424c:	1880081e 	bne	r3,r2,84270 <_dtoa_r+0x710>
   84250:	d8800517 	ldw	r2,20(sp)
   84254:	113ffa1e 	bne	r2,r4,84240 <_dtoa_r+0x6e0>
   84258:	d8c00417 	ldw	r3,16(sp)
   8425c:	d9800517 	ldw	r6,20(sp)
   84260:	00800c04 	movi	r2,48
   84264:	18c00044 	addi	r3,r3,1
   84268:	d8c00415 	stw	r3,16(sp)
   8426c:	30800005 	stb	r2,0(r6)
   84270:	20800003 	ldbu	r2,0(r4)
   84274:	d8c00417 	ldw	r3,16(sp)
   84278:	27000044 	addi	fp,r4,1
   8427c:	10800044 	addi	r2,r2,1
   84280:	d8c00d15 	stw	r3,52(sp)
   84284:	20800005 	stb	r2,0(r4)
   84288:	d9001617 	ldw	r4,88(sp)
   8428c:	d9400717 	ldw	r5,28(sp)
   84290:	0086d280 	call	86d28 <_Bfree>
   84294:	e0000005 	stb	zero,0(fp)
   84298:	d9800d17 	ldw	r6,52(sp)
   8429c:	d8c02717 	ldw	r3,156(sp)
   842a0:	d9002917 	ldw	r4,164(sp)
   842a4:	30800044 	addi	r2,r6,1
   842a8:	18800015 	stw	r2,0(r3)
   842ac:	20029c26 	beq	r4,zero,84d20 <_dtoa_r+0x11c0>
   842b0:	d8c00517 	ldw	r3,20(sp)
   842b4:	27000015 	stw	fp,0(r4)
   842b8:	003e5d06 	br	83c30 <_dtoa_r+0xd0>
   842bc:	d9800d17 	ldw	r6,52(sp)
   842c0:	00c00274 	movhi	r3,9
   842c4:	18f77f04 	addi	r3,r3,-8708
   842c8:	d9001217 	ldw	r4,72(sp)
   842cc:	300490fa 	slli	r2,r6,3
   842d0:	d9401317 	ldw	r5,76(sp)
   842d4:	10c5883a 	add	r2,r2,r3
   842d8:	12000017 	ldw	r8,0(r2)
   842dc:	12400117 	ldw	r9,4(r2)
   842e0:	400d883a 	mov	r6,r8
   842e4:	480f883a 	mov	r7,r9
   842e8:	008a5440 	call	8a544 <__ltdf2>
   842ec:	1000030e 	bge	r2,zero,842fc <_dtoa_r+0x79c>
   842f0:	d8800d17 	ldw	r2,52(sp)
   842f4:	10bfffc4 	addi	r2,r2,-1
   842f8:	d8800d15 	stw	r2,52(sp)
   842fc:	d8000c15 	stw	zero,48(sp)
   84300:	003ea806 	br	83da4 <_dtoa_r+0x244>
   84304:	d9000b17 	ldw	r4,44(sp)
   84308:	202cc03a 	cmpne	r22,r4,zero
   8430c:	b000c71e 	bne	r22,zero,8462c <_dtoa_r+0xacc>
   84310:	dc001117 	ldw	r16,68(sp)
   84314:	dc801017 	ldw	r18,64(sp)
   84318:	0027883a 	mov	r19,zero
   8431c:	04000b0e 	bge	zero,r16,8434c <_dtoa_r+0x7ec>
   84320:	d8c00a17 	ldw	r3,40(sp)
   84324:	00c0090e 	bge	zero,r3,8434c <_dtoa_r+0x7ec>
   84328:	8005883a 	mov	r2,r16
   8432c:	1c011316 	blt	r3,r16,8477c <_dtoa_r+0xc1c>
   84330:	d9000a17 	ldw	r4,40(sp)
   84334:	d9801117 	ldw	r6,68(sp)
   84338:	80a1c83a 	sub	r16,r16,r2
   8433c:	2089c83a 	sub	r4,r4,r2
   84340:	308dc83a 	sub	r6,r6,r2
   84344:	d9000a15 	stw	r4,40(sp)
   84348:	d9801115 	stw	r6,68(sp)
   8434c:	d8801017 	ldw	r2,64(sp)
   84350:	0080150e 	bge	zero,r2,843a8 <_dtoa_r+0x848>
   84354:	d8c00b17 	ldw	r3,44(sp)
   84358:	1805003a 	cmpeq	r2,r3,zero
   8435c:	1001c91e 	bne	r2,zero,84a84 <_dtoa_r+0xf24>
   84360:	04800e0e 	bge	zero,r18,8439c <_dtoa_r+0x83c>
   84364:	d9001617 	ldw	r4,88(sp)
   84368:	980b883a 	mov	r5,r19
   8436c:	900d883a 	mov	r6,r18
   84370:	0087b740 	call	87b74 <__pow5mult>
   84374:	d9001617 	ldw	r4,88(sp)
   84378:	d9800717 	ldw	r6,28(sp)
   8437c:	100b883a 	mov	r5,r2
   84380:	1027883a 	mov	r19,r2
   84384:	00877b80 	call	877b8 <__multiply>
   84388:	d9001617 	ldw	r4,88(sp)
   8438c:	d9400717 	ldw	r5,28(sp)
   84390:	1023883a 	mov	r17,r2
   84394:	0086d280 	call	86d28 <_Bfree>
   84398:	dc400715 	stw	r17,28(sp)
   8439c:	d9001017 	ldw	r4,64(sp)
   843a0:	248dc83a 	sub	r6,r4,r18
   843a4:	30010e1e 	bne	r6,zero,847e0 <_dtoa_r+0xc80>
   843a8:	d9001617 	ldw	r4,88(sp)
   843ac:	04400044 	movi	r17,1
   843b0:	880b883a 	mov	r5,r17
   843b4:	0087a0c0 	call	87a0c <__i2b>
   843b8:	d9800917 	ldw	r6,36(sp)
   843bc:	1025883a 	mov	r18,r2
   843c0:	0180040e 	bge	zero,r6,843d4 <_dtoa_r+0x874>
   843c4:	d9001617 	ldw	r4,88(sp)
   843c8:	100b883a 	mov	r5,r2
   843cc:	0087b740 	call	87b74 <__pow5mult>
   843d0:	1025883a 	mov	r18,r2
   843d4:	d8801717 	ldw	r2,92(sp)
   843d8:	8880f30e 	bge	r17,r2,847a8 <_dtoa_r+0xc48>
   843dc:	0023883a 	mov	r17,zero
   843e0:	d9800917 	ldw	r6,36(sp)
   843e4:	30019e1e 	bne	r6,zero,84a60 <_dtoa_r+0xf00>
   843e8:	00c00044 	movi	r3,1
   843ec:	d9000a17 	ldw	r4,40(sp)
   843f0:	20c5883a 	add	r2,r4,r3
   843f4:	10c007cc 	andi	r3,r2,31
   843f8:	1800841e 	bne	r3,zero,8460c <_dtoa_r+0xaac>
   843fc:	00800704 	movi	r2,28
   84400:	d9000a17 	ldw	r4,40(sp)
   84404:	d9801117 	ldw	r6,68(sp)
   84408:	80a1883a 	add	r16,r16,r2
   8440c:	2089883a 	add	r4,r4,r2
   84410:	308d883a 	add	r6,r6,r2
   84414:	d9000a15 	stw	r4,40(sp)
   84418:	d9801115 	stw	r6,68(sp)
   8441c:	d8801117 	ldw	r2,68(sp)
   84420:	0080050e 	bge	zero,r2,84438 <_dtoa_r+0x8d8>
   84424:	d9400717 	ldw	r5,28(sp)
   84428:	d9001617 	ldw	r4,88(sp)
   8442c:	100d883a 	mov	r6,r2
   84430:	008766c0 	call	8766c <__lshift>
   84434:	d8800715 	stw	r2,28(sp)
   84438:	d8c00a17 	ldw	r3,40(sp)
   8443c:	00c0050e 	bge	zero,r3,84454 <_dtoa_r+0x8f4>
   84440:	d9001617 	ldw	r4,88(sp)
   84444:	900b883a 	mov	r5,r18
   84448:	180d883a 	mov	r6,r3
   8444c:	008766c0 	call	8766c <__lshift>
   84450:	1025883a 	mov	r18,r2
   84454:	d9000c17 	ldw	r4,48(sp)
   84458:	2005003a 	cmpeq	r2,r4,zero
   8445c:	10016f26 	beq	r2,zero,84a1c <_dtoa_r+0xebc>
   84460:	d9000f17 	ldw	r4,60(sp)
   84464:	0102170e 	bge	zero,r4,84cc4 <_dtoa_r+0x1164>
   84468:	d9800b17 	ldw	r6,44(sp)
   8446c:	3005003a 	cmpeq	r2,r6,zero
   84470:	1000881e 	bne	r2,zero,84694 <_dtoa_r+0xb34>
   84474:	0400050e 	bge	zero,r16,8448c <_dtoa_r+0x92c>
   84478:	d9001617 	ldw	r4,88(sp)
   8447c:	980b883a 	mov	r5,r19
   84480:	800d883a 	mov	r6,r16
   84484:	008766c0 	call	8766c <__lshift>
   84488:	1027883a 	mov	r19,r2
   8448c:	8804c03a 	cmpne	r2,r17,zero
   84490:	1002541e 	bne	r2,zero,84de4 <_dtoa_r+0x1284>
   84494:	980b883a 	mov	r5,r19
   84498:	dd800517 	ldw	r22,20(sp)
   8449c:	dcc00615 	stw	r19,24(sp)
   844a0:	a700004c 	andi	fp,r20,1
   844a4:	2827883a 	mov	r19,r5
   844a8:	d9000717 	ldw	r4,28(sp)
   844ac:	900b883a 	mov	r5,r18
   844b0:	008391c0 	call	8391c <quorem>
   844b4:	d9000717 	ldw	r4,28(sp)
   844b8:	d9400617 	ldw	r5,24(sp)
   844bc:	1023883a 	mov	r17,r2
   844c0:	8dc00c04 	addi	r23,r17,48
   844c4:	0086e840 	call	86e84 <__mcmp>
   844c8:	d9001617 	ldw	r4,88(sp)
   844cc:	900b883a 	mov	r5,r18
   844d0:	980d883a 	mov	r6,r19
   844d4:	1029883a 	mov	r20,r2
   844d8:	00874e00 	call	874e0 <__mdiff>
   844dc:	102b883a 	mov	r21,r2
   844e0:	10800317 	ldw	r2,12(r2)
   844e4:	1001281e 	bne	r2,zero,84988 <_dtoa_r+0xe28>
   844e8:	d9000717 	ldw	r4,28(sp)
   844ec:	a80b883a 	mov	r5,r21
   844f0:	0086e840 	call	86e84 <__mcmp>
   844f4:	d9001617 	ldw	r4,88(sp)
   844f8:	1021883a 	mov	r16,r2
   844fc:	a80b883a 	mov	r5,r21
   84500:	0086d280 	call	86d28 <_Bfree>
   84504:	8000041e 	bne	r16,zero,84518 <_dtoa_r+0x9b8>
   84508:	d8801717 	ldw	r2,92(sp)
   8450c:	1000021e 	bne	r2,zero,84518 <_dtoa_r+0x9b8>
   84510:	e004c03a 	cmpne	r2,fp,zero
   84514:	10011726 	beq	r2,zero,84974 <_dtoa_r+0xe14>
   84518:	a0010616 	blt	r20,zero,84934 <_dtoa_r+0xdd4>
   8451c:	a000041e 	bne	r20,zero,84530 <_dtoa_r+0x9d0>
   84520:	d8c01717 	ldw	r3,92(sp)
   84524:	1800021e 	bne	r3,zero,84530 <_dtoa_r+0x9d0>
   84528:	e004c03a 	cmpne	r2,fp,zero
   8452c:	10010126 	beq	r2,zero,84934 <_dtoa_r+0xdd4>
   84530:	04023d16 	blt	zero,r16,84e28 <_dtoa_r+0x12c8>
   84534:	b5c00005 	stb	r23,0(r22)
   84538:	d9800517 	ldw	r6,20(sp)
   8453c:	d9000f17 	ldw	r4,60(sp)
   84540:	b5800044 	addi	r22,r22,1
   84544:	3105883a 	add	r2,r6,r4
   84548:	b0806526 	beq	r22,r2,846e0 <_dtoa_r+0xb80>
   8454c:	d9400717 	ldw	r5,28(sp)
   84550:	d9001617 	ldw	r4,88(sp)
   84554:	01800284 	movi	r6,10
   84558:	000f883a 	mov	r7,zero
   8455c:	0087a480 	call	87a48 <__multadd>
   84560:	d8800715 	stw	r2,28(sp)
   84564:	d8800617 	ldw	r2,24(sp)
   84568:	14c10c26 	beq	r2,r19,8499c <_dtoa_r+0xe3c>
   8456c:	d9400617 	ldw	r5,24(sp)
   84570:	d9001617 	ldw	r4,88(sp)
   84574:	01800284 	movi	r6,10
   84578:	000f883a 	mov	r7,zero
   8457c:	0087a480 	call	87a48 <__multadd>
   84580:	d9001617 	ldw	r4,88(sp)
   84584:	980b883a 	mov	r5,r19
   84588:	01800284 	movi	r6,10
   8458c:	000f883a 	mov	r7,zero
   84590:	d8800615 	stw	r2,24(sp)
   84594:	0087a480 	call	87a48 <__multadd>
   84598:	1027883a 	mov	r19,r2
   8459c:	003fc206 	br	844a8 <_dtoa_r+0x948>
   845a0:	2445c83a 	sub	r2,r4,r17
   845a4:	a088983a 	sll	r4,r20,r2
   845a8:	003e4b06 	br	83ed8 <_dtoa_r+0x378>
   845ac:	01bfffc4 	movi	r6,-1
   845b0:	00800044 	movi	r2,1
   845b4:	d9800e15 	stw	r6,56(sp)
   845b8:	d9800f15 	stw	r6,60(sp)
   845bc:	d8800b15 	stw	r2,44(sp)
   845c0:	d8c01617 	ldw	r3,88(sp)
   845c4:	008005c4 	movi	r2,23
   845c8:	18001115 	stw	zero,68(r3)
   845cc:	1580082e 	bgeu	r2,r22,845f0 <_dtoa_r+0xa90>
   845d0:	00c00104 	movi	r3,4
   845d4:	0009883a 	mov	r4,zero
   845d8:	18c7883a 	add	r3,r3,r3
   845dc:	18800504 	addi	r2,r3,20
   845e0:	21000044 	addi	r4,r4,1
   845e4:	b0bffc2e 	bgeu	r22,r2,845d8 <_dtoa_r+0xa78>
   845e8:	d9801617 	ldw	r6,88(sp)
   845ec:	31001115 	stw	r4,68(r6)
   845f0:	dc000f17 	ldw	r16,60(sp)
   845f4:	003e4b06 	br	83f24 <_dtoa_r+0x3c4>
   845f8:	d9801717 	ldw	r6,92(sp)
   845fc:	0023883a 	mov	r17,zero
   84600:	31bfff04 	addi	r6,r6,-4
   84604:	d9801715 	stw	r6,92(sp)
   84608:	003df806 	br	83dec <_dtoa_r+0x28c>
   8460c:	00800804 	movi	r2,32
   84610:	10c9c83a 	sub	r4,r2,r3
   84614:	00c00104 	movi	r3,4
   84618:	19005a16 	blt	r3,r4,84784 <_dtoa_r+0xc24>
   8461c:	008000c4 	movi	r2,3
   84620:	113f7e16 	blt	r2,r4,8441c <_dtoa_r+0x8bc>
   84624:	20800704 	addi	r2,r4,28
   84628:	003f7506 	br	84400 <_dtoa_r+0x8a0>
   8462c:	d9801717 	ldw	r6,92(sp)
   84630:	00800044 	movi	r2,1
   84634:	1180a10e 	bge	r2,r6,848bc <_dtoa_r+0xd5c>
   84638:	d9800f17 	ldw	r6,60(sp)
   8463c:	d8c01017 	ldw	r3,64(sp)
   84640:	30bfffc4 	addi	r2,r6,-1
   84644:	1881c616 	blt	r3,r2,84d60 <_dtoa_r+0x1200>
   84648:	18a5c83a 	sub	r18,r3,r2
   8464c:	d8800f17 	ldw	r2,60(sp)
   84650:	10026216 	blt	r2,zero,84fdc <_dtoa_r+0x147c>
   84654:	dc001117 	ldw	r16,68(sp)
   84658:	1007883a 	mov	r3,r2
   8465c:	d9800a17 	ldw	r6,40(sp)
   84660:	d8801117 	ldw	r2,68(sp)
   84664:	d9001617 	ldw	r4,88(sp)
   84668:	30cd883a 	add	r6,r6,r3
   8466c:	10c5883a 	add	r2,r2,r3
   84670:	01400044 	movi	r5,1
   84674:	d9800a15 	stw	r6,40(sp)
   84678:	d8801115 	stw	r2,68(sp)
   8467c:	0087a0c0 	call	87a0c <__i2b>
   84680:	1027883a 	mov	r19,r2
   84684:	003f2506 	br	8431c <_dtoa_r+0x7bc>
   84688:	00c00274 	movhi	r3,9
   8468c:	18f76104 	addi	r3,r3,-8828
   84690:	003d6706 	br	83c30 <_dtoa_r+0xd0>
   84694:	dd800517 	ldw	r22,20(sp)
   84698:	04000044 	movi	r16,1
   8469c:	00000706 	br	846bc <_dtoa_r+0xb5c>
   846a0:	d9400717 	ldw	r5,28(sp)
   846a4:	d9001617 	ldw	r4,88(sp)
   846a8:	01800284 	movi	r6,10
   846ac:	000f883a 	mov	r7,zero
   846b0:	0087a480 	call	87a48 <__multadd>
   846b4:	d8800715 	stw	r2,28(sp)
   846b8:	84000044 	addi	r16,r16,1
   846bc:	d9000717 	ldw	r4,28(sp)
   846c0:	900b883a 	mov	r5,r18
   846c4:	008391c0 	call	8391c <quorem>
   846c8:	15c00c04 	addi	r23,r2,48
   846cc:	b5c00005 	stb	r23,0(r22)
   846d0:	d8c00f17 	ldw	r3,60(sp)
   846d4:	b5800044 	addi	r22,r22,1
   846d8:	80fff116 	blt	r16,r3,846a0 <_dtoa_r+0xb40>
   846dc:	d8000615 	stw	zero,24(sp)
   846e0:	d9400717 	ldw	r5,28(sp)
   846e4:	d9001617 	ldw	r4,88(sp)
   846e8:	01800044 	movi	r6,1
   846ec:	008766c0 	call	8766c <__lshift>
   846f0:	1009883a 	mov	r4,r2
   846f4:	900b883a 	mov	r5,r18
   846f8:	d8800715 	stw	r2,28(sp)
   846fc:	0086e840 	call	86e84 <__mcmp>
   84700:	00803c0e 	bge	zero,r2,847f4 <_dtoa_r+0xc94>
   84704:	b009883a 	mov	r4,r22
   84708:	213fffc4 	addi	r4,r4,-1
   8470c:	21400003 	ldbu	r5,0(r4)
   84710:	00800e44 	movi	r2,57
   84714:	28c03fcc 	andi	r3,r5,255
   84718:	18c0201c 	xori	r3,r3,128
   8471c:	18ffe004 	addi	r3,r3,-128
   84720:	1881981e 	bne	r3,r2,84d84 <_dtoa_r+0x1224>
   84724:	d9800517 	ldw	r6,20(sp)
   84728:	21bff71e 	bne	r4,r6,84708 <_dtoa_r+0xba8>
   8472c:	d8800d17 	ldw	r2,52(sp)
   84730:	37000044 	addi	fp,r6,1
   84734:	10800044 	addi	r2,r2,1
   84738:	d8800d15 	stw	r2,52(sp)
   8473c:	00800c44 	movi	r2,49
   84740:	30800005 	stb	r2,0(r6)
   84744:	d9001617 	ldw	r4,88(sp)
   84748:	900b883a 	mov	r5,r18
   8474c:	0086d280 	call	86d28 <_Bfree>
   84750:	983ecd26 	beq	r19,zero,84288 <_dtoa_r+0x728>
   84754:	d8c00617 	ldw	r3,24(sp)
   84758:	18000426 	beq	r3,zero,8476c <_dtoa_r+0xc0c>
   8475c:	1cc00326 	beq	r3,r19,8476c <_dtoa_r+0xc0c>
   84760:	d9001617 	ldw	r4,88(sp)
   84764:	180b883a 	mov	r5,r3
   84768:	0086d280 	call	86d28 <_Bfree>
   8476c:	d9001617 	ldw	r4,88(sp)
   84770:	980b883a 	mov	r5,r19
   84774:	0086d280 	call	86d28 <_Bfree>
   84778:	003ec306 	br	84288 <_dtoa_r+0x728>
   8477c:	1805883a 	mov	r2,r3
   84780:	003eeb06 	br	84330 <_dtoa_r+0x7d0>
   84784:	d9800a17 	ldw	r6,40(sp)
   84788:	d8c01117 	ldw	r3,68(sp)
   8478c:	20bfff04 	addi	r2,r4,-4
   84790:	308d883a 	add	r6,r6,r2
   84794:	1887883a 	add	r3,r3,r2
   84798:	80a1883a 	add	r16,r16,r2
   8479c:	d9800a15 	stw	r6,40(sp)
   847a0:	d8c01115 	stw	r3,68(sp)
   847a4:	003f1d06 	br	8441c <_dtoa_r+0x8bc>
   847a8:	a03f0c1e 	bne	r20,zero,843dc <_dtoa_r+0x87c>
   847ac:	00800434 	movhi	r2,16
   847b0:	10bfffc4 	addi	r2,r2,-1
   847b4:	a884703a 	and	r2,r21,r2
   847b8:	103f081e 	bne	r2,zero,843dc <_dtoa_r+0x87c>
   847bc:	a89ffc2c 	andhi	r2,r21,32752
   847c0:	103f0626 	beq	r2,zero,843dc <_dtoa_r+0x87c>
   847c4:	d8c01117 	ldw	r3,68(sp)
   847c8:	d9000a17 	ldw	r4,40(sp)
   847cc:	18c00044 	addi	r3,r3,1
   847d0:	21000044 	addi	r4,r4,1
   847d4:	d8c01115 	stw	r3,68(sp)
   847d8:	d9000a15 	stw	r4,40(sp)
   847dc:	003f0006 	br	843e0 <_dtoa_r+0x880>
   847e0:	d9400717 	ldw	r5,28(sp)
   847e4:	d9001617 	ldw	r4,88(sp)
   847e8:	0087b740 	call	87b74 <__pow5mult>
   847ec:	d8800715 	stw	r2,28(sp)
   847f0:	003eed06 	br	843a8 <_dtoa_r+0x848>
   847f4:	1000021e 	bne	r2,zero,84800 <_dtoa_r+0xca0>
   847f8:	b880004c 	andi	r2,r23,1
   847fc:	103fc11e 	bne	r2,zero,84704 <_dtoa_r+0xba4>
   84800:	b5bfffc4 	addi	r22,r22,-1
   84804:	b0c00007 	ldb	r3,0(r22)
   84808:	00800c04 	movi	r2,48
   8480c:	18bffc26 	beq	r3,r2,84800 <_dtoa_r+0xca0>
   84810:	b7000044 	addi	fp,r22,1
   84814:	003fcb06 	br	84744 <_dtoa_r+0xbe4>
   84818:	d9800d17 	ldw	r6,52(sp)
   8481c:	018fc83a 	sub	r7,zero,r6
   84820:	3801f726 	beq	r7,zero,85000 <_dtoa_r+0x14a0>
   84824:	398003cc 	andi	r6,r7,15
   84828:	300c90fa 	slli	r6,r6,3
   8482c:	01400274 	movhi	r5,9
   84830:	29777f04 	addi	r5,r5,-8708
   84834:	d9001217 	ldw	r4,72(sp)
   84838:	314d883a 	add	r6,r6,r5
   8483c:	30c00117 	ldw	r3,4(r6)
   84840:	30800017 	ldw	r2,0(r6)
   84844:	d9401317 	ldw	r5,76(sp)
   84848:	3821d13a 	srai	r16,r7,4
   8484c:	100d883a 	mov	r6,r2
   84850:	180f883a 	mov	r7,r3
   84854:	0089d080 	call	89d08 <__muldf3>
   84858:	1011883a 	mov	r8,r2
   8485c:	1813883a 	mov	r9,r3
   84860:	1029883a 	mov	r20,r2
   84864:	182b883a 	mov	r21,r3
   84868:	8001e526 	beq	r16,zero,85000 <_dtoa_r+0x14a0>
   8486c:	05800084 	movi	r22,2
   84870:	04400274 	movhi	r17,9
   84874:	8c77b104 	addi	r17,r17,-8508
   84878:	8080004c 	andi	r2,r16,1
   8487c:	1005003a 	cmpeq	r2,r2,zero
   84880:	1000081e 	bne	r2,zero,848a4 <_dtoa_r+0xd44>
   84884:	89800017 	ldw	r6,0(r17)
   84888:	89c00117 	ldw	r7,4(r17)
   8488c:	480b883a 	mov	r5,r9
   84890:	4009883a 	mov	r4,r8
   84894:	0089d080 	call	89d08 <__muldf3>
   84898:	1011883a 	mov	r8,r2
   8489c:	b5800044 	addi	r22,r22,1
   848a0:	1813883a 	mov	r9,r3
   848a4:	8021d07a 	srai	r16,r16,1
   848a8:	8c400204 	addi	r17,r17,8
   848ac:	803ff21e 	bne	r16,zero,84878 <_dtoa_r+0xd18>
   848b0:	4029883a 	mov	r20,r8
   848b4:	482b883a 	mov	r21,r9
   848b8:	003dca06 	br	83fe4 <_dtoa_r+0x484>
   848bc:	d9000817 	ldw	r4,32(sp)
   848c0:	2005003a 	cmpeq	r2,r4,zero
   848c4:	1001f61e 	bne	r2,zero,850a0 <_dtoa_r+0x1540>
   848c8:	dc001117 	ldw	r16,68(sp)
   848cc:	dc801017 	ldw	r18,64(sp)
   848d0:	18c10cc4 	addi	r3,r3,1075
   848d4:	003f6106 	br	8465c <_dtoa_r+0xafc>
   848d8:	d8000b15 	stw	zero,44(sp)
   848dc:	d9802617 	ldw	r6,152(sp)
   848e0:	d8c00d17 	ldw	r3,52(sp)
   848e4:	30800044 	addi	r2,r6,1
   848e8:	18ad883a 	add	r22,r3,r2
   848ec:	b13fffc4 	addi	r4,r22,-1
   848f0:	d9000e15 	stw	r4,56(sp)
   848f4:	0581f60e 	bge	zero,r22,850d0 <_dtoa_r+0x1570>
   848f8:	dd800f15 	stw	r22,60(sp)
   848fc:	003f3006 	br	845c0 <_dtoa_r+0xa60>
   84900:	d8000b15 	stw	zero,44(sp)
   84904:	d9002617 	ldw	r4,152(sp)
   84908:	0101eb0e 	bge	zero,r4,850b8 <_dtoa_r+0x1558>
   8490c:	202d883a 	mov	r22,r4
   84910:	d9000e15 	stw	r4,56(sp)
   84914:	d9000f15 	stw	r4,60(sp)
   84918:	003f2906 	br	845c0 <_dtoa_r+0xa60>
   8491c:	01800044 	movi	r6,1
   84920:	d9800b15 	stw	r6,44(sp)
   84924:	003ff706 	br	84904 <_dtoa_r+0xda4>
   84928:	01000044 	movi	r4,1
   8492c:	d9000b15 	stw	r4,44(sp)
   84930:	003fea06 	br	848dc <_dtoa_r+0xd7c>
   84934:	04000c0e 	bge	zero,r16,84968 <_dtoa_r+0xe08>
   84938:	d9400717 	ldw	r5,28(sp)
   8493c:	d9001617 	ldw	r4,88(sp)
   84940:	01800044 	movi	r6,1
   84944:	008766c0 	call	8766c <__lshift>
   84948:	1009883a 	mov	r4,r2
   8494c:	900b883a 	mov	r5,r18
   84950:	d8800715 	stw	r2,28(sp)
   84954:	0086e840 	call	86e84 <__mcmp>
   84958:	0081e00e 	bge	zero,r2,850dc <_dtoa_r+0x157c>
   8495c:	bdc00044 	addi	r23,r23,1
   84960:	00800e84 	movi	r2,58
   84964:	b881a226 	beq	r23,r2,84ff0 <_dtoa_r+0x1490>
   84968:	b7000044 	addi	fp,r22,1
   8496c:	b5c00005 	stb	r23,0(r22)
   84970:	003f7406 	br	84744 <_dtoa_r+0xbe4>
   84974:	00800e44 	movi	r2,57
   84978:	b8819d26 	beq	r23,r2,84ff0 <_dtoa_r+0x1490>
   8497c:	053ffa0e 	bge	zero,r20,84968 <_dtoa_r+0xe08>
   84980:	8dc00c44 	addi	r23,r17,49
   84984:	003ff806 	br	84968 <_dtoa_r+0xe08>
   84988:	d9001617 	ldw	r4,88(sp)
   8498c:	a80b883a 	mov	r5,r21
   84990:	04000044 	movi	r16,1
   84994:	0086d280 	call	86d28 <_Bfree>
   84998:	003edf06 	br	84518 <_dtoa_r+0x9b8>
   8499c:	d9001617 	ldw	r4,88(sp)
   849a0:	980b883a 	mov	r5,r19
   849a4:	01800284 	movi	r6,10
   849a8:	000f883a 	mov	r7,zero
   849ac:	0087a480 	call	87a48 <__multadd>
   849b0:	1027883a 	mov	r19,r2
   849b4:	d8800615 	stw	r2,24(sp)
   849b8:	003ebb06 	br	844a8 <_dtoa_r+0x948>
   849bc:	d9801117 	ldw	r6,68(sp)
   849c0:	d8800d17 	ldw	r2,52(sp)
   849c4:	d8000915 	stw	zero,36(sp)
   849c8:	308dc83a 	sub	r6,r6,r2
   849cc:	0087c83a 	sub	r3,zero,r2
   849d0:	d9801115 	stw	r6,68(sp)
   849d4:	d8c01015 	stw	r3,64(sp)
   849d8:	003cfe06 	br	83dd4 <_dtoa_r+0x274>
   849dc:	018dc83a 	sub	r6,zero,r6
   849e0:	d9801115 	stw	r6,68(sp)
   849e4:	d8000a15 	stw	zero,40(sp)
   849e8:	003cf306 	br	83db8 <_dtoa_r+0x258>
   849ec:	d9000d17 	ldw	r4,52(sp)
   849f0:	008a5cc0 	call	8a5cc <__floatsidf>
   849f4:	880b883a 	mov	r5,r17
   849f8:	8009883a 	mov	r4,r16
   849fc:	180f883a 	mov	r7,r3
   84a00:	100d883a 	mov	r6,r2
   84a04:	008a3ac0 	call	8a3ac <__nedf2>
   84a08:	103ce126 	beq	r2,zero,83d90 <_dtoa_r+0x230>
   84a0c:	d9800d17 	ldw	r6,52(sp)
   84a10:	31bfffc4 	addi	r6,r6,-1
   84a14:	d9800d15 	stw	r6,52(sp)
   84a18:	003cdd06 	br	83d90 <_dtoa_r+0x230>
   84a1c:	d9000717 	ldw	r4,28(sp)
   84a20:	900b883a 	mov	r5,r18
   84a24:	0086e840 	call	86e84 <__mcmp>
   84a28:	103e8d0e 	bge	r2,zero,84460 <_dtoa_r+0x900>
   84a2c:	d9400717 	ldw	r5,28(sp)
   84a30:	d9001617 	ldw	r4,88(sp)
   84a34:	01800284 	movi	r6,10
   84a38:	000f883a 	mov	r7,zero
   84a3c:	0087a480 	call	87a48 <__multadd>
   84a40:	d9800d17 	ldw	r6,52(sp)
   84a44:	d8800715 	stw	r2,28(sp)
   84a48:	31bfffc4 	addi	r6,r6,-1
   84a4c:	d9800d15 	stw	r6,52(sp)
   84a50:	b001a71e 	bne	r22,zero,850f0 <_dtoa_r+0x1590>
   84a54:	d8800e17 	ldw	r2,56(sp)
   84a58:	d8800f15 	stw	r2,60(sp)
   84a5c:	003e8006 	br	84460 <_dtoa_r+0x900>
   84a60:	90800417 	ldw	r2,16(r18)
   84a64:	1085883a 	add	r2,r2,r2
   84a68:	1085883a 	add	r2,r2,r2
   84a6c:	1485883a 	add	r2,r2,r18
   84a70:	11000417 	ldw	r4,16(r2)
   84a74:	0086d500 	call	86d50 <__hi0bits>
   84a78:	00c00804 	movi	r3,32
   84a7c:	1887c83a 	sub	r3,r3,r2
   84a80:	003e5a06 	br	843ec <_dtoa_r+0x88c>
   84a84:	d9400717 	ldw	r5,28(sp)
   84a88:	d9801017 	ldw	r6,64(sp)
   84a8c:	d9001617 	ldw	r4,88(sp)
   84a90:	0087b740 	call	87b74 <__pow5mult>
   84a94:	d8800715 	stw	r2,28(sp)
   84a98:	003e4306 	br	843a8 <_dtoa_r+0x848>
   84a9c:	d9800f17 	ldw	r6,60(sp)
   84aa0:	d8800d17 	ldw	r2,52(sp)
   84aa4:	d9800315 	stw	r6,12(sp)
   84aa8:	d8800415 	stw	r2,16(sp)
   84aac:	d8c00b17 	ldw	r3,44(sp)
   84ab0:	1805003a 	cmpeq	r2,r3,zero
   84ab4:	1000e21e 	bne	r2,zero,84e40 <_dtoa_r+0x12e0>
   84ab8:	d9000317 	ldw	r4,12(sp)
   84abc:	0005883a 	mov	r2,zero
   84ac0:	00cff834 	movhi	r3,16352
   84ac4:	200c90fa 	slli	r6,r4,3
   84ac8:	01000274 	movhi	r4,9
   84acc:	21377f04 	addi	r4,r4,-8708
   84ad0:	180b883a 	mov	r5,r3
   84ad4:	310d883a 	add	r6,r6,r4
   84ad8:	327fff17 	ldw	r9,-4(r6)
   84adc:	323ffe17 	ldw	r8,-8(r6)
   84ae0:	1009883a 	mov	r4,r2
   84ae4:	480f883a 	mov	r7,r9
   84ae8:	400d883a 	mov	r6,r8
   84aec:	008a0cc0 	call	8a0cc <__divdf3>
   84af0:	180b883a 	mov	r5,r3
   84af4:	b00d883a 	mov	r6,r22
   84af8:	b80f883a 	mov	r7,r23
   84afc:	1009883a 	mov	r4,r2
   84b00:	0089c140 	call	89c14 <__subdf3>
   84b04:	a80b883a 	mov	r5,r21
   84b08:	a009883a 	mov	r4,r20
   84b0c:	d8c01915 	stw	r3,100(sp)
   84b10:	d8801815 	stw	r2,96(sp)
   84b14:	008a6c40 	call	8a6c4 <__fixdfsi>
   84b18:	1009883a 	mov	r4,r2
   84b1c:	1027883a 	mov	r19,r2
   84b20:	008a5cc0 	call	8a5cc <__floatsidf>
   84b24:	a80b883a 	mov	r5,r21
   84b28:	a009883a 	mov	r4,r20
   84b2c:	180f883a 	mov	r7,r3
   84b30:	100d883a 	mov	r6,r2
   84b34:	0089c140 	call	89c14 <__subdf3>
   84b38:	d9801817 	ldw	r6,96(sp)
   84b3c:	1823883a 	mov	r17,r3
   84b40:	d8801415 	stw	r2,80(sp)
   84b44:	302d883a 	mov	r22,r6
   84b48:	d9800517 	ldw	r6,20(sp)
   84b4c:	9cc00c04 	addi	r19,r19,48
   84b50:	dc401515 	stw	r17,84(sp)
   84b54:	d8c01917 	ldw	r3,100(sp)
   84b58:	34c00005 	stb	r19,0(r6)
   84b5c:	d8800517 	ldw	r2,20(sp)
   84b60:	d9401917 	ldw	r5,100(sp)
   84b64:	d9801417 	ldw	r6,80(sp)
   84b68:	b009883a 	mov	r4,r22
   84b6c:	880f883a 	mov	r7,r17
   84b70:	182f883a 	mov	r23,r3
   84b74:	17000044 	addi	fp,r2,1
   84b78:	008a4340 	call	8a434 <__gtdf2>
   84b7c:	00804e16 	blt	zero,r2,84cb8 <_dtoa_r+0x1158>
   84b80:	d9801417 	ldw	r6,80(sp)
   84b84:	0005883a 	mov	r2,zero
   84b88:	00cffc34 	movhi	r3,16368
   84b8c:	180b883a 	mov	r5,r3
   84b90:	880f883a 	mov	r7,r17
   84b94:	1009883a 	mov	r4,r2
   84b98:	0089c140 	call	89c14 <__subdf3>
   84b9c:	d9401917 	ldw	r5,100(sp)
   84ba0:	180f883a 	mov	r7,r3
   84ba4:	b009883a 	mov	r4,r22
   84ba8:	100d883a 	mov	r6,r2
   84bac:	008a4340 	call	8a434 <__gtdf2>
   84bb0:	00bda216 	blt	zero,r2,8423c <_dtoa_r+0x6dc>
   84bb4:	d8c00317 	ldw	r3,12(sp)
   84bb8:	00800044 	movi	r2,1
   84bbc:	10c01216 	blt	r2,r3,84c08 <_dtoa_r+0x10a8>
   84bc0:	003d4506 	br	840d8 <_dtoa_r+0x578>
   84bc4:	d9801417 	ldw	r6,80(sp)
   84bc8:	0005883a 	mov	r2,zero
   84bcc:	00cffc34 	movhi	r3,16368
   84bd0:	180b883a 	mov	r5,r3
   84bd4:	880f883a 	mov	r7,r17
   84bd8:	1009883a 	mov	r4,r2
   84bdc:	0089c140 	call	89c14 <__subdf3>
   84be0:	d9c01b17 	ldw	r7,108(sp)
   84be4:	180b883a 	mov	r5,r3
   84be8:	1009883a 	mov	r4,r2
   84bec:	b00d883a 	mov	r6,r22
   84bf0:	008a5440 	call	8a544 <__ltdf2>
   84bf4:	103d9116 	blt	r2,zero,8423c <_dtoa_r+0x6dc>
   84bf8:	d9800517 	ldw	r6,20(sp)
   84bfc:	d9000317 	ldw	r4,12(sp)
   84c00:	3105883a 	add	r2,r6,r4
   84c04:	e0bd3426 	beq	fp,r2,840d8 <_dtoa_r+0x578>
   84c08:	04500934 	movhi	r17,16420
   84c0c:	0021883a 	mov	r16,zero
   84c10:	b80b883a 	mov	r5,r23
   84c14:	b009883a 	mov	r4,r22
   84c18:	800d883a 	mov	r6,r16
   84c1c:	880f883a 	mov	r7,r17
   84c20:	0089d080 	call	89d08 <__muldf3>
   84c24:	d9401517 	ldw	r5,84(sp)
   84c28:	d9001417 	ldw	r4,80(sp)
   84c2c:	880f883a 	mov	r7,r17
   84c30:	000d883a 	mov	r6,zero
   84c34:	d8801a15 	stw	r2,104(sp)
   84c38:	d8c01b15 	stw	r3,108(sp)
   84c3c:	0089d080 	call	89d08 <__muldf3>
   84c40:	180b883a 	mov	r5,r3
   84c44:	1009883a 	mov	r4,r2
   84c48:	1823883a 	mov	r17,r3
   84c4c:	1021883a 	mov	r16,r2
   84c50:	008a6c40 	call	8a6c4 <__fixdfsi>
   84c54:	1009883a 	mov	r4,r2
   84c58:	102b883a 	mov	r21,r2
   84c5c:	008a5cc0 	call	8a5cc <__floatsidf>
   84c60:	880b883a 	mov	r5,r17
   84c64:	8009883a 	mov	r4,r16
   84c68:	180f883a 	mov	r7,r3
   84c6c:	100d883a 	mov	r6,r2
   84c70:	0089c140 	call	89c14 <__subdf3>
   84c74:	1021883a 	mov	r16,r2
   84c78:	d9001b17 	ldw	r4,108(sp)
   84c7c:	1823883a 	mov	r17,r3
   84c80:	dc001415 	stw	r16,80(sp)
   84c84:	ad400c04 	addi	r21,r21,48
   84c88:	dc401515 	stw	r17,84(sp)
   84c8c:	d8801a17 	ldw	r2,104(sp)
   84c90:	e5400005 	stb	r21,0(fp)
   84c94:	202f883a 	mov	r23,r4
   84c98:	d9c01b17 	ldw	r7,108(sp)
   84c9c:	d9001417 	ldw	r4,80(sp)
   84ca0:	880b883a 	mov	r5,r17
   84ca4:	100d883a 	mov	r6,r2
   84ca8:	102d883a 	mov	r22,r2
   84cac:	e7000044 	addi	fp,fp,1
   84cb0:	008a5440 	call	8a544 <__ltdf2>
   84cb4:	103fc30e 	bge	r2,zero,84bc4 <_dtoa_r+0x1064>
   84cb8:	d9000417 	ldw	r4,16(sp)
   84cbc:	d9000d15 	stw	r4,52(sp)
   84cc0:	003d7106 	br	84288 <_dtoa_r+0x728>
   84cc4:	d9801717 	ldw	r6,92(sp)
   84cc8:	00800084 	movi	r2,2
   84ccc:	11bde60e 	bge	r2,r6,84468 <_dtoa_r+0x908>
   84cd0:	203cfb1e 	bne	r4,zero,840c0 <_dtoa_r+0x560>
   84cd4:	d9001617 	ldw	r4,88(sp)
   84cd8:	900b883a 	mov	r5,r18
   84cdc:	01800144 	movi	r6,5
   84ce0:	000f883a 	mov	r7,zero
   84ce4:	0087a480 	call	87a48 <__multadd>
   84ce8:	d9000717 	ldw	r4,28(sp)
   84cec:	100b883a 	mov	r5,r2
   84cf0:	1025883a 	mov	r18,r2
   84cf4:	0086e840 	call	86e84 <__mcmp>
   84cf8:	00bcf10e 	bge	zero,r2,840c0 <_dtoa_r+0x560>
   84cfc:	d8c00d17 	ldw	r3,52(sp)
   84d00:	d9000517 	ldw	r4,20(sp)
   84d04:	d8000615 	stw	zero,24(sp)
   84d08:	18c00044 	addi	r3,r3,1
   84d0c:	d8c00d15 	stw	r3,52(sp)
   84d10:	00800c44 	movi	r2,49
   84d14:	27000044 	addi	fp,r4,1
   84d18:	20800005 	stb	r2,0(r4)
   84d1c:	003e8906 	br	84744 <_dtoa_r+0xbe4>
   84d20:	d8c00517 	ldw	r3,20(sp)
   84d24:	003bc206 	br	83c30 <_dtoa_r+0xd0>
   84d28:	01800274 	movhi	r6,9
   84d2c:	31b7b104 	addi	r6,r6,-8508
   84d30:	30c00917 	ldw	r3,36(r6)
   84d34:	30800817 	ldw	r2,32(r6)
   84d38:	d9001217 	ldw	r4,72(sp)
   84d3c:	d9401317 	ldw	r5,76(sp)
   84d40:	180f883a 	mov	r7,r3
   84d44:	100d883a 	mov	r6,r2
   84d48:	008a0cc0 	call	8a0cc <__divdf3>
   84d4c:	948003cc 	andi	r18,r18,15
   84d50:	058000c4 	movi	r22,3
   84d54:	1029883a 	mov	r20,r2
   84d58:	182b883a 	mov	r21,r3
   84d5c:	003c8906 	br	83f84 <_dtoa_r+0x424>
   84d60:	d9001017 	ldw	r4,64(sp)
   84d64:	d9800917 	ldw	r6,36(sp)
   84d68:	0025883a 	mov	r18,zero
   84d6c:	1105c83a 	sub	r2,r2,r4
   84d70:	2089883a 	add	r4,r4,r2
   84d74:	308d883a 	add	r6,r6,r2
   84d78:	d9001015 	stw	r4,64(sp)
   84d7c:	d9800915 	stw	r6,36(sp)
   84d80:	003e3206 	br	8464c <_dtoa_r+0xaec>
   84d84:	28800044 	addi	r2,r5,1
   84d88:	27000044 	addi	fp,r4,1
   84d8c:	20800005 	stb	r2,0(r4)
   84d90:	003e6c06 	br	84744 <_dtoa_r+0xbe4>
   84d94:	d8800f17 	ldw	r2,60(sp)
   84d98:	00bce016 	blt	zero,r2,8411c <_dtoa_r+0x5bc>
   84d9c:	d9800f17 	ldw	r6,60(sp)
   84da0:	303cc51e 	bne	r6,zero,840b8 <_dtoa_r+0x558>
   84da4:	0005883a 	mov	r2,zero
   84da8:	00d00534 	movhi	r3,16404
   84dac:	980b883a 	mov	r5,r19
   84db0:	180f883a 	mov	r7,r3
   84db4:	9009883a 	mov	r4,r18
   84db8:	100d883a 	mov	r6,r2
   84dbc:	0089d080 	call	89d08 <__muldf3>
   84dc0:	180b883a 	mov	r5,r3
   84dc4:	a80f883a 	mov	r7,r21
   84dc8:	1009883a 	mov	r4,r2
   84dcc:	a00d883a 	mov	r6,r20
   84dd0:	008a4bc0 	call	8a4bc <__gedf2>
   84dd4:	103cb80e 	bge	r2,zero,840b8 <_dtoa_r+0x558>
   84dd8:	0027883a 	mov	r19,zero
   84ddc:	0025883a 	mov	r18,zero
   84de0:	003fc606 	br	84cfc <_dtoa_r+0x119c>
   84de4:	99400117 	ldw	r5,4(r19)
   84de8:	d9001617 	ldw	r4,88(sp)
   84dec:	00872a80 	call	872a8 <_Balloc>
   84df0:	99800417 	ldw	r6,16(r19)
   84df4:	11000304 	addi	r4,r2,12
   84df8:	99400304 	addi	r5,r19,12
   84dfc:	318d883a 	add	r6,r6,r6
   84e00:	318d883a 	add	r6,r6,r6
   84e04:	31800204 	addi	r6,r6,8
   84e08:	1023883a 	mov	r17,r2
   84e0c:	0086b100 	call	86b10 <memcpy>
   84e10:	d9001617 	ldw	r4,88(sp)
   84e14:	880b883a 	mov	r5,r17
   84e18:	01800044 	movi	r6,1
   84e1c:	008766c0 	call	8766c <__lshift>
   84e20:	100b883a 	mov	r5,r2
   84e24:	003d9c06 	br	84498 <_dtoa_r+0x938>
   84e28:	00800e44 	movi	r2,57
   84e2c:	b8807026 	beq	r23,r2,84ff0 <_dtoa_r+0x1490>
   84e30:	b8800044 	addi	r2,r23,1
   84e34:	b7000044 	addi	fp,r22,1
   84e38:	b0800005 	stb	r2,0(r22)
   84e3c:	003e4106 	br	84744 <_dtoa_r+0xbe4>
   84e40:	d8800317 	ldw	r2,12(sp)
   84e44:	01800274 	movhi	r6,9
   84e48:	31b77f04 	addi	r6,r6,-8708
   84e4c:	b009883a 	mov	r4,r22
   84e50:	100e90fa 	slli	r7,r2,3
   84e54:	b80b883a 	mov	r5,r23
   84e58:	398f883a 	add	r7,r7,r6
   84e5c:	38bffe17 	ldw	r2,-8(r7)
   84e60:	d9800517 	ldw	r6,20(sp)
   84e64:	38ffff17 	ldw	r3,-4(r7)
   84e68:	37000044 	addi	fp,r6,1
   84e6c:	180f883a 	mov	r7,r3
   84e70:	100d883a 	mov	r6,r2
   84e74:	0089d080 	call	89d08 <__muldf3>
   84e78:	a80b883a 	mov	r5,r21
   84e7c:	a009883a 	mov	r4,r20
   84e80:	182f883a 	mov	r23,r3
   84e84:	102d883a 	mov	r22,r2
   84e88:	008a6c40 	call	8a6c4 <__fixdfsi>
   84e8c:	1009883a 	mov	r4,r2
   84e90:	1027883a 	mov	r19,r2
   84e94:	008a5cc0 	call	8a5cc <__floatsidf>
   84e98:	a80b883a 	mov	r5,r21
   84e9c:	a009883a 	mov	r4,r20
   84ea0:	180f883a 	mov	r7,r3
   84ea4:	100d883a 	mov	r6,r2
   84ea8:	0089c140 	call	89c14 <__subdf3>
   84eac:	180b883a 	mov	r5,r3
   84eb0:	d8c00517 	ldw	r3,20(sp)
   84eb4:	9cc00c04 	addi	r19,r19,48
   84eb8:	1009883a 	mov	r4,r2
   84ebc:	1cc00005 	stb	r19,0(r3)
   84ec0:	2021883a 	mov	r16,r4
   84ec4:	d9000317 	ldw	r4,12(sp)
   84ec8:	00800044 	movi	r2,1
   84ecc:	2823883a 	mov	r17,r5
   84ed0:	20802226 	beq	r4,r2,84f5c <_dtoa_r+0x13fc>
   84ed4:	1029883a 	mov	r20,r2
   84ed8:	0005883a 	mov	r2,zero
   84edc:	00d00934 	movhi	r3,16420
   84ee0:	180f883a 	mov	r7,r3
   84ee4:	100d883a 	mov	r6,r2
   84ee8:	880b883a 	mov	r5,r17
   84eec:	8009883a 	mov	r4,r16
   84ef0:	0089d080 	call	89d08 <__muldf3>
   84ef4:	180b883a 	mov	r5,r3
   84ef8:	1009883a 	mov	r4,r2
   84efc:	1823883a 	mov	r17,r3
   84f00:	1021883a 	mov	r16,r2
   84f04:	008a6c40 	call	8a6c4 <__fixdfsi>
   84f08:	1009883a 	mov	r4,r2
   84f0c:	102b883a 	mov	r21,r2
   84f10:	008a5cc0 	call	8a5cc <__floatsidf>
   84f14:	880b883a 	mov	r5,r17
   84f18:	8009883a 	mov	r4,r16
   84f1c:	180f883a 	mov	r7,r3
   84f20:	100d883a 	mov	r6,r2
   84f24:	0089c140 	call	89c14 <__subdf3>
   84f28:	180b883a 	mov	r5,r3
   84f2c:	d8c00517 	ldw	r3,20(sp)
   84f30:	1009883a 	mov	r4,r2
   84f34:	ad400c04 	addi	r21,r21,48
   84f38:	1d05883a 	add	r2,r3,r20
   84f3c:	15400005 	stb	r21,0(r2)
   84f40:	2021883a 	mov	r16,r4
   84f44:	d9000317 	ldw	r4,12(sp)
   84f48:	a5000044 	addi	r20,r20,1
   84f4c:	2823883a 	mov	r17,r5
   84f50:	a13fe11e 	bne	r20,r4,84ed8 <_dtoa_r+0x1378>
   84f54:	e505883a 	add	r2,fp,r20
   84f58:	173fffc4 	addi	fp,r2,-1
   84f5c:	0025883a 	mov	r18,zero
   84f60:	04cff834 	movhi	r19,16352
   84f64:	b009883a 	mov	r4,r22
   84f68:	b80b883a 	mov	r5,r23
   84f6c:	900d883a 	mov	r6,r18
   84f70:	980f883a 	mov	r7,r19
   84f74:	0089c940 	call	89c94 <__adddf3>
   84f78:	180b883a 	mov	r5,r3
   84f7c:	1009883a 	mov	r4,r2
   84f80:	800d883a 	mov	r6,r16
   84f84:	880f883a 	mov	r7,r17
   84f88:	008a5440 	call	8a544 <__ltdf2>
   84f8c:	103cab16 	blt	r2,zero,8423c <_dtoa_r+0x6dc>
   84f90:	0009883a 	mov	r4,zero
   84f94:	980b883a 	mov	r5,r19
   84f98:	b80f883a 	mov	r7,r23
   84f9c:	b00d883a 	mov	r6,r22
   84fa0:	0089c140 	call	89c14 <__subdf3>
   84fa4:	180b883a 	mov	r5,r3
   84fa8:	880f883a 	mov	r7,r17
   84fac:	1009883a 	mov	r4,r2
   84fb0:	800d883a 	mov	r6,r16
   84fb4:	008a4340 	call	8a434 <__gtdf2>
   84fb8:	00bc470e 	bge	zero,r2,840d8 <_dtoa_r+0x578>
   84fbc:	00c00c04 	movi	r3,48
   84fc0:	e73fffc4 	addi	fp,fp,-1
   84fc4:	e0800007 	ldb	r2,0(fp)
   84fc8:	10fffd26 	beq	r2,r3,84fc0 <_dtoa_r+0x1460>
   84fcc:	d9800417 	ldw	r6,16(sp)
   84fd0:	e7000044 	addi	fp,fp,1
   84fd4:	d9800d15 	stw	r6,52(sp)
   84fd8:	003cab06 	br	84288 <_dtoa_r+0x728>
   84fdc:	d8c00f17 	ldw	r3,60(sp)
   84fe0:	d9001117 	ldw	r4,68(sp)
   84fe4:	20e1c83a 	sub	r16,r4,r3
   84fe8:	0007883a 	mov	r3,zero
   84fec:	003d9b06 	br	8465c <_dtoa_r+0xafc>
   84ff0:	00800e44 	movi	r2,57
   84ff4:	b0800005 	stb	r2,0(r22)
   84ff8:	b5800044 	addi	r22,r22,1
   84ffc:	003dc106 	br	84704 <_dtoa_r+0xba4>
   85000:	05800084 	movi	r22,2
   85004:	003bf706 	br	83fe4 <_dtoa_r+0x484>
   85008:	d9000f17 	ldw	r4,60(sp)
   8500c:	013c000e 	bge	zero,r4,84010 <_dtoa_r+0x4b0>
   85010:	d9800e17 	ldw	r6,56(sp)
   85014:	01bc300e 	bge	zero,r6,840d8 <_dtoa_r+0x578>
   85018:	0005883a 	mov	r2,zero
   8501c:	00d00934 	movhi	r3,16420
   85020:	a80b883a 	mov	r5,r21
   85024:	180f883a 	mov	r7,r3
   85028:	a009883a 	mov	r4,r20
   8502c:	100d883a 	mov	r6,r2
   85030:	0089d080 	call	89d08 <__muldf3>
   85034:	b1000044 	addi	r4,r22,1
   85038:	1021883a 	mov	r16,r2
   8503c:	1823883a 	mov	r17,r3
   85040:	008a5cc0 	call	8a5cc <__floatsidf>
   85044:	880b883a 	mov	r5,r17
   85048:	8009883a 	mov	r4,r16
   8504c:	180f883a 	mov	r7,r3
   85050:	100d883a 	mov	r6,r2
   85054:	0089d080 	call	89d08 <__muldf3>
   85058:	0011883a 	mov	r8,zero
   8505c:	02500734 	movhi	r9,16412
   85060:	180b883a 	mov	r5,r3
   85064:	480f883a 	mov	r7,r9
   85068:	1009883a 	mov	r4,r2
   8506c:	400d883a 	mov	r6,r8
   85070:	0089c940 	call	89c94 <__adddf3>
   85074:	102d883a 	mov	r22,r2
   85078:	00bf3034 	movhi	r2,64704
   8507c:	10ef883a 	add	r23,r2,r3
   85080:	d8800d17 	ldw	r2,52(sp)
   85084:	d8c00e17 	ldw	r3,56(sp)
   85088:	8029883a 	mov	r20,r16
   8508c:	10bfffc4 	addi	r2,r2,-1
   85090:	882b883a 	mov	r21,r17
   85094:	d8800415 	stw	r2,16(sp)
   85098:	d8c00315 	stw	r3,12(sp)
   8509c:	003e8306 	br	84aac <_dtoa_r+0xf4c>
   850a0:	d8800117 	ldw	r2,4(sp)
   850a4:	dc001117 	ldw	r16,68(sp)
   850a8:	dc801017 	ldw	r18,64(sp)
   850ac:	00c00d84 	movi	r3,54
   850b0:	1887c83a 	sub	r3,r3,r2
   850b4:	003d6906 	br	8465c <_dtoa_r+0xafc>
   850b8:	01800044 	movi	r6,1
   850bc:	3021883a 	mov	r16,r6
   850c0:	d9800f15 	stw	r6,60(sp)
   850c4:	d9802615 	stw	r6,152(sp)
   850c8:	d9800e15 	stw	r6,56(sp)
   850cc:	003b9306 	br	83f1c <_dtoa_r+0x3bc>
   850d0:	b021883a 	mov	r16,r22
   850d4:	dd800f15 	stw	r22,60(sp)
   850d8:	003b9006 	br	83f1c <_dtoa_r+0x3bc>
   850dc:	103e221e 	bne	r2,zero,84968 <_dtoa_r+0xe08>
   850e0:	b880004c 	andi	r2,r23,1
   850e4:	1005003a 	cmpeq	r2,r2,zero
   850e8:	103e1f1e 	bne	r2,zero,84968 <_dtoa_r+0xe08>
   850ec:	003e1b06 	br	8495c <_dtoa_r+0xdfc>
   850f0:	d9001617 	ldw	r4,88(sp)
   850f4:	980b883a 	mov	r5,r19
   850f8:	01800284 	movi	r6,10
   850fc:	000f883a 	mov	r7,zero
   85100:	0087a480 	call	87a48 <__multadd>
   85104:	d8c00e17 	ldw	r3,56(sp)
   85108:	1027883a 	mov	r19,r2
   8510c:	d8c00f15 	stw	r3,60(sp)
   85110:	003cd306 	br	84460 <_dtoa_r+0x900>

00085114 <_fflush_r>:
   85114:	defffb04 	addi	sp,sp,-20
   85118:	dcc00315 	stw	r19,12(sp)
   8511c:	dc800215 	stw	r18,8(sp)
   85120:	dfc00415 	stw	ra,16(sp)
   85124:	dc400115 	stw	r17,4(sp)
   85128:	dc000015 	stw	r16,0(sp)
   8512c:	2027883a 	mov	r19,r4
   85130:	2825883a 	mov	r18,r5
   85134:	20000226 	beq	r4,zero,85140 <_fflush_r+0x2c>
   85138:	20800e17 	ldw	r2,56(r4)
   8513c:	10005626 	beq	r2,zero,85298 <_fflush_r+0x184>
   85140:	9100030b 	ldhu	r4,12(r18)
   85144:	20ffffcc 	andi	r3,r4,65535
   85148:	18e0001c 	xori	r3,r3,32768
   8514c:	18e00004 	addi	r3,r3,-32768
   85150:	1880020c 	andi	r2,r3,8
   85154:	1000261e 	bne	r2,zero,851f0 <_fflush_r+0xdc>
   85158:	90c00117 	ldw	r3,4(r18)
   8515c:	20820014 	ori	r2,r4,2048
   85160:	9080030d 	sth	r2,12(r18)
   85164:	1009883a 	mov	r4,r2
   85168:	00c0400e 	bge	zero,r3,8526c <_fflush_r+0x158>
   8516c:	92000a17 	ldw	r8,40(r18)
   85170:	40004026 	beq	r8,zero,85274 <_fflush_r+0x160>
   85174:	2084000c 	andi	r2,r4,4096
   85178:	10005326 	beq	r2,zero,852c8 <_fflush_r+0x1b4>
   8517c:	94001417 	ldw	r16,80(r18)
   85180:	9080030b 	ldhu	r2,12(r18)
   85184:	1080010c 	andi	r2,r2,4
   85188:	1000481e 	bne	r2,zero,852ac <_fflush_r+0x198>
   8518c:	91400717 	ldw	r5,28(r18)
   85190:	9809883a 	mov	r4,r19
   85194:	800d883a 	mov	r6,r16
   85198:	000f883a 	mov	r7,zero
   8519c:	403ee83a 	callr	r8
   851a0:	8080261e 	bne	r16,r2,8523c <_fflush_r+0x128>
   851a4:	9080030b 	ldhu	r2,12(r18)
   851a8:	91000417 	ldw	r4,16(r18)
   851ac:	90000115 	stw	zero,4(r18)
   851b0:	10bdffcc 	andi	r2,r2,63487
   851b4:	10ffffcc 	andi	r3,r2,65535
   851b8:	18c4000c 	andi	r3,r3,4096
   851bc:	9080030d 	sth	r2,12(r18)
   851c0:	91000015 	stw	r4,0(r18)
   851c4:	18002b26 	beq	r3,zero,85274 <_fflush_r+0x160>
   851c8:	0007883a 	mov	r3,zero
   851cc:	1805883a 	mov	r2,r3
   851d0:	94001415 	stw	r16,80(r18)
   851d4:	dfc00417 	ldw	ra,16(sp)
   851d8:	dcc00317 	ldw	r19,12(sp)
   851dc:	dc800217 	ldw	r18,8(sp)
   851e0:	dc400117 	ldw	r17,4(sp)
   851e4:	dc000017 	ldw	r16,0(sp)
   851e8:	dec00504 	addi	sp,sp,20
   851ec:	f800283a 	ret
   851f0:	94400417 	ldw	r17,16(r18)
   851f4:	88001f26 	beq	r17,zero,85274 <_fflush_r+0x160>
   851f8:	90800017 	ldw	r2,0(r18)
   851fc:	18c000cc 	andi	r3,r3,3
   85200:	94400015 	stw	r17,0(r18)
   85204:	1461c83a 	sub	r16,r2,r17
   85208:	18002526 	beq	r3,zero,852a0 <_fflush_r+0x18c>
   8520c:	0005883a 	mov	r2,zero
   85210:	90800215 	stw	r2,8(r18)
   85214:	0400170e 	bge	zero,r16,85274 <_fflush_r+0x160>
   85218:	90c00917 	ldw	r3,36(r18)
   8521c:	91400717 	ldw	r5,28(r18)
   85220:	880d883a 	mov	r6,r17
   85224:	800f883a 	mov	r7,r16
   85228:	9809883a 	mov	r4,r19
   8522c:	183ee83a 	callr	r3
   85230:	88a3883a 	add	r17,r17,r2
   85234:	80a1c83a 	sub	r16,r16,r2
   85238:	00bff616 	blt	zero,r2,85214 <_fflush_r+0x100>
   8523c:	9080030b 	ldhu	r2,12(r18)
   85240:	00ffffc4 	movi	r3,-1
   85244:	10801014 	ori	r2,r2,64
   85248:	9080030d 	sth	r2,12(r18)
   8524c:	1805883a 	mov	r2,r3
   85250:	dfc00417 	ldw	ra,16(sp)
   85254:	dcc00317 	ldw	r19,12(sp)
   85258:	dc800217 	ldw	r18,8(sp)
   8525c:	dc400117 	ldw	r17,4(sp)
   85260:	dc000017 	ldw	r16,0(sp)
   85264:	dec00504 	addi	sp,sp,20
   85268:	f800283a 	ret
   8526c:	90800f17 	ldw	r2,60(r18)
   85270:	00bfbe16 	blt	zero,r2,8516c <_fflush_r+0x58>
   85274:	0007883a 	mov	r3,zero
   85278:	1805883a 	mov	r2,r3
   8527c:	dfc00417 	ldw	ra,16(sp)
   85280:	dcc00317 	ldw	r19,12(sp)
   85284:	dc800217 	ldw	r18,8(sp)
   85288:	dc400117 	ldw	r17,4(sp)
   8528c:	dc000017 	ldw	r16,0(sp)
   85290:	dec00504 	addi	sp,sp,20
   85294:	f800283a 	ret
   85298:	00853ac0 	call	853ac <__sinit>
   8529c:	003fa806 	br	85140 <_fflush_r+0x2c>
   852a0:	90800517 	ldw	r2,20(r18)
   852a4:	90800215 	stw	r2,8(r18)
   852a8:	003fda06 	br	85214 <_fflush_r+0x100>
   852ac:	90800117 	ldw	r2,4(r18)
   852b0:	90c00c17 	ldw	r3,48(r18)
   852b4:	80a1c83a 	sub	r16,r16,r2
   852b8:	183fb426 	beq	r3,zero,8518c <_fflush_r+0x78>
   852bc:	90800f17 	ldw	r2,60(r18)
   852c0:	80a1c83a 	sub	r16,r16,r2
   852c4:	003fb106 	br	8518c <_fflush_r+0x78>
   852c8:	91400717 	ldw	r5,28(r18)
   852cc:	9809883a 	mov	r4,r19
   852d0:	000d883a 	mov	r6,zero
   852d4:	01c00044 	movi	r7,1
   852d8:	403ee83a 	callr	r8
   852dc:	1021883a 	mov	r16,r2
   852e0:	00bfffc4 	movi	r2,-1
   852e4:	80800226 	beq	r16,r2,852f0 <_fflush_r+0x1dc>
   852e8:	92000a17 	ldw	r8,40(r18)
   852ec:	003fa406 	br	85180 <_fflush_r+0x6c>
   852f0:	98c00017 	ldw	r3,0(r19)
   852f4:	00800744 	movi	r2,29
   852f8:	18bfde26 	beq	r3,r2,85274 <_fflush_r+0x160>
   852fc:	9080030b 	ldhu	r2,12(r18)
   85300:	8007883a 	mov	r3,r16
   85304:	10801014 	ori	r2,r2,64
   85308:	9080030d 	sth	r2,12(r18)
   8530c:	003fcf06 	br	8524c <_fflush_r+0x138>

00085310 <fflush>:
   85310:	01400234 	movhi	r5,8
   85314:	29544504 	addi	r5,r5,20756
   85318:	2007883a 	mov	r3,r4
   8531c:	20000526 	beq	r4,zero,85334 <fflush+0x24>
   85320:	00800274 	movhi	r2,9
   85324:	10bf5a04 	addi	r2,r2,-664
   85328:	11000017 	ldw	r4,0(r2)
   8532c:	180b883a 	mov	r5,r3
   85330:	00851141 	jmpi	85114 <_fflush_r>
   85334:	00800274 	movhi	r2,9
   85338:	10bf5b04 	addi	r2,r2,-660
   8533c:	11000017 	ldw	r4,0(r2)
   85340:	0085f141 	jmpi	85f14 <_fwalk_reent>

00085344 <std>:
   85344:	00800274 	movhi	r2,9
   85348:	10a12204 	addi	r2,r2,-31608
   8534c:	20800b15 	stw	r2,44(r4)
   85350:	00800274 	movhi	r2,9
   85354:	10a15d04 	addi	r2,r2,-31372
   85358:	20800815 	stw	r2,32(r4)
   8535c:	00c00274 	movhi	r3,9
   85360:	18e13e04 	addi	r3,r3,-31496
   85364:	00800274 	movhi	r2,9
   85368:	10a12404 	addi	r2,r2,-31600
   8536c:	2140030d 	sth	r5,12(r4)
   85370:	2180038d 	sth	r6,14(r4)
   85374:	20c00915 	stw	r3,36(r4)
   85378:	20800a15 	stw	r2,40(r4)
   8537c:	20000015 	stw	zero,0(r4)
   85380:	20000115 	stw	zero,4(r4)
   85384:	20000215 	stw	zero,8(r4)
   85388:	20000415 	stw	zero,16(r4)
   8538c:	20000515 	stw	zero,20(r4)
   85390:	20000615 	stw	zero,24(r4)
   85394:	21000715 	stw	r4,28(r4)
   85398:	f800283a 	ret

0008539c <__sfp_lock_acquire>:
   8539c:	f800283a 	ret

000853a0 <__sfp_lock_release>:
   853a0:	f800283a 	ret

000853a4 <__sinit_lock_acquire>:
   853a4:	f800283a 	ret

000853a8 <__sinit_lock_release>:
   853a8:	f800283a 	ret

000853ac <__sinit>:
   853ac:	20800e17 	ldw	r2,56(r4)
   853b0:	defffd04 	addi	sp,sp,-12
   853b4:	dc400115 	stw	r17,4(sp)
   853b8:	dc000015 	stw	r16,0(sp)
   853bc:	dfc00215 	stw	ra,8(sp)
   853c0:	04400044 	movi	r17,1
   853c4:	01400104 	movi	r5,4
   853c8:	000d883a 	mov	r6,zero
   853cc:	2021883a 	mov	r16,r4
   853d0:	2200bb04 	addi	r8,r4,748
   853d4:	200f883a 	mov	r7,r4
   853d8:	10000526 	beq	r2,zero,853f0 <__sinit+0x44>
   853dc:	dfc00217 	ldw	ra,8(sp)
   853e0:	dc400117 	ldw	r17,4(sp)
   853e4:	dc000017 	ldw	r16,0(sp)
   853e8:	dec00304 	addi	sp,sp,12
   853ec:	f800283a 	ret
   853f0:	21000117 	ldw	r4,4(r4)
   853f4:	00800234 	movhi	r2,8
   853f8:	10952404 	addi	r2,r2,21648
   853fc:	00c000c4 	movi	r3,3
   85400:	80800f15 	stw	r2,60(r16)
   85404:	80c0b915 	stw	r3,740(r16)
   85408:	8200ba15 	stw	r8,744(r16)
   8540c:	84400e15 	stw	r17,56(r16)
   85410:	8000b815 	stw	zero,736(r16)
   85414:	00853440 	call	85344 <std>
   85418:	81000217 	ldw	r4,8(r16)
   8541c:	880d883a 	mov	r6,r17
   85420:	800f883a 	mov	r7,r16
   85424:	01400284 	movi	r5,10
   85428:	00853440 	call	85344 <std>
   8542c:	81000317 	ldw	r4,12(r16)
   85430:	800f883a 	mov	r7,r16
   85434:	01400484 	movi	r5,18
   85438:	01800084 	movi	r6,2
   8543c:	dfc00217 	ldw	ra,8(sp)
   85440:	dc400117 	ldw	r17,4(sp)
   85444:	dc000017 	ldw	r16,0(sp)
   85448:	dec00304 	addi	sp,sp,12
   8544c:	00853441 	jmpi	85344 <std>

00085450 <__fp_lock>:
   85450:	0005883a 	mov	r2,zero
   85454:	f800283a 	ret

00085458 <__fp_unlock>:
   85458:	0005883a 	mov	r2,zero
   8545c:	f800283a 	ret

00085460 <__fp_unlock_all>:
   85460:	00800274 	movhi	r2,9
   85464:	10bf5a04 	addi	r2,r2,-664
   85468:	11000017 	ldw	r4,0(r2)
   8546c:	01400234 	movhi	r5,8
   85470:	29551604 	addi	r5,r5,21592
   85474:	0085fdc1 	jmpi	85fdc <_fwalk>

00085478 <__fp_lock_all>:
   85478:	00800274 	movhi	r2,9
   8547c:	10bf5a04 	addi	r2,r2,-664
   85480:	11000017 	ldw	r4,0(r2)
   85484:	01400234 	movhi	r5,8
   85488:	29551404 	addi	r5,r5,21584
   8548c:	0085fdc1 	jmpi	85fdc <_fwalk>

00085490 <_cleanup_r>:
   85490:	01400274 	movhi	r5,9
   85494:	29625404 	addi	r5,r5,-30384
   85498:	0085fdc1 	jmpi	85fdc <_fwalk>

0008549c <_cleanup>:
   8549c:	00800274 	movhi	r2,9
   854a0:	10bf5b04 	addi	r2,r2,-660
   854a4:	11000017 	ldw	r4,0(r2)
   854a8:	00854901 	jmpi	85490 <_cleanup_r>

000854ac <__sfmoreglue>:
   854ac:	defffc04 	addi	sp,sp,-16
   854b0:	dc000015 	stw	r16,0(sp)
   854b4:	2821883a 	mov	r16,r5
   854b8:	dc400115 	stw	r17,4(sp)
   854bc:	01401704 	movi	r5,92
   854c0:	2023883a 	mov	r17,r4
   854c4:	8009883a 	mov	r4,r16
   854c8:	dfc00315 	stw	ra,12(sp)
   854cc:	dcc00215 	stw	r19,8(sp)
   854d0:	008aa7c0 	call	8aa7c <__mulsi3>
   854d4:	11400304 	addi	r5,r2,12
   854d8:	8809883a 	mov	r4,r17
   854dc:	1027883a 	mov	r19,r2
   854e0:	00862ec0 	call	862ec <_malloc_r>
   854e4:	10c00304 	addi	r3,r2,12
   854e8:	1023883a 	mov	r17,r2
   854ec:	1809883a 	mov	r4,r3
   854f0:	980d883a 	mov	r6,r19
   854f4:	000b883a 	mov	r5,zero
   854f8:	10000b26 	beq	r2,zero,85528 <__sfmoreglue+0x7c>
   854fc:	14000115 	stw	r16,4(r2)
   85500:	10c00215 	stw	r3,8(r2)
   85504:	10000015 	stw	zero,0(r2)
   85508:	0086c900 	call	86c90 <memset>
   8550c:	8805883a 	mov	r2,r17
   85510:	dfc00317 	ldw	ra,12(sp)
   85514:	dcc00217 	ldw	r19,8(sp)
   85518:	dc400117 	ldw	r17,4(sp)
   8551c:	dc000017 	ldw	r16,0(sp)
   85520:	dec00404 	addi	sp,sp,16
   85524:	f800283a 	ret
   85528:	0023883a 	mov	r17,zero
   8552c:	8805883a 	mov	r2,r17
   85530:	dfc00317 	ldw	ra,12(sp)
   85534:	dcc00217 	ldw	r19,8(sp)
   85538:	dc400117 	ldw	r17,4(sp)
   8553c:	dc000017 	ldw	r16,0(sp)
   85540:	dec00404 	addi	sp,sp,16
   85544:	f800283a 	ret

00085548 <__sfp>:
   85548:	defffd04 	addi	sp,sp,-12
   8554c:	00800274 	movhi	r2,9
   85550:	10bf5b04 	addi	r2,r2,-660
   85554:	dc000015 	stw	r16,0(sp)
   85558:	14000017 	ldw	r16,0(r2)
   8555c:	dc400115 	stw	r17,4(sp)
   85560:	dfc00215 	stw	ra,8(sp)
   85564:	80800e17 	ldw	r2,56(r16)
   85568:	2023883a 	mov	r17,r4
   8556c:	10002626 	beq	r2,zero,85608 <__sfp+0xc0>
   85570:	8400b804 	addi	r16,r16,736
   85574:	80800117 	ldw	r2,4(r16)
   85578:	81000217 	ldw	r4,8(r16)
   8557c:	10ffffc4 	addi	r3,r2,-1
   85580:	18000916 	blt	r3,zero,855a8 <__sfp+0x60>
   85584:	2080030f 	ldh	r2,12(r4)
   85588:	10000b26 	beq	r2,zero,855b8 <__sfp+0x70>
   8558c:	017fffc4 	movi	r5,-1
   85590:	00000206 	br	8559c <__sfp+0x54>
   85594:	2080030f 	ldh	r2,12(r4)
   85598:	10000726 	beq	r2,zero,855b8 <__sfp+0x70>
   8559c:	18ffffc4 	addi	r3,r3,-1
   855a0:	21001704 	addi	r4,r4,92
   855a4:	197ffb1e 	bne	r3,r5,85594 <__sfp+0x4c>
   855a8:	80800017 	ldw	r2,0(r16)
   855ac:	10001926 	beq	r2,zero,85614 <__sfp+0xcc>
   855b0:	1021883a 	mov	r16,r2
   855b4:	003fef06 	br	85574 <__sfp+0x2c>
   855b8:	00bfffc4 	movi	r2,-1
   855bc:	00c00044 	movi	r3,1
   855c0:	2080038d 	sth	r2,14(r4)
   855c4:	20c0030d 	sth	r3,12(r4)
   855c8:	20000015 	stw	zero,0(r4)
   855cc:	20000215 	stw	zero,8(r4)
   855d0:	20000115 	stw	zero,4(r4)
   855d4:	20000415 	stw	zero,16(r4)
   855d8:	20000515 	stw	zero,20(r4)
   855dc:	20000615 	stw	zero,24(r4)
   855e0:	20000c15 	stw	zero,48(r4)
   855e4:	20000d15 	stw	zero,52(r4)
   855e8:	20001115 	stw	zero,68(r4)
   855ec:	20001215 	stw	zero,72(r4)
   855f0:	2005883a 	mov	r2,r4
   855f4:	dfc00217 	ldw	ra,8(sp)
   855f8:	dc400117 	ldw	r17,4(sp)
   855fc:	dc000017 	ldw	r16,0(sp)
   85600:	dec00304 	addi	sp,sp,12
   85604:	f800283a 	ret
   85608:	8009883a 	mov	r4,r16
   8560c:	00853ac0 	call	853ac <__sinit>
   85610:	003fd706 	br	85570 <__sfp+0x28>
   85614:	8809883a 	mov	r4,r17
   85618:	01400104 	movi	r5,4
   8561c:	00854ac0 	call	854ac <__sfmoreglue>
   85620:	80800015 	stw	r2,0(r16)
   85624:	103fe21e 	bne	r2,zero,855b0 <__sfp+0x68>
   85628:	00800304 	movi	r2,12
   8562c:	0009883a 	mov	r4,zero
   85630:	88800015 	stw	r2,0(r17)
   85634:	003fee06 	br	855f0 <__sfp+0xa8>

00085638 <_malloc_trim_r>:
   85638:	defffb04 	addi	sp,sp,-20
   8563c:	dcc00315 	stw	r19,12(sp)
   85640:	04c00274 	movhi	r19,9
   85644:	9cf9d004 	addi	r19,r19,-6336
   85648:	dc800215 	stw	r18,8(sp)
   8564c:	dc400115 	stw	r17,4(sp)
   85650:	dc000015 	stw	r16,0(sp)
   85654:	2823883a 	mov	r17,r5
   85658:	2025883a 	mov	r18,r4
   8565c:	dfc00415 	stw	ra,16(sp)
   85660:	008b8000 	call	8b800 <__malloc_lock>
   85664:	98800217 	ldw	r2,8(r19)
   85668:	9009883a 	mov	r4,r18
   8566c:	000b883a 	mov	r5,zero
   85670:	10c00117 	ldw	r3,4(r2)
   85674:	00bfff04 	movi	r2,-4
   85678:	18a0703a 	and	r16,r3,r2
   8567c:	8463c83a 	sub	r17,r16,r17
   85680:	8c43fbc4 	addi	r17,r17,4079
   85684:	8822d33a 	srli	r17,r17,12
   85688:	0083ffc4 	movi	r2,4095
   8568c:	8c7fffc4 	addi	r17,r17,-1
   85690:	8822933a 	slli	r17,r17,12
   85694:	1440060e 	bge	r2,r17,856b0 <_malloc_trim_r+0x78>
   85698:	00884180 	call	88418 <_sbrk_r>
   8569c:	98c00217 	ldw	r3,8(r19)
   856a0:	9009883a 	mov	r4,r18
   856a4:	044bc83a 	sub	r5,zero,r17
   856a8:	80c7883a 	add	r3,r16,r3
   856ac:	10c00926 	beq	r2,r3,856d4 <_malloc_trim_r+0x9c>
   856b0:	008b8200 	call	8b820 <__malloc_unlock>
   856b4:	0005883a 	mov	r2,zero
   856b8:	dfc00417 	ldw	ra,16(sp)
   856bc:	dcc00317 	ldw	r19,12(sp)
   856c0:	dc800217 	ldw	r18,8(sp)
   856c4:	dc400117 	ldw	r17,4(sp)
   856c8:	dc000017 	ldw	r16,0(sp)
   856cc:	dec00504 	addi	sp,sp,20
   856d0:	f800283a 	ret
   856d4:	9009883a 	mov	r4,r18
   856d8:	00884180 	call	88418 <_sbrk_r>
   856dc:	844dc83a 	sub	r6,r16,r17
   856e0:	00ffffc4 	movi	r3,-1
   856e4:	9009883a 	mov	r4,r18
   856e8:	000b883a 	mov	r5,zero
   856ec:	01c00274 	movhi	r7,9
   856f0:	39c6cf04 	addi	r7,r7,6972
   856f4:	31800054 	ori	r6,r6,1
   856f8:	10c00926 	beq	r2,r3,85720 <_malloc_trim_r+0xe8>
   856fc:	38800017 	ldw	r2,0(r7)
   85700:	98c00217 	ldw	r3,8(r19)
   85704:	9009883a 	mov	r4,r18
   85708:	1445c83a 	sub	r2,r2,r17
   8570c:	38800015 	stw	r2,0(r7)
   85710:	19800115 	stw	r6,4(r3)
   85714:	008b8200 	call	8b820 <__malloc_unlock>
   85718:	00800044 	movi	r2,1
   8571c:	003fe606 	br	856b8 <_malloc_trim_r+0x80>
   85720:	00884180 	call	88418 <_sbrk_r>
   85724:	99800217 	ldw	r6,8(r19)
   85728:	100f883a 	mov	r7,r2
   8572c:	9009883a 	mov	r4,r18
   85730:	1187c83a 	sub	r3,r2,r6
   85734:	008003c4 	movi	r2,15
   85738:	19400054 	ori	r5,r3,1
   8573c:	10ffdc0e 	bge	r2,r3,856b0 <_malloc_trim_r+0x78>
   85740:	00800274 	movhi	r2,9
   85744:	10bf5f04 	addi	r2,r2,-644
   85748:	10c00017 	ldw	r3,0(r2)
   8574c:	00800274 	movhi	r2,9
   85750:	1086cf04 	addi	r2,r2,6972
   85754:	31400115 	stw	r5,4(r6)
   85758:	38c7c83a 	sub	r3,r7,r3
   8575c:	10c00015 	stw	r3,0(r2)
   85760:	003fd306 	br	856b0 <_malloc_trim_r+0x78>

00085764 <_free_r>:
   85764:	defffd04 	addi	sp,sp,-12
   85768:	dc400115 	stw	r17,4(sp)
   8576c:	dc000015 	stw	r16,0(sp)
   85770:	dfc00215 	stw	ra,8(sp)
   85774:	2821883a 	mov	r16,r5
   85778:	2023883a 	mov	r17,r4
   8577c:	28005a26 	beq	r5,zero,858e8 <_free_r+0x184>
   85780:	008b8000 	call	8b800 <__malloc_lock>
   85784:	823ffe04 	addi	r8,r16,-8
   85788:	41400117 	ldw	r5,4(r8)
   8578c:	00bfff84 	movi	r2,-2
   85790:	02800274 	movhi	r10,9
   85794:	52b9d004 	addi	r10,r10,-6336
   85798:	288e703a 	and	r7,r5,r2
   8579c:	41cd883a 	add	r6,r8,r7
   857a0:	30c00117 	ldw	r3,4(r6)
   857a4:	51000217 	ldw	r4,8(r10)
   857a8:	00bfff04 	movi	r2,-4
   857ac:	1892703a 	and	r9,r3,r2
   857b0:	5017883a 	mov	r11,r10
   857b4:	31006726 	beq	r6,r4,85954 <_free_r+0x1f0>
   857b8:	2880004c 	andi	r2,r5,1
   857bc:	1005003a 	cmpeq	r2,r2,zero
   857c0:	32400115 	stw	r9,4(r6)
   857c4:	10001a1e 	bne	r2,zero,85830 <_free_r+0xcc>
   857c8:	000b883a 	mov	r5,zero
   857cc:	3247883a 	add	r3,r6,r9
   857d0:	18800117 	ldw	r2,4(r3)
   857d4:	1080004c 	andi	r2,r2,1
   857d8:	1000231e 	bne	r2,zero,85868 <_free_r+0x104>
   857dc:	280ac03a 	cmpne	r5,r5,zero
   857e0:	3a4f883a 	add	r7,r7,r9
   857e4:	2800451e 	bne	r5,zero,858fc <_free_r+0x198>
   857e8:	31000217 	ldw	r4,8(r6)
   857ec:	00800274 	movhi	r2,9
   857f0:	10b9d204 	addi	r2,r2,-6328
   857f4:	20807b26 	beq	r4,r2,859e4 <_free_r+0x280>
   857f8:	30800317 	ldw	r2,12(r6)
   857fc:	3a07883a 	add	r3,r7,r8
   85800:	19c00015 	stw	r7,0(r3)
   85804:	11000215 	stw	r4,8(r2)
   85808:	20800315 	stw	r2,12(r4)
   8580c:	38800054 	ori	r2,r7,1
   85810:	40800115 	stw	r2,4(r8)
   85814:	28001a26 	beq	r5,zero,85880 <_free_r+0x11c>
   85818:	8809883a 	mov	r4,r17
   8581c:	dfc00217 	ldw	ra,8(sp)
   85820:	dc400117 	ldw	r17,4(sp)
   85824:	dc000017 	ldw	r16,0(sp)
   85828:	dec00304 	addi	sp,sp,12
   8582c:	008b8201 	jmpi	8b820 <__malloc_unlock>
   85830:	80bffe17 	ldw	r2,-8(r16)
   85834:	50c00204 	addi	r3,r10,8
   85838:	4091c83a 	sub	r8,r8,r2
   8583c:	41000217 	ldw	r4,8(r8)
   85840:	388f883a 	add	r7,r7,r2
   85844:	20c06126 	beq	r4,r3,859cc <_free_r+0x268>
   85848:	40800317 	ldw	r2,12(r8)
   8584c:	3247883a 	add	r3,r6,r9
   85850:	000b883a 	mov	r5,zero
   85854:	11000215 	stw	r4,8(r2)
   85858:	20800315 	stw	r2,12(r4)
   8585c:	18800117 	ldw	r2,4(r3)
   85860:	1080004c 	andi	r2,r2,1
   85864:	103fdd26 	beq	r2,zero,857dc <_free_r+0x78>
   85868:	38800054 	ori	r2,r7,1
   8586c:	3a07883a 	add	r3,r7,r8
   85870:	280ac03a 	cmpne	r5,r5,zero
   85874:	40800115 	stw	r2,4(r8)
   85878:	19c00015 	stw	r7,0(r3)
   8587c:	283fe61e 	bne	r5,zero,85818 <_free_r+0xb4>
   85880:	00807fc4 	movi	r2,511
   85884:	11c01f2e 	bgeu	r2,r7,85904 <_free_r+0x1a0>
   85888:	3806d27a 	srli	r3,r7,9
   8588c:	1800481e 	bne	r3,zero,859b0 <_free_r+0x24c>
   85890:	3804d0fa 	srli	r2,r7,3
   85894:	100690fa 	slli	r3,r2,3
   85898:	1acd883a 	add	r6,r3,r11
   8589c:	31400217 	ldw	r5,8(r6)
   858a0:	31405926 	beq	r6,r5,85a08 <_free_r+0x2a4>
   858a4:	28800117 	ldw	r2,4(r5)
   858a8:	00ffff04 	movi	r3,-4
   858ac:	10c4703a 	and	r2,r2,r3
   858b0:	3880022e 	bgeu	r7,r2,858bc <_free_r+0x158>
   858b4:	29400217 	ldw	r5,8(r5)
   858b8:	317ffa1e 	bne	r6,r5,858a4 <_free_r+0x140>
   858bc:	29800317 	ldw	r6,12(r5)
   858c0:	41800315 	stw	r6,12(r8)
   858c4:	41400215 	stw	r5,8(r8)
   858c8:	8809883a 	mov	r4,r17
   858cc:	2a000315 	stw	r8,12(r5)
   858d0:	32000215 	stw	r8,8(r6)
   858d4:	dfc00217 	ldw	ra,8(sp)
   858d8:	dc400117 	ldw	r17,4(sp)
   858dc:	dc000017 	ldw	r16,0(sp)
   858e0:	dec00304 	addi	sp,sp,12
   858e4:	008b8201 	jmpi	8b820 <__malloc_unlock>
   858e8:	dfc00217 	ldw	ra,8(sp)
   858ec:	dc400117 	ldw	r17,4(sp)
   858f0:	dc000017 	ldw	r16,0(sp)
   858f4:	dec00304 	addi	sp,sp,12
   858f8:	f800283a 	ret
   858fc:	31000217 	ldw	r4,8(r6)
   85900:	003fbd06 	br	857f8 <_free_r+0x94>
   85904:	3806d0fa 	srli	r3,r7,3
   85908:	00800044 	movi	r2,1
   8590c:	51400117 	ldw	r5,4(r10)
   85910:	180890fa 	slli	r4,r3,3
   85914:	1807d0ba 	srai	r3,r3,2
   85918:	22c9883a 	add	r4,r4,r11
   8591c:	21800217 	ldw	r6,8(r4)
   85920:	10c4983a 	sll	r2,r2,r3
   85924:	41000315 	stw	r4,12(r8)
   85928:	41800215 	stw	r6,8(r8)
   8592c:	288ab03a 	or	r5,r5,r2
   85930:	22000215 	stw	r8,8(r4)
   85934:	8809883a 	mov	r4,r17
   85938:	51400115 	stw	r5,4(r10)
   8593c:	32000315 	stw	r8,12(r6)
   85940:	dfc00217 	ldw	ra,8(sp)
   85944:	dc400117 	ldw	r17,4(sp)
   85948:	dc000017 	ldw	r16,0(sp)
   8594c:	dec00304 	addi	sp,sp,12
   85950:	008b8201 	jmpi	8b820 <__malloc_unlock>
   85954:	2880004c 	andi	r2,r5,1
   85958:	3a4d883a 	add	r6,r7,r9
   8595c:	1000071e 	bne	r2,zero,8597c <_free_r+0x218>
   85960:	80bffe17 	ldw	r2,-8(r16)
   85964:	4091c83a 	sub	r8,r8,r2
   85968:	41000317 	ldw	r4,12(r8)
   8596c:	40c00217 	ldw	r3,8(r8)
   85970:	308d883a 	add	r6,r6,r2
   85974:	20c00215 	stw	r3,8(r4)
   85978:	19000315 	stw	r4,12(r3)
   8597c:	00800274 	movhi	r2,9
   85980:	10bf5e04 	addi	r2,r2,-648
   85984:	11000017 	ldw	r4,0(r2)
   85988:	30c00054 	ori	r3,r6,1
   8598c:	52000215 	stw	r8,8(r10)
   85990:	40c00115 	stw	r3,4(r8)
   85994:	313fa036 	bltu	r6,r4,85818 <_free_r+0xb4>
   85998:	00800274 	movhi	r2,9
   8599c:	1086c504 	addi	r2,r2,6932
   859a0:	11400017 	ldw	r5,0(r2)
   859a4:	8809883a 	mov	r4,r17
   859a8:	00856380 	call	85638 <_malloc_trim_r>
   859ac:	003f9a06 	br	85818 <_free_r+0xb4>
   859b0:	00800104 	movi	r2,4
   859b4:	10c0072e 	bgeu	r2,r3,859d4 <_free_r+0x270>
   859b8:	00800504 	movi	r2,20
   859bc:	10c01936 	bltu	r2,r3,85a24 <_free_r+0x2c0>
   859c0:	188016c4 	addi	r2,r3,91
   859c4:	100690fa 	slli	r3,r2,3
   859c8:	003fb306 	br	85898 <_free_r+0x134>
   859cc:	01400044 	movi	r5,1
   859d0:	003f7e06 	br	857cc <_free_r+0x68>
   859d4:	3804d1ba 	srli	r2,r7,6
   859d8:	10800e04 	addi	r2,r2,56
   859dc:	100690fa 	slli	r3,r2,3
   859e0:	003fad06 	br	85898 <_free_r+0x134>
   859e4:	22000315 	stw	r8,12(r4)
   859e8:	22000215 	stw	r8,8(r4)
   859ec:	3a05883a 	add	r2,r7,r8
   859f0:	38c00054 	ori	r3,r7,1
   859f4:	11c00015 	stw	r7,0(r2)
   859f8:	41000215 	stw	r4,8(r8)
   859fc:	40c00115 	stw	r3,4(r8)
   85a00:	41000315 	stw	r4,12(r8)
   85a04:	003f8406 	br	85818 <_free_r+0xb4>
   85a08:	1005d0ba 	srai	r2,r2,2
   85a0c:	00c00044 	movi	r3,1
   85a10:	51000117 	ldw	r4,4(r10)
   85a14:	1886983a 	sll	r3,r3,r2
   85a18:	20c8b03a 	or	r4,r4,r3
   85a1c:	51000115 	stw	r4,4(r10)
   85a20:	003fa706 	br	858c0 <_free_r+0x15c>
   85a24:	00801504 	movi	r2,84
   85a28:	10c00436 	bltu	r2,r3,85a3c <_free_r+0x2d8>
   85a2c:	3804d33a 	srli	r2,r7,12
   85a30:	10801b84 	addi	r2,r2,110
   85a34:	100690fa 	slli	r3,r2,3
   85a38:	003f9706 	br	85898 <_free_r+0x134>
   85a3c:	00805504 	movi	r2,340
   85a40:	10c00436 	bltu	r2,r3,85a54 <_free_r+0x2f0>
   85a44:	3804d3fa 	srli	r2,r7,15
   85a48:	10801dc4 	addi	r2,r2,119
   85a4c:	100690fa 	slli	r3,r2,3
   85a50:	003f9106 	br	85898 <_free_r+0x134>
   85a54:	00815504 	movi	r2,1364
   85a58:	10c0032e 	bgeu	r2,r3,85a68 <_free_r+0x304>
   85a5c:	00801f84 	movi	r2,126
   85a60:	00c0fc04 	movi	r3,1008
   85a64:	003f8c06 	br	85898 <_free_r+0x134>
   85a68:	3804d4ba 	srli	r2,r7,18
   85a6c:	10801f04 	addi	r2,r2,124
   85a70:	100690fa 	slli	r3,r2,3
   85a74:	003f8806 	br	85898 <_free_r+0x134>

00085a78 <__sfvwrite_r>:
   85a78:	30800217 	ldw	r2,8(r6)
   85a7c:	defff504 	addi	sp,sp,-44
   85a80:	df000915 	stw	fp,36(sp)
   85a84:	dd800715 	stw	r22,28(sp)
   85a88:	dc800315 	stw	r18,12(sp)
   85a8c:	dfc00a15 	stw	ra,40(sp)
   85a90:	ddc00815 	stw	r23,32(sp)
   85a94:	dd400615 	stw	r21,24(sp)
   85a98:	dd000515 	stw	r20,20(sp)
   85a9c:	dcc00415 	stw	r19,16(sp)
   85aa0:	dc400215 	stw	r17,8(sp)
   85aa4:	dc000115 	stw	r16,4(sp)
   85aa8:	302d883a 	mov	r22,r6
   85aac:	2039883a 	mov	fp,r4
   85ab0:	2825883a 	mov	r18,r5
   85ab4:	10001c26 	beq	r2,zero,85b28 <__sfvwrite_r+0xb0>
   85ab8:	29c0030b 	ldhu	r7,12(r5)
   85abc:	3880020c 	andi	r2,r7,8
   85ac0:	10002726 	beq	r2,zero,85b60 <__sfvwrite_r+0xe8>
   85ac4:	28800417 	ldw	r2,16(r5)
   85ac8:	10002526 	beq	r2,zero,85b60 <__sfvwrite_r+0xe8>
   85acc:	3880008c 	andi	r2,r7,2
   85ad0:	b5400017 	ldw	r21,0(r22)
   85ad4:	10002826 	beq	r2,zero,85b78 <__sfvwrite_r+0x100>
   85ad8:	0021883a 	mov	r16,zero
   85adc:	0023883a 	mov	r17,zero
   85ae0:	880d883a 	mov	r6,r17
   85ae4:	e009883a 	mov	r4,fp
   85ae8:	00810004 	movi	r2,1024
   85aec:	80006e26 	beq	r16,zero,85ca8 <__sfvwrite_r+0x230>
   85af0:	800f883a 	mov	r7,r16
   85af4:	91400717 	ldw	r5,28(r18)
   85af8:	1400012e 	bgeu	r2,r16,85b00 <__sfvwrite_r+0x88>
   85afc:	100f883a 	mov	r7,r2
   85b00:	90c00917 	ldw	r3,36(r18)
   85b04:	183ee83a 	callr	r3
   85b08:	1007883a 	mov	r3,r2
   85b0c:	80a1c83a 	sub	r16,r16,r2
   85b10:	88a3883a 	add	r17,r17,r2
   85b14:	00806d0e 	bge	zero,r2,85ccc <__sfvwrite_r+0x254>
   85b18:	b0800217 	ldw	r2,8(r22)
   85b1c:	10c5c83a 	sub	r2,r2,r3
   85b20:	b0800215 	stw	r2,8(r22)
   85b24:	103fee1e 	bne	r2,zero,85ae0 <__sfvwrite_r+0x68>
   85b28:	0009883a 	mov	r4,zero
   85b2c:	2005883a 	mov	r2,r4
   85b30:	dfc00a17 	ldw	ra,40(sp)
   85b34:	df000917 	ldw	fp,36(sp)
   85b38:	ddc00817 	ldw	r23,32(sp)
   85b3c:	dd800717 	ldw	r22,28(sp)
   85b40:	dd400617 	ldw	r21,24(sp)
   85b44:	dd000517 	ldw	r20,20(sp)
   85b48:	dcc00417 	ldw	r19,16(sp)
   85b4c:	dc800317 	ldw	r18,12(sp)
   85b50:	dc400217 	ldw	r17,8(sp)
   85b54:	dc000117 	ldw	r16,4(sp)
   85b58:	dec00b04 	addi	sp,sp,44
   85b5c:	f800283a 	ret
   85b60:	00837e00 	call	837e0 <__swsetup_r>
   85b64:	1000e41e 	bne	r2,zero,85ef8 <__sfvwrite_r+0x480>
   85b68:	91c0030b 	ldhu	r7,12(r18)
   85b6c:	b5400017 	ldw	r21,0(r22)
   85b70:	3880008c 	andi	r2,r7,2
   85b74:	103fd81e 	bne	r2,zero,85ad8 <__sfvwrite_r+0x60>
   85b78:	3880004c 	andi	r2,r7,1
   85b7c:	1005003a 	cmpeq	r2,r2,zero
   85b80:	10005726 	beq	r2,zero,85ce0 <__sfvwrite_r+0x268>
   85b84:	0029883a 	mov	r20,zero
   85b88:	002f883a 	mov	r23,zero
   85b8c:	a0004226 	beq	r20,zero,85c98 <__sfvwrite_r+0x220>
   85b90:	3880800c 	andi	r2,r7,512
   85b94:	94000217 	ldw	r16,8(r18)
   85b98:	10008b26 	beq	r2,zero,85dc8 <__sfvwrite_r+0x350>
   85b9c:	800d883a 	mov	r6,r16
   85ba0:	a400a536 	bltu	r20,r16,85e38 <__sfvwrite_r+0x3c0>
   85ba4:	3881200c 	andi	r2,r7,1152
   85ba8:	10002726 	beq	r2,zero,85c48 <__sfvwrite_r+0x1d0>
   85bac:	90800517 	ldw	r2,20(r18)
   85bb0:	92000417 	ldw	r8,16(r18)
   85bb4:	91400017 	ldw	r5,0(r18)
   85bb8:	1087883a 	add	r3,r2,r2
   85bbc:	1887883a 	add	r3,r3,r2
   85bc0:	1808d7fa 	srli	r4,r3,31
   85bc4:	2a21c83a 	sub	r16,r5,r8
   85bc8:	80800044 	addi	r2,r16,1
   85bcc:	20c9883a 	add	r4,r4,r3
   85bd0:	2027d07a 	srai	r19,r4,1
   85bd4:	a085883a 	add	r2,r20,r2
   85bd8:	980d883a 	mov	r6,r19
   85bdc:	9880022e 	bgeu	r19,r2,85be8 <__sfvwrite_r+0x170>
   85be0:	1027883a 	mov	r19,r2
   85be4:	100d883a 	mov	r6,r2
   85be8:	3881000c 	andi	r2,r7,1024
   85bec:	1000b826 	beq	r2,zero,85ed0 <__sfvwrite_r+0x458>
   85bf0:	300b883a 	mov	r5,r6
   85bf4:	e009883a 	mov	r4,fp
   85bf8:	00862ec0 	call	862ec <_malloc_r>
   85bfc:	10003126 	beq	r2,zero,85cc4 <__sfvwrite_r+0x24c>
   85c00:	91400417 	ldw	r5,16(r18)
   85c04:	1009883a 	mov	r4,r2
   85c08:	800d883a 	mov	r6,r16
   85c0c:	1023883a 	mov	r17,r2
   85c10:	0086b100 	call	86b10 <memcpy>
   85c14:	90c0030b 	ldhu	r3,12(r18)
   85c18:	00beffc4 	movi	r2,-1025
   85c1c:	1886703a 	and	r3,r3,r2
   85c20:	18c02014 	ori	r3,r3,128
   85c24:	90c0030d 	sth	r3,12(r18)
   85c28:	9c07c83a 	sub	r3,r19,r16
   85c2c:	8c05883a 	add	r2,r17,r16
   85c30:	a00d883a 	mov	r6,r20
   85c34:	a021883a 	mov	r16,r20
   85c38:	90800015 	stw	r2,0(r18)
   85c3c:	90c00215 	stw	r3,8(r18)
   85c40:	94400415 	stw	r17,16(r18)
   85c44:	94c00515 	stw	r19,20(r18)
   85c48:	91000017 	ldw	r4,0(r18)
   85c4c:	b80b883a 	mov	r5,r23
   85c50:	a023883a 	mov	r17,r20
   85c54:	0086bb00 	call	86bb0 <memmove>
   85c58:	90c00217 	ldw	r3,8(r18)
   85c5c:	90800017 	ldw	r2,0(r18)
   85c60:	a027883a 	mov	r19,r20
   85c64:	1c07c83a 	sub	r3,r3,r16
   85c68:	1405883a 	add	r2,r2,r16
   85c6c:	90c00215 	stw	r3,8(r18)
   85c70:	a021883a 	mov	r16,r20
   85c74:	90800015 	stw	r2,0(r18)
   85c78:	b0800217 	ldw	r2,8(r22)
   85c7c:	1405c83a 	sub	r2,r2,r16
   85c80:	b0800215 	stw	r2,8(r22)
   85c84:	103fa826 	beq	r2,zero,85b28 <__sfvwrite_r+0xb0>
   85c88:	a469c83a 	sub	r20,r20,r17
   85c8c:	91c0030b 	ldhu	r7,12(r18)
   85c90:	bcef883a 	add	r23,r23,r19
   85c94:	a03fbe1e 	bne	r20,zero,85b90 <__sfvwrite_r+0x118>
   85c98:	adc00017 	ldw	r23,0(r21)
   85c9c:	ad000117 	ldw	r20,4(r21)
   85ca0:	ad400204 	addi	r21,r21,8
   85ca4:	003fb906 	br	85b8c <__sfvwrite_r+0x114>
   85ca8:	ac400017 	ldw	r17,0(r21)
   85cac:	ac000117 	ldw	r16,4(r21)
   85cb0:	ad400204 	addi	r21,r21,8
   85cb4:	003f8a06 	br	85ae0 <__sfvwrite_r+0x68>
   85cb8:	91400417 	ldw	r5,16(r18)
   85cbc:	e009883a 	mov	r4,fp
   85cc0:	00857640 	call	85764 <_free_r>
   85cc4:	00800304 	movi	r2,12
   85cc8:	e0800015 	stw	r2,0(fp)
   85ccc:	9080030b 	ldhu	r2,12(r18)
   85cd0:	013fffc4 	movi	r4,-1
   85cd4:	10801014 	ori	r2,r2,64
   85cd8:	9080030d 	sth	r2,12(r18)
   85cdc:	003f9306 	br	85b2c <__sfvwrite_r+0xb4>
   85ce0:	0027883a 	mov	r19,zero
   85ce4:	002f883a 	mov	r23,zero
   85ce8:	d8000015 	stw	zero,0(sp)
   85cec:	0029883a 	mov	r20,zero
   85cf0:	98001e26 	beq	r19,zero,85d6c <__sfvwrite_r+0x2f4>
   85cf4:	d8c00017 	ldw	r3,0(sp)
   85cf8:	1804c03a 	cmpne	r2,r3,zero
   85cfc:	10005e26 	beq	r2,zero,85e78 <__sfvwrite_r+0x400>
   85d00:	9821883a 	mov	r16,r19
   85d04:	a4c0012e 	bgeu	r20,r19,85d0c <__sfvwrite_r+0x294>
   85d08:	a021883a 	mov	r16,r20
   85d0c:	91000017 	ldw	r4,0(r18)
   85d10:	90800417 	ldw	r2,16(r18)
   85d14:	91800217 	ldw	r6,8(r18)
   85d18:	91c00517 	ldw	r7,20(r18)
   85d1c:	1100022e 	bgeu	r2,r4,85d28 <__sfvwrite_r+0x2b0>
   85d20:	31e3883a 	add	r17,r6,r7
   85d24:	8c001616 	blt	r17,r16,85d80 <__sfvwrite_r+0x308>
   85d28:	81c03816 	blt	r16,r7,85e0c <__sfvwrite_r+0x394>
   85d2c:	90c00917 	ldw	r3,36(r18)
   85d30:	91400717 	ldw	r5,28(r18)
   85d34:	e009883a 	mov	r4,fp
   85d38:	b80d883a 	mov	r6,r23
   85d3c:	183ee83a 	callr	r3
   85d40:	1023883a 	mov	r17,r2
   85d44:	00bfe10e 	bge	zero,r2,85ccc <__sfvwrite_r+0x254>
   85d48:	a469c83a 	sub	r20,r20,r17
   85d4c:	a0001826 	beq	r20,zero,85db0 <__sfvwrite_r+0x338>
   85d50:	b0800217 	ldw	r2,8(r22)
   85d54:	1445c83a 	sub	r2,r2,r17
   85d58:	b0800215 	stw	r2,8(r22)
   85d5c:	103f7226 	beq	r2,zero,85b28 <__sfvwrite_r+0xb0>
   85d60:	9c67c83a 	sub	r19,r19,r17
   85d64:	bc6f883a 	add	r23,r23,r17
   85d68:	983fe21e 	bne	r19,zero,85cf4 <__sfvwrite_r+0x27c>
   85d6c:	adc00017 	ldw	r23,0(r21)
   85d70:	acc00117 	ldw	r19,4(r21)
   85d74:	ad400204 	addi	r21,r21,8
   85d78:	d8000015 	stw	zero,0(sp)
   85d7c:	003fdc06 	br	85cf0 <__sfvwrite_r+0x278>
   85d80:	b80b883a 	mov	r5,r23
   85d84:	880d883a 	mov	r6,r17
   85d88:	0086bb00 	call	86bb0 <memmove>
   85d8c:	90c00017 	ldw	r3,0(r18)
   85d90:	e009883a 	mov	r4,fp
   85d94:	900b883a 	mov	r5,r18
   85d98:	1c47883a 	add	r3,r3,r17
   85d9c:	90c00015 	stw	r3,0(r18)
   85da0:	00851140 	call	85114 <_fflush_r>
   85da4:	103fc91e 	bne	r2,zero,85ccc <__sfvwrite_r+0x254>
   85da8:	a469c83a 	sub	r20,r20,r17
   85dac:	a03fe81e 	bne	r20,zero,85d50 <__sfvwrite_r+0x2d8>
   85db0:	e009883a 	mov	r4,fp
   85db4:	900b883a 	mov	r5,r18
   85db8:	00851140 	call	85114 <_fflush_r>
   85dbc:	103fc31e 	bne	r2,zero,85ccc <__sfvwrite_r+0x254>
   85dc0:	d8000015 	stw	zero,0(sp)
   85dc4:	003fe206 	br	85d50 <__sfvwrite_r+0x2d8>
   85dc8:	91000017 	ldw	r4,0(r18)
   85dcc:	90800417 	ldw	r2,16(r18)
   85dd0:	1100022e 	bgeu	r2,r4,85ddc <__sfvwrite_r+0x364>
   85dd4:	8023883a 	mov	r17,r16
   85dd8:	85003136 	bltu	r16,r20,85ea0 <__sfvwrite_r+0x428>
   85ddc:	91c00517 	ldw	r7,20(r18)
   85de0:	a1c01836 	bltu	r20,r7,85e44 <__sfvwrite_r+0x3cc>
   85de4:	90c00917 	ldw	r3,36(r18)
   85de8:	91400717 	ldw	r5,28(r18)
   85dec:	e009883a 	mov	r4,fp
   85df0:	b80d883a 	mov	r6,r23
   85df4:	183ee83a 	callr	r3
   85df8:	1021883a 	mov	r16,r2
   85dfc:	00bfb30e 	bge	zero,r2,85ccc <__sfvwrite_r+0x254>
   85e00:	1023883a 	mov	r17,r2
   85e04:	1027883a 	mov	r19,r2
   85e08:	003f9b06 	br	85c78 <__sfvwrite_r+0x200>
   85e0c:	b80b883a 	mov	r5,r23
   85e10:	800d883a 	mov	r6,r16
   85e14:	0086bb00 	call	86bb0 <memmove>
   85e18:	90c00217 	ldw	r3,8(r18)
   85e1c:	90800017 	ldw	r2,0(r18)
   85e20:	8023883a 	mov	r17,r16
   85e24:	1c07c83a 	sub	r3,r3,r16
   85e28:	1405883a 	add	r2,r2,r16
   85e2c:	90c00215 	stw	r3,8(r18)
   85e30:	90800015 	stw	r2,0(r18)
   85e34:	003fc406 	br	85d48 <__sfvwrite_r+0x2d0>
   85e38:	a00d883a 	mov	r6,r20
   85e3c:	a021883a 	mov	r16,r20
   85e40:	003f8106 	br	85c48 <__sfvwrite_r+0x1d0>
   85e44:	b80b883a 	mov	r5,r23
   85e48:	a00d883a 	mov	r6,r20
   85e4c:	0086bb00 	call	86bb0 <memmove>
   85e50:	90c00217 	ldw	r3,8(r18)
   85e54:	90800017 	ldw	r2,0(r18)
   85e58:	a021883a 	mov	r16,r20
   85e5c:	1d07c83a 	sub	r3,r3,r20
   85e60:	1505883a 	add	r2,r2,r20
   85e64:	a023883a 	mov	r17,r20
   85e68:	a027883a 	mov	r19,r20
   85e6c:	90c00215 	stw	r3,8(r18)
   85e70:	90800015 	stw	r2,0(r18)
   85e74:	003f8006 	br	85c78 <__sfvwrite_r+0x200>
   85e78:	b809883a 	mov	r4,r23
   85e7c:	01400284 	movi	r5,10
   85e80:	980d883a 	mov	r6,r19
   85e84:	0086a2c0 	call	86a2c <memchr>
   85e88:	10001726 	beq	r2,zero,85ee8 <__sfvwrite_r+0x470>
   85e8c:	15c5c83a 	sub	r2,r2,r23
   85e90:	15000044 	addi	r20,r2,1
   85e94:	00800044 	movi	r2,1
   85e98:	d8800015 	stw	r2,0(sp)
   85e9c:	003f9806 	br	85d00 <__sfvwrite_r+0x288>
   85ea0:	b80b883a 	mov	r5,r23
   85ea4:	800d883a 	mov	r6,r16
   85ea8:	0086bb00 	call	86bb0 <memmove>
   85eac:	90c00017 	ldw	r3,0(r18)
   85eb0:	e009883a 	mov	r4,fp
   85eb4:	900b883a 	mov	r5,r18
   85eb8:	1c07883a 	add	r3,r3,r16
   85ebc:	90c00015 	stw	r3,0(r18)
   85ec0:	8027883a 	mov	r19,r16
   85ec4:	00851140 	call	85114 <_fflush_r>
   85ec8:	103f6b26 	beq	r2,zero,85c78 <__sfvwrite_r+0x200>
   85ecc:	003f7f06 	br	85ccc <__sfvwrite_r+0x254>
   85ed0:	400b883a 	mov	r5,r8
   85ed4:	e009883a 	mov	r4,fp
   85ed8:	0087db40 	call	87db4 <_realloc_r>
   85edc:	103f7626 	beq	r2,zero,85cb8 <__sfvwrite_r+0x240>
   85ee0:	1023883a 	mov	r17,r2
   85ee4:	003f5006 	br	85c28 <__sfvwrite_r+0x1b0>
   85ee8:	00c00044 	movi	r3,1
   85eec:	9d000044 	addi	r20,r19,1
   85ef0:	d8c00015 	stw	r3,0(sp)
   85ef4:	003f8206 	br	85d00 <__sfvwrite_r+0x288>
   85ef8:	9080030b 	ldhu	r2,12(r18)
   85efc:	00c00244 	movi	r3,9
   85f00:	013fffc4 	movi	r4,-1
   85f04:	10801014 	ori	r2,r2,64
   85f08:	9080030d 	sth	r2,12(r18)
   85f0c:	e0c00015 	stw	r3,0(fp)
   85f10:	003f0606 	br	85b2c <__sfvwrite_r+0xb4>

00085f14 <_fwalk_reent>:
   85f14:	defff704 	addi	sp,sp,-36
   85f18:	dcc00315 	stw	r19,12(sp)
   85f1c:	24c0b804 	addi	r19,r4,736
   85f20:	dd800615 	stw	r22,24(sp)
   85f24:	dd400515 	stw	r21,20(sp)
   85f28:	dfc00815 	stw	ra,32(sp)
   85f2c:	ddc00715 	stw	r23,28(sp)
   85f30:	dd000415 	stw	r20,16(sp)
   85f34:	dc800215 	stw	r18,8(sp)
   85f38:	dc400115 	stw	r17,4(sp)
   85f3c:	dc000015 	stw	r16,0(sp)
   85f40:	202b883a 	mov	r21,r4
   85f44:	282d883a 	mov	r22,r5
   85f48:	008539c0 	call	8539c <__sfp_lock_acquire>
   85f4c:	98002126 	beq	r19,zero,85fd4 <_fwalk_reent+0xc0>
   85f50:	002f883a 	mov	r23,zero
   85f54:	9c800117 	ldw	r18,4(r19)
   85f58:	9c000217 	ldw	r16,8(r19)
   85f5c:	90bfffc4 	addi	r2,r18,-1
   85f60:	10000d16 	blt	r2,zero,85f98 <_fwalk_reent+0x84>
   85f64:	0023883a 	mov	r17,zero
   85f68:	053fffc4 	movi	r20,-1
   85f6c:	8080030f 	ldh	r2,12(r16)
   85f70:	8c400044 	addi	r17,r17,1
   85f74:	10000626 	beq	r2,zero,85f90 <_fwalk_reent+0x7c>
   85f78:	8080038f 	ldh	r2,14(r16)
   85f7c:	800b883a 	mov	r5,r16
   85f80:	a809883a 	mov	r4,r21
   85f84:	15000226 	beq	r2,r20,85f90 <_fwalk_reent+0x7c>
   85f88:	b03ee83a 	callr	r22
   85f8c:	b8aeb03a 	or	r23,r23,r2
   85f90:	84001704 	addi	r16,r16,92
   85f94:	947ff51e 	bne	r18,r17,85f6c <_fwalk_reent+0x58>
   85f98:	9cc00017 	ldw	r19,0(r19)
   85f9c:	983fed1e 	bne	r19,zero,85f54 <_fwalk_reent+0x40>
   85fa0:	00853a00 	call	853a0 <__sfp_lock_release>
   85fa4:	b805883a 	mov	r2,r23
   85fa8:	dfc00817 	ldw	ra,32(sp)
   85fac:	ddc00717 	ldw	r23,28(sp)
   85fb0:	dd800617 	ldw	r22,24(sp)
   85fb4:	dd400517 	ldw	r21,20(sp)
   85fb8:	dd000417 	ldw	r20,16(sp)
   85fbc:	dcc00317 	ldw	r19,12(sp)
   85fc0:	dc800217 	ldw	r18,8(sp)
   85fc4:	dc400117 	ldw	r17,4(sp)
   85fc8:	dc000017 	ldw	r16,0(sp)
   85fcc:	dec00904 	addi	sp,sp,36
   85fd0:	f800283a 	ret
   85fd4:	002f883a 	mov	r23,zero
   85fd8:	003ff106 	br	85fa0 <_fwalk_reent+0x8c>

00085fdc <_fwalk>:
   85fdc:	defff804 	addi	sp,sp,-32
   85fe0:	dcc00315 	stw	r19,12(sp)
   85fe4:	24c0b804 	addi	r19,r4,736
   85fe8:	dd400515 	stw	r21,20(sp)
   85fec:	dfc00715 	stw	ra,28(sp)
   85ff0:	dd800615 	stw	r22,24(sp)
   85ff4:	dd000415 	stw	r20,16(sp)
   85ff8:	dc800215 	stw	r18,8(sp)
   85ffc:	dc400115 	stw	r17,4(sp)
   86000:	dc000015 	stw	r16,0(sp)
   86004:	282b883a 	mov	r21,r5
   86008:	008539c0 	call	8539c <__sfp_lock_acquire>
   8600c:	98001f26 	beq	r19,zero,8608c <_fwalk+0xb0>
   86010:	002d883a 	mov	r22,zero
   86014:	9c800117 	ldw	r18,4(r19)
   86018:	9c000217 	ldw	r16,8(r19)
   8601c:	90bfffc4 	addi	r2,r18,-1
   86020:	10000c16 	blt	r2,zero,86054 <_fwalk+0x78>
   86024:	0023883a 	mov	r17,zero
   86028:	053fffc4 	movi	r20,-1
   8602c:	8080030f 	ldh	r2,12(r16)
   86030:	8c400044 	addi	r17,r17,1
   86034:	10000526 	beq	r2,zero,8604c <_fwalk+0x70>
   86038:	8080038f 	ldh	r2,14(r16)
   8603c:	8009883a 	mov	r4,r16
   86040:	15000226 	beq	r2,r20,8604c <_fwalk+0x70>
   86044:	a83ee83a 	callr	r21
   86048:	b0acb03a 	or	r22,r22,r2
   8604c:	84001704 	addi	r16,r16,92
   86050:	947ff61e 	bne	r18,r17,8602c <_fwalk+0x50>
   86054:	9cc00017 	ldw	r19,0(r19)
   86058:	983fee1e 	bne	r19,zero,86014 <_fwalk+0x38>
   8605c:	00853a00 	call	853a0 <__sfp_lock_release>
   86060:	b005883a 	mov	r2,r22
   86064:	dfc00717 	ldw	ra,28(sp)
   86068:	dd800617 	ldw	r22,24(sp)
   8606c:	dd400517 	ldw	r21,20(sp)
   86070:	dd000417 	ldw	r20,16(sp)
   86074:	dcc00317 	ldw	r19,12(sp)
   86078:	dc800217 	ldw	r18,8(sp)
   8607c:	dc400117 	ldw	r17,4(sp)
   86080:	dc000017 	ldw	r16,0(sp)
   86084:	dec00804 	addi	sp,sp,32
   86088:	f800283a 	ret
   8608c:	002d883a 	mov	r22,zero
   86090:	003ff206 	br	8605c <_fwalk+0x80>

00086094 <__locale_charset>:
   86094:	d0a00917 	ldw	r2,-32732(gp)
   86098:	f800283a 	ret

0008609c <_localeconv_r>:
   8609c:	00800274 	movhi	r2,9
   860a0:	10b77304 	addi	r2,r2,-8756
   860a4:	f800283a 	ret

000860a8 <localeconv>:
   860a8:	00800274 	movhi	r2,9
   860ac:	10bf5a04 	addi	r2,r2,-664
   860b0:	11000017 	ldw	r4,0(r2)
   860b4:	008609c1 	jmpi	8609c <_localeconv_r>

000860b8 <_setlocale_r>:
   860b8:	defffc04 	addi	sp,sp,-16
   860bc:	00c00274 	movhi	r3,9
   860c0:	18f76e04 	addi	r3,r3,-8776
   860c4:	dc800215 	stw	r18,8(sp)
   860c8:	dc400115 	stw	r17,4(sp)
   860cc:	dc000015 	stw	r16,0(sp)
   860d0:	2023883a 	mov	r17,r4
   860d4:	2825883a 	mov	r18,r5
   860d8:	dfc00315 	stw	ra,12(sp)
   860dc:	3021883a 	mov	r16,r6
   860e0:	3009883a 	mov	r4,r6
   860e4:	180b883a 	mov	r5,r3
   860e8:	30000926 	beq	r6,zero,86110 <_setlocale_r+0x58>
   860ec:	00885d40 	call	885d4 <strcmp>
   860f0:	8009883a 	mov	r4,r16
   860f4:	01400274 	movhi	r5,9
   860f8:	29775904 	addi	r5,r5,-8860
   860fc:	10000b1e 	bne	r2,zero,8612c <_setlocale_r+0x74>
   86100:	8c000d15 	stw	r16,52(r17)
   86104:	8c800c15 	stw	r18,48(r17)
   86108:	00c00274 	movhi	r3,9
   8610c:	18f76e04 	addi	r3,r3,-8776
   86110:	1805883a 	mov	r2,r3
   86114:	dfc00317 	ldw	ra,12(sp)
   86118:	dc800217 	ldw	r18,8(sp)
   8611c:	dc400117 	ldw	r17,4(sp)
   86120:	dc000017 	ldw	r16,0(sp)
   86124:	dec00404 	addi	sp,sp,16
   86128:	f800283a 	ret
   8612c:	00885d40 	call	885d4 <strcmp>
   86130:	0007883a 	mov	r3,zero
   86134:	103ff226 	beq	r2,zero,86100 <_setlocale_r+0x48>
   86138:	003ff506 	br	86110 <_setlocale_r+0x58>

0008613c <setlocale>:
   8613c:	01800274 	movhi	r6,9
   86140:	31bf5a04 	addi	r6,r6,-664
   86144:	2007883a 	mov	r3,r4
   86148:	31000017 	ldw	r4,0(r6)
   8614c:	280d883a 	mov	r6,r5
   86150:	180b883a 	mov	r5,r3
   86154:	00860b81 	jmpi	860b8 <_setlocale_r>

00086158 <__smakebuf_r>:
   86158:	2880030b 	ldhu	r2,12(r5)
   8615c:	deffed04 	addi	sp,sp,-76
   86160:	dc401015 	stw	r17,64(sp)
   86164:	1080008c 	andi	r2,r2,2
   86168:	dc000f15 	stw	r16,60(sp)
   8616c:	dfc01215 	stw	ra,72(sp)
   86170:	dc801115 	stw	r18,68(sp)
   86174:	2821883a 	mov	r16,r5
   86178:	2023883a 	mov	r17,r4
   8617c:	10000b26 	beq	r2,zero,861ac <__smakebuf_r+0x54>
   86180:	28c010c4 	addi	r3,r5,67
   86184:	00800044 	movi	r2,1
   86188:	28800515 	stw	r2,20(r5)
   8618c:	28c00415 	stw	r3,16(r5)
   86190:	28c00015 	stw	r3,0(r5)
   86194:	dfc01217 	ldw	ra,72(sp)
   86198:	dc801117 	ldw	r18,68(sp)
   8619c:	dc401017 	ldw	r17,64(sp)
   861a0:	dc000f17 	ldw	r16,60(sp)
   861a4:	dec01304 	addi	sp,sp,76
   861a8:	f800283a 	ret
   861ac:	2940038f 	ldh	r5,14(r5)
   861b0:	28002116 	blt	r5,zero,86238 <__smakebuf_r+0xe0>
   861b4:	d80d883a 	mov	r6,sp
   861b8:	00889640 	call	88964 <_fstat_r>
   861bc:	10001e16 	blt	r2,zero,86238 <__smakebuf_r+0xe0>
   861c0:	d8800117 	ldw	r2,4(sp)
   861c4:	00e00014 	movui	r3,32768
   861c8:	113c000c 	andi	r4,r2,61440
   861cc:	20c03126 	beq	r4,r3,86294 <__smakebuf_r+0x13c>
   861d0:	8080030b 	ldhu	r2,12(r16)
   861d4:	00c80004 	movi	r3,8192
   861d8:	10820014 	ori	r2,r2,2048
   861dc:	8080030d 	sth	r2,12(r16)
   861e0:	20c01e26 	beq	r4,r3,8625c <__smakebuf_r+0x104>
   861e4:	04810004 	movi	r18,1024
   861e8:	8809883a 	mov	r4,r17
   861ec:	900b883a 	mov	r5,r18
   861f0:	00862ec0 	call	862ec <_malloc_r>
   861f4:	1009883a 	mov	r4,r2
   861f8:	10003126 	beq	r2,zero,862c0 <__smakebuf_r+0x168>
   861fc:	80c0030b 	ldhu	r3,12(r16)
   86200:	00800234 	movhi	r2,8
   86204:	10952404 	addi	r2,r2,21648
   86208:	88800f15 	stw	r2,60(r17)
   8620c:	18c02014 	ori	r3,r3,128
   86210:	84800515 	stw	r18,20(r16)
   86214:	80c0030d 	sth	r3,12(r16)
   86218:	81000415 	stw	r4,16(r16)
   8621c:	81000015 	stw	r4,0(r16)
   86220:	dfc01217 	ldw	ra,72(sp)
   86224:	dc801117 	ldw	r18,68(sp)
   86228:	dc401017 	ldw	r17,64(sp)
   8622c:	dc000f17 	ldw	r16,60(sp)
   86230:	dec01304 	addi	sp,sp,76
   86234:	f800283a 	ret
   86238:	80c0030b 	ldhu	r3,12(r16)
   8623c:	1880200c 	andi	r2,r3,128
   86240:	10000426 	beq	r2,zero,86254 <__smakebuf_r+0xfc>
   86244:	04801004 	movi	r18,64
   86248:	18820014 	ori	r2,r3,2048
   8624c:	8080030d 	sth	r2,12(r16)
   86250:	003fe506 	br	861e8 <__smakebuf_r+0x90>
   86254:	04810004 	movi	r18,1024
   86258:	003ffb06 	br	86248 <__smakebuf_r+0xf0>
   8625c:	8140038f 	ldh	r5,14(r16)
   86260:	8809883a 	mov	r4,r17
   86264:	00889d80 	call	889d8 <_isatty_r>
   86268:	103fde26 	beq	r2,zero,861e4 <__smakebuf_r+0x8c>
   8626c:	8080030b 	ldhu	r2,12(r16)
   86270:	80c010c4 	addi	r3,r16,67
   86274:	04810004 	movi	r18,1024
   86278:	10800054 	ori	r2,r2,1
   8627c:	8080030d 	sth	r2,12(r16)
   86280:	00800044 	movi	r2,1
   86284:	80c00415 	stw	r3,16(r16)
   86288:	80800515 	stw	r2,20(r16)
   8628c:	80c00015 	stw	r3,0(r16)
   86290:	003fd506 	br	861e8 <__smakebuf_r+0x90>
   86294:	80c00a17 	ldw	r3,40(r16)
   86298:	00800274 	movhi	r2,9
   8629c:	10a12404 	addi	r2,r2,-31600
   862a0:	18bfcb1e 	bne	r3,r2,861d0 <__smakebuf_r+0x78>
   862a4:	8080030b 	ldhu	r2,12(r16)
   862a8:	00c10004 	movi	r3,1024
   862ac:	1825883a 	mov	r18,r3
   862b0:	10c4b03a 	or	r2,r2,r3
   862b4:	8080030d 	sth	r2,12(r16)
   862b8:	80c01315 	stw	r3,76(r16)
   862bc:	003fca06 	br	861e8 <__smakebuf_r+0x90>
   862c0:	8100030b 	ldhu	r4,12(r16)
   862c4:	2080800c 	andi	r2,r4,512
   862c8:	103fb21e 	bne	r2,zero,86194 <__smakebuf_r+0x3c>
   862cc:	80c010c4 	addi	r3,r16,67
   862d0:	21000094 	ori	r4,r4,2
   862d4:	00800044 	movi	r2,1
   862d8:	80800515 	stw	r2,20(r16)
   862dc:	8100030d 	sth	r4,12(r16)
   862e0:	80c00415 	stw	r3,16(r16)
   862e4:	80c00015 	stw	r3,0(r16)
   862e8:	003faa06 	br	86194 <__smakebuf_r+0x3c>

000862ec <_malloc_r>:
   862ec:	defff604 	addi	sp,sp,-40
   862f0:	28c002c4 	addi	r3,r5,11
   862f4:	00800584 	movi	r2,22
   862f8:	dc800215 	stw	r18,8(sp)
   862fc:	dfc00915 	stw	ra,36(sp)
   86300:	df000815 	stw	fp,32(sp)
   86304:	ddc00715 	stw	r23,28(sp)
   86308:	dd800615 	stw	r22,24(sp)
   8630c:	dd400515 	stw	r21,20(sp)
   86310:	dd000415 	stw	r20,16(sp)
   86314:	dcc00315 	stw	r19,12(sp)
   86318:	dc400115 	stw	r17,4(sp)
   8631c:	dc000015 	stw	r16,0(sp)
   86320:	2025883a 	mov	r18,r4
   86324:	10c01236 	bltu	r2,r3,86370 <_malloc_r+0x84>
   86328:	04400404 	movi	r17,16
   8632c:	8940142e 	bgeu	r17,r5,86380 <_malloc_r+0x94>
   86330:	00800304 	movi	r2,12
   86334:	0007883a 	mov	r3,zero
   86338:	90800015 	stw	r2,0(r18)
   8633c:	1805883a 	mov	r2,r3
   86340:	dfc00917 	ldw	ra,36(sp)
   86344:	df000817 	ldw	fp,32(sp)
   86348:	ddc00717 	ldw	r23,28(sp)
   8634c:	dd800617 	ldw	r22,24(sp)
   86350:	dd400517 	ldw	r21,20(sp)
   86354:	dd000417 	ldw	r20,16(sp)
   86358:	dcc00317 	ldw	r19,12(sp)
   8635c:	dc800217 	ldw	r18,8(sp)
   86360:	dc400117 	ldw	r17,4(sp)
   86364:	dc000017 	ldw	r16,0(sp)
   86368:	dec00a04 	addi	sp,sp,40
   8636c:	f800283a 	ret
   86370:	00bffe04 	movi	r2,-8
   86374:	18a2703a 	and	r17,r3,r2
   86378:	883fed16 	blt	r17,zero,86330 <_malloc_r+0x44>
   8637c:	897fec36 	bltu	r17,r5,86330 <_malloc_r+0x44>
   86380:	9009883a 	mov	r4,r18
   86384:	008b8000 	call	8b800 <__malloc_lock>
   86388:	00807dc4 	movi	r2,503
   8638c:	14402b2e 	bgeu	r2,r17,8643c <_malloc_r+0x150>
   86390:	8806d27a 	srli	r3,r17,9
   86394:	18003f1e 	bne	r3,zero,86494 <_malloc_r+0x1a8>
   86398:	880cd0fa 	srli	r6,r17,3
   8639c:	300490fa 	slli	r2,r6,3
   863a0:	02c00274 	movhi	r11,9
   863a4:	5af9d004 	addi	r11,r11,-6336
   863a8:	12cb883a 	add	r5,r2,r11
   863ac:	2c000317 	ldw	r16,12(r5)
   863b0:	580f883a 	mov	r7,r11
   863b4:	2c00041e 	bne	r5,r16,863c8 <_malloc_r+0xdc>
   863b8:	00000a06 	br	863e4 <_malloc_r+0xf8>
   863bc:	1800860e 	bge	r3,zero,865d8 <_malloc_r+0x2ec>
   863c0:	84000317 	ldw	r16,12(r16)
   863c4:	2c000726 	beq	r5,r16,863e4 <_malloc_r+0xf8>
   863c8:	80800117 	ldw	r2,4(r16)
   863cc:	00ffff04 	movi	r3,-4
   863d0:	10c8703a 	and	r4,r2,r3
   863d4:	2447c83a 	sub	r3,r4,r17
   863d8:	008003c4 	movi	r2,15
   863dc:	10fff70e 	bge	r2,r3,863bc <_malloc_r+0xd0>
   863e0:	31bfffc4 	addi	r6,r6,-1
   863e4:	32400044 	addi	r9,r6,1
   863e8:	02800274 	movhi	r10,9
   863ec:	52b9d204 	addi	r10,r10,-6328
   863f0:	54000217 	ldw	r16,8(r10)
   863f4:	8280a026 	beq	r16,r10,86678 <_malloc_r+0x38c>
   863f8:	80800117 	ldw	r2,4(r16)
   863fc:	00ffff04 	movi	r3,-4
   86400:	10ca703a 	and	r5,r2,r3
   86404:	2c4dc83a 	sub	r6,r5,r17
   86408:	008003c4 	movi	r2,15
   8640c:	11808316 	blt	r2,r6,8661c <_malloc_r+0x330>
   86410:	52800315 	stw	r10,12(r10)
   86414:	52800215 	stw	r10,8(r10)
   86418:	30002916 	blt	r6,zero,864c0 <_malloc_r+0x1d4>
   8641c:	8147883a 	add	r3,r16,r5
   86420:	18800117 	ldw	r2,4(r3)
   86424:	9009883a 	mov	r4,r18
   86428:	10800054 	ori	r2,r2,1
   8642c:	18800115 	stw	r2,4(r3)
   86430:	008b8200 	call	8b820 <__malloc_unlock>
   86434:	80c00204 	addi	r3,r16,8
   86438:	003fc006 	br	8633c <_malloc_r+0x50>
   8643c:	02c00274 	movhi	r11,9
   86440:	5af9d004 	addi	r11,r11,-6336
   86444:	8ac5883a 	add	r2,r17,r11
   86448:	14000317 	ldw	r16,12(r2)
   8644c:	580f883a 	mov	r7,r11
   86450:	8806d0fa 	srli	r3,r17,3
   86454:	14006c26 	beq	r2,r16,86608 <_malloc_r+0x31c>
   86458:	80c00117 	ldw	r3,4(r16)
   8645c:	00bfff04 	movi	r2,-4
   86460:	81800317 	ldw	r6,12(r16)
   86464:	1886703a 	and	r3,r3,r2
   86468:	80c7883a 	add	r3,r16,r3
   8646c:	18800117 	ldw	r2,4(r3)
   86470:	81400217 	ldw	r5,8(r16)
   86474:	9009883a 	mov	r4,r18
   86478:	10800054 	ori	r2,r2,1
   8647c:	18800115 	stw	r2,4(r3)
   86480:	31400215 	stw	r5,8(r6)
   86484:	29800315 	stw	r6,12(r5)
   86488:	008b8200 	call	8b820 <__malloc_unlock>
   8648c:	80c00204 	addi	r3,r16,8
   86490:	003faa06 	br	8633c <_malloc_r+0x50>
   86494:	00800104 	movi	r2,4
   86498:	10c0052e 	bgeu	r2,r3,864b0 <_malloc_r+0x1c4>
   8649c:	00800504 	movi	r2,20
   864a0:	10c07836 	bltu	r2,r3,86684 <_malloc_r+0x398>
   864a4:	198016c4 	addi	r6,r3,91
   864a8:	300490fa 	slli	r2,r6,3
   864ac:	003fbc06 	br	863a0 <_malloc_r+0xb4>
   864b0:	8804d1ba 	srli	r2,r17,6
   864b4:	11800e04 	addi	r6,r2,56
   864b8:	300490fa 	slli	r2,r6,3
   864bc:	003fb806 	br	863a0 <_malloc_r+0xb4>
   864c0:	00807fc4 	movi	r2,511
   864c4:	1140bb36 	bltu	r2,r5,867b4 <_malloc_r+0x4c8>
   864c8:	2806d0fa 	srli	r3,r5,3
   864cc:	573ffe04 	addi	fp,r10,-8
   864d0:	00800044 	movi	r2,1
   864d4:	180890fa 	slli	r4,r3,3
   864d8:	1807d0ba 	srai	r3,r3,2
   864dc:	e1c00117 	ldw	r7,4(fp)
   864e0:	5909883a 	add	r4,r11,r4
   864e4:	21400217 	ldw	r5,8(r4)
   864e8:	10c4983a 	sll	r2,r2,r3
   864ec:	81000315 	stw	r4,12(r16)
   864f0:	81400215 	stw	r5,8(r16)
   864f4:	388eb03a 	or	r7,r7,r2
   864f8:	2c000315 	stw	r16,12(r5)
   864fc:	24000215 	stw	r16,8(r4)
   86500:	e1c00115 	stw	r7,4(fp)
   86504:	4807883a 	mov	r3,r9
   86508:	4800cd16 	blt	r9,zero,86840 <_malloc_r+0x554>
   8650c:	1807d0ba 	srai	r3,r3,2
   86510:	00800044 	movi	r2,1
   86514:	10c8983a 	sll	r4,r2,r3
   86518:	39004436 	bltu	r7,r4,8662c <_malloc_r+0x340>
   8651c:	21c4703a 	and	r2,r4,r7
   86520:	10000a1e 	bne	r2,zero,8654c <_malloc_r+0x260>
   86524:	2109883a 	add	r4,r4,r4
   86528:	00bfff04 	movi	r2,-4
   8652c:	4884703a 	and	r2,r9,r2
   86530:	3906703a 	and	r3,r7,r4
   86534:	12400104 	addi	r9,r2,4
   86538:	1800041e 	bne	r3,zero,8654c <_malloc_r+0x260>
   8653c:	2109883a 	add	r4,r4,r4
   86540:	3904703a 	and	r2,r7,r4
   86544:	4a400104 	addi	r9,r9,4
   86548:	103ffc26 	beq	r2,zero,8653c <_malloc_r+0x250>
   8654c:	480490fa 	slli	r2,r9,3
   86550:	4819883a 	mov	r12,r9
   86554:	023fff04 	movi	r8,-4
   86558:	589b883a 	add	r13,r11,r2
   8655c:	6807883a 	mov	r3,r13
   86560:	014003c4 	movi	r5,15
   86564:	1c000317 	ldw	r16,12(r3)
   86568:	1c00041e 	bne	r3,r16,8657c <_malloc_r+0x290>
   8656c:	0000a706 	br	8680c <_malloc_r+0x520>
   86570:	3000ab0e 	bge	r6,zero,86820 <_malloc_r+0x534>
   86574:	84000317 	ldw	r16,12(r16)
   86578:	1c00a426 	beq	r3,r16,8680c <_malloc_r+0x520>
   8657c:	80800117 	ldw	r2,4(r16)
   86580:	1204703a 	and	r2,r2,r8
   86584:	144dc83a 	sub	r6,r2,r17
   86588:	29bff90e 	bge	r5,r6,86570 <_malloc_r+0x284>
   8658c:	81000317 	ldw	r4,12(r16)
   86590:	80c00217 	ldw	r3,8(r16)
   86594:	89400054 	ori	r5,r17,1
   86598:	8445883a 	add	r2,r16,r17
   8659c:	20c00215 	stw	r3,8(r4)
   865a0:	19000315 	stw	r4,12(r3)
   865a4:	81400115 	stw	r5,4(r16)
   865a8:	1187883a 	add	r3,r2,r6
   865ac:	31000054 	ori	r4,r6,1
   865b0:	50800315 	stw	r2,12(r10)
   865b4:	50800215 	stw	r2,8(r10)
   865b8:	19800015 	stw	r6,0(r3)
   865bc:	11000115 	stw	r4,4(r2)
   865c0:	12800215 	stw	r10,8(r2)
   865c4:	12800315 	stw	r10,12(r2)
   865c8:	9009883a 	mov	r4,r18
   865cc:	008b8200 	call	8b820 <__malloc_unlock>
   865d0:	80c00204 	addi	r3,r16,8
   865d4:	003f5906 	br	8633c <_malloc_r+0x50>
   865d8:	8109883a 	add	r4,r16,r4
   865dc:	20800117 	ldw	r2,4(r4)
   865e0:	80c00217 	ldw	r3,8(r16)
   865e4:	81400317 	ldw	r5,12(r16)
   865e8:	10800054 	ori	r2,r2,1
   865ec:	20800115 	stw	r2,4(r4)
   865f0:	28c00215 	stw	r3,8(r5)
   865f4:	19400315 	stw	r5,12(r3)
   865f8:	9009883a 	mov	r4,r18
   865fc:	008b8200 	call	8b820 <__malloc_unlock>
   86600:	80c00204 	addi	r3,r16,8
   86604:	003f4d06 	br	8633c <_malloc_r+0x50>
   86608:	80800204 	addi	r2,r16,8
   8660c:	14000317 	ldw	r16,12(r2)
   86610:	143f911e 	bne	r2,r16,86458 <_malloc_r+0x16c>
   86614:	1a400084 	addi	r9,r3,2
   86618:	003f7306 	br	863e8 <_malloc_r+0xfc>
   8661c:	88c00054 	ori	r3,r17,1
   86620:	8445883a 	add	r2,r16,r17
   86624:	80c00115 	stw	r3,4(r16)
   86628:	003fdf06 	br	865a8 <_malloc_r+0x2bc>
   8662c:	e4000217 	ldw	r16,8(fp)
   86630:	00bfff04 	movi	r2,-4
   86634:	80c00117 	ldw	r3,4(r16)
   86638:	802d883a 	mov	r22,r16
   8663c:	18aa703a 	and	r21,r3,r2
   86640:	ac401636 	bltu	r21,r17,8669c <_malloc_r+0x3b0>
   86644:	ac49c83a 	sub	r4,r21,r17
   86648:	008003c4 	movi	r2,15
   8664c:	1100130e 	bge	r2,r4,8669c <_malloc_r+0x3b0>
   86650:	88800054 	ori	r2,r17,1
   86654:	8447883a 	add	r3,r16,r17
   86658:	80800115 	stw	r2,4(r16)
   8665c:	20800054 	ori	r2,r4,1
   86660:	18800115 	stw	r2,4(r3)
   86664:	e0c00215 	stw	r3,8(fp)
   86668:	9009883a 	mov	r4,r18
   8666c:	008b8200 	call	8b820 <__malloc_unlock>
   86670:	80c00204 	addi	r3,r16,8
   86674:	003f3106 	br	8633c <_malloc_r+0x50>
   86678:	39c00117 	ldw	r7,4(r7)
   8667c:	573ffe04 	addi	fp,r10,-8
   86680:	003fa006 	br	86504 <_malloc_r+0x218>
   86684:	00801504 	movi	r2,84
   86688:	10c06736 	bltu	r2,r3,86828 <_malloc_r+0x53c>
   8668c:	8804d33a 	srli	r2,r17,12
   86690:	11801b84 	addi	r6,r2,110
   86694:	300490fa 	slli	r2,r6,3
   86698:	003f4106 	br	863a0 <_malloc_r+0xb4>
   8669c:	d0a77117 	ldw	r2,-25148(gp)
   866a0:	d0e00b17 	ldw	r3,-32724(gp)
   866a4:	053fffc4 	movi	r20,-1
   866a8:	10800404 	addi	r2,r2,16
   866ac:	88a7883a 	add	r19,r17,r2
   866b0:	1d000326 	beq	r3,r20,866c0 <_malloc_r+0x3d4>
   866b4:	98c3ffc4 	addi	r3,r19,4095
   866b8:	00bc0004 	movi	r2,-4096
   866bc:	18a6703a 	and	r19,r3,r2
   866c0:	9009883a 	mov	r4,r18
   866c4:	980b883a 	mov	r5,r19
   866c8:	00884180 	call	88418 <_sbrk_r>
   866cc:	1009883a 	mov	r4,r2
   866d0:	15000426 	beq	r2,r20,866e4 <_malloc_r+0x3f8>
   866d4:	854b883a 	add	r5,r16,r21
   866d8:	1029883a 	mov	r20,r2
   866dc:	11405a2e 	bgeu	r2,r5,86848 <_malloc_r+0x55c>
   866e0:	87000c26 	beq	r16,fp,86714 <_malloc_r+0x428>
   866e4:	e4000217 	ldw	r16,8(fp)
   866e8:	80c00117 	ldw	r3,4(r16)
   866ec:	00bfff04 	movi	r2,-4
   866f0:	1884703a 	and	r2,r3,r2
   866f4:	14400336 	bltu	r2,r17,86704 <_malloc_r+0x418>
   866f8:	1449c83a 	sub	r4,r2,r17
   866fc:	008003c4 	movi	r2,15
   86700:	113fd316 	blt	r2,r4,86650 <_malloc_r+0x364>
   86704:	9009883a 	mov	r4,r18
   86708:	008b8200 	call	8b820 <__malloc_unlock>
   8670c:	0007883a 	mov	r3,zero
   86710:	003f0a06 	br	8633c <_malloc_r+0x50>
   86714:	05c00274 	movhi	r23,9
   86718:	bdc6cf04 	addi	r23,r23,6972
   8671c:	b8800017 	ldw	r2,0(r23)
   86720:	988d883a 	add	r6,r19,r2
   86724:	b9800015 	stw	r6,0(r23)
   86728:	d0e00b17 	ldw	r3,-32724(gp)
   8672c:	00bfffc4 	movi	r2,-1
   86730:	18808e26 	beq	r3,r2,8696c <_malloc_r+0x680>
   86734:	2145c83a 	sub	r2,r4,r5
   86738:	3085883a 	add	r2,r6,r2
   8673c:	b8800015 	stw	r2,0(r23)
   86740:	20c001cc 	andi	r3,r4,7
   86744:	18005f1e 	bne	r3,zero,868c4 <_malloc_r+0x5d8>
   86748:	000b883a 	mov	r5,zero
   8674c:	a4c5883a 	add	r2,r20,r19
   86750:	1083ffcc 	andi	r2,r2,4095
   86754:	00c40004 	movi	r3,4096
   86758:	1887c83a 	sub	r3,r3,r2
   8675c:	28e7883a 	add	r19,r5,r3
   86760:	9009883a 	mov	r4,r18
   86764:	980b883a 	mov	r5,r19
   86768:	00884180 	call	88418 <_sbrk_r>
   8676c:	1007883a 	mov	r3,r2
   86770:	00bfffc4 	movi	r2,-1
   86774:	18807a26 	beq	r3,r2,86960 <_malloc_r+0x674>
   86778:	1d05c83a 	sub	r2,r3,r20
   8677c:	9885883a 	add	r2,r19,r2
   86780:	10c00054 	ori	r3,r2,1
   86784:	b8800017 	ldw	r2,0(r23)
   86788:	a021883a 	mov	r16,r20
   8678c:	a0c00115 	stw	r3,4(r20)
   86790:	9885883a 	add	r2,r19,r2
   86794:	b8800015 	stw	r2,0(r23)
   86798:	e5000215 	stw	r20,8(fp)
   8679c:	b7003626 	beq	r22,fp,86878 <_malloc_r+0x58c>
   867a0:	018003c4 	movi	r6,15
   867a4:	35404b36 	bltu	r6,r21,868d4 <_malloc_r+0x5e8>
   867a8:	00800044 	movi	r2,1
   867ac:	a0800115 	stw	r2,4(r20)
   867b0:	003fcd06 	br	866e8 <_malloc_r+0x3fc>
   867b4:	2808d27a 	srli	r4,r5,9
   867b8:	2000371e 	bne	r4,zero,86898 <_malloc_r+0x5ac>
   867bc:	2808d0fa 	srli	r4,r5,3
   867c0:	200690fa 	slli	r3,r4,3
   867c4:	1ad1883a 	add	r8,r3,r11
   867c8:	41800217 	ldw	r6,8(r8)
   867cc:	41805b26 	beq	r8,r6,8693c <_malloc_r+0x650>
   867d0:	30800117 	ldw	r2,4(r6)
   867d4:	00ffff04 	movi	r3,-4
   867d8:	10c4703a 	and	r2,r2,r3
   867dc:	2880022e 	bgeu	r5,r2,867e8 <_malloc_r+0x4fc>
   867e0:	31800217 	ldw	r6,8(r6)
   867e4:	41bffa1e 	bne	r8,r6,867d0 <_malloc_r+0x4e4>
   867e8:	32000317 	ldw	r8,12(r6)
   867ec:	39c00117 	ldw	r7,4(r7)
   867f0:	82000315 	stw	r8,12(r16)
   867f4:	81800215 	stw	r6,8(r16)
   867f8:	07000274 	movhi	fp,9
   867fc:	e739d004 	addi	fp,fp,-6336
   86800:	34000315 	stw	r16,12(r6)
   86804:	44000215 	stw	r16,8(r8)
   86808:	003f3e06 	br	86504 <_malloc_r+0x218>
   8680c:	63000044 	addi	r12,r12,1
   86810:	608000cc 	andi	r2,r12,3
   86814:	10005d26 	beq	r2,zero,8698c <_malloc_r+0x6a0>
   86818:	18c00204 	addi	r3,r3,8
   8681c:	003f5106 	br	86564 <_malloc_r+0x278>
   86820:	8089883a 	add	r4,r16,r2
   86824:	003f6d06 	br	865dc <_malloc_r+0x2f0>
   86828:	00805504 	movi	r2,340
   8682c:	10c02036 	bltu	r2,r3,868b0 <_malloc_r+0x5c4>
   86830:	8804d3fa 	srli	r2,r17,15
   86834:	11801dc4 	addi	r6,r2,119
   86838:	300490fa 	slli	r2,r6,3
   8683c:	003ed806 	br	863a0 <_malloc_r+0xb4>
   86840:	48c000c4 	addi	r3,r9,3
   86844:	003f3106 	br	8650c <_malloc_r+0x220>
   86848:	05c00274 	movhi	r23,9
   8684c:	bdc6cf04 	addi	r23,r23,6972
   86850:	b8800017 	ldw	r2,0(r23)
   86854:	988d883a 	add	r6,r19,r2
   86858:	b9800015 	stw	r6,0(r23)
   8685c:	293fb21e 	bne	r5,r4,86728 <_malloc_r+0x43c>
   86860:	2083ffcc 	andi	r2,r4,4095
   86864:	103fb01e 	bne	r2,zero,86728 <_malloc_r+0x43c>
   86868:	e4000217 	ldw	r16,8(fp)
   8686c:	9d45883a 	add	r2,r19,r21
   86870:	10800054 	ori	r2,r2,1
   86874:	80800115 	stw	r2,4(r16)
   86878:	b8c00017 	ldw	r3,0(r23)
   8687c:	d0a77217 	ldw	r2,-25144(gp)
   86880:	10c0012e 	bgeu	r2,r3,86888 <_malloc_r+0x59c>
   86884:	d0e77215 	stw	r3,-25144(gp)
   86888:	d0a77317 	ldw	r2,-25140(gp)
   8688c:	10ff962e 	bgeu	r2,r3,866e8 <_malloc_r+0x3fc>
   86890:	d0e77315 	stw	r3,-25140(gp)
   86894:	003f9406 	br	866e8 <_malloc_r+0x3fc>
   86898:	00800104 	movi	r2,4
   8689c:	11001e36 	bltu	r2,r4,86918 <_malloc_r+0x62c>
   868a0:	2804d1ba 	srli	r2,r5,6
   868a4:	11000e04 	addi	r4,r2,56
   868a8:	200690fa 	slli	r3,r4,3
   868ac:	003fc506 	br	867c4 <_malloc_r+0x4d8>
   868b0:	00815504 	movi	r2,1364
   868b4:	10c01d2e 	bgeu	r2,r3,8692c <_malloc_r+0x640>
   868b8:	01801f84 	movi	r6,126
   868bc:	0080fc04 	movi	r2,1008
   868c0:	003eb706 	br	863a0 <_malloc_r+0xb4>
   868c4:	00800204 	movi	r2,8
   868c8:	10cbc83a 	sub	r5,r2,r3
   868cc:	2169883a 	add	r20,r4,r5
   868d0:	003f9e06 	br	8674c <_malloc_r+0x460>
   868d4:	00bffe04 	movi	r2,-8
   868d8:	a93ffd04 	addi	r4,r21,-12
   868dc:	2088703a 	and	r4,r4,r2
   868e0:	b10b883a 	add	r5,r22,r4
   868e4:	00c00144 	movi	r3,5
   868e8:	28c00215 	stw	r3,8(r5)
   868ec:	28c00115 	stw	r3,4(r5)
   868f0:	b0800117 	ldw	r2,4(r22)
   868f4:	1080004c 	andi	r2,r2,1
   868f8:	2084b03a 	or	r2,r4,r2
   868fc:	b0800115 	stw	r2,4(r22)
   86900:	313fdd2e 	bgeu	r6,r4,86878 <_malloc_r+0x58c>
   86904:	b1400204 	addi	r5,r22,8
   86908:	9009883a 	mov	r4,r18
   8690c:	00857640 	call	85764 <_free_r>
   86910:	e4000217 	ldw	r16,8(fp)
   86914:	003fd806 	br	86878 <_malloc_r+0x58c>
   86918:	00800504 	movi	r2,20
   8691c:	11001536 	bltu	r2,r4,86974 <_malloc_r+0x688>
   86920:	210016c4 	addi	r4,r4,91
   86924:	200690fa 	slli	r3,r4,3
   86928:	003fa606 	br	867c4 <_malloc_r+0x4d8>
   8692c:	8804d4ba 	srli	r2,r17,18
   86930:	11801f04 	addi	r6,r2,124
   86934:	300490fa 	slli	r2,r6,3
   86938:	003e9906 	br	863a0 <_malloc_r+0xb4>
   8693c:	2009d0ba 	srai	r4,r4,2
   86940:	01400274 	movhi	r5,9
   86944:	2979d004 	addi	r5,r5,-6336
   86948:	00c00044 	movi	r3,1
   8694c:	28800117 	ldw	r2,4(r5)
   86950:	1906983a 	sll	r3,r3,r4
   86954:	10c4b03a 	or	r2,r2,r3
   86958:	28800115 	stw	r2,4(r5)
   8695c:	003fa306 	br	867ec <_malloc_r+0x500>
   86960:	0027883a 	mov	r19,zero
   86964:	00c00044 	movi	r3,1
   86968:	003f8606 	br	86784 <_malloc_r+0x498>
   8696c:	d1200b15 	stw	r4,-32724(gp)
   86970:	003f7306 	br	86740 <_malloc_r+0x454>
   86974:	00801504 	movi	r2,84
   86978:	11001936 	bltu	r2,r4,869e0 <_malloc_r+0x6f4>
   8697c:	2804d33a 	srli	r2,r5,12
   86980:	11001b84 	addi	r4,r2,110
   86984:	200690fa 	slli	r3,r4,3
   86988:	003f8e06 	br	867c4 <_malloc_r+0x4d8>
   8698c:	480b883a 	mov	r5,r9
   86990:	6807883a 	mov	r3,r13
   86994:	288000cc 	andi	r2,r5,3
   86998:	18fffe04 	addi	r3,r3,-8
   8699c:	297fffc4 	addi	r5,r5,-1
   869a0:	10001526 	beq	r2,zero,869f8 <_malloc_r+0x70c>
   869a4:	18800217 	ldw	r2,8(r3)
   869a8:	10fffa26 	beq	r2,r3,86994 <_malloc_r+0x6a8>
   869ac:	2109883a 	add	r4,r4,r4
   869b0:	393f1e36 	bltu	r7,r4,8662c <_malloc_r+0x340>
   869b4:	203f1d26 	beq	r4,zero,8662c <_malloc_r+0x340>
   869b8:	21c4703a 	and	r2,r4,r7
   869bc:	10000226 	beq	r2,zero,869c8 <_malloc_r+0x6dc>
   869c0:	6013883a 	mov	r9,r12
   869c4:	003ee106 	br	8654c <_malloc_r+0x260>
   869c8:	2109883a 	add	r4,r4,r4
   869cc:	3904703a 	and	r2,r7,r4
   869d0:	63000104 	addi	r12,r12,4
   869d4:	103ffc26 	beq	r2,zero,869c8 <_malloc_r+0x6dc>
   869d8:	6013883a 	mov	r9,r12
   869dc:	003edb06 	br	8654c <_malloc_r+0x260>
   869e0:	00805504 	movi	r2,340
   869e4:	11000836 	bltu	r2,r4,86a08 <_malloc_r+0x71c>
   869e8:	2804d3fa 	srli	r2,r5,15
   869ec:	11001dc4 	addi	r4,r2,119
   869f0:	200690fa 	slli	r3,r4,3
   869f4:	003f7306 	br	867c4 <_malloc_r+0x4d8>
   869f8:	0104303a 	nor	r2,zero,r4
   869fc:	388e703a 	and	r7,r7,r2
   86a00:	e1c00115 	stw	r7,4(fp)
   86a04:	003fe906 	br	869ac <_malloc_r+0x6c0>
   86a08:	00815504 	movi	r2,1364
   86a0c:	1100032e 	bgeu	r2,r4,86a1c <_malloc_r+0x730>
   86a10:	01001f84 	movi	r4,126
   86a14:	00c0fc04 	movi	r3,1008
   86a18:	003f6a06 	br	867c4 <_malloc_r+0x4d8>
   86a1c:	2804d4ba 	srli	r2,r5,18
   86a20:	11001f04 	addi	r4,r2,124
   86a24:	200690fa 	slli	r3,r4,3
   86a28:	003f6606 	br	867c4 <_malloc_r+0x4d8>

00086a2c <memchr>:
   86a2c:	008000c4 	movi	r2,3
   86a30:	29403fcc 	andi	r5,r5,255
   86a34:	2007883a 	mov	r3,r4
   86a38:	1180022e 	bgeu	r2,r6,86a44 <memchr+0x18>
   86a3c:	2084703a 	and	r2,r4,r2
   86a40:	10000b26 	beq	r2,zero,86a70 <memchr+0x44>
   86a44:	313fffc4 	addi	r4,r6,-1
   86a48:	3000051e 	bne	r6,zero,86a60 <memchr+0x34>
   86a4c:	00002c06 	br	86b00 <memchr+0xd4>
   86a50:	213fffc4 	addi	r4,r4,-1
   86a54:	00bfffc4 	movi	r2,-1
   86a58:	18c00044 	addi	r3,r3,1
   86a5c:	20802826 	beq	r4,r2,86b00 <memchr+0xd4>
   86a60:	18800003 	ldbu	r2,0(r3)
   86a64:	28bffa1e 	bne	r5,r2,86a50 <memchr+0x24>
   86a68:	1805883a 	mov	r2,r3
   86a6c:	f800283a 	ret
   86a70:	0011883a 	mov	r8,zero
   86a74:	0007883a 	mov	r3,zero
   86a78:	01c00104 	movi	r7,4
   86a7c:	4004923a 	slli	r2,r8,8
   86a80:	18c00044 	addi	r3,r3,1
   86a84:	1151883a 	add	r8,r2,r5
   86a88:	19fffc1e 	bne	r3,r7,86a7c <memchr+0x50>
   86a8c:	02bfbff4 	movhi	r10,65279
   86a90:	52bfbfc4 	addi	r10,r10,-257
   86a94:	02602074 	movhi	r9,32897
   86a98:	4a602004 	addi	r9,r9,-32640
   86a9c:	02c000c4 	movi	r11,3
   86aa0:	20800017 	ldw	r2,0(r4)
   86aa4:	31bfff04 	addi	r6,r6,-4
   86aa8:	200f883a 	mov	r7,r4
   86aac:	1204f03a 	xor	r2,r2,r8
   86ab0:	1287883a 	add	r3,r2,r10
   86ab4:	1a46703a 	and	r3,r3,r9
   86ab8:	0084303a 	nor	r2,zero,r2
   86abc:	10c4703a 	and	r2,r2,r3
   86ac0:	10000b26 	beq	r2,zero,86af0 <memchr+0xc4>
   86ac4:	20800003 	ldbu	r2,0(r4)
   86ac8:	28800f26 	beq	r5,r2,86b08 <memchr+0xdc>
   86acc:	20800043 	ldbu	r2,1(r4)
   86ad0:	21c00044 	addi	r7,r4,1
   86ad4:	28800c26 	beq	r5,r2,86b08 <memchr+0xdc>
   86ad8:	20800083 	ldbu	r2,2(r4)
   86adc:	21c00084 	addi	r7,r4,2
   86ae0:	28800926 	beq	r5,r2,86b08 <memchr+0xdc>
   86ae4:	208000c3 	ldbu	r2,3(r4)
   86ae8:	21c000c4 	addi	r7,r4,3
   86aec:	28800626 	beq	r5,r2,86b08 <memchr+0xdc>
   86af0:	21000104 	addi	r4,r4,4
   86af4:	59bfea36 	bltu	r11,r6,86aa0 <memchr+0x74>
   86af8:	2007883a 	mov	r3,r4
   86afc:	003fd106 	br	86a44 <memchr+0x18>
   86b00:	0005883a 	mov	r2,zero
   86b04:	f800283a 	ret
   86b08:	3805883a 	mov	r2,r7
   86b0c:	f800283a 	ret

00086b10 <memcpy>:
   86b10:	01c003c4 	movi	r7,15
   86b14:	2007883a 	mov	r3,r4
   86b18:	3980032e 	bgeu	r7,r6,86b28 <memcpy+0x18>
   86b1c:	2904b03a 	or	r2,r5,r4
   86b20:	108000cc 	andi	r2,r2,3
   86b24:	10000926 	beq	r2,zero,86b4c <memcpy+0x3c>
   86b28:	30000626 	beq	r6,zero,86b44 <memcpy+0x34>
   86b2c:	30cd883a 	add	r6,r6,r3
   86b30:	28800003 	ldbu	r2,0(r5)
   86b34:	29400044 	addi	r5,r5,1
   86b38:	18800005 	stb	r2,0(r3)
   86b3c:	18c00044 	addi	r3,r3,1
   86b40:	30fffb1e 	bne	r6,r3,86b30 <memcpy+0x20>
   86b44:	2005883a 	mov	r2,r4
   86b48:	f800283a 	ret
   86b4c:	3811883a 	mov	r8,r7
   86b50:	200f883a 	mov	r7,r4
   86b54:	28c00017 	ldw	r3,0(r5)
   86b58:	31bffc04 	addi	r6,r6,-16
   86b5c:	38c00015 	stw	r3,0(r7)
   86b60:	28800117 	ldw	r2,4(r5)
   86b64:	38800115 	stw	r2,4(r7)
   86b68:	28c00217 	ldw	r3,8(r5)
   86b6c:	38c00215 	stw	r3,8(r7)
   86b70:	28800317 	ldw	r2,12(r5)
   86b74:	29400404 	addi	r5,r5,16
   86b78:	38800315 	stw	r2,12(r7)
   86b7c:	39c00404 	addi	r7,r7,16
   86b80:	41bff436 	bltu	r8,r6,86b54 <memcpy+0x44>
   86b84:	008000c4 	movi	r2,3
   86b88:	1180072e 	bgeu	r2,r6,86ba8 <memcpy+0x98>
   86b8c:	1007883a 	mov	r3,r2
   86b90:	28800017 	ldw	r2,0(r5)
   86b94:	31bfff04 	addi	r6,r6,-4
   86b98:	29400104 	addi	r5,r5,4
   86b9c:	38800015 	stw	r2,0(r7)
   86ba0:	39c00104 	addi	r7,r7,4
   86ba4:	19bffa36 	bltu	r3,r6,86b90 <memcpy+0x80>
   86ba8:	3807883a 	mov	r3,r7
   86bac:	003fde06 	br	86b28 <memcpy+0x18>

00086bb0 <memmove>:
   86bb0:	2807883a 	mov	r3,r5
   86bb4:	2011883a 	mov	r8,r4
   86bb8:	29000c2e 	bgeu	r5,r4,86bec <memmove+0x3c>
   86bbc:	298f883a 	add	r7,r5,r6
   86bc0:	21c00a2e 	bgeu	r4,r7,86bec <memmove+0x3c>
   86bc4:	30000726 	beq	r6,zero,86be4 <memmove+0x34>
   86bc8:	2187883a 	add	r3,r4,r6
   86bcc:	198dc83a 	sub	r6,r3,r6
   86bd0:	39ffffc4 	addi	r7,r7,-1
   86bd4:	38800003 	ldbu	r2,0(r7)
   86bd8:	18ffffc4 	addi	r3,r3,-1
   86bdc:	18800005 	stb	r2,0(r3)
   86be0:	19bffb1e 	bne	r3,r6,86bd0 <memmove+0x20>
   86be4:	2005883a 	mov	r2,r4
   86be8:	f800283a 	ret
   86bec:	01c003c4 	movi	r7,15
   86bf0:	39800a36 	bltu	r7,r6,86c1c <memmove+0x6c>
   86bf4:	303ffb26 	beq	r6,zero,86be4 <memmove+0x34>
   86bf8:	400f883a 	mov	r7,r8
   86bfc:	320d883a 	add	r6,r6,r8
   86c00:	28800003 	ldbu	r2,0(r5)
   86c04:	29400044 	addi	r5,r5,1
   86c08:	38800005 	stb	r2,0(r7)
   86c0c:	39c00044 	addi	r7,r7,1
   86c10:	39bffb1e 	bne	r7,r6,86c00 <memmove+0x50>
   86c14:	2005883a 	mov	r2,r4
   86c18:	f800283a 	ret
   86c1c:	1904b03a 	or	r2,r3,r4
   86c20:	108000cc 	andi	r2,r2,3
   86c24:	103ff31e 	bne	r2,zero,86bf4 <memmove+0x44>
   86c28:	3811883a 	mov	r8,r7
   86c2c:	180b883a 	mov	r5,r3
   86c30:	200f883a 	mov	r7,r4
   86c34:	28c00017 	ldw	r3,0(r5)
   86c38:	31bffc04 	addi	r6,r6,-16
   86c3c:	38c00015 	stw	r3,0(r7)
   86c40:	28800117 	ldw	r2,4(r5)
   86c44:	38800115 	stw	r2,4(r7)
   86c48:	28c00217 	ldw	r3,8(r5)
   86c4c:	38c00215 	stw	r3,8(r7)
   86c50:	28800317 	ldw	r2,12(r5)
   86c54:	29400404 	addi	r5,r5,16
   86c58:	38800315 	stw	r2,12(r7)
   86c5c:	39c00404 	addi	r7,r7,16
   86c60:	41bff436 	bltu	r8,r6,86c34 <memmove+0x84>
   86c64:	008000c4 	movi	r2,3
   86c68:	1180072e 	bgeu	r2,r6,86c88 <memmove+0xd8>
   86c6c:	1007883a 	mov	r3,r2
   86c70:	28800017 	ldw	r2,0(r5)
   86c74:	31bfff04 	addi	r6,r6,-4
   86c78:	29400104 	addi	r5,r5,4
   86c7c:	38800015 	stw	r2,0(r7)
   86c80:	39c00104 	addi	r7,r7,4
   86c84:	19bffa36 	bltu	r3,r6,86c70 <memmove+0xc0>
   86c88:	3811883a 	mov	r8,r7
   86c8c:	003fd906 	br	86bf4 <memmove+0x44>

00086c90 <memset>:
   86c90:	008000c4 	movi	r2,3
   86c94:	29403fcc 	andi	r5,r5,255
   86c98:	2007883a 	mov	r3,r4
   86c9c:	1180022e 	bgeu	r2,r6,86ca8 <memset+0x18>
   86ca0:	2084703a 	and	r2,r4,r2
   86ca4:	10000826 	beq	r2,zero,86cc8 <memset+0x38>
   86ca8:	30000526 	beq	r6,zero,86cc0 <memset+0x30>
   86cac:	2805883a 	mov	r2,r5
   86cb0:	30cd883a 	add	r6,r6,r3
   86cb4:	18800005 	stb	r2,0(r3)
   86cb8:	18c00044 	addi	r3,r3,1
   86cbc:	19bffd1e 	bne	r3,r6,86cb4 <memset+0x24>
   86cc0:	2005883a 	mov	r2,r4
   86cc4:	f800283a 	ret
   86cc8:	2804923a 	slli	r2,r5,8
   86ccc:	020003c4 	movi	r8,15
   86cd0:	200f883a 	mov	r7,r4
   86cd4:	2884b03a 	or	r2,r5,r2
   86cd8:	1006943a 	slli	r3,r2,16
   86cdc:	10c6b03a 	or	r3,r2,r3
   86ce0:	41800a2e 	bgeu	r8,r6,86d0c <memset+0x7c>
   86ce4:	4005883a 	mov	r2,r8
   86ce8:	31bffc04 	addi	r6,r6,-16
   86cec:	38c00015 	stw	r3,0(r7)
   86cf0:	38c00115 	stw	r3,4(r7)
   86cf4:	38c00215 	stw	r3,8(r7)
   86cf8:	38c00315 	stw	r3,12(r7)
   86cfc:	39c00404 	addi	r7,r7,16
   86d00:	11bff936 	bltu	r2,r6,86ce8 <memset+0x58>
   86d04:	008000c4 	movi	r2,3
   86d08:	1180052e 	bgeu	r2,r6,86d20 <memset+0x90>
   86d0c:	31bfff04 	addi	r6,r6,-4
   86d10:	008000c4 	movi	r2,3
   86d14:	38c00015 	stw	r3,0(r7)
   86d18:	39c00104 	addi	r7,r7,4
   86d1c:	11bffb36 	bltu	r2,r6,86d0c <memset+0x7c>
   86d20:	3807883a 	mov	r3,r7
   86d24:	003fe006 	br	86ca8 <memset+0x18>

00086d28 <_Bfree>:
   86d28:	28000826 	beq	r5,zero,86d4c <_Bfree+0x24>
   86d2c:	28800117 	ldw	r2,4(r5)
   86d30:	21001317 	ldw	r4,76(r4)
   86d34:	1085883a 	add	r2,r2,r2
   86d38:	1085883a 	add	r2,r2,r2
   86d3c:	1105883a 	add	r2,r2,r4
   86d40:	10c00017 	ldw	r3,0(r2)
   86d44:	28c00015 	stw	r3,0(r5)
   86d48:	11400015 	stw	r5,0(r2)
   86d4c:	f800283a 	ret

00086d50 <__hi0bits>:
   86d50:	20bfffec 	andhi	r2,r4,65535
   86d54:	10001426 	beq	r2,zero,86da8 <__hi0bits+0x58>
   86d58:	0007883a 	mov	r3,zero
   86d5c:	20bfc02c 	andhi	r2,r4,65280
   86d60:	1000021e 	bne	r2,zero,86d6c <__hi0bits+0x1c>
   86d64:	2008923a 	slli	r4,r4,8
   86d68:	18c00204 	addi	r3,r3,8
   86d6c:	20bc002c 	andhi	r2,r4,61440
   86d70:	1000021e 	bne	r2,zero,86d7c <__hi0bits+0x2c>
   86d74:	2008913a 	slli	r4,r4,4
   86d78:	18c00104 	addi	r3,r3,4
   86d7c:	20b0002c 	andhi	r2,r4,49152
   86d80:	1000031e 	bne	r2,zero,86d90 <__hi0bits+0x40>
   86d84:	2105883a 	add	r2,r4,r4
   86d88:	18c00084 	addi	r3,r3,2
   86d8c:	1089883a 	add	r4,r2,r2
   86d90:	20000316 	blt	r4,zero,86da0 <__hi0bits+0x50>
   86d94:	2090002c 	andhi	r2,r4,16384
   86d98:	10000626 	beq	r2,zero,86db4 <__hi0bits+0x64>
   86d9c:	18c00044 	addi	r3,r3,1
   86da0:	1805883a 	mov	r2,r3
   86da4:	f800283a 	ret
   86da8:	2008943a 	slli	r4,r4,16
   86dac:	00c00404 	movi	r3,16
   86db0:	003fea06 	br	86d5c <__hi0bits+0xc>
   86db4:	00c00804 	movi	r3,32
   86db8:	1805883a 	mov	r2,r3
   86dbc:	f800283a 	ret

00086dc0 <__lo0bits>:
   86dc0:	20c00017 	ldw	r3,0(r4)
   86dc4:	188001cc 	andi	r2,r3,7
   86dc8:	10000a26 	beq	r2,zero,86df4 <__lo0bits+0x34>
   86dcc:	1880004c 	andi	r2,r3,1
   86dd0:	1005003a 	cmpeq	r2,r2,zero
   86dd4:	10002126 	beq	r2,zero,86e5c <__lo0bits+0x9c>
   86dd8:	1880008c 	andi	r2,r3,2
   86ddc:	1000251e 	bne	r2,zero,86e74 <__lo0bits+0xb4>
   86de0:	1804d0ba 	srli	r2,r3,2
   86de4:	01400084 	movi	r5,2
   86de8:	20800015 	stw	r2,0(r4)
   86dec:	2805883a 	mov	r2,r5
   86df0:	f800283a 	ret
   86df4:	18bfffcc 	andi	r2,r3,65535
   86df8:	10001526 	beq	r2,zero,86e50 <__lo0bits+0x90>
   86dfc:	000b883a 	mov	r5,zero
   86e00:	18803fcc 	andi	r2,r3,255
   86e04:	1000021e 	bne	r2,zero,86e10 <__lo0bits+0x50>
   86e08:	1806d23a 	srli	r3,r3,8
   86e0c:	29400204 	addi	r5,r5,8
   86e10:	188003cc 	andi	r2,r3,15
   86e14:	1000021e 	bne	r2,zero,86e20 <__lo0bits+0x60>
   86e18:	1806d13a 	srli	r3,r3,4
   86e1c:	29400104 	addi	r5,r5,4
   86e20:	188000cc 	andi	r2,r3,3
   86e24:	1000021e 	bne	r2,zero,86e30 <__lo0bits+0x70>
   86e28:	1806d0ba 	srli	r3,r3,2
   86e2c:	29400084 	addi	r5,r5,2
   86e30:	1880004c 	andi	r2,r3,1
   86e34:	1000031e 	bne	r2,zero,86e44 <__lo0bits+0x84>
   86e38:	1806d07a 	srli	r3,r3,1
   86e3c:	18000a26 	beq	r3,zero,86e68 <__lo0bits+0xa8>
   86e40:	29400044 	addi	r5,r5,1
   86e44:	2805883a 	mov	r2,r5
   86e48:	20c00015 	stw	r3,0(r4)
   86e4c:	f800283a 	ret
   86e50:	1806d43a 	srli	r3,r3,16
   86e54:	01400404 	movi	r5,16
   86e58:	003fe906 	br	86e00 <__lo0bits+0x40>
   86e5c:	000b883a 	mov	r5,zero
   86e60:	2805883a 	mov	r2,r5
   86e64:	f800283a 	ret
   86e68:	01400804 	movi	r5,32
   86e6c:	2805883a 	mov	r2,r5
   86e70:	f800283a 	ret
   86e74:	1804d07a 	srli	r2,r3,1
   86e78:	01400044 	movi	r5,1
   86e7c:	20800015 	stw	r2,0(r4)
   86e80:	003fda06 	br	86dec <__lo0bits+0x2c>

00086e84 <__mcmp>:
   86e84:	20800417 	ldw	r2,16(r4)
   86e88:	28c00417 	ldw	r3,16(r5)
   86e8c:	10cfc83a 	sub	r7,r2,r3
   86e90:	38000c1e 	bne	r7,zero,86ec4 <__mcmp+0x40>
   86e94:	18c5883a 	add	r2,r3,r3
   86e98:	1085883a 	add	r2,r2,r2
   86e9c:	10c00504 	addi	r3,r2,20
   86ea0:	21000504 	addi	r4,r4,20
   86ea4:	28cb883a 	add	r5,r5,r3
   86ea8:	2085883a 	add	r2,r4,r2
   86eac:	10bfff04 	addi	r2,r2,-4
   86eb0:	297fff04 	addi	r5,r5,-4
   86eb4:	11800017 	ldw	r6,0(r2)
   86eb8:	28c00017 	ldw	r3,0(r5)
   86ebc:	30c0031e 	bne	r6,r3,86ecc <__mcmp+0x48>
   86ec0:	20bffa36 	bltu	r4,r2,86eac <__mcmp+0x28>
   86ec4:	3805883a 	mov	r2,r7
   86ec8:	f800283a 	ret
   86ecc:	30c00336 	bltu	r6,r3,86edc <__mcmp+0x58>
   86ed0:	01c00044 	movi	r7,1
   86ed4:	3805883a 	mov	r2,r7
   86ed8:	f800283a 	ret
   86edc:	01ffffc4 	movi	r7,-1
   86ee0:	003ff806 	br	86ec4 <__mcmp+0x40>

00086ee4 <__ulp>:
   86ee4:	295ffc2c 	andhi	r5,r5,32752
   86ee8:	013f3034 	movhi	r4,64704
   86eec:	290b883a 	add	r5,r5,r4
   86ef0:	0145c83a 	sub	r2,zero,r5
   86ef4:	1007d53a 	srai	r3,r2,20
   86ef8:	000d883a 	mov	r6,zero
   86efc:	0140040e 	bge	zero,r5,86f10 <__ulp+0x2c>
   86f00:	280f883a 	mov	r7,r5
   86f04:	3807883a 	mov	r3,r7
   86f08:	3005883a 	mov	r2,r6
   86f0c:	f800283a 	ret
   86f10:	008004c4 	movi	r2,19
   86f14:	193ffb04 	addi	r4,r3,-20
   86f18:	10c00c0e 	bge	r2,r3,86f4c <__ulp+0x68>
   86f1c:	008007c4 	movi	r2,31
   86f20:	1107c83a 	sub	r3,r2,r4
   86f24:	00800784 	movi	r2,30
   86f28:	01400044 	movi	r5,1
   86f2c:	11000216 	blt	r2,r4,86f38 <__ulp+0x54>
   86f30:	00800044 	movi	r2,1
   86f34:	10ca983a 	sll	r5,r2,r3
   86f38:	000f883a 	mov	r7,zero
   86f3c:	280d883a 	mov	r6,r5
   86f40:	3807883a 	mov	r3,r7
   86f44:	3005883a 	mov	r2,r6
   86f48:	f800283a 	ret
   86f4c:	00800234 	movhi	r2,8
   86f50:	10cfd83a 	sra	r7,r2,r3
   86f54:	000d883a 	mov	r6,zero
   86f58:	3005883a 	mov	r2,r6
   86f5c:	3807883a 	mov	r3,r7
   86f60:	f800283a 	ret

00086f64 <__b2d>:
   86f64:	20800417 	ldw	r2,16(r4)
   86f68:	defff904 	addi	sp,sp,-28
   86f6c:	dd000415 	stw	r20,16(sp)
   86f70:	1085883a 	add	r2,r2,r2
   86f74:	25000504 	addi	r20,r4,20
   86f78:	1085883a 	add	r2,r2,r2
   86f7c:	dc000015 	stw	r16,0(sp)
   86f80:	a0a1883a 	add	r16,r20,r2
   86f84:	dd400515 	stw	r21,20(sp)
   86f88:	857fff17 	ldw	r21,-4(r16)
   86f8c:	dc400115 	stw	r17,4(sp)
   86f90:	dfc00615 	stw	ra,24(sp)
   86f94:	a809883a 	mov	r4,r21
   86f98:	2823883a 	mov	r17,r5
   86f9c:	dcc00315 	stw	r19,12(sp)
   86fa0:	dc800215 	stw	r18,8(sp)
   86fa4:	0086d500 	call	86d50 <__hi0bits>
   86fa8:	100b883a 	mov	r5,r2
   86fac:	00800804 	movi	r2,32
   86fb0:	1145c83a 	sub	r2,r2,r5
   86fb4:	88800015 	stw	r2,0(r17)
   86fb8:	00800284 	movi	r2,10
   86fbc:	80ffff04 	addi	r3,r16,-4
   86fc0:	11401416 	blt	r2,r5,87014 <__b2d+0xb0>
   86fc4:	008002c4 	movi	r2,11
   86fc8:	1149c83a 	sub	r4,r2,r5
   86fcc:	a0c02736 	bltu	r20,r3,8706c <__b2d+0x108>
   86fd0:	000d883a 	mov	r6,zero
   86fd4:	28800544 	addi	r2,r5,21
   86fd8:	a906d83a 	srl	r3,r21,r4
   86fdc:	a884983a 	sll	r2,r21,r2
   86fe0:	1ccffc34 	orhi	r19,r3,16368
   86fe4:	11a4b03a 	or	r18,r2,r6
   86fe8:	9005883a 	mov	r2,r18
   86fec:	9807883a 	mov	r3,r19
   86ff0:	dfc00617 	ldw	ra,24(sp)
   86ff4:	dd400517 	ldw	r21,20(sp)
   86ff8:	dd000417 	ldw	r20,16(sp)
   86ffc:	dcc00317 	ldw	r19,12(sp)
   87000:	dc800217 	ldw	r18,8(sp)
   87004:	dc400117 	ldw	r17,4(sp)
   87008:	dc000017 	ldw	r16,0(sp)
   8700c:	dec00704 	addi	sp,sp,28
   87010:	f800283a 	ret
   87014:	a0c00e36 	bltu	r20,r3,87050 <__b2d+0xec>
   87018:	293ffd44 	addi	r4,r5,-11
   8701c:	000d883a 	mov	r6,zero
   87020:	20000f26 	beq	r4,zero,87060 <__b2d+0xfc>
   87024:	00800804 	movi	r2,32
   87028:	110bc83a 	sub	r5,r2,r4
   8702c:	a0c01236 	bltu	r20,r3,87078 <__b2d+0x114>
   87030:	000f883a 	mov	r7,zero
   87034:	a904983a 	sll	r2,r21,r4
   87038:	3146d83a 	srl	r3,r6,r5
   8703c:	3108983a 	sll	r4,r6,r4
   87040:	108ffc34 	orhi	r2,r2,16368
   87044:	18a6b03a 	or	r19,r3,r2
   87048:	3924b03a 	or	r18,r7,r4
   8704c:	003fe606 	br	86fe8 <__b2d+0x84>
   87050:	293ffd44 	addi	r4,r5,-11
   87054:	81bffe17 	ldw	r6,-8(r16)
   87058:	80fffe04 	addi	r3,r16,-8
   8705c:	203ff11e 	bne	r4,zero,87024 <__b2d+0xc0>
   87060:	accffc34 	orhi	r19,r21,16368
   87064:	3025883a 	mov	r18,r6
   87068:	003fdf06 	br	86fe8 <__b2d+0x84>
   8706c:	18bfff17 	ldw	r2,-4(r3)
   87070:	110cd83a 	srl	r6,r2,r4
   87074:	003fd706 	br	86fd4 <__b2d+0x70>
   87078:	18bfff17 	ldw	r2,-4(r3)
   8707c:	114ed83a 	srl	r7,r2,r5
   87080:	003fec06 	br	87034 <__b2d+0xd0>

00087084 <__ratio>:
   87084:	defff904 	addi	sp,sp,-28
   87088:	dc400215 	stw	r17,8(sp)
   8708c:	2823883a 	mov	r17,r5
   87090:	d80b883a 	mov	r5,sp
   87094:	dfc00615 	stw	ra,24(sp)
   87098:	dd000515 	stw	r20,20(sp)
   8709c:	dcc00415 	stw	r19,16(sp)
   870a0:	dc800315 	stw	r18,12(sp)
   870a4:	2025883a 	mov	r18,r4
   870a8:	0086f640 	call	86f64 <__b2d>
   870ac:	8809883a 	mov	r4,r17
   870b0:	d9400104 	addi	r5,sp,4
   870b4:	1027883a 	mov	r19,r2
   870b8:	1829883a 	mov	r20,r3
   870bc:	0086f640 	call	86f64 <__b2d>
   870c0:	89000417 	ldw	r4,16(r17)
   870c4:	91c00417 	ldw	r7,16(r18)
   870c8:	d9800117 	ldw	r6,4(sp)
   870cc:	180b883a 	mov	r5,r3
   870d0:	390fc83a 	sub	r7,r7,r4
   870d4:	1009883a 	mov	r4,r2
   870d8:	d8800017 	ldw	r2,0(sp)
   870dc:	380e917a 	slli	r7,r7,5
   870e0:	2011883a 	mov	r8,r4
   870e4:	1185c83a 	sub	r2,r2,r6
   870e8:	11c5883a 	add	r2,r2,r7
   870ec:	1006953a 	slli	r3,r2,20
   870f0:	2813883a 	mov	r9,r5
   870f4:	00800d0e 	bge	zero,r2,8712c <__ratio+0xa8>
   870f8:	1d29883a 	add	r20,r3,r20
   870fc:	a00b883a 	mov	r5,r20
   87100:	480f883a 	mov	r7,r9
   87104:	9809883a 	mov	r4,r19
   87108:	400d883a 	mov	r6,r8
   8710c:	008a0cc0 	call	8a0cc <__divdf3>
   87110:	dfc00617 	ldw	ra,24(sp)
   87114:	dd000517 	ldw	r20,20(sp)
   87118:	dcc00417 	ldw	r19,16(sp)
   8711c:	dc800317 	ldw	r18,12(sp)
   87120:	dc400217 	ldw	r17,8(sp)
   87124:	dec00704 	addi	sp,sp,28
   87128:	f800283a 	ret
   8712c:	28d3c83a 	sub	r9,r5,r3
   87130:	003ff206 	br	870fc <__ratio+0x78>

00087134 <_mprec_log10>:
   87134:	defffe04 	addi	sp,sp,-8
   87138:	008005c4 	movi	r2,23
   8713c:	dc000015 	stw	r16,0(sp)
   87140:	dfc00115 	stw	ra,4(sp)
   87144:	2021883a 	mov	r16,r4
   87148:	11000c16 	blt	r2,r4,8717c <_mprec_log10+0x48>
   8714c:	200490fa 	slli	r2,r4,3
   87150:	00c00274 	movhi	r3,9
   87154:	18f77f04 	addi	r3,r3,-8708
   87158:	10c5883a 	add	r2,r2,r3
   8715c:	12400117 	ldw	r9,4(r2)
   87160:	12000017 	ldw	r8,0(r2)
   87164:	4807883a 	mov	r3,r9
   87168:	4005883a 	mov	r2,r8
   8716c:	dfc00117 	ldw	ra,4(sp)
   87170:	dc000017 	ldw	r16,0(sp)
   87174:	dec00204 	addi	sp,sp,8
   87178:	f800283a 	ret
   8717c:	0011883a 	mov	r8,zero
   87180:	024ffc34 	movhi	r9,16368
   87184:	0005883a 	mov	r2,zero
   87188:	00d00934 	movhi	r3,16420
   8718c:	480b883a 	mov	r5,r9
   87190:	4009883a 	mov	r4,r8
   87194:	180f883a 	mov	r7,r3
   87198:	100d883a 	mov	r6,r2
   8719c:	0089d080 	call	89d08 <__muldf3>
   871a0:	843fffc4 	addi	r16,r16,-1
   871a4:	1011883a 	mov	r8,r2
   871a8:	1813883a 	mov	r9,r3
   871ac:	803ff51e 	bne	r16,zero,87184 <_mprec_log10+0x50>
   871b0:	4005883a 	mov	r2,r8
   871b4:	4807883a 	mov	r3,r9
   871b8:	dfc00117 	ldw	ra,4(sp)
   871bc:	dc000017 	ldw	r16,0(sp)
   871c0:	dec00204 	addi	sp,sp,8
   871c4:	f800283a 	ret

000871c8 <__copybits>:
   871c8:	297fffc4 	addi	r5,r5,-1
   871cc:	30800417 	ldw	r2,16(r6)
   871d0:	280bd17a 	srai	r5,r5,5
   871d4:	31800504 	addi	r6,r6,20
   871d8:	1085883a 	add	r2,r2,r2
   871dc:	294b883a 	add	r5,r5,r5
   871e0:	294b883a 	add	r5,r5,r5
   871e4:	1085883a 	add	r2,r2,r2
   871e8:	290b883a 	add	r5,r5,r4
   871ec:	3087883a 	add	r3,r6,r2
   871f0:	29400104 	addi	r5,r5,4
   871f4:	30c0052e 	bgeu	r6,r3,8720c <__copybits+0x44>
   871f8:	30800017 	ldw	r2,0(r6)
   871fc:	31800104 	addi	r6,r6,4
   87200:	20800015 	stw	r2,0(r4)
   87204:	21000104 	addi	r4,r4,4
   87208:	30fffb36 	bltu	r6,r3,871f8 <__copybits+0x30>
   8720c:	2140032e 	bgeu	r4,r5,8721c <__copybits+0x54>
   87210:	20000015 	stw	zero,0(r4)
   87214:	21000104 	addi	r4,r4,4
   87218:	217ffd36 	bltu	r4,r5,87210 <__copybits+0x48>
   8721c:	f800283a 	ret

00087220 <__any_on>:
   87220:	20800417 	ldw	r2,16(r4)
   87224:	2807d17a 	srai	r3,r5,5
   87228:	21000504 	addi	r4,r4,20
   8722c:	10c00d0e 	bge	r2,r3,87264 <__any_on+0x44>
   87230:	1085883a 	add	r2,r2,r2
   87234:	1085883a 	add	r2,r2,r2
   87238:	208d883a 	add	r6,r4,r2
   8723c:	2180182e 	bgeu	r4,r6,872a0 <__any_on+0x80>
   87240:	30bfff17 	ldw	r2,-4(r6)
   87244:	30ffff04 	addi	r3,r6,-4
   87248:	1000041e 	bne	r2,zero,8725c <__any_on+0x3c>
   8724c:	20c0142e 	bgeu	r4,r3,872a0 <__any_on+0x80>
   87250:	18ffff04 	addi	r3,r3,-4
   87254:	18800017 	ldw	r2,0(r3)
   87258:	103ffc26 	beq	r2,zero,8724c <__any_on+0x2c>
   8725c:	00800044 	movi	r2,1
   87260:	f800283a 	ret
   87264:	18800a0e 	bge	r3,r2,87290 <__any_on+0x70>
   87268:	294007cc 	andi	r5,r5,31
   8726c:	28000826 	beq	r5,zero,87290 <__any_on+0x70>
   87270:	18c5883a 	add	r2,r3,r3
   87274:	1085883a 	add	r2,r2,r2
   87278:	208d883a 	add	r6,r4,r2
   8727c:	30c00017 	ldw	r3,0(r6)
   87280:	1944d83a 	srl	r2,r3,r5
   87284:	1144983a 	sll	r2,r2,r5
   87288:	18bff41e 	bne	r3,r2,8725c <__any_on+0x3c>
   8728c:	003feb06 	br	8723c <__any_on+0x1c>
   87290:	18c5883a 	add	r2,r3,r3
   87294:	1085883a 	add	r2,r2,r2
   87298:	208d883a 	add	r6,r4,r2
   8729c:	003fe706 	br	8723c <__any_on+0x1c>
   872a0:	0005883a 	mov	r2,zero
   872a4:	f800283a 	ret

000872a8 <_Balloc>:
   872a8:	20c01317 	ldw	r3,76(r4)
   872ac:	defffb04 	addi	sp,sp,-20
   872b0:	dcc00315 	stw	r19,12(sp)
   872b4:	dc800215 	stw	r18,8(sp)
   872b8:	dfc00415 	stw	ra,16(sp)
   872bc:	2825883a 	mov	r18,r5
   872c0:	dc400115 	stw	r17,4(sp)
   872c4:	dc000015 	stw	r16,0(sp)
   872c8:	2027883a 	mov	r19,r4
   872cc:	01800404 	movi	r6,16
   872d0:	01400104 	movi	r5,4
   872d4:	18001726 	beq	r3,zero,87334 <_Balloc+0x8c>
   872d8:	01400044 	movi	r5,1
   872dc:	9485883a 	add	r2,r18,r18
   872e0:	2ca2983a 	sll	r17,r5,r18
   872e4:	1085883a 	add	r2,r2,r2
   872e8:	10c7883a 	add	r3,r2,r3
   872ec:	1c000017 	ldw	r16,0(r3)
   872f0:	8c4d883a 	add	r6,r17,r17
   872f4:	318d883a 	add	r6,r6,r6
   872f8:	9809883a 	mov	r4,r19
   872fc:	31800504 	addi	r6,r6,20
   87300:	80001226 	beq	r16,zero,8734c <_Balloc+0xa4>
   87304:	80800017 	ldw	r2,0(r16)
   87308:	18800015 	stw	r2,0(r3)
   8730c:	80000415 	stw	zero,16(r16)
   87310:	80000315 	stw	zero,12(r16)
   87314:	8005883a 	mov	r2,r16
   87318:	dfc00417 	ldw	ra,16(sp)
   8731c:	dcc00317 	ldw	r19,12(sp)
   87320:	dc800217 	ldw	r18,8(sp)
   87324:	dc400117 	ldw	r17,4(sp)
   87328:	dc000017 	ldw	r16,0(sp)
   8732c:	dec00504 	addi	sp,sp,20
   87330:	f800283a 	ret
   87334:	00887080 	call	88708 <_calloc_r>
   87338:	1007883a 	mov	r3,r2
   8733c:	0021883a 	mov	r16,zero
   87340:	98801315 	stw	r2,76(r19)
   87344:	103fe41e 	bne	r2,zero,872d8 <_Balloc+0x30>
   87348:	003ff206 	br	87314 <_Balloc+0x6c>
   8734c:	00887080 	call	88708 <_calloc_r>
   87350:	103ff026 	beq	r2,zero,87314 <_Balloc+0x6c>
   87354:	1021883a 	mov	r16,r2
   87358:	14800115 	stw	r18,4(r2)
   8735c:	14400215 	stw	r17,8(r2)
   87360:	003fea06 	br	8730c <_Balloc+0x64>

00087364 <__d2b>:
   87364:	defff504 	addi	sp,sp,-44
   87368:	dcc00515 	stw	r19,20(sp)
   8736c:	04c00044 	movi	r19,1
   87370:	dc000215 	stw	r16,8(sp)
   87374:	2821883a 	mov	r16,r5
   87378:	980b883a 	mov	r5,r19
   8737c:	ddc00915 	stw	r23,36(sp)
   87380:	dd800815 	stw	r22,32(sp)
   87384:	dd400715 	stw	r21,28(sp)
   87388:	dd000615 	stw	r20,24(sp)
   8738c:	dc800415 	stw	r18,16(sp)
   87390:	dc400315 	stw	r17,12(sp)
   87394:	dfc00a15 	stw	ra,40(sp)
   87398:	3023883a 	mov	r17,r6
   8739c:	382d883a 	mov	r22,r7
   873a0:	ddc00b17 	ldw	r23,44(sp)
   873a4:	00872a80 	call	872a8 <_Balloc>
   873a8:	1025883a 	mov	r18,r2
   873ac:	00a00034 	movhi	r2,32768
   873b0:	10bfffc4 	addi	r2,r2,-1
   873b4:	8888703a 	and	r4,r17,r2
   873b8:	202ad53a 	srli	r21,r4,20
   873bc:	00800434 	movhi	r2,16
   873c0:	10bfffc4 	addi	r2,r2,-1
   873c4:	8886703a 	and	r3,r17,r2
   873c8:	a829003a 	cmpeq	r20,r21,zero
   873cc:	800b883a 	mov	r5,r16
   873d0:	d8c00115 	stw	r3,4(sp)
   873d4:	94000504 	addi	r16,r18,20
   873d8:	a000021e 	bne	r20,zero,873e4 <__d2b+0x80>
   873dc:	18c00434 	orhi	r3,r3,16
   873e0:	d8c00115 	stw	r3,4(sp)
   873e4:	28002726 	beq	r5,zero,87484 <__d2b+0x120>
   873e8:	d809883a 	mov	r4,sp
   873ec:	d9400015 	stw	r5,0(sp)
   873f0:	0086dc00 	call	86dc0 <__lo0bits>
   873f4:	100d883a 	mov	r6,r2
   873f8:	10003526 	beq	r2,zero,874d0 <__d2b+0x16c>
   873fc:	d8c00117 	ldw	r3,4(sp)
   87400:	00800804 	movi	r2,32
   87404:	1185c83a 	sub	r2,r2,r6
   87408:	d9000017 	ldw	r4,0(sp)
   8740c:	1886983a 	sll	r3,r3,r2
   87410:	1906b03a 	or	r3,r3,r4
   87414:	90c00515 	stw	r3,20(r18)
   87418:	d8c00117 	ldw	r3,4(sp)
   8741c:	1986d83a 	srl	r3,r3,r6
   87420:	d8c00115 	stw	r3,4(sp)
   87424:	180b003a 	cmpeq	r5,r3,zero
   87428:	00800084 	movi	r2,2
   8742c:	114bc83a 	sub	r5,r2,r5
   87430:	80c00115 	stw	r3,4(r16)
   87434:	91400415 	stw	r5,16(r18)
   87438:	a0001a1e 	bne	r20,zero,874a4 <__d2b+0x140>
   8743c:	3545883a 	add	r2,r6,r21
   87440:	10bef344 	addi	r2,r2,-1075
   87444:	00c00d44 	movi	r3,53
   87448:	b0800015 	stw	r2,0(r22)
   8744c:	1987c83a 	sub	r3,r3,r6
   87450:	b8c00015 	stw	r3,0(r23)
   87454:	9005883a 	mov	r2,r18
   87458:	dfc00a17 	ldw	ra,40(sp)
   8745c:	ddc00917 	ldw	r23,36(sp)
   87460:	dd800817 	ldw	r22,32(sp)
   87464:	dd400717 	ldw	r21,28(sp)
   87468:	dd000617 	ldw	r20,24(sp)
   8746c:	dcc00517 	ldw	r19,20(sp)
   87470:	dc800417 	ldw	r18,16(sp)
   87474:	dc400317 	ldw	r17,12(sp)
   87478:	dc000217 	ldw	r16,8(sp)
   8747c:	dec00b04 	addi	sp,sp,44
   87480:	f800283a 	ret
   87484:	d9000104 	addi	r4,sp,4
   87488:	0086dc00 	call	86dc0 <__lo0bits>
   8748c:	11800804 	addi	r6,r2,32
   87490:	d8800117 	ldw	r2,4(sp)
   87494:	94c00415 	stw	r19,16(r18)
   87498:	980b883a 	mov	r5,r19
   8749c:	90800515 	stw	r2,20(r18)
   874a0:	a03fe626 	beq	r20,zero,8743c <__d2b+0xd8>
   874a4:	2945883a 	add	r2,r5,r5
   874a8:	1085883a 	add	r2,r2,r2
   874ac:	1405883a 	add	r2,r2,r16
   874b0:	113fff17 	ldw	r4,-4(r2)
   874b4:	30fef384 	addi	r3,r6,-1074
   874b8:	2820917a 	slli	r16,r5,5
   874bc:	b0c00015 	stw	r3,0(r22)
   874c0:	0086d500 	call	86d50 <__hi0bits>
   874c4:	80a1c83a 	sub	r16,r16,r2
   874c8:	bc000015 	stw	r16,0(r23)
   874cc:	003fe106 	br	87454 <__d2b+0xf0>
   874d0:	d8800017 	ldw	r2,0(sp)
   874d4:	90800515 	stw	r2,20(r18)
   874d8:	d8c00117 	ldw	r3,4(sp)
   874dc:	003fd106 	br	87424 <__d2b+0xc0>

000874e0 <__mdiff>:
   874e0:	defffb04 	addi	sp,sp,-20
   874e4:	dc000015 	stw	r16,0(sp)
   874e8:	2821883a 	mov	r16,r5
   874ec:	dc800215 	stw	r18,8(sp)
   874f0:	300b883a 	mov	r5,r6
   874f4:	2025883a 	mov	r18,r4
   874f8:	8009883a 	mov	r4,r16
   874fc:	dc400115 	stw	r17,4(sp)
   87500:	dfc00415 	stw	ra,16(sp)
   87504:	dcc00315 	stw	r19,12(sp)
   87508:	3023883a 	mov	r17,r6
   8750c:	0086e840 	call	86e84 <__mcmp>
   87510:	10004226 	beq	r2,zero,8761c <__mdiff+0x13c>
   87514:	10005016 	blt	r2,zero,87658 <__mdiff+0x178>
   87518:	0027883a 	mov	r19,zero
   8751c:	81400117 	ldw	r5,4(r16)
   87520:	9009883a 	mov	r4,r18
   87524:	00872a80 	call	872a8 <_Balloc>
   87528:	1019883a 	mov	r12,r2
   8752c:	82800417 	ldw	r10,16(r16)
   87530:	88800417 	ldw	r2,16(r17)
   87534:	81800504 	addi	r6,r16,20
   87538:	5287883a 	add	r3,r10,r10
   8753c:	1085883a 	add	r2,r2,r2
   87540:	18c7883a 	add	r3,r3,r3
   87544:	1085883a 	add	r2,r2,r2
   87548:	8a000504 	addi	r8,r17,20
   8754c:	64c00315 	stw	r19,12(r12)
   87550:	30db883a 	add	r13,r6,r3
   87554:	4097883a 	add	r11,r8,r2
   87558:	61c00504 	addi	r7,r12,20
   8755c:	0013883a 	mov	r9,zero
   87560:	31000017 	ldw	r4,0(r6)
   87564:	41400017 	ldw	r5,0(r8)
   87568:	42000104 	addi	r8,r8,4
   8756c:	20bfffcc 	andi	r2,r4,65535
   87570:	28ffffcc 	andi	r3,r5,65535
   87574:	10c5c83a 	sub	r2,r2,r3
   87578:	1245883a 	add	r2,r2,r9
   8757c:	2008d43a 	srli	r4,r4,16
   87580:	280ad43a 	srli	r5,r5,16
   87584:	1007d43a 	srai	r3,r2,16
   87588:	3880000d 	sth	r2,0(r7)
   8758c:	2149c83a 	sub	r4,r4,r5
   87590:	20c9883a 	add	r4,r4,r3
   87594:	3900008d 	sth	r4,2(r7)
   87598:	31800104 	addi	r6,r6,4
   8759c:	39c00104 	addi	r7,r7,4
   875a0:	2013d43a 	srai	r9,r4,16
   875a4:	42ffee36 	bltu	r8,r11,87560 <__mdiff+0x80>
   875a8:	33400c2e 	bgeu	r6,r13,875dc <__mdiff+0xfc>
   875ac:	30800017 	ldw	r2,0(r6)
   875b0:	31800104 	addi	r6,r6,4
   875b4:	10ffffcc 	andi	r3,r2,65535
   875b8:	1a47883a 	add	r3,r3,r9
   875bc:	1004d43a 	srli	r2,r2,16
   875c0:	1809d43a 	srai	r4,r3,16
   875c4:	38c0000d 	sth	r3,0(r7)
   875c8:	1105883a 	add	r2,r2,r4
   875cc:	3880008d 	sth	r2,2(r7)
   875d0:	1013d43a 	srai	r9,r2,16
   875d4:	39c00104 	addi	r7,r7,4
   875d8:	337ff436 	bltu	r6,r13,875ac <__mdiff+0xcc>
   875dc:	38bfff17 	ldw	r2,-4(r7)
   875e0:	38ffff04 	addi	r3,r7,-4
   875e4:	1000041e 	bne	r2,zero,875f8 <__mdiff+0x118>
   875e8:	18ffff04 	addi	r3,r3,-4
   875ec:	18800017 	ldw	r2,0(r3)
   875f0:	52bfffc4 	addi	r10,r10,-1
   875f4:	103ffc26 	beq	r2,zero,875e8 <__mdiff+0x108>
   875f8:	6005883a 	mov	r2,r12
   875fc:	62800415 	stw	r10,16(r12)
   87600:	dfc00417 	ldw	ra,16(sp)
   87604:	dcc00317 	ldw	r19,12(sp)
   87608:	dc800217 	ldw	r18,8(sp)
   8760c:	dc400117 	ldw	r17,4(sp)
   87610:	dc000017 	ldw	r16,0(sp)
   87614:	dec00504 	addi	sp,sp,20
   87618:	f800283a 	ret
   8761c:	9009883a 	mov	r4,r18
   87620:	000b883a 	mov	r5,zero
   87624:	00872a80 	call	872a8 <_Balloc>
   87628:	1019883a 	mov	r12,r2
   8762c:	00800044 	movi	r2,1
   87630:	60800415 	stw	r2,16(r12)
   87634:	6005883a 	mov	r2,r12
   87638:	60000515 	stw	zero,20(r12)
   8763c:	dfc00417 	ldw	ra,16(sp)
   87640:	dcc00317 	ldw	r19,12(sp)
   87644:	dc800217 	ldw	r18,8(sp)
   87648:	dc400117 	ldw	r17,4(sp)
   8764c:	dc000017 	ldw	r16,0(sp)
   87650:	dec00504 	addi	sp,sp,20
   87654:	f800283a 	ret
   87658:	880d883a 	mov	r6,r17
   8765c:	04c00044 	movi	r19,1
   87660:	8023883a 	mov	r17,r16
   87664:	3021883a 	mov	r16,r6
   87668:	003fac06 	br	8751c <__mdiff+0x3c>

0008766c <__lshift>:
   8766c:	defff904 	addi	sp,sp,-28
   87670:	28800417 	ldw	r2,16(r5)
   87674:	dc000015 	stw	r16,0(sp)
   87678:	3021d17a 	srai	r16,r6,5
   8767c:	28c00217 	ldw	r3,8(r5)
   87680:	10800044 	addi	r2,r2,1
   87684:	dc400115 	stw	r17,4(sp)
   87688:	80a3883a 	add	r17,r16,r2
   8768c:	dd400515 	stw	r21,20(sp)
   87690:	dd000415 	stw	r20,16(sp)
   87694:	dc800215 	stw	r18,8(sp)
   87698:	dfc00615 	stw	ra,24(sp)
   8769c:	2825883a 	mov	r18,r5
   876a0:	dcc00315 	stw	r19,12(sp)
   876a4:	3029883a 	mov	r20,r6
   876a8:	202b883a 	mov	r21,r4
   876ac:	29400117 	ldw	r5,4(r5)
   876b0:	1c40030e 	bge	r3,r17,876c0 <__lshift+0x54>
   876b4:	18c7883a 	add	r3,r3,r3
   876b8:	29400044 	addi	r5,r5,1
   876bc:	1c7ffd16 	blt	r3,r17,876b4 <__lshift+0x48>
   876c0:	a809883a 	mov	r4,r21
   876c4:	00872a80 	call	872a8 <_Balloc>
   876c8:	1027883a 	mov	r19,r2
   876cc:	11400504 	addi	r5,r2,20
   876d0:	0400090e 	bge	zero,r16,876f8 <__lshift+0x8c>
   876d4:	2805883a 	mov	r2,r5
   876d8:	0007883a 	mov	r3,zero
   876dc:	18c00044 	addi	r3,r3,1
   876e0:	10000015 	stw	zero,0(r2)
   876e4:	10800104 	addi	r2,r2,4
   876e8:	80fffc1e 	bne	r16,r3,876dc <__lshift+0x70>
   876ec:	8405883a 	add	r2,r16,r16
   876f0:	1085883a 	add	r2,r2,r2
   876f4:	288b883a 	add	r5,r5,r2
   876f8:	90800417 	ldw	r2,16(r18)
   876fc:	91000504 	addi	r4,r18,20
   87700:	a18007cc 	andi	r6,r20,31
   87704:	1085883a 	add	r2,r2,r2
   87708:	1085883a 	add	r2,r2,r2
   8770c:	208f883a 	add	r7,r4,r2
   87710:	30001e26 	beq	r6,zero,8778c <__lshift+0x120>
   87714:	00800804 	movi	r2,32
   87718:	1191c83a 	sub	r8,r2,r6
   8771c:	0007883a 	mov	r3,zero
   87720:	20800017 	ldw	r2,0(r4)
   87724:	1184983a 	sll	r2,r2,r6
   87728:	1884b03a 	or	r2,r3,r2
   8772c:	28800015 	stw	r2,0(r5)
   87730:	20c00017 	ldw	r3,0(r4)
   87734:	21000104 	addi	r4,r4,4
   87738:	29400104 	addi	r5,r5,4
   8773c:	1a06d83a 	srl	r3,r3,r8
   87740:	21fff736 	bltu	r4,r7,87720 <__lshift+0xb4>
   87744:	28c00015 	stw	r3,0(r5)
   87748:	18000126 	beq	r3,zero,87750 <__lshift+0xe4>
   8774c:	8c400044 	addi	r17,r17,1
   87750:	88bfffc4 	addi	r2,r17,-1
   87754:	98800415 	stw	r2,16(r19)
   87758:	a809883a 	mov	r4,r21
   8775c:	900b883a 	mov	r5,r18
   87760:	0086d280 	call	86d28 <_Bfree>
   87764:	9805883a 	mov	r2,r19
   87768:	dfc00617 	ldw	ra,24(sp)
   8776c:	dd400517 	ldw	r21,20(sp)
   87770:	dd000417 	ldw	r20,16(sp)
   87774:	dcc00317 	ldw	r19,12(sp)
   87778:	dc800217 	ldw	r18,8(sp)
   8777c:	dc400117 	ldw	r17,4(sp)
   87780:	dc000017 	ldw	r16,0(sp)
   87784:	dec00704 	addi	sp,sp,28
   87788:	f800283a 	ret
   8778c:	20800017 	ldw	r2,0(r4)
   87790:	21000104 	addi	r4,r4,4
   87794:	28800015 	stw	r2,0(r5)
   87798:	29400104 	addi	r5,r5,4
   8779c:	21ffec2e 	bgeu	r4,r7,87750 <__lshift+0xe4>
   877a0:	20800017 	ldw	r2,0(r4)
   877a4:	21000104 	addi	r4,r4,4
   877a8:	28800015 	stw	r2,0(r5)
   877ac:	29400104 	addi	r5,r5,4
   877b0:	21fff636 	bltu	r4,r7,8778c <__lshift+0x120>
   877b4:	003fe606 	br	87750 <__lshift+0xe4>

000877b8 <__multiply>:
   877b8:	defff004 	addi	sp,sp,-64
   877bc:	dc800815 	stw	r18,32(sp)
   877c0:	dc400715 	stw	r17,28(sp)
   877c4:	2c800417 	ldw	r18,16(r5)
   877c8:	34400417 	ldw	r17,16(r6)
   877cc:	dcc00915 	stw	r19,36(sp)
   877d0:	dc000615 	stw	r16,24(sp)
   877d4:	dfc00f15 	stw	ra,60(sp)
   877d8:	df000e15 	stw	fp,56(sp)
   877dc:	ddc00d15 	stw	r23,52(sp)
   877e0:	dd800c15 	stw	r22,48(sp)
   877e4:	dd400b15 	stw	r21,44(sp)
   877e8:	dd000a15 	stw	r20,40(sp)
   877ec:	2821883a 	mov	r16,r5
   877f0:	3027883a 	mov	r19,r6
   877f4:	9440040e 	bge	r18,r17,87808 <__multiply+0x50>
   877f8:	8825883a 	mov	r18,r17
   877fc:	2c400417 	ldw	r17,16(r5)
   87800:	2827883a 	mov	r19,r5
   87804:	3021883a 	mov	r16,r6
   87808:	80800217 	ldw	r2,8(r16)
   8780c:	9447883a 	add	r3,r18,r17
   87810:	d8c00415 	stw	r3,16(sp)
   87814:	81400117 	ldw	r5,4(r16)
   87818:	10c0010e 	bge	r2,r3,87820 <__multiply+0x68>
   8781c:	29400044 	addi	r5,r5,1
   87820:	00872a80 	call	872a8 <_Balloc>
   87824:	d8800515 	stw	r2,20(sp)
   87828:	d9000417 	ldw	r4,16(sp)
   8782c:	d8c00517 	ldw	r3,20(sp)
   87830:	2105883a 	add	r2,r4,r4
   87834:	1085883a 	add	r2,r2,r2
   87838:	19000504 	addi	r4,r3,20
   8783c:	2085883a 	add	r2,r4,r2
   87840:	d8800315 	stw	r2,12(sp)
   87844:	2080052e 	bgeu	r4,r2,8785c <__multiply+0xa4>
   87848:	2005883a 	mov	r2,r4
   8784c:	d8c00317 	ldw	r3,12(sp)
   87850:	10000015 	stw	zero,0(r2)
   87854:	10800104 	addi	r2,r2,4
   87858:	10fffc36 	bltu	r2,r3,8784c <__multiply+0x94>
   8785c:	8c45883a 	add	r2,r17,r17
   87860:	9487883a 	add	r3,r18,r18
   87864:	9dc00504 	addi	r23,r19,20
   87868:	1085883a 	add	r2,r2,r2
   8786c:	84000504 	addi	r16,r16,20
   87870:	18c7883a 	add	r3,r3,r3
   87874:	b885883a 	add	r2,r23,r2
   87878:	dc000015 	stw	r16,0(sp)
   8787c:	d8800215 	stw	r2,8(sp)
   87880:	80f9883a 	add	fp,r16,r3
   87884:	b880432e 	bgeu	r23,r2,87994 <__multiply+0x1dc>
   87888:	d9000115 	stw	r4,4(sp)
   8788c:	b9000017 	ldw	r4,0(r23)
   87890:	253fffcc 	andi	r20,r4,65535
   87894:	a0001a26 	beq	r20,zero,87900 <__multiply+0x148>
   87898:	dcc00017 	ldw	r19,0(sp)
   8789c:	dc800117 	ldw	r18,4(sp)
   878a0:	002b883a 	mov	r21,zero
   878a4:	9c400017 	ldw	r17,0(r19)
   878a8:	94000017 	ldw	r16,0(r18)
   878ac:	a009883a 	mov	r4,r20
   878b0:	897fffcc 	andi	r5,r17,65535
   878b4:	008aa7c0 	call	8aa7c <__mulsi3>
   878b8:	880ad43a 	srli	r5,r17,16
   878bc:	80ffffcc 	andi	r3,r16,65535
   878c0:	a8c7883a 	add	r3,r21,r3
   878c4:	a009883a 	mov	r4,r20
   878c8:	10e3883a 	add	r17,r2,r3
   878cc:	8020d43a 	srli	r16,r16,16
   878d0:	008aa7c0 	call	8aa7c <__mulsi3>
   878d4:	8806d43a 	srli	r3,r17,16
   878d8:	1405883a 	add	r2,r2,r16
   878dc:	9cc00104 	addi	r19,r19,4
   878e0:	1887883a 	add	r3,r3,r2
   878e4:	90c0008d 	sth	r3,2(r18)
   878e8:	9440000d 	sth	r17,0(r18)
   878ec:	182ad43a 	srli	r21,r3,16
   878f0:	94800104 	addi	r18,r18,4
   878f4:	9f3feb36 	bltu	r19,fp,878a4 <__multiply+0xec>
   878f8:	95400015 	stw	r21,0(r18)
   878fc:	b9000017 	ldw	r4,0(r23)
   87900:	202ad43a 	srli	r21,r4,16
   87904:	a8001c26 	beq	r21,zero,87978 <__multiply+0x1c0>
   87908:	d9000117 	ldw	r4,4(sp)
   8790c:	dd000017 	ldw	r20,0(sp)
   87910:	002d883a 	mov	r22,zero
   87914:	24c00017 	ldw	r19,0(r4)
   87918:	2025883a 	mov	r18,r4
   8791c:	9823883a 	mov	r17,r19
   87920:	a4000017 	ldw	r16,0(r20)
   87924:	a809883a 	mov	r4,r21
   87928:	a5000104 	addi	r20,r20,4
   8792c:	817fffcc 	andi	r5,r16,65535
   87930:	008aa7c0 	call	8aa7c <__mulsi3>
   87934:	8806d43a 	srli	r3,r17,16
   87938:	800ad43a 	srli	r5,r16,16
   8793c:	94c0000d 	sth	r19,0(r18)
   87940:	b0c7883a 	add	r3,r22,r3
   87944:	10e1883a 	add	r16,r2,r3
   87948:	9400008d 	sth	r16,2(r18)
   8794c:	a809883a 	mov	r4,r21
   87950:	94800104 	addi	r18,r18,4
   87954:	008aa7c0 	call	8aa7c <__mulsi3>
   87958:	94400017 	ldw	r17,0(r18)
   8795c:	8020d43a 	srli	r16,r16,16
   87960:	88ffffcc 	andi	r3,r17,65535
   87964:	10c5883a 	add	r2,r2,r3
   87968:	80a7883a 	add	r19,r16,r2
   8796c:	982cd43a 	srli	r22,r19,16
   87970:	a73feb36 	bltu	r20,fp,87920 <__multiply+0x168>
   87974:	94c00015 	stw	r19,0(r18)
   87978:	d8800217 	ldw	r2,8(sp)
   8797c:	bdc00104 	addi	r23,r23,4
   87980:	b880042e 	bgeu	r23,r2,87994 <__multiply+0x1dc>
   87984:	d8c00117 	ldw	r3,4(sp)
   87988:	18c00104 	addi	r3,r3,4
   8798c:	d8c00115 	stw	r3,4(sp)
   87990:	003fbe06 	br	8788c <__multiply+0xd4>
   87994:	d9000417 	ldw	r4,16(sp)
   87998:	01000c0e 	bge	zero,r4,879cc <__multiply+0x214>
   8799c:	d8c00317 	ldw	r3,12(sp)
   879a0:	18bfff17 	ldw	r2,-4(r3)
   879a4:	18ffff04 	addi	r3,r3,-4
   879a8:	10000326 	beq	r2,zero,879b8 <__multiply+0x200>
   879ac:	00000706 	br	879cc <__multiply+0x214>
   879b0:	18800017 	ldw	r2,0(r3)
   879b4:	1000051e 	bne	r2,zero,879cc <__multiply+0x214>
   879b8:	d9000417 	ldw	r4,16(sp)
   879bc:	18ffff04 	addi	r3,r3,-4
   879c0:	213fffc4 	addi	r4,r4,-1
   879c4:	d9000415 	stw	r4,16(sp)
   879c8:	203ff91e 	bne	r4,zero,879b0 <__multiply+0x1f8>
   879cc:	d8800417 	ldw	r2,16(sp)
   879d0:	d8c00517 	ldw	r3,20(sp)
   879d4:	18800415 	stw	r2,16(r3)
   879d8:	1805883a 	mov	r2,r3
   879dc:	dfc00f17 	ldw	ra,60(sp)
   879e0:	df000e17 	ldw	fp,56(sp)
   879e4:	ddc00d17 	ldw	r23,52(sp)
   879e8:	dd800c17 	ldw	r22,48(sp)
   879ec:	dd400b17 	ldw	r21,44(sp)
   879f0:	dd000a17 	ldw	r20,40(sp)
   879f4:	dcc00917 	ldw	r19,36(sp)
   879f8:	dc800817 	ldw	r18,32(sp)
   879fc:	dc400717 	ldw	r17,28(sp)
   87a00:	dc000617 	ldw	r16,24(sp)
   87a04:	dec01004 	addi	sp,sp,64
   87a08:	f800283a 	ret

00087a0c <__i2b>:
   87a0c:	defffd04 	addi	sp,sp,-12
   87a10:	dc000015 	stw	r16,0(sp)
   87a14:	04000044 	movi	r16,1
   87a18:	dc800115 	stw	r18,4(sp)
   87a1c:	2825883a 	mov	r18,r5
   87a20:	800b883a 	mov	r5,r16
   87a24:	dfc00215 	stw	ra,8(sp)
   87a28:	00872a80 	call	872a8 <_Balloc>
   87a2c:	14000415 	stw	r16,16(r2)
   87a30:	14800515 	stw	r18,20(r2)
   87a34:	dfc00217 	ldw	ra,8(sp)
   87a38:	dc800117 	ldw	r18,4(sp)
   87a3c:	dc000017 	ldw	r16,0(sp)
   87a40:	dec00304 	addi	sp,sp,12
   87a44:	f800283a 	ret

00087a48 <__multadd>:
   87a48:	defff604 	addi	sp,sp,-40
   87a4c:	dd800615 	stw	r22,24(sp)
   87a50:	2d800417 	ldw	r22,16(r5)
   87a54:	df000815 	stw	fp,32(sp)
   87a58:	ddc00715 	stw	r23,28(sp)
   87a5c:	dd400515 	stw	r21,20(sp)
   87a60:	dd000415 	stw	r20,16(sp)
   87a64:	dcc00315 	stw	r19,12(sp)
   87a68:	dc800215 	stw	r18,8(sp)
   87a6c:	dfc00915 	stw	ra,36(sp)
   87a70:	dc400115 	stw	r17,4(sp)
   87a74:	dc000015 	stw	r16,0(sp)
   87a78:	282f883a 	mov	r23,r5
   87a7c:	2039883a 	mov	fp,r4
   87a80:	302b883a 	mov	r21,r6
   87a84:	3829883a 	mov	r20,r7
   87a88:	2c800504 	addi	r18,r5,20
   87a8c:	0027883a 	mov	r19,zero
   87a90:	94400017 	ldw	r17,0(r18)
   87a94:	a80b883a 	mov	r5,r21
   87a98:	9cc00044 	addi	r19,r19,1
   87a9c:	893fffcc 	andi	r4,r17,65535
   87aa0:	008aa7c0 	call	8aa7c <__mulsi3>
   87aa4:	8808d43a 	srli	r4,r17,16
   87aa8:	1521883a 	add	r16,r2,r20
   87aac:	a80b883a 	mov	r5,r21
   87ab0:	008aa7c0 	call	8aa7c <__mulsi3>
   87ab4:	8008d43a 	srli	r4,r16,16
   87ab8:	843fffcc 	andi	r16,r16,65535
   87abc:	1105883a 	add	r2,r2,r4
   87ac0:	1006943a 	slli	r3,r2,16
   87ac4:	1028d43a 	srli	r20,r2,16
   87ac8:	1c07883a 	add	r3,r3,r16
   87acc:	90c00015 	stw	r3,0(r18)
   87ad0:	94800104 	addi	r18,r18,4
   87ad4:	9dbfee16 	blt	r19,r22,87a90 <__multadd+0x48>
   87ad8:	a0000826 	beq	r20,zero,87afc <__multadd+0xb4>
   87adc:	b8800217 	ldw	r2,8(r23)
   87ae0:	b080130e 	bge	r22,r2,87b30 <__multadd+0xe8>
   87ae4:	b585883a 	add	r2,r22,r22
   87ae8:	1085883a 	add	r2,r2,r2
   87aec:	15c5883a 	add	r2,r2,r23
   87af0:	b0c00044 	addi	r3,r22,1
   87af4:	15000515 	stw	r20,20(r2)
   87af8:	b8c00415 	stw	r3,16(r23)
   87afc:	b805883a 	mov	r2,r23
   87b00:	dfc00917 	ldw	ra,36(sp)
   87b04:	df000817 	ldw	fp,32(sp)
   87b08:	ddc00717 	ldw	r23,28(sp)
   87b0c:	dd800617 	ldw	r22,24(sp)
   87b10:	dd400517 	ldw	r21,20(sp)
   87b14:	dd000417 	ldw	r20,16(sp)
   87b18:	dcc00317 	ldw	r19,12(sp)
   87b1c:	dc800217 	ldw	r18,8(sp)
   87b20:	dc400117 	ldw	r17,4(sp)
   87b24:	dc000017 	ldw	r16,0(sp)
   87b28:	dec00a04 	addi	sp,sp,40
   87b2c:	f800283a 	ret
   87b30:	b9400117 	ldw	r5,4(r23)
   87b34:	e009883a 	mov	r4,fp
   87b38:	29400044 	addi	r5,r5,1
   87b3c:	00872a80 	call	872a8 <_Balloc>
   87b40:	b9800417 	ldw	r6,16(r23)
   87b44:	b9400304 	addi	r5,r23,12
   87b48:	11000304 	addi	r4,r2,12
   87b4c:	318d883a 	add	r6,r6,r6
   87b50:	318d883a 	add	r6,r6,r6
   87b54:	31800204 	addi	r6,r6,8
   87b58:	1023883a 	mov	r17,r2
   87b5c:	0086b100 	call	86b10 <memcpy>
   87b60:	b80b883a 	mov	r5,r23
   87b64:	e009883a 	mov	r4,fp
   87b68:	0086d280 	call	86d28 <_Bfree>
   87b6c:	882f883a 	mov	r23,r17
   87b70:	003fdc06 	br	87ae4 <__multadd+0x9c>

00087b74 <__pow5mult>:
   87b74:	defffa04 	addi	sp,sp,-24
   87b78:	308000cc 	andi	r2,r6,3
   87b7c:	dd000415 	stw	r20,16(sp)
   87b80:	dcc00315 	stw	r19,12(sp)
   87b84:	dc000015 	stw	r16,0(sp)
   87b88:	dfc00515 	stw	ra,20(sp)
   87b8c:	dc800215 	stw	r18,8(sp)
   87b90:	dc400115 	stw	r17,4(sp)
   87b94:	3021883a 	mov	r16,r6
   87b98:	2027883a 	mov	r19,r4
   87b9c:	2829883a 	mov	r20,r5
   87ba0:	10002b1e 	bne	r2,zero,87c50 <__pow5mult+0xdc>
   87ba4:	8025d0ba 	srai	r18,r16,2
   87ba8:	90001b26 	beq	r18,zero,87c18 <__pow5mult+0xa4>
   87bac:	9c001217 	ldw	r16,72(r19)
   87bb0:	8000081e 	bne	r16,zero,87bd4 <__pow5mult+0x60>
   87bb4:	00003006 	br	87c78 <__pow5mult+0x104>
   87bb8:	800b883a 	mov	r5,r16
   87bbc:	800d883a 	mov	r6,r16
   87bc0:	9809883a 	mov	r4,r19
   87bc4:	90001426 	beq	r18,zero,87c18 <__pow5mult+0xa4>
   87bc8:	80800017 	ldw	r2,0(r16)
   87bcc:	10001b26 	beq	r2,zero,87c3c <__pow5mult+0xc8>
   87bd0:	1021883a 	mov	r16,r2
   87bd4:	9080004c 	andi	r2,r18,1
   87bd8:	1005003a 	cmpeq	r2,r2,zero
   87bdc:	9025d07a 	srai	r18,r18,1
   87be0:	800d883a 	mov	r6,r16
   87be4:	9809883a 	mov	r4,r19
   87be8:	a00b883a 	mov	r5,r20
   87bec:	103ff21e 	bne	r2,zero,87bb8 <__pow5mult+0x44>
   87bf0:	00877b80 	call	877b8 <__multiply>
   87bf4:	a00b883a 	mov	r5,r20
   87bf8:	9809883a 	mov	r4,r19
   87bfc:	1023883a 	mov	r17,r2
   87c00:	0086d280 	call	86d28 <_Bfree>
   87c04:	8829883a 	mov	r20,r17
   87c08:	800b883a 	mov	r5,r16
   87c0c:	800d883a 	mov	r6,r16
   87c10:	9809883a 	mov	r4,r19
   87c14:	903fec1e 	bne	r18,zero,87bc8 <__pow5mult+0x54>
   87c18:	a005883a 	mov	r2,r20
   87c1c:	dfc00517 	ldw	ra,20(sp)
   87c20:	dd000417 	ldw	r20,16(sp)
   87c24:	dcc00317 	ldw	r19,12(sp)
   87c28:	dc800217 	ldw	r18,8(sp)
   87c2c:	dc400117 	ldw	r17,4(sp)
   87c30:	dc000017 	ldw	r16,0(sp)
   87c34:	dec00604 	addi	sp,sp,24
   87c38:	f800283a 	ret
   87c3c:	00877b80 	call	877b8 <__multiply>
   87c40:	80800015 	stw	r2,0(r16)
   87c44:	1021883a 	mov	r16,r2
   87c48:	10000015 	stw	zero,0(r2)
   87c4c:	003fe106 	br	87bd4 <__pow5mult+0x60>
   87c50:	1085883a 	add	r2,r2,r2
   87c54:	00c00274 	movhi	r3,9
   87c58:	18f7c504 	addi	r3,r3,-8428
   87c5c:	1085883a 	add	r2,r2,r2
   87c60:	10c5883a 	add	r2,r2,r3
   87c64:	11bfff17 	ldw	r6,-4(r2)
   87c68:	000f883a 	mov	r7,zero
   87c6c:	0087a480 	call	87a48 <__multadd>
   87c70:	1029883a 	mov	r20,r2
   87c74:	003fcb06 	br	87ba4 <__pow5mult+0x30>
   87c78:	9809883a 	mov	r4,r19
   87c7c:	01409c44 	movi	r5,625
   87c80:	0087a0c0 	call	87a0c <__i2b>
   87c84:	98801215 	stw	r2,72(r19)
   87c88:	1021883a 	mov	r16,r2
   87c8c:	10000015 	stw	zero,0(r2)
   87c90:	003fd006 	br	87bd4 <__pow5mult+0x60>

00087c94 <__s2b>:
   87c94:	defff904 	addi	sp,sp,-28
   87c98:	dcc00315 	stw	r19,12(sp)
   87c9c:	dc800215 	stw	r18,8(sp)
   87ca0:	2827883a 	mov	r19,r5
   87ca4:	2025883a 	mov	r18,r4
   87ca8:	01400244 	movi	r5,9
   87cac:	39000204 	addi	r4,r7,8
   87cb0:	dd000415 	stw	r20,16(sp)
   87cb4:	dc400115 	stw	r17,4(sp)
   87cb8:	dfc00615 	stw	ra,24(sp)
   87cbc:	dd400515 	stw	r21,20(sp)
   87cc0:	dc000015 	stw	r16,0(sp)
   87cc4:	3829883a 	mov	r20,r7
   87cc8:	3023883a 	mov	r17,r6
   87ccc:	008a9ac0 	call	8a9ac <__divsi3>
   87cd0:	00c00044 	movi	r3,1
   87cd4:	1880350e 	bge	r3,r2,87dac <__s2b+0x118>
   87cd8:	000b883a 	mov	r5,zero
   87cdc:	18c7883a 	add	r3,r3,r3
   87ce0:	29400044 	addi	r5,r5,1
   87ce4:	18bffd16 	blt	r3,r2,87cdc <__s2b+0x48>
   87ce8:	9009883a 	mov	r4,r18
   87cec:	00872a80 	call	872a8 <_Balloc>
   87cf0:	1011883a 	mov	r8,r2
   87cf4:	d8800717 	ldw	r2,28(sp)
   87cf8:	00c00044 	movi	r3,1
   87cfc:	01800244 	movi	r6,9
   87d00:	40800515 	stw	r2,20(r8)
   87d04:	40c00415 	stw	r3,16(r8)
   87d08:	3440260e 	bge	r6,r17,87da4 <__s2b+0x110>
   87d0c:	3021883a 	mov	r16,r6
   87d10:	99ab883a 	add	r21,r19,r6
   87d14:	9c05883a 	add	r2,r19,r16
   87d18:	11c00007 	ldb	r7,0(r2)
   87d1c:	400b883a 	mov	r5,r8
   87d20:	9009883a 	mov	r4,r18
   87d24:	39fff404 	addi	r7,r7,-48
   87d28:	01800284 	movi	r6,10
   87d2c:	0087a480 	call	87a48 <__multadd>
   87d30:	84000044 	addi	r16,r16,1
   87d34:	1011883a 	mov	r8,r2
   87d38:	8c3ff61e 	bne	r17,r16,87d14 <__s2b+0x80>
   87d3c:	ac45883a 	add	r2,r21,r17
   87d40:	117ffe04 	addi	r5,r2,-8
   87d44:	880d883a 	mov	r6,r17
   87d48:	35000c0e 	bge	r6,r20,87d7c <__s2b+0xe8>
   87d4c:	a185c83a 	sub	r2,r20,r6
   87d50:	2821883a 	mov	r16,r5
   87d54:	28a3883a 	add	r17,r5,r2
   87d58:	81c00007 	ldb	r7,0(r16)
   87d5c:	400b883a 	mov	r5,r8
   87d60:	9009883a 	mov	r4,r18
   87d64:	39fff404 	addi	r7,r7,-48
   87d68:	01800284 	movi	r6,10
   87d6c:	0087a480 	call	87a48 <__multadd>
   87d70:	84000044 	addi	r16,r16,1
   87d74:	1011883a 	mov	r8,r2
   87d78:	847ff71e 	bne	r16,r17,87d58 <__s2b+0xc4>
   87d7c:	4005883a 	mov	r2,r8
   87d80:	dfc00617 	ldw	ra,24(sp)
   87d84:	dd400517 	ldw	r21,20(sp)
   87d88:	dd000417 	ldw	r20,16(sp)
   87d8c:	dcc00317 	ldw	r19,12(sp)
   87d90:	dc800217 	ldw	r18,8(sp)
   87d94:	dc400117 	ldw	r17,4(sp)
   87d98:	dc000017 	ldw	r16,0(sp)
   87d9c:	dec00704 	addi	sp,sp,28
   87da0:	f800283a 	ret
   87da4:	99400284 	addi	r5,r19,10
   87da8:	003fe706 	br	87d48 <__s2b+0xb4>
   87dac:	000b883a 	mov	r5,zero
   87db0:	003fcd06 	br	87ce8 <__s2b+0x54>

00087db4 <_realloc_r>:
   87db4:	defff404 	addi	sp,sp,-48
   87db8:	dd800815 	stw	r22,32(sp)
   87dbc:	dc800415 	stw	r18,16(sp)
   87dc0:	dc400315 	stw	r17,12(sp)
   87dc4:	dfc00b15 	stw	ra,44(sp)
   87dc8:	df000a15 	stw	fp,40(sp)
   87dcc:	ddc00915 	stw	r23,36(sp)
   87dd0:	dd400715 	stw	r21,28(sp)
   87dd4:	dd000615 	stw	r20,24(sp)
   87dd8:	dcc00515 	stw	r19,20(sp)
   87ddc:	dc000215 	stw	r16,8(sp)
   87de0:	2825883a 	mov	r18,r5
   87de4:	3023883a 	mov	r17,r6
   87de8:	202d883a 	mov	r22,r4
   87dec:	2800c926 	beq	r5,zero,88114 <_realloc_r+0x360>
   87df0:	008b8000 	call	8b800 <__malloc_lock>
   87df4:	943ffe04 	addi	r16,r18,-8
   87df8:	88c002c4 	addi	r3,r17,11
   87dfc:	00800584 	movi	r2,22
   87e00:	82000117 	ldw	r8,4(r16)
   87e04:	10c01b2e 	bgeu	r2,r3,87e74 <_realloc_r+0xc0>
   87e08:	00bffe04 	movi	r2,-8
   87e0c:	188e703a 	and	r7,r3,r2
   87e10:	3839883a 	mov	fp,r7
   87e14:	38001a16 	blt	r7,zero,87e80 <_realloc_r+0xcc>
   87e18:	e4401936 	bltu	fp,r17,87e80 <_realloc_r+0xcc>
   87e1c:	013fff04 	movi	r4,-4
   87e20:	4126703a 	and	r19,r8,r4
   87e24:	99c02616 	blt	r19,r7,87ec0 <_realloc_r+0x10c>
   87e28:	802b883a 	mov	r21,r16
   87e2c:	9829883a 	mov	r20,r19
   87e30:	84000204 	addi	r16,r16,8
   87e34:	a80f883a 	mov	r7,r21
   87e38:	a70dc83a 	sub	r6,r20,fp
   87e3c:	008003c4 	movi	r2,15
   87e40:	1180c136 	bltu	r2,r6,88148 <_realloc_r+0x394>
   87e44:	38800117 	ldw	r2,4(r7)
   87e48:	a549883a 	add	r4,r20,r21
   87e4c:	1080004c 	andi	r2,r2,1
   87e50:	a084b03a 	or	r2,r20,r2
   87e54:	38800115 	stw	r2,4(r7)
   87e58:	20c00117 	ldw	r3,4(r4)
   87e5c:	18c00054 	ori	r3,r3,1
   87e60:	20c00115 	stw	r3,4(r4)
   87e64:	b009883a 	mov	r4,r22
   87e68:	008b8200 	call	8b820 <__malloc_unlock>
   87e6c:	8023883a 	mov	r17,r16
   87e70:	00000606 	br	87e8c <_realloc_r+0xd8>
   87e74:	01c00404 	movi	r7,16
   87e78:	3839883a 	mov	fp,r7
   87e7c:	e47fe72e 	bgeu	fp,r17,87e1c <_realloc_r+0x68>
   87e80:	00800304 	movi	r2,12
   87e84:	0023883a 	mov	r17,zero
   87e88:	b0800015 	stw	r2,0(r22)
   87e8c:	8805883a 	mov	r2,r17
   87e90:	dfc00b17 	ldw	ra,44(sp)
   87e94:	df000a17 	ldw	fp,40(sp)
   87e98:	ddc00917 	ldw	r23,36(sp)
   87e9c:	dd800817 	ldw	r22,32(sp)
   87ea0:	dd400717 	ldw	r21,28(sp)
   87ea4:	dd000617 	ldw	r20,24(sp)
   87ea8:	dcc00517 	ldw	r19,20(sp)
   87eac:	dc800417 	ldw	r18,16(sp)
   87eb0:	dc400317 	ldw	r17,12(sp)
   87eb4:	dc000217 	ldw	r16,8(sp)
   87eb8:	dec00c04 	addi	sp,sp,48
   87ebc:	f800283a 	ret
   87ec0:	00800274 	movhi	r2,9
   87ec4:	10b9d004 	addi	r2,r2,-6336
   87ec8:	12400217 	ldw	r9,8(r2)
   87ecc:	84cd883a 	add	r6,r16,r19
   87ed0:	802b883a 	mov	r21,r16
   87ed4:	3240b926 	beq	r6,r9,881bc <_realloc_r+0x408>
   87ed8:	31400117 	ldw	r5,4(r6)
   87edc:	00bfff84 	movi	r2,-2
   87ee0:	2884703a 	and	r2,r5,r2
   87ee4:	1185883a 	add	r2,r2,r6
   87ee8:	10c00117 	ldw	r3,4(r2)
   87eec:	18c0004c 	andi	r3,r3,1
   87ef0:	1807003a 	cmpeq	r3,r3,zero
   87ef4:	1800a326 	beq	r3,zero,88184 <_realloc_r+0x3d0>
   87ef8:	2908703a 	and	r4,r5,r4
   87efc:	9929883a 	add	r20,r19,r4
   87f00:	a1c0a30e 	bge	r20,r7,88190 <_realloc_r+0x3dc>
   87f04:	4080004c 	andi	r2,r8,1
   87f08:	1000551e 	bne	r2,zero,88060 <_realloc_r+0x2ac>
   87f0c:	80800017 	ldw	r2,0(r16)
   87f10:	80afc83a 	sub	r23,r16,r2
   87f14:	b8c00117 	ldw	r3,4(r23)
   87f18:	00bfff04 	movi	r2,-4
   87f1c:	1884703a 	and	r2,r3,r2
   87f20:	30002e26 	beq	r6,zero,87fdc <_realloc_r+0x228>
   87f24:	3240b926 	beq	r6,r9,8820c <_realloc_r+0x458>
   87f28:	98a9883a 	add	r20,r19,r2
   87f2c:	2509883a 	add	r4,r4,r20
   87f30:	d9000015 	stw	r4,0(sp)
   87f34:	21c02a16 	blt	r4,r7,87fe0 <_realloc_r+0x22c>
   87f38:	30800317 	ldw	r2,12(r6)
   87f3c:	30c00217 	ldw	r3,8(r6)
   87f40:	01400904 	movi	r5,36
   87f44:	99bfff04 	addi	r6,r19,-4
   87f48:	18800315 	stw	r2,12(r3)
   87f4c:	10c00215 	stw	r3,8(r2)
   87f50:	b9000317 	ldw	r4,12(r23)
   87f54:	b8800217 	ldw	r2,8(r23)
   87f58:	b82b883a 	mov	r21,r23
   87f5c:	bc000204 	addi	r16,r23,8
   87f60:	20800215 	stw	r2,8(r4)
   87f64:	11000315 	stw	r4,12(r2)
   87f68:	2980e436 	bltu	r5,r6,882fc <_realloc_r+0x548>
   87f6c:	008004c4 	movi	r2,19
   87f70:	9009883a 	mov	r4,r18
   87f74:	8011883a 	mov	r8,r16
   87f78:	11800f2e 	bgeu	r2,r6,87fb8 <_realloc_r+0x204>
   87f7c:	90800017 	ldw	r2,0(r18)
   87f80:	ba000404 	addi	r8,r23,16
   87f84:	91000204 	addi	r4,r18,8
   87f88:	b8800215 	stw	r2,8(r23)
   87f8c:	90c00117 	ldw	r3,4(r18)
   87f90:	008006c4 	movi	r2,27
   87f94:	b8c00315 	stw	r3,12(r23)
   87f98:	1180072e 	bgeu	r2,r6,87fb8 <_realloc_r+0x204>
   87f9c:	90c00217 	ldw	r3,8(r18)
   87fa0:	ba000604 	addi	r8,r23,24
   87fa4:	91000404 	addi	r4,r18,16
   87fa8:	b8c00415 	stw	r3,16(r23)
   87fac:	90800317 	ldw	r2,12(r18)
   87fb0:	b8800515 	stw	r2,20(r23)
   87fb4:	3140e726 	beq	r6,r5,88354 <_realloc_r+0x5a0>
   87fb8:	20800017 	ldw	r2,0(r4)
   87fbc:	dd000017 	ldw	r20,0(sp)
   87fc0:	b80f883a 	mov	r7,r23
   87fc4:	40800015 	stw	r2,0(r8)
   87fc8:	20c00117 	ldw	r3,4(r4)
   87fcc:	40c00115 	stw	r3,4(r8)
   87fd0:	20800217 	ldw	r2,8(r4)
   87fd4:	40800215 	stw	r2,8(r8)
   87fd8:	003f9706 	br	87e38 <_realloc_r+0x84>
   87fdc:	98a9883a 	add	r20,r19,r2
   87fe0:	a1c01f16 	blt	r20,r7,88060 <_realloc_r+0x2ac>
   87fe4:	b8c00317 	ldw	r3,12(r23)
   87fe8:	b8800217 	ldw	r2,8(r23)
   87fec:	99bfff04 	addi	r6,r19,-4
   87ff0:	01400904 	movi	r5,36
   87ff4:	b82b883a 	mov	r21,r23
   87ff8:	18800215 	stw	r2,8(r3)
   87ffc:	10c00315 	stw	r3,12(r2)
   88000:	bc000204 	addi	r16,r23,8
   88004:	2980c336 	bltu	r5,r6,88314 <_realloc_r+0x560>
   88008:	008004c4 	movi	r2,19
   8800c:	9009883a 	mov	r4,r18
   88010:	8011883a 	mov	r8,r16
   88014:	11800f2e 	bgeu	r2,r6,88054 <_realloc_r+0x2a0>
   88018:	90800017 	ldw	r2,0(r18)
   8801c:	ba000404 	addi	r8,r23,16
   88020:	91000204 	addi	r4,r18,8
   88024:	b8800215 	stw	r2,8(r23)
   88028:	90c00117 	ldw	r3,4(r18)
   8802c:	008006c4 	movi	r2,27
   88030:	b8c00315 	stw	r3,12(r23)
   88034:	1180072e 	bgeu	r2,r6,88054 <_realloc_r+0x2a0>
   88038:	90c00217 	ldw	r3,8(r18)
   8803c:	ba000604 	addi	r8,r23,24
   88040:	91000404 	addi	r4,r18,16
   88044:	b8c00415 	stw	r3,16(r23)
   88048:	90800317 	ldw	r2,12(r18)
   8804c:	b8800515 	stw	r2,20(r23)
   88050:	3140c726 	beq	r6,r5,88370 <_realloc_r+0x5bc>
   88054:	20800017 	ldw	r2,0(r4)
   88058:	b80f883a 	mov	r7,r23
   8805c:	003fd906 	br	87fc4 <_realloc_r+0x210>
   88060:	880b883a 	mov	r5,r17
   88064:	b009883a 	mov	r4,r22
   88068:	00862ec0 	call	862ec <_malloc_r>
   8806c:	1023883a 	mov	r17,r2
   88070:	10002526 	beq	r2,zero,88108 <_realloc_r+0x354>
   88074:	80800117 	ldw	r2,4(r16)
   88078:	00ffff84 	movi	r3,-2
   8807c:	893ffe04 	addi	r4,r17,-8
   88080:	10c4703a 	and	r2,r2,r3
   88084:	8085883a 	add	r2,r16,r2
   88088:	20809526 	beq	r4,r2,882e0 <_realloc_r+0x52c>
   8808c:	99bfff04 	addi	r6,r19,-4
   88090:	01c00904 	movi	r7,36
   88094:	39804536 	bltu	r7,r6,881ac <_realloc_r+0x3f8>
   88098:	008004c4 	movi	r2,19
   8809c:	9009883a 	mov	r4,r18
   880a0:	880b883a 	mov	r5,r17
   880a4:	11800f2e 	bgeu	r2,r6,880e4 <_realloc_r+0x330>
   880a8:	90800017 	ldw	r2,0(r18)
   880ac:	89400204 	addi	r5,r17,8
   880b0:	91000204 	addi	r4,r18,8
   880b4:	88800015 	stw	r2,0(r17)
   880b8:	90c00117 	ldw	r3,4(r18)
   880bc:	008006c4 	movi	r2,27
   880c0:	88c00115 	stw	r3,4(r17)
   880c4:	1180072e 	bgeu	r2,r6,880e4 <_realloc_r+0x330>
   880c8:	90c00217 	ldw	r3,8(r18)
   880cc:	89400404 	addi	r5,r17,16
   880d0:	91000404 	addi	r4,r18,16
   880d4:	88c00215 	stw	r3,8(r17)
   880d8:	90800317 	ldw	r2,12(r18)
   880dc:	88800315 	stw	r2,12(r17)
   880e0:	31c09126 	beq	r6,r7,88328 <_realloc_r+0x574>
   880e4:	20800017 	ldw	r2,0(r4)
   880e8:	28800015 	stw	r2,0(r5)
   880ec:	20c00117 	ldw	r3,4(r4)
   880f0:	28c00115 	stw	r3,4(r5)
   880f4:	20800217 	ldw	r2,8(r4)
   880f8:	28800215 	stw	r2,8(r5)
   880fc:	900b883a 	mov	r5,r18
   88100:	b009883a 	mov	r4,r22
   88104:	00857640 	call	85764 <_free_r>
   88108:	b009883a 	mov	r4,r22
   8810c:	008b8200 	call	8b820 <__malloc_unlock>
   88110:	003f5e06 	br	87e8c <_realloc_r+0xd8>
   88114:	300b883a 	mov	r5,r6
   88118:	dfc00b17 	ldw	ra,44(sp)
   8811c:	df000a17 	ldw	fp,40(sp)
   88120:	ddc00917 	ldw	r23,36(sp)
   88124:	dd800817 	ldw	r22,32(sp)
   88128:	dd400717 	ldw	r21,28(sp)
   8812c:	dd000617 	ldw	r20,24(sp)
   88130:	dcc00517 	ldw	r19,20(sp)
   88134:	dc800417 	ldw	r18,16(sp)
   88138:	dc400317 	ldw	r17,12(sp)
   8813c:	dc000217 	ldw	r16,8(sp)
   88140:	dec00c04 	addi	sp,sp,48
   88144:	00862ec1 	jmpi	862ec <_malloc_r>
   88148:	38800117 	ldw	r2,4(r7)
   8814c:	e54b883a 	add	r5,fp,r21
   88150:	31000054 	ori	r4,r6,1
   88154:	1080004c 	andi	r2,r2,1
   88158:	1704b03a 	or	r2,r2,fp
   8815c:	38800115 	stw	r2,4(r7)
   88160:	29000115 	stw	r4,4(r5)
   88164:	2987883a 	add	r3,r5,r6
   88168:	18800117 	ldw	r2,4(r3)
   8816c:	29400204 	addi	r5,r5,8
   88170:	b009883a 	mov	r4,r22
   88174:	10800054 	ori	r2,r2,1
   88178:	18800115 	stw	r2,4(r3)
   8817c:	00857640 	call	85764 <_free_r>
   88180:	003f3806 	br	87e64 <_realloc_r+0xb0>
   88184:	000d883a 	mov	r6,zero
   88188:	0009883a 	mov	r4,zero
   8818c:	003f5d06 	br	87f04 <_realloc_r+0x150>
   88190:	30c00217 	ldw	r3,8(r6)
   88194:	30800317 	ldw	r2,12(r6)
   88198:	800f883a 	mov	r7,r16
   8819c:	84000204 	addi	r16,r16,8
   881a0:	10c00215 	stw	r3,8(r2)
   881a4:	18800315 	stw	r2,12(r3)
   881a8:	003f2306 	br	87e38 <_realloc_r+0x84>
   881ac:	8809883a 	mov	r4,r17
   881b0:	900b883a 	mov	r5,r18
   881b4:	0086bb00 	call	86bb0 <memmove>
   881b8:	003fd006 	br	880fc <_realloc_r+0x348>
   881bc:	30800117 	ldw	r2,4(r6)
   881c0:	e0c00404 	addi	r3,fp,16
   881c4:	1108703a 	and	r4,r2,r4
   881c8:	9905883a 	add	r2,r19,r4
   881cc:	10ff4d16 	blt	r2,r3,87f04 <_realloc_r+0x150>
   881d0:	1705c83a 	sub	r2,r2,fp
   881d4:	870b883a 	add	r5,r16,fp
   881d8:	10800054 	ori	r2,r2,1
   881dc:	28800115 	stw	r2,4(r5)
   881e0:	80c00117 	ldw	r3,4(r16)
   881e4:	00800274 	movhi	r2,9
   881e8:	10b9d004 	addi	r2,r2,-6336
   881ec:	b009883a 	mov	r4,r22
   881f0:	18c0004c 	andi	r3,r3,1
   881f4:	e0c6b03a 	or	r3,fp,r3
   881f8:	11400215 	stw	r5,8(r2)
   881fc:	80c00115 	stw	r3,4(r16)
   88200:	008b8200 	call	8b820 <__malloc_unlock>
   88204:	84400204 	addi	r17,r16,8
   88208:	003f2006 	br	87e8c <_realloc_r+0xd8>
   8820c:	98a9883a 	add	r20,r19,r2
   88210:	2509883a 	add	r4,r4,r20
   88214:	e0800404 	addi	r2,fp,16
   88218:	d9000115 	stw	r4,4(sp)
   8821c:	20bf7016 	blt	r4,r2,87fe0 <_realloc_r+0x22c>
   88220:	b8c00317 	ldw	r3,12(r23)
   88224:	b8800217 	ldw	r2,8(r23)
   88228:	99bfff04 	addi	r6,r19,-4
   8822c:	01400904 	movi	r5,36
   88230:	18800215 	stw	r2,8(r3)
   88234:	10c00315 	stw	r3,12(r2)
   88238:	bc400204 	addi	r17,r23,8
   8823c:	29804136 	bltu	r5,r6,88344 <_realloc_r+0x590>
   88240:	008004c4 	movi	r2,19
   88244:	9009883a 	mov	r4,r18
   88248:	880f883a 	mov	r7,r17
   8824c:	11800f2e 	bgeu	r2,r6,8828c <_realloc_r+0x4d8>
   88250:	90800017 	ldw	r2,0(r18)
   88254:	b9c00404 	addi	r7,r23,16
   88258:	91000204 	addi	r4,r18,8
   8825c:	b8800215 	stw	r2,8(r23)
   88260:	90c00117 	ldw	r3,4(r18)
   88264:	008006c4 	movi	r2,27
   88268:	b8c00315 	stw	r3,12(r23)
   8826c:	1180072e 	bgeu	r2,r6,8828c <_realloc_r+0x4d8>
   88270:	90c00217 	ldw	r3,8(r18)
   88274:	b9c00604 	addi	r7,r23,24
   88278:	91000404 	addi	r4,r18,16
   8827c:	b8c00415 	stw	r3,16(r23)
   88280:	90800317 	ldw	r2,12(r18)
   88284:	b8800515 	stw	r2,20(r23)
   88288:	31404026 	beq	r6,r5,8838c <_realloc_r+0x5d8>
   8828c:	20800017 	ldw	r2,0(r4)
   88290:	38800015 	stw	r2,0(r7)
   88294:	20c00117 	ldw	r3,4(r4)
   88298:	38c00115 	stw	r3,4(r7)
   8829c:	20800217 	ldw	r2,8(r4)
   882a0:	38800215 	stw	r2,8(r7)
   882a4:	d8c00117 	ldw	r3,4(sp)
   882a8:	bf0b883a 	add	r5,r23,fp
   882ac:	b009883a 	mov	r4,r22
   882b0:	1f05c83a 	sub	r2,r3,fp
   882b4:	10800054 	ori	r2,r2,1
   882b8:	28800115 	stw	r2,4(r5)
   882bc:	b8c00117 	ldw	r3,4(r23)
   882c0:	00800274 	movhi	r2,9
   882c4:	10b9d004 	addi	r2,r2,-6336
   882c8:	11400215 	stw	r5,8(r2)
   882cc:	18c0004c 	andi	r3,r3,1
   882d0:	e0c6b03a 	or	r3,fp,r3
   882d4:	b8c00115 	stw	r3,4(r23)
   882d8:	008b8200 	call	8b820 <__malloc_unlock>
   882dc:	003eeb06 	br	87e8c <_realloc_r+0xd8>
   882e0:	20800117 	ldw	r2,4(r4)
   882e4:	00ffff04 	movi	r3,-4
   882e8:	800f883a 	mov	r7,r16
   882ec:	10c4703a 	and	r2,r2,r3
   882f0:	98a9883a 	add	r20,r19,r2
   882f4:	84000204 	addi	r16,r16,8
   882f8:	003ecf06 	br	87e38 <_realloc_r+0x84>
   882fc:	900b883a 	mov	r5,r18
   88300:	8009883a 	mov	r4,r16
   88304:	0086bb00 	call	86bb0 <memmove>
   88308:	dd000017 	ldw	r20,0(sp)
   8830c:	b80f883a 	mov	r7,r23
   88310:	003ec906 	br	87e38 <_realloc_r+0x84>
   88314:	900b883a 	mov	r5,r18
   88318:	8009883a 	mov	r4,r16
   8831c:	0086bb00 	call	86bb0 <memmove>
   88320:	b80f883a 	mov	r7,r23
   88324:	003ec406 	br	87e38 <_realloc_r+0x84>
   88328:	90c00417 	ldw	r3,16(r18)
   8832c:	89400604 	addi	r5,r17,24
   88330:	91000604 	addi	r4,r18,24
   88334:	88c00415 	stw	r3,16(r17)
   88338:	90800517 	ldw	r2,20(r18)
   8833c:	88800515 	stw	r2,20(r17)
   88340:	003f6806 	br	880e4 <_realloc_r+0x330>
   88344:	900b883a 	mov	r5,r18
   88348:	8809883a 	mov	r4,r17
   8834c:	0086bb00 	call	86bb0 <memmove>
   88350:	003fd406 	br	882a4 <_realloc_r+0x4f0>
   88354:	90c00417 	ldw	r3,16(r18)
   88358:	91000604 	addi	r4,r18,24
   8835c:	ba000804 	addi	r8,r23,32
   88360:	b8c00615 	stw	r3,24(r23)
   88364:	90800517 	ldw	r2,20(r18)
   88368:	b8800715 	stw	r2,28(r23)
   8836c:	003f1206 	br	87fb8 <_realloc_r+0x204>
   88370:	90c00417 	ldw	r3,16(r18)
   88374:	91000604 	addi	r4,r18,24
   88378:	ba000804 	addi	r8,r23,32
   8837c:	b8c00615 	stw	r3,24(r23)
   88380:	90800517 	ldw	r2,20(r18)
   88384:	b8800715 	stw	r2,28(r23)
   88388:	003f3206 	br	88054 <_realloc_r+0x2a0>
   8838c:	90c00417 	ldw	r3,16(r18)
   88390:	91000604 	addi	r4,r18,24
   88394:	b9c00804 	addi	r7,r23,32
   88398:	b8c00615 	stw	r3,24(r23)
   8839c:	90800517 	ldw	r2,20(r18)
   883a0:	b8800715 	stw	r2,28(r23)
   883a4:	003fb906 	br	8828c <_realloc_r+0x4d8>

000883a8 <__isinfd>:
   883a8:	200d883a 	mov	r6,r4
   883ac:	0109c83a 	sub	r4,zero,r4
   883b0:	2188b03a 	or	r4,r4,r6
   883b4:	2008d7fa 	srli	r4,r4,31
   883b8:	00a00034 	movhi	r2,32768
   883bc:	10bfffc4 	addi	r2,r2,-1
   883c0:	1144703a 	and	r2,r2,r5
   883c4:	2088b03a 	or	r4,r4,r2
   883c8:	009ffc34 	movhi	r2,32752
   883cc:	1105c83a 	sub	r2,r2,r4
   883d0:	0087c83a 	sub	r3,zero,r2
   883d4:	10c4b03a 	or	r2,r2,r3
   883d8:	1004d7fa 	srli	r2,r2,31
   883dc:	00c00044 	movi	r3,1
   883e0:	1885c83a 	sub	r2,r3,r2
   883e4:	f800283a 	ret

000883e8 <__isnand>:
   883e8:	200d883a 	mov	r6,r4
   883ec:	0109c83a 	sub	r4,zero,r4
   883f0:	2188b03a 	or	r4,r4,r6
   883f4:	2008d7fa 	srli	r4,r4,31
   883f8:	00a00034 	movhi	r2,32768
   883fc:	10bfffc4 	addi	r2,r2,-1
   88400:	1144703a 	and	r2,r2,r5
   88404:	2088b03a 	or	r4,r4,r2
   88408:	009ffc34 	movhi	r2,32752
   8840c:	1105c83a 	sub	r2,r2,r4
   88410:	1004d7fa 	srli	r2,r2,31
   88414:	f800283a 	ret

00088418 <_sbrk_r>:
   88418:	defffd04 	addi	sp,sp,-12
   8841c:	dc000015 	stw	r16,0(sp)
   88420:	04000274 	movhi	r16,9
   88424:	8406c804 	addi	r16,r16,6944
   88428:	dc400115 	stw	r17,4(sp)
   8842c:	80000015 	stw	zero,0(r16)
   88430:	2023883a 	mov	r17,r4
   88434:	2809883a 	mov	r4,r5
   88438:	dfc00215 	stw	ra,8(sp)
   8843c:	008ba3c0 	call	8ba3c <sbrk>
   88440:	1007883a 	mov	r3,r2
   88444:	00bfffc4 	movi	r2,-1
   88448:	18800626 	beq	r3,r2,88464 <_sbrk_r+0x4c>
   8844c:	1805883a 	mov	r2,r3
   88450:	dfc00217 	ldw	ra,8(sp)
   88454:	dc400117 	ldw	r17,4(sp)
   88458:	dc000017 	ldw	r16,0(sp)
   8845c:	dec00304 	addi	sp,sp,12
   88460:	f800283a 	ret
   88464:	80800017 	ldw	r2,0(r16)
   88468:	103ff826 	beq	r2,zero,8844c <_sbrk_r+0x34>
   8846c:	88800015 	stw	r2,0(r17)
   88470:	1805883a 	mov	r2,r3
   88474:	dfc00217 	ldw	ra,8(sp)
   88478:	dc400117 	ldw	r17,4(sp)
   8847c:	dc000017 	ldw	r16,0(sp)
   88480:	dec00304 	addi	sp,sp,12
   88484:	f800283a 	ret

00088488 <__sclose>:
   88488:	2940038f 	ldh	r5,14(r5)
   8848c:	00887d01 	jmpi	887d0 <_close_r>

00088490 <__sseek>:
   88490:	defffe04 	addi	sp,sp,-8
   88494:	dc000015 	stw	r16,0(sp)
   88498:	2821883a 	mov	r16,r5
   8849c:	2940038f 	ldh	r5,14(r5)
   884a0:	dfc00115 	stw	ra,4(sp)
   884a4:	0088a480 	call	88a48 <_lseek_r>
   884a8:	1007883a 	mov	r3,r2
   884ac:	00bfffc4 	movi	r2,-1
   884b0:	18800926 	beq	r3,r2,884d8 <__sseek+0x48>
   884b4:	8080030b 	ldhu	r2,12(r16)
   884b8:	80c01415 	stw	r3,80(r16)
   884bc:	10840014 	ori	r2,r2,4096
   884c0:	8080030d 	sth	r2,12(r16)
   884c4:	1805883a 	mov	r2,r3
   884c8:	dfc00117 	ldw	ra,4(sp)
   884cc:	dc000017 	ldw	r16,0(sp)
   884d0:	dec00204 	addi	sp,sp,8
   884d4:	f800283a 	ret
   884d8:	8080030b 	ldhu	r2,12(r16)
   884dc:	10bbffcc 	andi	r2,r2,61439
   884e0:	8080030d 	sth	r2,12(r16)
   884e4:	1805883a 	mov	r2,r3
   884e8:	dfc00117 	ldw	ra,4(sp)
   884ec:	dc000017 	ldw	r16,0(sp)
   884f0:	dec00204 	addi	sp,sp,8
   884f4:	f800283a 	ret

000884f8 <__swrite>:
   884f8:	2880030b 	ldhu	r2,12(r5)
   884fc:	defffb04 	addi	sp,sp,-20
   88500:	dcc00315 	stw	r19,12(sp)
   88504:	1080400c 	andi	r2,r2,256
   88508:	dc800215 	stw	r18,8(sp)
   8850c:	dc400115 	stw	r17,4(sp)
   88510:	dc000015 	stw	r16,0(sp)
   88514:	3027883a 	mov	r19,r6
   88518:	3825883a 	mov	r18,r7
   8851c:	dfc00415 	stw	ra,16(sp)
   88520:	2821883a 	mov	r16,r5
   88524:	000d883a 	mov	r6,zero
   88528:	01c00084 	movi	r7,2
   8852c:	2023883a 	mov	r17,r4
   88530:	10000226 	beq	r2,zero,8853c <__swrite+0x44>
   88534:	2940038f 	ldh	r5,14(r5)
   88538:	0088a480 	call	88a48 <_lseek_r>
   8853c:	8080030b 	ldhu	r2,12(r16)
   88540:	8140038f 	ldh	r5,14(r16)
   88544:	8809883a 	mov	r4,r17
   88548:	10bbffcc 	andi	r2,r2,61439
   8854c:	980d883a 	mov	r6,r19
   88550:	900f883a 	mov	r7,r18
   88554:	8080030d 	sth	r2,12(r16)
   88558:	dfc00417 	ldw	ra,16(sp)
   8855c:	dcc00317 	ldw	r19,12(sp)
   88560:	dc800217 	ldw	r18,8(sp)
   88564:	dc400117 	ldw	r17,4(sp)
   88568:	dc000017 	ldw	r16,0(sp)
   8856c:	dec00504 	addi	sp,sp,20
   88570:	00886901 	jmpi	88690 <_write_r>

00088574 <__sread>:
   88574:	defffe04 	addi	sp,sp,-8
   88578:	dc000015 	stw	r16,0(sp)
   8857c:	2821883a 	mov	r16,r5
   88580:	2940038f 	ldh	r5,14(r5)
   88584:	dfc00115 	stw	ra,4(sp)
   88588:	0088ac00 	call	88ac0 <_read_r>
   8858c:	1007883a 	mov	r3,r2
   88590:	10000816 	blt	r2,zero,885b4 <__sread+0x40>
   88594:	80801417 	ldw	r2,80(r16)
   88598:	10c5883a 	add	r2,r2,r3
   8859c:	80801415 	stw	r2,80(r16)
   885a0:	1805883a 	mov	r2,r3
   885a4:	dfc00117 	ldw	ra,4(sp)
   885a8:	dc000017 	ldw	r16,0(sp)
   885ac:	dec00204 	addi	sp,sp,8
   885b0:	f800283a 	ret
   885b4:	8080030b 	ldhu	r2,12(r16)
   885b8:	10bbffcc 	andi	r2,r2,61439
   885bc:	8080030d 	sth	r2,12(r16)
   885c0:	1805883a 	mov	r2,r3
   885c4:	dfc00117 	ldw	ra,4(sp)
   885c8:	dc000017 	ldw	r16,0(sp)
   885cc:	dec00204 	addi	sp,sp,8
   885d0:	f800283a 	ret

000885d4 <strcmp>:
   885d4:	2144b03a 	or	r2,r4,r5
   885d8:	108000cc 	andi	r2,r2,3
   885dc:	10001d1e 	bne	r2,zero,88654 <strcmp+0x80>
   885e0:	200f883a 	mov	r7,r4
   885e4:	28800017 	ldw	r2,0(r5)
   885e8:	21000017 	ldw	r4,0(r4)
   885ec:	280d883a 	mov	r6,r5
   885f0:	2080161e 	bne	r4,r2,8864c <strcmp+0x78>
   885f4:	023fbff4 	movhi	r8,65279
   885f8:	423fbfc4 	addi	r8,r8,-257
   885fc:	2207883a 	add	r3,r4,r8
   88600:	01602074 	movhi	r5,32897
   88604:	29602004 	addi	r5,r5,-32640
   88608:	1946703a 	and	r3,r3,r5
   8860c:	0104303a 	nor	r2,zero,r4
   88610:	10c4703a 	and	r2,r2,r3
   88614:	10001c1e 	bne	r2,zero,88688 <strcmp+0xb4>
   88618:	4013883a 	mov	r9,r8
   8861c:	2811883a 	mov	r8,r5
   88620:	00000106 	br	88628 <strcmp+0x54>
   88624:	1800181e 	bne	r3,zero,88688 <strcmp+0xb4>
   88628:	39c00104 	addi	r7,r7,4
   8862c:	39000017 	ldw	r4,0(r7)
   88630:	31800104 	addi	r6,r6,4
   88634:	31400017 	ldw	r5,0(r6)
   88638:	2245883a 	add	r2,r4,r9
   8863c:	1204703a 	and	r2,r2,r8
   88640:	0106303a 	nor	r3,zero,r4
   88644:	1886703a 	and	r3,r3,r2
   88648:	217ff626 	beq	r4,r5,88624 <strcmp+0x50>
   8864c:	3809883a 	mov	r4,r7
   88650:	300b883a 	mov	r5,r6
   88654:	20c00007 	ldb	r3,0(r4)
   88658:	1800051e 	bne	r3,zero,88670 <strcmp+0x9c>
   8865c:	00000606 	br	88678 <strcmp+0xa4>
   88660:	21000044 	addi	r4,r4,1
   88664:	20c00007 	ldb	r3,0(r4)
   88668:	29400044 	addi	r5,r5,1
   8866c:	18000226 	beq	r3,zero,88678 <strcmp+0xa4>
   88670:	28800007 	ldb	r2,0(r5)
   88674:	18bffa26 	beq	r3,r2,88660 <strcmp+0x8c>
   88678:	20c00003 	ldbu	r3,0(r4)
   8867c:	28800003 	ldbu	r2,0(r5)
   88680:	1885c83a 	sub	r2,r3,r2
   88684:	f800283a 	ret
   88688:	0005883a 	mov	r2,zero
   8868c:	f800283a 	ret

00088690 <_write_r>:
   88690:	defffd04 	addi	sp,sp,-12
   88694:	dc000015 	stw	r16,0(sp)
   88698:	04000274 	movhi	r16,9
   8869c:	8406c804 	addi	r16,r16,6944
   886a0:	dc400115 	stw	r17,4(sp)
   886a4:	80000015 	stw	zero,0(r16)
   886a8:	2023883a 	mov	r17,r4
   886ac:	2809883a 	mov	r4,r5
   886b0:	300b883a 	mov	r5,r6
   886b4:	380d883a 	mov	r6,r7
   886b8:	dfc00215 	stw	ra,8(sp)
   886bc:	008baf80 	call	8baf8 <write>
   886c0:	1007883a 	mov	r3,r2
   886c4:	00bfffc4 	movi	r2,-1
   886c8:	18800626 	beq	r3,r2,886e4 <_write_r+0x54>
   886cc:	1805883a 	mov	r2,r3
   886d0:	dfc00217 	ldw	ra,8(sp)
   886d4:	dc400117 	ldw	r17,4(sp)
   886d8:	dc000017 	ldw	r16,0(sp)
   886dc:	dec00304 	addi	sp,sp,12
   886e0:	f800283a 	ret
   886e4:	80800017 	ldw	r2,0(r16)
   886e8:	103ff826 	beq	r2,zero,886cc <_write_r+0x3c>
   886ec:	88800015 	stw	r2,0(r17)
   886f0:	1805883a 	mov	r2,r3
   886f4:	dfc00217 	ldw	ra,8(sp)
   886f8:	dc400117 	ldw	r17,4(sp)
   886fc:	dc000017 	ldw	r16,0(sp)
   88700:	dec00304 	addi	sp,sp,12
   88704:	f800283a 	ret

00088708 <_calloc_r>:
   88708:	defffe04 	addi	sp,sp,-8
   8870c:	dc400015 	stw	r17,0(sp)
   88710:	2023883a 	mov	r17,r4
   88714:	2809883a 	mov	r4,r5
   88718:	300b883a 	mov	r5,r6
   8871c:	dfc00115 	stw	ra,4(sp)
   88720:	008aa7c0 	call	8aa7c <__mulsi3>
   88724:	100b883a 	mov	r5,r2
   88728:	8809883a 	mov	r4,r17
   8872c:	00862ec0 	call	862ec <_malloc_r>
   88730:	1023883a 	mov	r17,r2
   88734:	01c00904 	movi	r7,36
   88738:	10000d26 	beq	r2,zero,88770 <_calloc_r+0x68>
   8873c:	10ffff17 	ldw	r3,-4(r2)
   88740:	1009883a 	mov	r4,r2
   88744:	00bfff04 	movi	r2,-4
   88748:	1886703a 	and	r3,r3,r2
   8874c:	1887883a 	add	r3,r3,r2
   88750:	180d883a 	mov	r6,r3
   88754:	000b883a 	mov	r5,zero
   88758:	38c01736 	bltu	r7,r3,887b8 <_calloc_r+0xb0>
   8875c:	008004c4 	movi	r2,19
   88760:	10c00836 	bltu	r2,r3,88784 <_calloc_r+0x7c>
   88764:	20000215 	stw	zero,8(r4)
   88768:	20000015 	stw	zero,0(r4)
   8876c:	20000115 	stw	zero,4(r4)
   88770:	8805883a 	mov	r2,r17
   88774:	dfc00117 	ldw	ra,4(sp)
   88778:	dc400017 	ldw	r17,0(sp)
   8877c:	dec00204 	addi	sp,sp,8
   88780:	f800283a 	ret
   88784:	008006c4 	movi	r2,27
   88788:	88000015 	stw	zero,0(r17)
   8878c:	88000115 	stw	zero,4(r17)
   88790:	89000204 	addi	r4,r17,8
   88794:	10fff32e 	bgeu	r2,r3,88764 <_calloc_r+0x5c>
   88798:	88000215 	stw	zero,8(r17)
   8879c:	88000315 	stw	zero,12(r17)
   887a0:	89000404 	addi	r4,r17,16
   887a4:	19ffef1e 	bne	r3,r7,88764 <_calloc_r+0x5c>
   887a8:	89000604 	addi	r4,r17,24
   887ac:	88000415 	stw	zero,16(r17)
   887b0:	88000515 	stw	zero,20(r17)
   887b4:	003feb06 	br	88764 <_calloc_r+0x5c>
   887b8:	0086c900 	call	86c90 <memset>
   887bc:	8805883a 	mov	r2,r17
   887c0:	dfc00117 	ldw	ra,4(sp)
   887c4:	dc400017 	ldw	r17,0(sp)
   887c8:	dec00204 	addi	sp,sp,8
   887cc:	f800283a 	ret

000887d0 <_close_r>:
   887d0:	defffd04 	addi	sp,sp,-12
   887d4:	dc000015 	stw	r16,0(sp)
   887d8:	04000274 	movhi	r16,9
   887dc:	8406c804 	addi	r16,r16,6944
   887e0:	dc400115 	stw	r17,4(sp)
   887e4:	80000015 	stw	zero,0(r16)
   887e8:	2023883a 	mov	r17,r4
   887ec:	2809883a 	mov	r4,r5
   887f0:	dfc00215 	stw	ra,8(sp)
   887f4:	008b16c0 	call	8b16c <close>
   887f8:	1007883a 	mov	r3,r2
   887fc:	00bfffc4 	movi	r2,-1
   88800:	18800626 	beq	r3,r2,8881c <_close_r+0x4c>
   88804:	1805883a 	mov	r2,r3
   88808:	dfc00217 	ldw	ra,8(sp)
   8880c:	dc400117 	ldw	r17,4(sp)
   88810:	dc000017 	ldw	r16,0(sp)
   88814:	dec00304 	addi	sp,sp,12
   88818:	f800283a 	ret
   8881c:	80800017 	ldw	r2,0(r16)
   88820:	103ff826 	beq	r2,zero,88804 <_close_r+0x34>
   88824:	88800015 	stw	r2,0(r17)
   88828:	1805883a 	mov	r2,r3
   8882c:	dfc00217 	ldw	ra,8(sp)
   88830:	dc400117 	ldw	r17,4(sp)
   88834:	dc000017 	ldw	r16,0(sp)
   88838:	dec00304 	addi	sp,sp,12
   8883c:	f800283a 	ret

00088840 <_fclose_r>:
   88840:	defffc04 	addi	sp,sp,-16
   88844:	dc400115 	stw	r17,4(sp)
   88848:	dc000015 	stw	r16,0(sp)
   8884c:	dfc00315 	stw	ra,12(sp)
   88850:	dc800215 	stw	r18,8(sp)
   88854:	2821883a 	mov	r16,r5
   88858:	2023883a 	mov	r17,r4
   8885c:	28002926 	beq	r5,zero,88904 <_fclose_r+0xc4>
   88860:	008539c0 	call	8539c <__sfp_lock_acquire>
   88864:	88000226 	beq	r17,zero,88870 <_fclose_r+0x30>
   88868:	88800e17 	ldw	r2,56(r17)
   8886c:	10002d26 	beq	r2,zero,88924 <_fclose_r+0xe4>
   88870:	8080030f 	ldh	r2,12(r16)
   88874:	10002226 	beq	r2,zero,88900 <_fclose_r+0xc0>
   88878:	8809883a 	mov	r4,r17
   8887c:	800b883a 	mov	r5,r16
   88880:	00851140 	call	85114 <_fflush_r>
   88884:	1025883a 	mov	r18,r2
   88888:	80800b17 	ldw	r2,44(r16)
   8888c:	10000426 	beq	r2,zero,888a0 <_fclose_r+0x60>
   88890:	81400717 	ldw	r5,28(r16)
   88894:	8809883a 	mov	r4,r17
   88898:	103ee83a 	callr	r2
   8889c:	10002a16 	blt	r2,zero,88948 <_fclose_r+0x108>
   888a0:	8080030b 	ldhu	r2,12(r16)
   888a4:	1080200c 	andi	r2,r2,128
   888a8:	1000231e 	bne	r2,zero,88938 <_fclose_r+0xf8>
   888ac:	81400c17 	ldw	r5,48(r16)
   888b0:	28000526 	beq	r5,zero,888c8 <_fclose_r+0x88>
   888b4:	80801004 	addi	r2,r16,64
   888b8:	28800226 	beq	r5,r2,888c4 <_fclose_r+0x84>
   888bc:	8809883a 	mov	r4,r17
   888c0:	00857640 	call	85764 <_free_r>
   888c4:	80000c15 	stw	zero,48(r16)
   888c8:	81401117 	ldw	r5,68(r16)
   888cc:	28000326 	beq	r5,zero,888dc <_fclose_r+0x9c>
   888d0:	8809883a 	mov	r4,r17
   888d4:	00857640 	call	85764 <_free_r>
   888d8:	80001115 	stw	zero,68(r16)
   888dc:	8000030d 	sth	zero,12(r16)
   888e0:	00853a00 	call	853a0 <__sfp_lock_release>
   888e4:	9005883a 	mov	r2,r18
   888e8:	dfc00317 	ldw	ra,12(sp)
   888ec:	dc800217 	ldw	r18,8(sp)
   888f0:	dc400117 	ldw	r17,4(sp)
   888f4:	dc000017 	ldw	r16,0(sp)
   888f8:	dec00404 	addi	sp,sp,16
   888fc:	f800283a 	ret
   88900:	00853a00 	call	853a0 <__sfp_lock_release>
   88904:	0025883a 	mov	r18,zero
   88908:	9005883a 	mov	r2,r18
   8890c:	dfc00317 	ldw	ra,12(sp)
   88910:	dc800217 	ldw	r18,8(sp)
   88914:	dc400117 	ldw	r17,4(sp)
   88918:	dc000017 	ldw	r16,0(sp)
   8891c:	dec00404 	addi	sp,sp,16
   88920:	f800283a 	ret
   88924:	8809883a 	mov	r4,r17
   88928:	00853ac0 	call	853ac <__sinit>
   8892c:	8080030f 	ldh	r2,12(r16)
   88930:	103fd11e 	bne	r2,zero,88878 <_fclose_r+0x38>
   88934:	003ff206 	br	88900 <_fclose_r+0xc0>
   88938:	81400417 	ldw	r5,16(r16)
   8893c:	8809883a 	mov	r4,r17
   88940:	00857640 	call	85764 <_free_r>
   88944:	003fd906 	br	888ac <_fclose_r+0x6c>
   88948:	04bfffc4 	movi	r18,-1
   8894c:	003fd406 	br	888a0 <_fclose_r+0x60>

00088950 <fclose>:
   88950:	00800274 	movhi	r2,9
   88954:	10bf5a04 	addi	r2,r2,-664
   88958:	200b883a 	mov	r5,r4
   8895c:	11000017 	ldw	r4,0(r2)
   88960:	00888401 	jmpi	88840 <_fclose_r>

00088964 <_fstat_r>:
   88964:	defffd04 	addi	sp,sp,-12
   88968:	dc000015 	stw	r16,0(sp)
   8896c:	04000274 	movhi	r16,9
   88970:	8406c804 	addi	r16,r16,6944
   88974:	dc400115 	stw	r17,4(sp)
   88978:	80000015 	stw	zero,0(r16)
   8897c:	2023883a 	mov	r17,r4
   88980:	2809883a 	mov	r4,r5
   88984:	300b883a 	mov	r5,r6
   88988:	dfc00215 	stw	ra,8(sp)
   8898c:	008b2f80 	call	8b2f8 <fstat>
   88990:	1007883a 	mov	r3,r2
   88994:	00bfffc4 	movi	r2,-1
   88998:	18800626 	beq	r3,r2,889b4 <_fstat_r+0x50>
   8899c:	1805883a 	mov	r2,r3
   889a0:	dfc00217 	ldw	ra,8(sp)
   889a4:	dc400117 	ldw	r17,4(sp)
   889a8:	dc000017 	ldw	r16,0(sp)
   889ac:	dec00304 	addi	sp,sp,12
   889b0:	f800283a 	ret
   889b4:	80800017 	ldw	r2,0(r16)
   889b8:	103ff826 	beq	r2,zero,8899c <_fstat_r+0x38>
   889bc:	88800015 	stw	r2,0(r17)
   889c0:	1805883a 	mov	r2,r3
   889c4:	dfc00217 	ldw	ra,8(sp)
   889c8:	dc400117 	ldw	r17,4(sp)
   889cc:	dc000017 	ldw	r16,0(sp)
   889d0:	dec00304 	addi	sp,sp,12
   889d4:	f800283a 	ret

000889d8 <_isatty_r>:
   889d8:	defffd04 	addi	sp,sp,-12
   889dc:	dc000015 	stw	r16,0(sp)
   889e0:	04000274 	movhi	r16,9
   889e4:	8406c804 	addi	r16,r16,6944
   889e8:	dc400115 	stw	r17,4(sp)
   889ec:	80000015 	stw	zero,0(r16)
   889f0:	2023883a 	mov	r17,r4
   889f4:	2809883a 	mov	r4,r5
   889f8:	dfc00215 	stw	ra,8(sp)
   889fc:	008b4300 	call	8b430 <isatty>
   88a00:	1007883a 	mov	r3,r2
   88a04:	00bfffc4 	movi	r2,-1
   88a08:	18800626 	beq	r3,r2,88a24 <_isatty_r+0x4c>
   88a0c:	1805883a 	mov	r2,r3
   88a10:	dfc00217 	ldw	ra,8(sp)
   88a14:	dc400117 	ldw	r17,4(sp)
   88a18:	dc000017 	ldw	r16,0(sp)
   88a1c:	dec00304 	addi	sp,sp,12
   88a20:	f800283a 	ret
   88a24:	80800017 	ldw	r2,0(r16)
   88a28:	103ff826 	beq	r2,zero,88a0c <_isatty_r+0x34>
   88a2c:	88800015 	stw	r2,0(r17)
   88a30:	1805883a 	mov	r2,r3
   88a34:	dfc00217 	ldw	ra,8(sp)
   88a38:	dc400117 	ldw	r17,4(sp)
   88a3c:	dc000017 	ldw	r16,0(sp)
   88a40:	dec00304 	addi	sp,sp,12
   88a44:	f800283a 	ret

00088a48 <_lseek_r>:
   88a48:	defffd04 	addi	sp,sp,-12
   88a4c:	dc000015 	stw	r16,0(sp)
   88a50:	04000274 	movhi	r16,9
   88a54:	8406c804 	addi	r16,r16,6944
   88a58:	dc400115 	stw	r17,4(sp)
   88a5c:	80000015 	stw	zero,0(r16)
   88a60:	2023883a 	mov	r17,r4
   88a64:	2809883a 	mov	r4,r5
   88a68:	300b883a 	mov	r5,r6
   88a6c:	380d883a 	mov	r6,r7
   88a70:	dfc00215 	stw	ra,8(sp)
   88a74:	008b6400 	call	8b640 <lseek>
   88a78:	1007883a 	mov	r3,r2
   88a7c:	00bfffc4 	movi	r2,-1
   88a80:	18800626 	beq	r3,r2,88a9c <_lseek_r+0x54>
   88a84:	1805883a 	mov	r2,r3
   88a88:	dfc00217 	ldw	ra,8(sp)
   88a8c:	dc400117 	ldw	r17,4(sp)
   88a90:	dc000017 	ldw	r16,0(sp)
   88a94:	dec00304 	addi	sp,sp,12
   88a98:	f800283a 	ret
   88a9c:	80800017 	ldw	r2,0(r16)
   88aa0:	103ff826 	beq	r2,zero,88a84 <_lseek_r+0x3c>
   88aa4:	88800015 	stw	r2,0(r17)
   88aa8:	1805883a 	mov	r2,r3
   88aac:	dfc00217 	ldw	ra,8(sp)
   88ab0:	dc400117 	ldw	r17,4(sp)
   88ab4:	dc000017 	ldw	r16,0(sp)
   88ab8:	dec00304 	addi	sp,sp,12
   88abc:	f800283a 	ret

00088ac0 <_read_r>:
   88ac0:	defffd04 	addi	sp,sp,-12
   88ac4:	dc000015 	stw	r16,0(sp)
   88ac8:	04000274 	movhi	r16,9
   88acc:	8406c804 	addi	r16,r16,6944
   88ad0:	dc400115 	stw	r17,4(sp)
   88ad4:	80000015 	stw	zero,0(r16)
   88ad8:	2023883a 	mov	r17,r4
   88adc:	2809883a 	mov	r4,r5
   88ae0:	300b883a 	mov	r5,r6
   88ae4:	380d883a 	mov	r6,r7
   88ae8:	dfc00215 	stw	ra,8(sp)
   88aec:	008b8400 	call	8b840 <read>
   88af0:	1007883a 	mov	r3,r2
   88af4:	00bfffc4 	movi	r2,-1
   88af8:	18800626 	beq	r3,r2,88b14 <_read_r+0x54>
   88afc:	1805883a 	mov	r2,r3
   88b00:	dfc00217 	ldw	ra,8(sp)
   88b04:	dc400117 	ldw	r17,4(sp)
   88b08:	dc000017 	ldw	r16,0(sp)
   88b0c:	dec00304 	addi	sp,sp,12
   88b10:	f800283a 	ret
   88b14:	80800017 	ldw	r2,0(r16)
   88b18:	103ff826 	beq	r2,zero,88afc <_read_r+0x3c>
   88b1c:	88800015 	stw	r2,0(r17)
   88b20:	1805883a 	mov	r2,r3
   88b24:	dfc00217 	ldw	ra,8(sp)
   88b28:	dc400117 	ldw	r17,4(sp)
   88b2c:	dc000017 	ldw	r16,0(sp)
   88b30:	dec00304 	addi	sp,sp,12
   88b34:	f800283a 	ret

00088b38 <__udivdi3>:
   88b38:	defff104 	addi	sp,sp,-60
   88b3c:	0015883a 	mov	r10,zero
   88b40:	2005883a 	mov	r2,r4
   88b44:	3011883a 	mov	r8,r6
   88b48:	df000d15 	stw	fp,52(sp)
   88b4c:	dd400a15 	stw	r21,40(sp)
   88b50:	dcc00815 	stw	r19,32(sp)
   88b54:	dfc00e15 	stw	ra,56(sp)
   88b58:	ddc00c15 	stw	r23,48(sp)
   88b5c:	dd800b15 	stw	r22,44(sp)
   88b60:	dd000915 	stw	r20,36(sp)
   88b64:	dc800715 	stw	r18,28(sp)
   88b68:	dc400615 	stw	r17,24(sp)
   88b6c:	dc000515 	stw	r16,20(sp)
   88b70:	da800315 	stw	r10,12(sp)
   88b74:	4027883a 	mov	r19,r8
   88b78:	1039883a 	mov	fp,r2
   88b7c:	282b883a 	mov	r21,r5
   88b80:	da800415 	stw	r10,16(sp)
   88b84:	3800401e 	bne	r7,zero,88c88 <__udivdi3+0x150>
   88b88:	2a006536 	bltu	r5,r8,88d20 <__udivdi3+0x1e8>
   88b8c:	4000b526 	beq	r8,zero,88e64 <__udivdi3+0x32c>
   88b90:	00bfffd4 	movui	r2,65535
   88b94:	14c0ad36 	bltu	r2,r19,88e4c <__udivdi3+0x314>
   88b98:	00803fc4 	movi	r2,255
   88b9c:	14c15e36 	bltu	r2,r19,89118 <__udivdi3+0x5e0>
   88ba0:	000b883a 	mov	r5,zero
   88ba4:	0005883a 	mov	r2,zero
   88ba8:	9884d83a 	srl	r2,r19,r2
   88bac:	01000274 	movhi	r4,9
   88bb0:	2137cd04 	addi	r4,r4,-8396
   88bb4:	01800804 	movi	r6,32
   88bb8:	1105883a 	add	r2,r2,r4
   88bbc:	10c00003 	ldbu	r3,0(r2)
   88bc0:	28c7883a 	add	r3,r5,r3
   88bc4:	30e9c83a 	sub	r20,r6,r3
   88bc8:	a0010a1e 	bne	r20,zero,88ff4 <__udivdi3+0x4bc>
   88bcc:	982ed43a 	srli	r23,r19,16
   88bd0:	acebc83a 	sub	r21,r21,r19
   88bd4:	9dbfffcc 	andi	r22,r19,65535
   88bd8:	05000044 	movi	r20,1
   88bdc:	a809883a 	mov	r4,r21
   88be0:	b80b883a 	mov	r5,r23
   88be4:	008aa6c0 	call	8aa6c <__udivsi3>
   88be8:	100b883a 	mov	r5,r2
   88bec:	b009883a 	mov	r4,r22
   88bf0:	1021883a 	mov	r16,r2
   88bf4:	008aa7c0 	call	8aa7c <__mulsi3>
   88bf8:	a809883a 	mov	r4,r21
   88bfc:	b80b883a 	mov	r5,r23
   88c00:	1023883a 	mov	r17,r2
   88c04:	008aa740 	call	8aa74 <__umodsi3>
   88c08:	1004943a 	slli	r2,r2,16
   88c0c:	e006d43a 	srli	r3,fp,16
   88c10:	10c4b03a 	or	r2,r2,r3
   88c14:	1440042e 	bgeu	r2,r17,88c28 <__udivdi3+0xf0>
   88c18:	14c5883a 	add	r2,r2,r19
   88c1c:	843fffc4 	addi	r16,r16,-1
   88c20:	14c00136 	bltu	r2,r19,88c28 <__udivdi3+0xf0>
   88c24:	14415c36 	bltu	r2,r17,89198 <__udivdi3+0x660>
   88c28:	1463c83a 	sub	r17,r2,r17
   88c2c:	8809883a 	mov	r4,r17
   88c30:	b80b883a 	mov	r5,r23
   88c34:	008aa6c0 	call	8aa6c <__udivsi3>
   88c38:	100b883a 	mov	r5,r2
   88c3c:	b009883a 	mov	r4,r22
   88c40:	102b883a 	mov	r21,r2
   88c44:	008aa7c0 	call	8aa7c <__mulsi3>
   88c48:	8809883a 	mov	r4,r17
   88c4c:	b80b883a 	mov	r5,r23
   88c50:	1025883a 	mov	r18,r2
   88c54:	008aa740 	call	8aa74 <__umodsi3>
   88c58:	1004943a 	slli	r2,r2,16
   88c5c:	e0ffffcc 	andi	r3,fp,65535
   88c60:	10c4b03a 	or	r2,r2,r3
   88c64:	1480042e 	bgeu	r2,r18,88c78 <__udivdi3+0x140>
   88c68:	9885883a 	add	r2,r19,r2
   88c6c:	ad7fffc4 	addi	r21,r21,-1
   88c70:	14c00136 	bltu	r2,r19,88c78 <__udivdi3+0x140>
   88c74:	14813c36 	bltu	r2,r18,89168 <__udivdi3+0x630>
   88c78:	8004943a 	slli	r2,r16,16
   88c7c:	a009883a 	mov	r4,r20
   88c80:	a884b03a 	or	r2,r21,r2
   88c84:	00001506 	br	88cdc <__udivdi3+0x1a4>
   88c88:	380d883a 	mov	r6,r7
   88c8c:	29c06c36 	bltu	r5,r7,88e40 <__udivdi3+0x308>
   88c90:	00bfffd4 	movui	r2,65535
   88c94:	11c06436 	bltu	r2,r7,88e28 <__udivdi3+0x2f0>
   88c98:	00803fc4 	movi	r2,255
   88c9c:	11c11836 	bltu	r2,r7,89100 <__udivdi3+0x5c8>
   88ca0:	000b883a 	mov	r5,zero
   88ca4:	0005883a 	mov	r2,zero
   88ca8:	3084d83a 	srl	r2,r6,r2
   88cac:	01000274 	movhi	r4,9
   88cb0:	2137cd04 	addi	r4,r4,-8396
   88cb4:	01c00804 	movi	r7,32
   88cb8:	1105883a 	add	r2,r2,r4
   88cbc:	10c00003 	ldbu	r3,0(r2)
   88cc0:	28c7883a 	add	r3,r5,r3
   88cc4:	38edc83a 	sub	r22,r7,r3
   88cc8:	b000731e 	bne	r22,zero,88e98 <__udivdi3+0x360>
   88ccc:	35400136 	bltu	r6,r21,88cd4 <__udivdi3+0x19c>
   88cd0:	e4c05b36 	bltu	fp,r19,88e40 <__udivdi3+0x308>
   88cd4:	00800044 	movi	r2,1
   88cd8:	0009883a 	mov	r4,zero
   88cdc:	d8800315 	stw	r2,12(sp)
   88ce0:	d9400317 	ldw	r5,12(sp)
   88ce4:	2007883a 	mov	r3,r4
   88ce8:	d9000415 	stw	r4,16(sp)
   88cec:	2805883a 	mov	r2,r5
   88cf0:	dfc00e17 	ldw	ra,56(sp)
   88cf4:	df000d17 	ldw	fp,52(sp)
   88cf8:	ddc00c17 	ldw	r23,48(sp)
   88cfc:	dd800b17 	ldw	r22,44(sp)
   88d00:	dd400a17 	ldw	r21,40(sp)
   88d04:	dd000917 	ldw	r20,36(sp)
   88d08:	dcc00817 	ldw	r19,32(sp)
   88d0c:	dc800717 	ldw	r18,28(sp)
   88d10:	dc400617 	ldw	r17,24(sp)
   88d14:	dc000517 	ldw	r16,20(sp)
   88d18:	dec00f04 	addi	sp,sp,60
   88d1c:	f800283a 	ret
   88d20:	00bfffd4 	movui	r2,65535
   88d24:	12005636 	bltu	r2,r8,88e80 <__udivdi3+0x348>
   88d28:	00803fc4 	movi	r2,255
   88d2c:	12010036 	bltu	r2,r8,89130 <__udivdi3+0x5f8>
   88d30:	000b883a 	mov	r5,zero
   88d34:	0005883a 	mov	r2,zero
   88d38:	9884d83a 	srl	r2,r19,r2
   88d3c:	01000274 	movhi	r4,9
   88d40:	2137cd04 	addi	r4,r4,-8396
   88d44:	01800804 	movi	r6,32
   88d48:	1105883a 	add	r2,r2,r4
   88d4c:	10c00003 	ldbu	r3,0(r2)
   88d50:	28c7883a 	add	r3,r5,r3
   88d54:	30cbc83a 	sub	r5,r6,r3
   88d58:	28000626 	beq	r5,zero,88d74 <__udivdi3+0x23c>
   88d5c:	3145c83a 	sub	r2,r6,r5
   88d60:	e084d83a 	srl	r2,fp,r2
   88d64:	a946983a 	sll	r3,r21,r5
   88d68:	e178983a 	sll	fp,fp,r5
   88d6c:	9966983a 	sll	r19,r19,r5
   88d70:	18aab03a 	or	r21,r3,r2
   88d74:	982ed43a 	srli	r23,r19,16
   88d78:	a809883a 	mov	r4,r21
   88d7c:	9cbfffcc 	andi	r18,r19,65535
   88d80:	b80b883a 	mov	r5,r23
   88d84:	008aa6c0 	call	8aa6c <__udivsi3>
   88d88:	100b883a 	mov	r5,r2
   88d8c:	9009883a 	mov	r4,r18
   88d90:	1021883a 	mov	r16,r2
   88d94:	008aa7c0 	call	8aa7c <__mulsi3>
   88d98:	a809883a 	mov	r4,r21
   88d9c:	b80b883a 	mov	r5,r23
   88da0:	1023883a 	mov	r17,r2
   88da4:	008aa740 	call	8aa74 <__umodsi3>
   88da8:	1004943a 	slli	r2,r2,16
   88dac:	e006d43a 	srli	r3,fp,16
   88db0:	10c4b03a 	or	r2,r2,r3
   88db4:	1440042e 	bgeu	r2,r17,88dc8 <__udivdi3+0x290>
   88db8:	14c5883a 	add	r2,r2,r19
   88dbc:	843fffc4 	addi	r16,r16,-1
   88dc0:	14c00136 	bltu	r2,r19,88dc8 <__udivdi3+0x290>
   88dc4:	1440ea36 	bltu	r2,r17,89170 <__udivdi3+0x638>
   88dc8:	1463c83a 	sub	r17,r2,r17
   88dcc:	8809883a 	mov	r4,r17
   88dd0:	b80b883a 	mov	r5,r23
   88dd4:	008aa6c0 	call	8aa6c <__udivsi3>
   88dd8:	100b883a 	mov	r5,r2
   88ddc:	9009883a 	mov	r4,r18
   88de0:	102b883a 	mov	r21,r2
   88de4:	008aa7c0 	call	8aa7c <__mulsi3>
   88de8:	8809883a 	mov	r4,r17
   88dec:	b80b883a 	mov	r5,r23
   88df0:	1025883a 	mov	r18,r2
   88df4:	008aa740 	call	8aa74 <__umodsi3>
   88df8:	1004943a 	slli	r2,r2,16
   88dfc:	e0ffffcc 	andi	r3,fp,65535
   88e00:	10c4b03a 	or	r2,r2,r3
   88e04:	1480042e 	bgeu	r2,r18,88e18 <__udivdi3+0x2e0>
   88e08:	9885883a 	add	r2,r19,r2
   88e0c:	ad7fffc4 	addi	r21,r21,-1
   88e10:	14c00136 	bltu	r2,r19,88e18 <__udivdi3+0x2e0>
   88e14:	1480d936 	bltu	r2,r18,8917c <__udivdi3+0x644>
   88e18:	8004943a 	slli	r2,r16,16
   88e1c:	0009883a 	mov	r4,zero
   88e20:	a884b03a 	or	r2,r21,r2
   88e24:	003fad06 	br	88cdc <__udivdi3+0x1a4>
   88e28:	00804034 	movhi	r2,256
   88e2c:	10bfffc4 	addi	r2,r2,-1
   88e30:	11c0b636 	bltu	r2,r7,8910c <__udivdi3+0x5d4>
   88e34:	01400404 	movi	r5,16
   88e38:	2805883a 	mov	r2,r5
   88e3c:	003f9a06 	br	88ca8 <__udivdi3+0x170>
   88e40:	0005883a 	mov	r2,zero
   88e44:	0009883a 	mov	r4,zero
   88e48:	003fa406 	br	88cdc <__udivdi3+0x1a4>
   88e4c:	00804034 	movhi	r2,256
   88e50:	10bfffc4 	addi	r2,r2,-1
   88e54:	14c0b336 	bltu	r2,r19,89124 <__udivdi3+0x5ec>
   88e58:	01400404 	movi	r5,16
   88e5c:	2805883a 	mov	r2,r5
   88e60:	003f5106 	br	88ba8 <__udivdi3+0x70>
   88e64:	01000044 	movi	r4,1
   88e68:	000b883a 	mov	r5,zero
   88e6c:	008aa6c0 	call	8aa6c <__udivsi3>
   88e70:	1027883a 	mov	r19,r2
   88e74:	00bfffd4 	movui	r2,65535
   88e78:	14fff436 	bltu	r2,r19,88e4c <__udivdi3+0x314>
   88e7c:	003f4606 	br	88b98 <__udivdi3+0x60>
   88e80:	00804034 	movhi	r2,256
   88e84:	10bfffc4 	addi	r2,r2,-1
   88e88:	1200ac36 	bltu	r2,r8,8913c <__udivdi3+0x604>
   88e8c:	01400404 	movi	r5,16
   88e90:	2805883a 	mov	r2,r5
   88e94:	003fa806 	br	88d38 <__udivdi3+0x200>
   88e98:	3d85c83a 	sub	r2,r7,r22
   88e9c:	3588983a 	sll	r4,r6,r22
   88ea0:	9886d83a 	srl	r3,r19,r2
   88ea4:	a8a2d83a 	srl	r17,r21,r2
   88ea8:	e084d83a 	srl	r2,fp,r2
   88eac:	20eeb03a 	or	r23,r4,r3
   88eb0:	b824d43a 	srli	r18,r23,16
   88eb4:	ad86983a 	sll	r3,r21,r22
   88eb8:	8809883a 	mov	r4,r17
   88ebc:	900b883a 	mov	r5,r18
   88ec0:	1886b03a 	or	r3,r3,r2
   88ec4:	d8c00115 	stw	r3,4(sp)
   88ec8:	bc3fffcc 	andi	r16,r23,65535
   88ecc:	008aa6c0 	call	8aa6c <__udivsi3>
   88ed0:	100b883a 	mov	r5,r2
   88ed4:	8009883a 	mov	r4,r16
   88ed8:	1029883a 	mov	r20,r2
   88edc:	008aa7c0 	call	8aa7c <__mulsi3>
   88ee0:	900b883a 	mov	r5,r18
   88ee4:	8809883a 	mov	r4,r17
   88ee8:	102b883a 	mov	r21,r2
   88eec:	008aa740 	call	8aa74 <__umodsi3>
   88ef0:	d9400117 	ldw	r5,4(sp)
   88ef4:	1004943a 	slli	r2,r2,16
   88ef8:	9da6983a 	sll	r19,r19,r22
   88efc:	2806d43a 	srli	r3,r5,16
   88f00:	10c4b03a 	or	r2,r2,r3
   88f04:	1540032e 	bgeu	r2,r21,88f14 <__udivdi3+0x3dc>
   88f08:	15c5883a 	add	r2,r2,r23
   88f0c:	a53fffc4 	addi	r20,r20,-1
   88f10:	15c0912e 	bgeu	r2,r23,89158 <__udivdi3+0x620>
   88f14:	1563c83a 	sub	r17,r2,r21
   88f18:	8809883a 	mov	r4,r17
   88f1c:	900b883a 	mov	r5,r18
   88f20:	008aa6c0 	call	8aa6c <__udivsi3>
   88f24:	100b883a 	mov	r5,r2
   88f28:	8009883a 	mov	r4,r16
   88f2c:	102b883a 	mov	r21,r2
   88f30:	008aa7c0 	call	8aa7c <__mulsi3>
   88f34:	8809883a 	mov	r4,r17
   88f38:	900b883a 	mov	r5,r18
   88f3c:	1021883a 	mov	r16,r2
   88f40:	008aa740 	call	8aa74 <__umodsi3>
   88f44:	da800117 	ldw	r10,4(sp)
   88f48:	1004943a 	slli	r2,r2,16
   88f4c:	50ffffcc 	andi	r3,r10,65535
   88f50:	10c6b03a 	or	r3,r2,r3
   88f54:	1c00032e 	bgeu	r3,r16,88f64 <__udivdi3+0x42c>
   88f58:	1dc7883a 	add	r3,r3,r23
   88f5c:	ad7fffc4 	addi	r21,r21,-1
   88f60:	1dc0792e 	bgeu	r3,r23,89148 <__udivdi3+0x610>
   88f64:	a004943a 	slli	r2,r20,16
   88f68:	982ed43a 	srli	r23,r19,16
   88f6c:	9cffffcc 	andi	r19,r19,65535
   88f70:	a8a4b03a 	or	r18,r21,r2
   88f74:	947fffcc 	andi	r17,r18,65535
   88f78:	902ad43a 	srli	r21,r18,16
   88f7c:	8809883a 	mov	r4,r17
   88f80:	980b883a 	mov	r5,r19
   88f84:	1c21c83a 	sub	r16,r3,r16
   88f88:	008aa7c0 	call	8aa7c <__mulsi3>
   88f8c:	8809883a 	mov	r4,r17
   88f90:	b80b883a 	mov	r5,r23
   88f94:	1029883a 	mov	r20,r2
   88f98:	008aa7c0 	call	8aa7c <__mulsi3>
   88f9c:	980b883a 	mov	r5,r19
   88fa0:	a809883a 	mov	r4,r21
   88fa4:	1023883a 	mov	r17,r2
   88fa8:	008aa7c0 	call	8aa7c <__mulsi3>
   88fac:	a809883a 	mov	r4,r21
   88fb0:	b80b883a 	mov	r5,r23
   88fb4:	1027883a 	mov	r19,r2
   88fb8:	008aa7c0 	call	8aa7c <__mulsi3>
   88fbc:	1009883a 	mov	r4,r2
   88fc0:	a004d43a 	srli	r2,r20,16
   88fc4:	8ce3883a 	add	r17,r17,r19
   88fc8:	1447883a 	add	r3,r2,r17
   88fcc:	1cc0022e 	bgeu	r3,r19,88fd8 <__udivdi3+0x4a0>
   88fd0:	00800074 	movhi	r2,1
   88fd4:	2089883a 	add	r4,r4,r2
   88fd8:	1804d43a 	srli	r2,r3,16
   88fdc:	2085883a 	add	r2,r4,r2
   88fe0:	80804436 	bltu	r16,r2,890f4 <__udivdi3+0x5bc>
   88fe4:	80803e26 	beq	r16,r2,890e0 <__udivdi3+0x5a8>
   88fe8:	9005883a 	mov	r2,r18
   88fec:	0009883a 	mov	r4,zero
   88ff0:	003f3a06 	br	88cdc <__udivdi3+0x1a4>
   88ff4:	9d26983a 	sll	r19,r19,r20
   88ff8:	3505c83a 	sub	r2,r6,r20
   88ffc:	a8a2d83a 	srl	r17,r21,r2
   89000:	982ed43a 	srli	r23,r19,16
   89004:	e084d83a 	srl	r2,fp,r2
   89008:	ad06983a 	sll	r3,r21,r20
   8900c:	8809883a 	mov	r4,r17
   89010:	b80b883a 	mov	r5,r23
   89014:	1886b03a 	or	r3,r3,r2
   89018:	d8c00015 	stw	r3,0(sp)
   8901c:	9dbfffcc 	andi	r22,r19,65535
   89020:	008aa6c0 	call	8aa6c <__udivsi3>
   89024:	100b883a 	mov	r5,r2
   89028:	b009883a 	mov	r4,r22
   8902c:	d8800215 	stw	r2,8(sp)
   89030:	008aa7c0 	call	8aa7c <__mulsi3>
   89034:	8809883a 	mov	r4,r17
   89038:	b80b883a 	mov	r5,r23
   8903c:	102b883a 	mov	r21,r2
   89040:	008aa740 	call	8aa74 <__umodsi3>
   89044:	d9000017 	ldw	r4,0(sp)
   89048:	1004943a 	slli	r2,r2,16
   8904c:	2006d43a 	srli	r3,r4,16
   89050:	10c4b03a 	or	r2,r2,r3
   89054:	1540052e 	bgeu	r2,r21,8906c <__udivdi3+0x534>
   89058:	d9400217 	ldw	r5,8(sp)
   8905c:	14c5883a 	add	r2,r2,r19
   89060:	297fffc4 	addi	r5,r5,-1
   89064:	d9400215 	stw	r5,8(sp)
   89068:	14c0462e 	bgeu	r2,r19,89184 <__udivdi3+0x64c>
   8906c:	1563c83a 	sub	r17,r2,r21
   89070:	8809883a 	mov	r4,r17
   89074:	b80b883a 	mov	r5,r23
   89078:	008aa6c0 	call	8aa6c <__udivsi3>
   8907c:	100b883a 	mov	r5,r2
   89080:	b009883a 	mov	r4,r22
   89084:	1025883a 	mov	r18,r2
   89088:	008aa7c0 	call	8aa7c <__mulsi3>
   8908c:	8809883a 	mov	r4,r17
   89090:	b80b883a 	mov	r5,r23
   89094:	1021883a 	mov	r16,r2
   89098:	008aa740 	call	8aa74 <__umodsi3>
   8909c:	da800017 	ldw	r10,0(sp)
   890a0:	1004943a 	slli	r2,r2,16
   890a4:	50ffffcc 	andi	r3,r10,65535
   890a8:	10c6b03a 	or	r3,r2,r3
   890ac:	1c00062e 	bgeu	r3,r16,890c8 <__udivdi3+0x590>
   890b0:	1cc7883a 	add	r3,r3,r19
   890b4:	94bfffc4 	addi	r18,r18,-1
   890b8:	1cc00336 	bltu	r3,r19,890c8 <__udivdi3+0x590>
   890bc:	1c00022e 	bgeu	r3,r16,890c8 <__udivdi3+0x590>
   890c0:	94bfffc4 	addi	r18,r18,-1
   890c4:	1cc7883a 	add	r3,r3,r19
   890c8:	d9000217 	ldw	r4,8(sp)
   890cc:	e538983a 	sll	fp,fp,r20
   890d0:	1c2bc83a 	sub	r21,r3,r16
   890d4:	2004943a 	slli	r2,r4,16
   890d8:	90a8b03a 	or	r20,r18,r2
   890dc:	003ebf06 	br	88bdc <__udivdi3+0xa4>
   890e0:	1804943a 	slli	r2,r3,16
   890e4:	e588983a 	sll	r4,fp,r22
   890e8:	a0ffffcc 	andi	r3,r20,65535
   890ec:	10c5883a 	add	r2,r2,r3
   890f0:	20bfbd2e 	bgeu	r4,r2,88fe8 <__udivdi3+0x4b0>
   890f4:	90bfffc4 	addi	r2,r18,-1
   890f8:	0009883a 	mov	r4,zero
   890fc:	003ef706 	br	88cdc <__udivdi3+0x1a4>
   89100:	01400204 	movi	r5,8
   89104:	2805883a 	mov	r2,r5
   89108:	003ee706 	br	88ca8 <__udivdi3+0x170>
   8910c:	01400604 	movi	r5,24
   89110:	2805883a 	mov	r2,r5
   89114:	003ee406 	br	88ca8 <__udivdi3+0x170>
   89118:	01400204 	movi	r5,8
   8911c:	2805883a 	mov	r2,r5
   89120:	003ea106 	br	88ba8 <__udivdi3+0x70>
   89124:	01400604 	movi	r5,24
   89128:	2805883a 	mov	r2,r5
   8912c:	003e9e06 	br	88ba8 <__udivdi3+0x70>
   89130:	01400204 	movi	r5,8
   89134:	2805883a 	mov	r2,r5
   89138:	003eff06 	br	88d38 <__udivdi3+0x200>
   8913c:	01400604 	movi	r5,24
   89140:	2805883a 	mov	r2,r5
   89144:	003efc06 	br	88d38 <__udivdi3+0x200>
   89148:	1c3f862e 	bgeu	r3,r16,88f64 <__udivdi3+0x42c>
   8914c:	1dc7883a 	add	r3,r3,r23
   89150:	ad7fffc4 	addi	r21,r21,-1
   89154:	003f8306 	br	88f64 <__udivdi3+0x42c>
   89158:	157f6e2e 	bgeu	r2,r21,88f14 <__udivdi3+0x3dc>
   8915c:	a53fffc4 	addi	r20,r20,-1
   89160:	15c5883a 	add	r2,r2,r23
   89164:	003f6b06 	br	88f14 <__udivdi3+0x3dc>
   89168:	ad7fffc4 	addi	r21,r21,-1
   8916c:	003ec206 	br	88c78 <__udivdi3+0x140>
   89170:	843fffc4 	addi	r16,r16,-1
   89174:	14c5883a 	add	r2,r2,r19
   89178:	003f1306 	br	88dc8 <__udivdi3+0x290>
   8917c:	ad7fffc4 	addi	r21,r21,-1
   89180:	003f2506 	br	88e18 <__udivdi3+0x2e0>
   89184:	157fb92e 	bgeu	r2,r21,8906c <__udivdi3+0x534>
   89188:	297fffc4 	addi	r5,r5,-1
   8918c:	14c5883a 	add	r2,r2,r19
   89190:	d9400215 	stw	r5,8(sp)
   89194:	003fb506 	br	8906c <__udivdi3+0x534>
   89198:	843fffc4 	addi	r16,r16,-1
   8919c:	14c5883a 	add	r2,r2,r19
   891a0:	003ea106 	br	88c28 <__udivdi3+0xf0>

000891a4 <__umoddi3>:
   891a4:	defff004 	addi	sp,sp,-64
   891a8:	3011883a 	mov	r8,r6
   891ac:	000d883a 	mov	r6,zero
   891b0:	dd400b15 	stw	r21,44(sp)
   891b4:	dcc00915 	stw	r19,36(sp)
   891b8:	dc000615 	stw	r16,24(sp)
   891bc:	dfc00f15 	stw	ra,60(sp)
   891c0:	df000e15 	stw	fp,56(sp)
   891c4:	ddc00d15 	stw	r23,52(sp)
   891c8:	dd800c15 	stw	r22,48(sp)
   891cc:	dd000a15 	stw	r20,40(sp)
   891d0:	dc800815 	stw	r18,32(sp)
   891d4:	dc400715 	stw	r17,28(sp)
   891d8:	2817883a 	mov	r11,r5
   891dc:	d9800415 	stw	r6,16(sp)
   891e0:	4027883a 	mov	r19,r8
   891e4:	d9800515 	stw	r6,20(sp)
   891e8:	2021883a 	mov	r16,r4
   891ec:	282b883a 	mov	r21,r5
   891f0:	38002c1e 	bne	r7,zero,892a4 <__umoddi3+0x100>
   891f4:	2a005636 	bltu	r5,r8,89350 <__umoddi3+0x1ac>
   891f8:	40009a26 	beq	r8,zero,89464 <__umoddi3+0x2c0>
   891fc:	00bfffd4 	movui	r2,65535
   89200:	14c09236 	bltu	r2,r19,8944c <__umoddi3+0x2a8>
   89204:	00803fc4 	movi	r2,255
   89208:	14c15c36 	bltu	r2,r19,8977c <__umoddi3+0x5d8>
   8920c:	000b883a 	mov	r5,zero
   89210:	0005883a 	mov	r2,zero
   89214:	9884d83a 	srl	r2,r19,r2
   89218:	01000274 	movhi	r4,9
   8921c:	2137cd04 	addi	r4,r4,-8396
   89220:	01800804 	movi	r6,32
   89224:	1105883a 	add	r2,r2,r4
   89228:	10c00003 	ldbu	r3,0(r2)
   8922c:	28c7883a 	add	r3,r5,r3
   89230:	30e5c83a 	sub	r18,r6,r3
   89234:	9000a41e 	bne	r18,zero,894c8 <__umoddi3+0x324>
   89238:	982ed43a 	srli	r23,r19,16
   8923c:	acebc83a 	sub	r21,r21,r19
   89240:	9d3fffcc 	andi	r20,r19,65535
   89244:	002d883a 	mov	r22,zero
   89248:	a809883a 	mov	r4,r21
   8924c:	b80b883a 	mov	r5,r23
   89250:	008aa6c0 	call	8aa6c <__udivsi3>
   89254:	100b883a 	mov	r5,r2
   89258:	a009883a 	mov	r4,r20
   8925c:	008aa7c0 	call	8aa7c <__mulsi3>
   89260:	a809883a 	mov	r4,r21
   89264:	b80b883a 	mov	r5,r23
   89268:	1023883a 	mov	r17,r2
   8926c:	008aa740 	call	8aa74 <__umodsi3>
   89270:	1004943a 	slli	r2,r2,16
   89274:	8006d43a 	srli	r3,r16,16
   89278:	10c4b03a 	or	r2,r2,r3
   8927c:	1440032e 	bgeu	r2,r17,8928c <__umoddi3+0xe8>
   89280:	14c5883a 	add	r2,r2,r19
   89284:	14c00136 	bltu	r2,r19,8928c <__umoddi3+0xe8>
   89288:	14415836 	bltu	r2,r17,897ec <__umoddi3+0x648>
   8928c:	1463c83a 	sub	r17,r2,r17
   89290:	8809883a 	mov	r4,r17
   89294:	b80b883a 	mov	r5,r23
   89298:	008aa6c0 	call	8aa6c <__udivsi3>
   8929c:	a009883a 	mov	r4,r20
   892a0:	00005306 	br	893f0 <__umoddi3+0x24c>
   892a4:	380d883a 	mov	r6,r7
   892a8:	29c0132e 	bgeu	r5,r7,892f8 <__umoddi3+0x154>
   892ac:	d9000415 	stw	r4,16(sp)
   892b0:	d9400515 	stw	r5,20(sp)
   892b4:	d9400417 	ldw	r5,16(sp)
   892b8:	5813883a 	mov	r9,r11
   892bc:	2811883a 	mov	r8,r5
   892c0:	4005883a 	mov	r2,r8
   892c4:	4807883a 	mov	r3,r9
   892c8:	dfc00f17 	ldw	ra,60(sp)
   892cc:	df000e17 	ldw	fp,56(sp)
   892d0:	ddc00d17 	ldw	r23,52(sp)
   892d4:	dd800c17 	ldw	r22,48(sp)
   892d8:	dd400b17 	ldw	r21,44(sp)
   892dc:	dd000a17 	ldw	r20,40(sp)
   892e0:	dcc00917 	ldw	r19,36(sp)
   892e4:	dc800817 	ldw	r18,32(sp)
   892e8:	dc400717 	ldw	r17,28(sp)
   892ec:	dc000617 	ldw	r16,24(sp)
   892f0:	dec01004 	addi	sp,sp,64
   892f4:	f800283a 	ret
   892f8:	00bfffd4 	movui	r2,65535
   892fc:	11c06636 	bltu	r2,r7,89498 <__umoddi3+0x2f4>
   89300:	00803fc4 	movi	r2,255
   89304:	11c12036 	bltu	r2,r7,89788 <__umoddi3+0x5e4>
   89308:	000b883a 	mov	r5,zero
   8930c:	0005883a 	mov	r2,zero
   89310:	3084d83a 	srl	r2,r6,r2
   89314:	01000274 	movhi	r4,9
   89318:	2137cd04 	addi	r4,r4,-8396
   8931c:	01c00804 	movi	r7,32
   89320:	1105883a 	add	r2,r2,r4
   89324:	10c00003 	ldbu	r3,0(r2)
   89328:	28c7883a 	add	r3,r5,r3
   8932c:	38e5c83a 	sub	r18,r7,r3
   89330:	9000941e 	bne	r18,zero,89584 <__umoddi3+0x3e0>
   89334:	35405e36 	bltu	r6,r21,894b0 <__umoddi3+0x30c>
   89338:	84c05d2e 	bgeu	r16,r19,894b0 <__umoddi3+0x30c>
   8933c:	8011883a 	mov	r8,r16
   89340:	a813883a 	mov	r9,r21
   89344:	dc000415 	stw	r16,16(sp)
   89348:	dd400515 	stw	r21,20(sp)
   8934c:	003fdc06 	br	892c0 <__umoddi3+0x11c>
   89350:	00bfffd4 	movui	r2,65535
   89354:	12004a36 	bltu	r2,r8,89480 <__umoddi3+0x2dc>
   89358:	00803fc4 	movi	r2,255
   8935c:	12010d36 	bltu	r2,r8,89794 <__umoddi3+0x5f0>
   89360:	000b883a 	mov	r5,zero
   89364:	0005883a 	mov	r2,zero
   89368:	9884d83a 	srl	r2,r19,r2
   8936c:	01000274 	movhi	r4,9
   89370:	2137cd04 	addi	r4,r4,-8396
   89374:	01800804 	movi	r6,32
   89378:	1105883a 	add	r2,r2,r4
   8937c:	10c00003 	ldbu	r3,0(r2)
   89380:	28c7883a 	add	r3,r5,r3
   89384:	30c7c83a 	sub	r3,r6,r3
   89388:	1800dc1e 	bne	r3,zero,896fc <__umoddi3+0x558>
   8938c:	002d883a 	mov	r22,zero
   89390:	982ed43a 	srli	r23,r19,16
   89394:	a809883a 	mov	r4,r21
   89398:	9cbfffcc 	andi	r18,r19,65535
   8939c:	b80b883a 	mov	r5,r23
   893a0:	008aa6c0 	call	8aa6c <__udivsi3>
   893a4:	100b883a 	mov	r5,r2
   893a8:	9009883a 	mov	r4,r18
   893ac:	008aa7c0 	call	8aa7c <__mulsi3>
   893b0:	a809883a 	mov	r4,r21
   893b4:	b80b883a 	mov	r5,r23
   893b8:	1023883a 	mov	r17,r2
   893bc:	008aa740 	call	8aa74 <__umodsi3>
   893c0:	1004943a 	slli	r2,r2,16
   893c4:	8006d43a 	srli	r3,r16,16
   893c8:	10c4b03a 	or	r2,r2,r3
   893cc:	1440032e 	bgeu	r2,r17,893dc <__umoddi3+0x238>
   893d0:	14c5883a 	add	r2,r2,r19
   893d4:	14c00136 	bltu	r2,r19,893dc <__umoddi3+0x238>
   893d8:	14410236 	bltu	r2,r17,897e4 <__umoddi3+0x640>
   893dc:	1463c83a 	sub	r17,r2,r17
   893e0:	8809883a 	mov	r4,r17
   893e4:	b80b883a 	mov	r5,r23
   893e8:	008aa6c0 	call	8aa6c <__udivsi3>
   893ec:	9009883a 	mov	r4,r18
   893f0:	100b883a 	mov	r5,r2
   893f4:	008aa7c0 	call	8aa7c <__mulsi3>
   893f8:	8809883a 	mov	r4,r17
   893fc:	b80b883a 	mov	r5,r23
   89400:	102b883a 	mov	r21,r2
   89404:	008aa740 	call	8aa74 <__umodsi3>
   89408:	1004943a 	slli	r2,r2,16
   8940c:	80ffffcc 	andi	r3,r16,65535
   89410:	10c4b03a 	or	r2,r2,r3
   89414:	1540042e 	bgeu	r2,r21,89428 <__umoddi3+0x284>
   89418:	14c5883a 	add	r2,r2,r19
   8941c:	14c00236 	bltu	r2,r19,89428 <__umoddi3+0x284>
   89420:	1540012e 	bgeu	r2,r21,89428 <__umoddi3+0x284>
   89424:	14c5883a 	add	r2,r2,r19
   89428:	1545c83a 	sub	r2,r2,r21
   8942c:	1584d83a 	srl	r2,r2,r22
   89430:	0013883a 	mov	r9,zero
   89434:	d8800415 	stw	r2,16(sp)
   89438:	d8c00417 	ldw	r3,16(sp)
   8943c:	0005883a 	mov	r2,zero
   89440:	d8800515 	stw	r2,20(sp)
   89444:	1811883a 	mov	r8,r3
   89448:	003f9d06 	br	892c0 <__umoddi3+0x11c>
   8944c:	00804034 	movhi	r2,256
   89450:	10bfffc4 	addi	r2,r2,-1
   89454:	14c0c636 	bltu	r2,r19,89770 <__umoddi3+0x5cc>
   89458:	01400404 	movi	r5,16
   8945c:	2805883a 	mov	r2,r5
   89460:	003f6c06 	br	89214 <__umoddi3+0x70>
   89464:	01000044 	movi	r4,1
   89468:	000b883a 	mov	r5,zero
   8946c:	008aa6c0 	call	8aa6c <__udivsi3>
   89470:	1027883a 	mov	r19,r2
   89474:	00bfffd4 	movui	r2,65535
   89478:	14fff436 	bltu	r2,r19,8944c <__umoddi3+0x2a8>
   8947c:	003f6106 	br	89204 <__umoddi3+0x60>
   89480:	00804034 	movhi	r2,256
   89484:	10bfffc4 	addi	r2,r2,-1
   89488:	1200c536 	bltu	r2,r8,897a0 <__umoddi3+0x5fc>
   8948c:	01400404 	movi	r5,16
   89490:	2805883a 	mov	r2,r5
   89494:	003fb406 	br	89368 <__umoddi3+0x1c4>
   89498:	00804034 	movhi	r2,256
   8949c:	10bfffc4 	addi	r2,r2,-1
   894a0:	11c0c236 	bltu	r2,r7,897ac <__umoddi3+0x608>
   894a4:	01400404 	movi	r5,16
   894a8:	2805883a 	mov	r2,r5
   894ac:	003f9806 	br	89310 <__umoddi3+0x16c>
   894b0:	84c9c83a 	sub	r4,r16,r19
   894b4:	8105803a 	cmpltu	r2,r16,r4
   894b8:	a987c83a 	sub	r3,r21,r6
   894bc:	18abc83a 	sub	r21,r3,r2
   894c0:	2021883a 	mov	r16,r4
   894c4:	003f9d06 	br	8933c <__umoddi3+0x198>
   894c8:	9ca6983a 	sll	r19,r19,r18
   894cc:	3485c83a 	sub	r2,r6,r18
   894d0:	a8a2d83a 	srl	r17,r21,r2
   894d4:	982ed43a 	srli	r23,r19,16
   894d8:	ac86983a 	sll	r3,r21,r18
   894dc:	8084d83a 	srl	r2,r16,r2
   894e0:	8809883a 	mov	r4,r17
   894e4:	b80b883a 	mov	r5,r23
   894e8:	18b8b03a 	or	fp,r3,r2
   894ec:	9d3fffcc 	andi	r20,r19,65535
   894f0:	008aa6c0 	call	8aa6c <__udivsi3>
   894f4:	100b883a 	mov	r5,r2
   894f8:	a009883a 	mov	r4,r20
   894fc:	008aa7c0 	call	8aa7c <__mulsi3>
   89500:	8809883a 	mov	r4,r17
   89504:	b80b883a 	mov	r5,r23
   89508:	102b883a 	mov	r21,r2
   8950c:	008aa740 	call	8aa74 <__umodsi3>
   89510:	1004943a 	slli	r2,r2,16
   89514:	e006d43a 	srli	r3,fp,16
   89518:	902d883a 	mov	r22,r18
   8951c:	10c4b03a 	or	r2,r2,r3
   89520:	1540022e 	bgeu	r2,r21,8952c <__umoddi3+0x388>
   89524:	14c5883a 	add	r2,r2,r19
   89528:	14c0ab2e 	bgeu	r2,r19,897d8 <__umoddi3+0x634>
   8952c:	1563c83a 	sub	r17,r2,r21
   89530:	8809883a 	mov	r4,r17
   89534:	b80b883a 	mov	r5,r23
   89538:	008aa6c0 	call	8aa6c <__udivsi3>
   8953c:	100b883a 	mov	r5,r2
   89540:	a009883a 	mov	r4,r20
   89544:	008aa7c0 	call	8aa7c <__mulsi3>
   89548:	8809883a 	mov	r4,r17
   8954c:	b80b883a 	mov	r5,r23
   89550:	102b883a 	mov	r21,r2
   89554:	008aa740 	call	8aa74 <__umodsi3>
   89558:	1004943a 	slli	r2,r2,16
   8955c:	e0ffffcc 	andi	r3,fp,65535
   89560:	10c4b03a 	or	r2,r2,r3
   89564:	1540042e 	bgeu	r2,r21,89578 <__umoddi3+0x3d4>
   89568:	14c5883a 	add	r2,r2,r19
   8956c:	14c00236 	bltu	r2,r19,89578 <__umoddi3+0x3d4>
   89570:	1540012e 	bgeu	r2,r21,89578 <__umoddi3+0x3d4>
   89574:	14c5883a 	add	r2,r2,r19
   89578:	84a0983a 	sll	r16,r16,r18
   8957c:	156bc83a 	sub	r21,r2,r21
   89580:	003f3106 	br	89248 <__umoddi3+0xa4>
   89584:	3c8fc83a 	sub	r7,r7,r18
   89588:	3486983a 	sll	r3,r6,r18
   8958c:	99c4d83a 	srl	r2,r19,r7
   89590:	a9e2d83a 	srl	r17,r21,r7
   89594:	ac8c983a 	sll	r6,r21,r18
   89598:	18acb03a 	or	r22,r3,r2
   8959c:	b02ed43a 	srli	r23,r22,16
   895a0:	81c4d83a 	srl	r2,r16,r7
   895a4:	8809883a 	mov	r4,r17
   895a8:	b80b883a 	mov	r5,r23
   895ac:	308cb03a 	or	r6,r6,r2
   895b0:	d9c00315 	stw	r7,12(sp)
   895b4:	d9800215 	stw	r6,8(sp)
   895b8:	b53fffcc 	andi	r20,r22,65535
   895bc:	008aa6c0 	call	8aa6c <__udivsi3>
   895c0:	100b883a 	mov	r5,r2
   895c4:	a009883a 	mov	r4,r20
   895c8:	1039883a 	mov	fp,r2
   895cc:	008aa7c0 	call	8aa7c <__mulsi3>
   895d0:	8809883a 	mov	r4,r17
   895d4:	b80b883a 	mov	r5,r23
   895d8:	102b883a 	mov	r21,r2
   895dc:	008aa740 	call	8aa74 <__umodsi3>
   895e0:	d9000217 	ldw	r4,8(sp)
   895e4:	1004943a 	slli	r2,r2,16
   895e8:	9ca6983a 	sll	r19,r19,r18
   895ec:	2006d43a 	srli	r3,r4,16
   895f0:	84a0983a 	sll	r16,r16,r18
   895f4:	dcc00015 	stw	r19,0(sp)
   895f8:	10c4b03a 	or	r2,r2,r3
   895fc:	dc000115 	stw	r16,4(sp)
   89600:	1540032e 	bgeu	r2,r21,89610 <__umoddi3+0x46c>
   89604:	1585883a 	add	r2,r2,r22
   89608:	e73fffc4 	addi	fp,fp,-1
   8960c:	15806e2e 	bgeu	r2,r22,897c8 <__umoddi3+0x624>
   89610:	1563c83a 	sub	r17,r2,r21
   89614:	8809883a 	mov	r4,r17
   89618:	b80b883a 	mov	r5,r23
   8961c:	008aa6c0 	call	8aa6c <__udivsi3>
   89620:	100b883a 	mov	r5,r2
   89624:	a009883a 	mov	r4,r20
   89628:	1021883a 	mov	r16,r2
   8962c:	008aa7c0 	call	8aa7c <__mulsi3>
   89630:	b80b883a 	mov	r5,r23
   89634:	8809883a 	mov	r4,r17
   89638:	1029883a 	mov	r20,r2
   8963c:	008aa740 	call	8aa74 <__umodsi3>
   89640:	d9400217 	ldw	r5,8(sp)
   89644:	1004943a 	slli	r2,r2,16
   89648:	28ffffcc 	andi	r3,r5,65535
   8964c:	10c4b03a 	or	r2,r2,r3
   89650:	1500032e 	bgeu	r2,r20,89660 <__umoddi3+0x4bc>
   89654:	1585883a 	add	r2,r2,r22
   89658:	843fffc4 	addi	r16,r16,-1
   8965c:	1580562e 	bgeu	r2,r22,897b8 <__umoddi3+0x614>
   89660:	d9800017 	ldw	r6,0(sp)
   89664:	e022943a 	slli	r17,fp,16
   89668:	302ed43a 	srli	r23,r6,16
   8966c:	8462b03a 	or	r17,r16,r17
   89670:	34ffffcc 	andi	r19,r6,65535
   89674:	882ad43a 	srli	r21,r17,16
   89678:	8c7fffcc 	andi	r17,r17,65535
   8967c:	8809883a 	mov	r4,r17
   89680:	980b883a 	mov	r5,r19
   89684:	1521c83a 	sub	r16,r2,r20
   89688:	008aa7c0 	call	8aa7c <__mulsi3>
   8968c:	8809883a 	mov	r4,r17
   89690:	b80b883a 	mov	r5,r23
   89694:	1029883a 	mov	r20,r2
   89698:	008aa7c0 	call	8aa7c <__mulsi3>
   8969c:	980b883a 	mov	r5,r19
   896a0:	a809883a 	mov	r4,r21
   896a4:	1023883a 	mov	r17,r2
   896a8:	008aa7c0 	call	8aa7c <__mulsi3>
   896ac:	a809883a 	mov	r4,r21
   896b0:	b80b883a 	mov	r5,r23
   896b4:	1027883a 	mov	r19,r2
   896b8:	008aa7c0 	call	8aa7c <__mulsi3>
   896bc:	100b883a 	mov	r5,r2
   896c0:	a004d43a 	srli	r2,r20,16
   896c4:	8ce3883a 	add	r17,r17,r19
   896c8:	1449883a 	add	r4,r2,r17
   896cc:	24c0022e 	bgeu	r4,r19,896d8 <__umoddi3+0x534>
   896d0:	00800074 	movhi	r2,1
   896d4:	288b883a 	add	r5,r5,r2
   896d8:	2004d43a 	srli	r2,r4,16
   896dc:	2008943a 	slli	r4,r4,16
   896e0:	a0ffffcc 	andi	r3,r20,65535
   896e4:	288d883a 	add	r6,r5,r2
   896e8:	20c9883a 	add	r4,r4,r3
   896ec:	81800b36 	bltu	r16,r6,8971c <__umoddi3+0x578>
   896f0:	81804026 	beq	r16,r6,897f4 <__umoddi3+0x650>
   896f4:	818dc83a 	sub	r6,r16,r6
   896f8:	00000f06 	br	89738 <__umoddi3+0x594>
   896fc:	30c5c83a 	sub	r2,r6,r3
   89700:	182d883a 	mov	r22,r3
   89704:	8084d83a 	srl	r2,r16,r2
   89708:	a8c6983a 	sll	r3,r21,r3
   8970c:	9da6983a 	sll	r19,r19,r22
   89710:	85a0983a 	sll	r16,r16,r22
   89714:	18aab03a 	or	r21,r3,r2
   89718:	003f1d06 	br	89390 <__umoddi3+0x1ec>
   8971c:	d8c00017 	ldw	r3,0(sp)
   89720:	20c5c83a 	sub	r2,r4,r3
   89724:	2089803a 	cmpltu	r4,r4,r2
   89728:	3587c83a 	sub	r3,r6,r22
   8972c:	1907c83a 	sub	r3,r3,r4
   89730:	80cdc83a 	sub	r6,r16,r3
   89734:	1009883a 	mov	r4,r2
   89738:	d9400117 	ldw	r5,4(sp)
   8973c:	2905c83a 	sub	r2,r5,r4
   89740:	2887803a 	cmpltu	r3,r5,r2
   89744:	30c7c83a 	sub	r3,r6,r3
   89748:	d9800317 	ldw	r6,12(sp)
   8974c:	1484d83a 	srl	r2,r2,r18
   89750:	1988983a 	sll	r4,r3,r6
   89754:	1c86d83a 	srl	r3,r3,r18
   89758:	2088b03a 	or	r4,r4,r2
   8975c:	2011883a 	mov	r8,r4
   89760:	1813883a 	mov	r9,r3
   89764:	d9000415 	stw	r4,16(sp)
   89768:	d8c00515 	stw	r3,20(sp)
   8976c:	003ed406 	br	892c0 <__umoddi3+0x11c>
   89770:	01400604 	movi	r5,24
   89774:	2805883a 	mov	r2,r5
   89778:	003ea606 	br	89214 <__umoddi3+0x70>
   8977c:	01400204 	movi	r5,8
   89780:	2805883a 	mov	r2,r5
   89784:	003ea306 	br	89214 <__umoddi3+0x70>
   89788:	01400204 	movi	r5,8
   8978c:	2805883a 	mov	r2,r5
   89790:	003edf06 	br	89310 <__umoddi3+0x16c>
   89794:	01400204 	movi	r5,8
   89798:	2805883a 	mov	r2,r5
   8979c:	003ef206 	br	89368 <__umoddi3+0x1c4>
   897a0:	01400604 	movi	r5,24
   897a4:	2805883a 	mov	r2,r5
   897a8:	003eef06 	br	89368 <__umoddi3+0x1c4>
   897ac:	01400604 	movi	r5,24
   897b0:	2805883a 	mov	r2,r5
   897b4:	003ed606 	br	89310 <__umoddi3+0x16c>
   897b8:	153fa92e 	bgeu	r2,r20,89660 <__umoddi3+0x4bc>
   897bc:	843fffc4 	addi	r16,r16,-1
   897c0:	1585883a 	add	r2,r2,r22
   897c4:	003fa606 	br	89660 <__umoddi3+0x4bc>
   897c8:	157f912e 	bgeu	r2,r21,89610 <__umoddi3+0x46c>
   897cc:	e73fffc4 	addi	fp,fp,-1
   897d0:	1585883a 	add	r2,r2,r22
   897d4:	003f8e06 	br	89610 <__umoddi3+0x46c>
   897d8:	157f542e 	bgeu	r2,r21,8952c <__umoddi3+0x388>
   897dc:	14c5883a 	add	r2,r2,r19
   897e0:	003f5206 	br	8952c <__umoddi3+0x388>
   897e4:	14c5883a 	add	r2,r2,r19
   897e8:	003efc06 	br	893dc <__umoddi3+0x238>
   897ec:	14c5883a 	add	r2,r2,r19
   897f0:	003ea606 	br	8928c <__umoddi3+0xe8>
   897f4:	d8800117 	ldw	r2,4(sp)
   897f8:	113fc836 	bltu	r2,r4,8971c <__umoddi3+0x578>
   897fc:	000d883a 	mov	r6,zero
   89800:	003fcd06 	br	89738 <__umoddi3+0x594>

00089804 <_fpadd_parts>:
   89804:	defff804 	addi	sp,sp,-32
   89808:	dcc00315 	stw	r19,12(sp)
   8980c:	2027883a 	mov	r19,r4
   89810:	21000017 	ldw	r4,0(r4)
   89814:	00c00044 	movi	r3,1
   89818:	dd400515 	stw	r21,20(sp)
   8981c:	dd000415 	stw	r20,16(sp)
   89820:	ddc00715 	stw	r23,28(sp)
   89824:	dd800615 	stw	r22,24(sp)
   89828:	dc800215 	stw	r18,8(sp)
   8982c:	dc400115 	stw	r17,4(sp)
   89830:	dc000015 	stw	r16,0(sp)
   89834:	282b883a 	mov	r21,r5
   89838:	3029883a 	mov	r20,r6
   8983c:	1900632e 	bgeu	r3,r4,899cc <_fpadd_parts+0x1c8>
   89840:	28800017 	ldw	r2,0(r5)
   89844:	1880812e 	bgeu	r3,r2,89a4c <_fpadd_parts+0x248>
   89848:	00c00104 	movi	r3,4
   8984c:	20c0dc26 	beq	r4,r3,89bc0 <_fpadd_parts+0x3bc>
   89850:	10c07e26 	beq	r2,r3,89a4c <_fpadd_parts+0x248>
   89854:	00c00084 	movi	r3,2
   89858:	10c06726 	beq	r2,r3,899f8 <_fpadd_parts+0x1f4>
   8985c:	20c07b26 	beq	r4,r3,89a4c <_fpadd_parts+0x248>
   89860:	9dc00217 	ldw	r23,8(r19)
   89864:	28c00217 	ldw	r3,8(r5)
   89868:	9c400317 	ldw	r17,12(r19)
   8986c:	2bc00317 	ldw	r15,12(r5)
   89870:	b8cdc83a 	sub	r6,r23,r3
   89874:	9c800417 	ldw	r18,16(r19)
   89878:	2c000417 	ldw	r16,16(r5)
   8987c:	3009883a 	mov	r4,r6
   89880:	30009716 	blt	r6,zero,89ae0 <_fpadd_parts+0x2dc>
   89884:	00800fc4 	movi	r2,63
   89888:	11806b16 	blt	r2,r6,89a38 <_fpadd_parts+0x234>
   8988c:	0100a40e 	bge	zero,r4,89b20 <_fpadd_parts+0x31c>
   89890:	35bff804 	addi	r22,r6,-32
   89894:	b000bc16 	blt	r22,zero,89b88 <_fpadd_parts+0x384>
   89898:	8596d83a 	srl	r11,r16,r22
   8989c:	0019883a 	mov	r12,zero
   898a0:	0013883a 	mov	r9,zero
   898a4:	01000044 	movi	r4,1
   898a8:	0015883a 	mov	r10,zero
   898ac:	b000be16 	blt	r22,zero,89ba8 <_fpadd_parts+0x3a4>
   898b0:	2590983a 	sll	r8,r4,r22
   898b4:	000f883a 	mov	r7,zero
   898b8:	00bfffc4 	movi	r2,-1
   898bc:	3889883a 	add	r4,r7,r2
   898c0:	408b883a 	add	r5,r8,r2
   898c4:	21cd803a 	cmpltu	r6,r4,r7
   898c8:	314b883a 	add	r5,r6,r5
   898cc:	7904703a 	and	r2,r15,r4
   898d0:	8146703a 	and	r3,r16,r5
   898d4:	10c4b03a 	or	r2,r2,r3
   898d8:	10000226 	beq	r2,zero,898e4 <_fpadd_parts+0xe0>
   898dc:	02400044 	movi	r9,1
   898e0:	0015883a 	mov	r10,zero
   898e4:	5a5eb03a 	or	r15,r11,r9
   898e8:	62a0b03a 	or	r16,r12,r10
   898ec:	99400117 	ldw	r5,4(r19)
   898f0:	a8800117 	ldw	r2,4(r21)
   898f4:	28806e26 	beq	r5,r2,89ab0 <_fpadd_parts+0x2ac>
   898f8:	28006626 	beq	r5,zero,89a94 <_fpadd_parts+0x290>
   898fc:	7c45c83a 	sub	r2,r15,r17
   89900:	7889803a 	cmpltu	r4,r15,r2
   89904:	8487c83a 	sub	r3,r16,r18
   89908:	1909c83a 	sub	r4,r3,r4
   8990c:	100d883a 	mov	r6,r2
   89910:	200f883a 	mov	r7,r4
   89914:	38007716 	blt	r7,zero,89af4 <_fpadd_parts+0x2f0>
   89918:	a5c00215 	stw	r23,8(r20)
   8991c:	a1c00415 	stw	r7,16(r20)
   89920:	a0000115 	stw	zero,4(r20)
   89924:	a1800315 	stw	r6,12(r20)
   89928:	a2000317 	ldw	r8,12(r20)
   8992c:	a2400417 	ldw	r9,16(r20)
   89930:	00bfffc4 	movi	r2,-1
   89934:	408b883a 	add	r5,r8,r2
   89938:	2a09803a 	cmpltu	r4,r5,r8
   8993c:	488d883a 	add	r6,r9,r2
   89940:	01c40034 	movhi	r7,4096
   89944:	39ffffc4 	addi	r7,r7,-1
   89948:	218d883a 	add	r6,r4,r6
   8994c:	39801736 	bltu	r7,r6,899ac <_fpadd_parts+0x1a8>
   89950:	31c06526 	beq	r6,r7,89ae8 <_fpadd_parts+0x2e4>
   89954:	a3000217 	ldw	r12,8(r20)
   89958:	4209883a 	add	r4,r8,r8
   8995c:	00bfffc4 	movi	r2,-1
   89960:	220f803a 	cmpltu	r7,r4,r8
   89964:	4a4b883a 	add	r5,r9,r9
   89968:	394f883a 	add	r7,r7,r5
   8996c:	2095883a 	add	r10,r4,r2
   89970:	3897883a 	add	r11,r7,r2
   89974:	510d803a 	cmpltu	r6,r10,r4
   89978:	6099883a 	add	r12,r12,r2
   8997c:	32d7883a 	add	r11,r6,r11
   89980:	00840034 	movhi	r2,4096
   89984:	10bfffc4 	addi	r2,r2,-1
   89988:	2011883a 	mov	r8,r4
   8998c:	3813883a 	mov	r9,r7
   89990:	a1000315 	stw	r4,12(r20)
   89994:	a1c00415 	stw	r7,16(r20)
   89998:	a3000215 	stw	r12,8(r20)
   8999c:	12c00336 	bltu	r2,r11,899ac <_fpadd_parts+0x1a8>
   899a0:	58bfed1e 	bne	r11,r2,89958 <_fpadd_parts+0x154>
   899a4:	00bfff84 	movi	r2,-2
   899a8:	12bfeb2e 	bgeu	r2,r10,89958 <_fpadd_parts+0x154>
   899ac:	a2800417 	ldw	r10,16(r20)
   899b0:	008000c4 	movi	r2,3
   899b4:	00c80034 	movhi	r3,8192
   899b8:	18ffffc4 	addi	r3,r3,-1
   899bc:	a2400317 	ldw	r9,12(r20)
   899c0:	a0800015 	stw	r2,0(r20)
   899c4:	1a802336 	bltu	r3,r10,89a54 <_fpadd_parts+0x250>
   899c8:	a027883a 	mov	r19,r20
   899cc:	9805883a 	mov	r2,r19
   899d0:	ddc00717 	ldw	r23,28(sp)
   899d4:	dd800617 	ldw	r22,24(sp)
   899d8:	dd400517 	ldw	r21,20(sp)
   899dc:	dd000417 	ldw	r20,16(sp)
   899e0:	dcc00317 	ldw	r19,12(sp)
   899e4:	dc800217 	ldw	r18,8(sp)
   899e8:	dc400117 	ldw	r17,4(sp)
   899ec:	dc000017 	ldw	r16,0(sp)
   899f0:	dec00804 	addi	sp,sp,32
   899f4:	f800283a 	ret
   899f8:	20fff41e 	bne	r4,r3,899cc <_fpadd_parts+0x1c8>
   899fc:	31000015 	stw	r4,0(r6)
   89a00:	98800117 	ldw	r2,4(r19)
   89a04:	30800115 	stw	r2,4(r6)
   89a08:	98c00217 	ldw	r3,8(r19)
   89a0c:	30c00215 	stw	r3,8(r6)
   89a10:	98800317 	ldw	r2,12(r19)
   89a14:	30800315 	stw	r2,12(r6)
   89a18:	98c00417 	ldw	r3,16(r19)
   89a1c:	30c00415 	stw	r3,16(r6)
   89a20:	98800117 	ldw	r2,4(r19)
   89a24:	28c00117 	ldw	r3,4(r5)
   89a28:	3027883a 	mov	r19,r6
   89a2c:	10c4703a 	and	r2,r2,r3
   89a30:	30800115 	stw	r2,4(r6)
   89a34:	003fe506 	br	899cc <_fpadd_parts+0x1c8>
   89a38:	1dc02616 	blt	r3,r23,89ad4 <_fpadd_parts+0x2d0>
   89a3c:	0023883a 	mov	r17,zero
   89a40:	182f883a 	mov	r23,r3
   89a44:	0025883a 	mov	r18,zero
   89a48:	003fa806 	br	898ec <_fpadd_parts+0xe8>
   89a4c:	a827883a 	mov	r19,r21
   89a50:	003fde06 	br	899cc <_fpadd_parts+0x1c8>
   89a54:	01800044 	movi	r6,1
   89a58:	500497fa 	slli	r2,r10,31
   89a5c:	4808d07a 	srli	r4,r9,1
   89a60:	518ad83a 	srl	r5,r10,r6
   89a64:	a2000217 	ldw	r8,8(r20)
   89a68:	1108b03a 	or	r4,r2,r4
   89a6c:	0007883a 	mov	r3,zero
   89a70:	4984703a 	and	r2,r9,r6
   89a74:	208cb03a 	or	r6,r4,r2
   89a78:	28ceb03a 	or	r7,r5,r3
   89a7c:	42000044 	addi	r8,r8,1
   89a80:	a027883a 	mov	r19,r20
   89a84:	a1c00415 	stw	r7,16(r20)
   89a88:	a2000215 	stw	r8,8(r20)
   89a8c:	a1800315 	stw	r6,12(r20)
   89a90:	003fce06 	br	899cc <_fpadd_parts+0x1c8>
   89a94:	8bc5c83a 	sub	r2,r17,r15
   89a98:	8889803a 	cmpltu	r4,r17,r2
   89a9c:	9407c83a 	sub	r3,r18,r16
   89aa0:	1909c83a 	sub	r4,r3,r4
   89aa4:	100d883a 	mov	r6,r2
   89aa8:	200f883a 	mov	r7,r4
   89aac:	003f9906 	br	89914 <_fpadd_parts+0x110>
   89ab0:	7c45883a 	add	r2,r15,r17
   89ab4:	13c9803a 	cmpltu	r4,r2,r15
   89ab8:	8487883a 	add	r3,r16,r18
   89abc:	20c9883a 	add	r4,r4,r3
   89ac0:	a1400115 	stw	r5,4(r20)
   89ac4:	a5c00215 	stw	r23,8(r20)
   89ac8:	a0800315 	stw	r2,12(r20)
   89acc:	a1000415 	stw	r4,16(r20)
   89ad0:	003fb606 	br	899ac <_fpadd_parts+0x1a8>
   89ad4:	001f883a 	mov	r15,zero
   89ad8:	0021883a 	mov	r16,zero
   89adc:	003f8306 	br	898ec <_fpadd_parts+0xe8>
   89ae0:	018dc83a 	sub	r6,zero,r6
   89ae4:	003f6706 	br	89884 <_fpadd_parts+0x80>
   89ae8:	00bfff84 	movi	r2,-2
   89aec:	117faf36 	bltu	r2,r5,899ac <_fpadd_parts+0x1a8>
   89af0:	003f9806 	br	89954 <_fpadd_parts+0x150>
   89af4:	0005883a 	mov	r2,zero
   89af8:	1189c83a 	sub	r4,r2,r6
   89afc:	1105803a 	cmpltu	r2,r2,r4
   89b00:	01cbc83a 	sub	r5,zero,r7
   89b04:	2885c83a 	sub	r2,r5,r2
   89b08:	01800044 	movi	r6,1
   89b0c:	a1800115 	stw	r6,4(r20)
   89b10:	a5c00215 	stw	r23,8(r20)
   89b14:	a1000315 	stw	r4,12(r20)
   89b18:	a0800415 	stw	r2,16(r20)
   89b1c:	003f8206 	br	89928 <_fpadd_parts+0x124>
   89b20:	203f7226 	beq	r4,zero,898ec <_fpadd_parts+0xe8>
   89b24:	35bff804 	addi	r22,r6,-32
   89b28:	b9af883a 	add	r23,r23,r6
   89b2c:	b0003116 	blt	r22,zero,89bf4 <_fpadd_parts+0x3f0>
   89b30:	959ad83a 	srl	r13,r18,r22
   89b34:	001d883a 	mov	r14,zero
   89b38:	000f883a 	mov	r7,zero
   89b3c:	01000044 	movi	r4,1
   89b40:	0011883a 	mov	r8,zero
   89b44:	b0002516 	blt	r22,zero,89bdc <_fpadd_parts+0x3d8>
   89b48:	2594983a 	sll	r10,r4,r22
   89b4c:	0013883a 	mov	r9,zero
   89b50:	00bfffc4 	movi	r2,-1
   89b54:	4889883a 	add	r4,r9,r2
   89b58:	508b883a 	add	r5,r10,r2
   89b5c:	224d803a 	cmpltu	r6,r4,r9
   89b60:	314b883a 	add	r5,r6,r5
   89b64:	8904703a 	and	r2,r17,r4
   89b68:	9146703a 	and	r3,r18,r5
   89b6c:	10c4b03a 	or	r2,r2,r3
   89b70:	10000226 	beq	r2,zero,89b7c <_fpadd_parts+0x378>
   89b74:	01c00044 	movi	r7,1
   89b78:	0011883a 	mov	r8,zero
   89b7c:	69e2b03a 	or	r17,r13,r7
   89b80:	7224b03a 	or	r18,r14,r8
   89b84:	003f5906 	br	898ec <_fpadd_parts+0xe8>
   89b88:	8407883a 	add	r3,r16,r16
   89b8c:	008007c4 	movi	r2,31
   89b90:	1185c83a 	sub	r2,r2,r6
   89b94:	1886983a 	sll	r3,r3,r2
   89b98:	7996d83a 	srl	r11,r15,r6
   89b9c:	8198d83a 	srl	r12,r16,r6
   89ba0:	1ad6b03a 	or	r11,r3,r11
   89ba4:	003f3e06 	br	898a0 <_fpadd_parts+0x9c>
   89ba8:	2006d07a 	srli	r3,r4,1
   89bac:	008007c4 	movi	r2,31
   89bb0:	1185c83a 	sub	r2,r2,r6
   89bb4:	1890d83a 	srl	r8,r3,r2
   89bb8:	218e983a 	sll	r7,r4,r6
   89bbc:	003f3e06 	br	898b8 <_fpadd_parts+0xb4>
   89bc0:	113f821e 	bne	r2,r4,899cc <_fpadd_parts+0x1c8>
   89bc4:	28c00117 	ldw	r3,4(r5)
   89bc8:	98800117 	ldw	r2,4(r19)
   89bcc:	10ff7f26 	beq	r2,r3,899cc <_fpadd_parts+0x1c8>
   89bd0:	04c00274 	movhi	r19,9
   89bd4:	9cf7c804 	addi	r19,r19,-8416
   89bd8:	003f7c06 	br	899cc <_fpadd_parts+0x1c8>
   89bdc:	2006d07a 	srli	r3,r4,1
   89be0:	008007c4 	movi	r2,31
   89be4:	1185c83a 	sub	r2,r2,r6
   89be8:	1894d83a 	srl	r10,r3,r2
   89bec:	2192983a 	sll	r9,r4,r6
   89bf0:	003fd706 	br	89b50 <_fpadd_parts+0x34c>
   89bf4:	9487883a 	add	r3,r18,r18
   89bf8:	008007c4 	movi	r2,31
   89bfc:	1185c83a 	sub	r2,r2,r6
   89c00:	1886983a 	sll	r3,r3,r2
   89c04:	899ad83a 	srl	r13,r17,r6
   89c08:	919cd83a 	srl	r14,r18,r6
   89c0c:	1b5ab03a 	or	r13,r3,r13
   89c10:	003fc906 	br	89b38 <_fpadd_parts+0x334>

00089c14 <__subdf3>:
   89c14:	deffea04 	addi	sp,sp,-88
   89c18:	dcc01415 	stw	r19,80(sp)
   89c1c:	dcc00404 	addi	r19,sp,16
   89c20:	2011883a 	mov	r8,r4
   89c24:	2813883a 	mov	r9,r5
   89c28:	dc401315 	stw	r17,76(sp)
   89c2c:	d809883a 	mov	r4,sp
   89c30:	980b883a 	mov	r5,r19
   89c34:	dc400904 	addi	r17,sp,36
   89c38:	dfc01515 	stw	ra,84(sp)
   89c3c:	da400115 	stw	r9,4(sp)
   89c40:	d9c00315 	stw	r7,12(sp)
   89c44:	da000015 	stw	r8,0(sp)
   89c48:	d9800215 	stw	r6,8(sp)
   89c4c:	008af6c0 	call	8af6c <__unpack_d>
   89c50:	d9000204 	addi	r4,sp,8
   89c54:	880b883a 	mov	r5,r17
   89c58:	008af6c0 	call	8af6c <__unpack_d>
   89c5c:	d8800a17 	ldw	r2,40(sp)
   89c60:	880b883a 	mov	r5,r17
   89c64:	9809883a 	mov	r4,r19
   89c68:	d9800e04 	addi	r6,sp,56
   89c6c:	1080005c 	xori	r2,r2,1
   89c70:	d8800a15 	stw	r2,40(sp)
   89c74:	00898040 	call	89804 <_fpadd_parts>
   89c78:	1009883a 	mov	r4,r2
   89c7c:	008ac580 	call	8ac58 <__pack_d>
   89c80:	dfc01517 	ldw	ra,84(sp)
   89c84:	dcc01417 	ldw	r19,80(sp)
   89c88:	dc401317 	ldw	r17,76(sp)
   89c8c:	dec01604 	addi	sp,sp,88
   89c90:	f800283a 	ret

00089c94 <__adddf3>:
   89c94:	deffea04 	addi	sp,sp,-88
   89c98:	dcc01415 	stw	r19,80(sp)
   89c9c:	dcc00404 	addi	r19,sp,16
   89ca0:	2011883a 	mov	r8,r4
   89ca4:	2813883a 	mov	r9,r5
   89ca8:	dc401315 	stw	r17,76(sp)
   89cac:	d809883a 	mov	r4,sp
   89cb0:	980b883a 	mov	r5,r19
   89cb4:	dc400904 	addi	r17,sp,36
   89cb8:	dfc01515 	stw	ra,84(sp)
   89cbc:	da400115 	stw	r9,4(sp)
   89cc0:	d9c00315 	stw	r7,12(sp)
   89cc4:	da000015 	stw	r8,0(sp)
   89cc8:	d9800215 	stw	r6,8(sp)
   89ccc:	008af6c0 	call	8af6c <__unpack_d>
   89cd0:	d9000204 	addi	r4,sp,8
   89cd4:	880b883a 	mov	r5,r17
   89cd8:	008af6c0 	call	8af6c <__unpack_d>
   89cdc:	d9800e04 	addi	r6,sp,56
   89ce0:	9809883a 	mov	r4,r19
   89ce4:	880b883a 	mov	r5,r17
   89ce8:	00898040 	call	89804 <_fpadd_parts>
   89cec:	1009883a 	mov	r4,r2
   89cf0:	008ac580 	call	8ac58 <__pack_d>
   89cf4:	dfc01517 	ldw	ra,84(sp)
   89cf8:	dcc01417 	ldw	r19,80(sp)
   89cfc:	dc401317 	ldw	r17,76(sp)
   89d00:	dec01604 	addi	sp,sp,88
   89d04:	f800283a 	ret

00089d08 <__muldf3>:
   89d08:	deffe004 	addi	sp,sp,-128
   89d0c:	dc401815 	stw	r17,96(sp)
   89d10:	dc400404 	addi	r17,sp,16
   89d14:	2011883a 	mov	r8,r4
   89d18:	2813883a 	mov	r9,r5
   89d1c:	dc001715 	stw	r16,92(sp)
   89d20:	d809883a 	mov	r4,sp
   89d24:	880b883a 	mov	r5,r17
   89d28:	dc000904 	addi	r16,sp,36
   89d2c:	dfc01f15 	stw	ra,124(sp)
   89d30:	da400115 	stw	r9,4(sp)
   89d34:	d9c00315 	stw	r7,12(sp)
   89d38:	da000015 	stw	r8,0(sp)
   89d3c:	d9800215 	stw	r6,8(sp)
   89d40:	ddc01e15 	stw	r23,120(sp)
   89d44:	dd801d15 	stw	r22,116(sp)
   89d48:	dd401c15 	stw	r21,112(sp)
   89d4c:	dd001b15 	stw	r20,108(sp)
   89d50:	dcc01a15 	stw	r19,104(sp)
   89d54:	dc801915 	stw	r18,100(sp)
   89d58:	008af6c0 	call	8af6c <__unpack_d>
   89d5c:	d9000204 	addi	r4,sp,8
   89d60:	800b883a 	mov	r5,r16
   89d64:	008af6c0 	call	8af6c <__unpack_d>
   89d68:	d9000417 	ldw	r4,16(sp)
   89d6c:	00800044 	movi	r2,1
   89d70:	1100102e 	bgeu	r2,r4,89db4 <__muldf3+0xac>
   89d74:	d8c00917 	ldw	r3,36(sp)
   89d78:	10c0062e 	bgeu	r2,r3,89d94 <__muldf3+0x8c>
   89d7c:	00800104 	movi	r2,4
   89d80:	20800a26 	beq	r4,r2,89dac <__muldf3+0xa4>
   89d84:	1880cc26 	beq	r3,r2,8a0b8 <__muldf3+0x3b0>
   89d88:	00800084 	movi	r2,2
   89d8c:	20800926 	beq	r4,r2,89db4 <__muldf3+0xac>
   89d90:	1880191e 	bne	r3,r2,89df8 <__muldf3+0xf0>
   89d94:	d8c00a17 	ldw	r3,40(sp)
   89d98:	d8800517 	ldw	r2,20(sp)
   89d9c:	8009883a 	mov	r4,r16
   89da0:	10c4c03a 	cmpne	r2,r2,r3
   89da4:	d8800a15 	stw	r2,40(sp)
   89da8:	00000706 	br	89dc8 <__muldf3+0xc0>
   89dac:	00800084 	movi	r2,2
   89db0:	1880c326 	beq	r3,r2,8a0c0 <__muldf3+0x3b8>
   89db4:	d8800517 	ldw	r2,20(sp)
   89db8:	d8c00a17 	ldw	r3,40(sp)
   89dbc:	8809883a 	mov	r4,r17
   89dc0:	10c4c03a 	cmpne	r2,r2,r3
   89dc4:	d8800515 	stw	r2,20(sp)
   89dc8:	008ac580 	call	8ac58 <__pack_d>
   89dcc:	dfc01f17 	ldw	ra,124(sp)
   89dd0:	ddc01e17 	ldw	r23,120(sp)
   89dd4:	dd801d17 	ldw	r22,116(sp)
   89dd8:	dd401c17 	ldw	r21,112(sp)
   89ddc:	dd001b17 	ldw	r20,108(sp)
   89de0:	dcc01a17 	ldw	r19,104(sp)
   89de4:	dc801917 	ldw	r18,100(sp)
   89de8:	dc401817 	ldw	r17,96(sp)
   89dec:	dc001717 	ldw	r16,92(sp)
   89df0:	dec02004 	addi	sp,sp,128
   89df4:	f800283a 	ret
   89df8:	dd800717 	ldw	r22,28(sp)
   89dfc:	dc800c17 	ldw	r18,48(sp)
   89e00:	002b883a 	mov	r21,zero
   89e04:	0023883a 	mov	r17,zero
   89e08:	a80b883a 	mov	r5,r21
   89e0c:	b00d883a 	mov	r6,r22
   89e10:	880f883a 	mov	r7,r17
   89e14:	ddc00817 	ldw	r23,32(sp)
   89e18:	dcc00d17 	ldw	r19,52(sp)
   89e1c:	9009883a 	mov	r4,r18
   89e20:	008aab40 	call	8aab4 <__muldi3>
   89e24:	001b883a 	mov	r13,zero
   89e28:	680f883a 	mov	r7,r13
   89e2c:	b009883a 	mov	r4,r22
   89e30:	000b883a 	mov	r5,zero
   89e34:	980d883a 	mov	r6,r19
   89e38:	b82d883a 	mov	r22,r23
   89e3c:	002f883a 	mov	r23,zero
   89e40:	db401615 	stw	r13,88(sp)
   89e44:	d8801315 	stw	r2,76(sp)
   89e48:	d8c01415 	stw	r3,80(sp)
   89e4c:	dcc01515 	stw	r19,84(sp)
   89e50:	008aab40 	call	8aab4 <__muldi3>
   89e54:	b00d883a 	mov	r6,r22
   89e58:	000b883a 	mov	r5,zero
   89e5c:	9009883a 	mov	r4,r18
   89e60:	b80f883a 	mov	r7,r23
   89e64:	1021883a 	mov	r16,r2
   89e68:	1823883a 	mov	r17,r3
   89e6c:	008aab40 	call	8aab4 <__muldi3>
   89e70:	8085883a 	add	r2,r16,r2
   89e74:	140d803a 	cmpltu	r6,r2,r16
   89e78:	88c7883a 	add	r3,r17,r3
   89e7c:	30cd883a 	add	r6,r6,r3
   89e80:	1029883a 	mov	r20,r2
   89e84:	302b883a 	mov	r21,r6
   89e88:	da801317 	ldw	r10,76(sp)
   89e8c:	dac01417 	ldw	r11,80(sp)
   89e90:	db001517 	ldw	r12,84(sp)
   89e94:	db401617 	ldw	r13,88(sp)
   89e98:	3440612e 	bgeu	r6,r17,8a020 <__muldf3+0x318>
   89e9c:	0009883a 	mov	r4,zero
   89ea0:	5105883a 	add	r2,r10,r4
   89ea4:	128d803a 	cmpltu	r6,r2,r10
   89ea8:	5d07883a 	add	r3,r11,r20
   89eac:	30cd883a 	add	r6,r6,r3
   89eb0:	0021883a 	mov	r16,zero
   89eb4:	04400044 	movi	r17,1
   89eb8:	1025883a 	mov	r18,r2
   89ebc:	3027883a 	mov	r19,r6
   89ec0:	32c06236 	bltu	r6,r11,8a04c <__muldf3+0x344>
   89ec4:	59807a26 	beq	r11,r6,8a0b0 <__muldf3+0x3a8>
   89ec8:	680b883a 	mov	r5,r13
   89ecc:	b80f883a 	mov	r7,r23
   89ed0:	6009883a 	mov	r4,r12
   89ed4:	b00d883a 	mov	r6,r22
   89ed8:	008aab40 	call	8aab4 <__muldi3>
   89edc:	1009883a 	mov	r4,r2
   89ee0:	000f883a 	mov	r7,zero
   89ee4:	1545883a 	add	r2,r2,r21
   89ee8:	1111803a 	cmpltu	r8,r2,r4
   89eec:	19c7883a 	add	r3,r3,r7
   89ef0:	40c7883a 	add	r3,r8,r3
   89ef4:	88cb883a 	add	r5,r17,r3
   89ef8:	d8c00617 	ldw	r3,24(sp)
   89efc:	8089883a 	add	r4,r16,r2
   89f00:	d8800b17 	ldw	r2,44(sp)
   89f04:	18c00104 	addi	r3,r3,4
   89f08:	240d803a 	cmpltu	r6,r4,r16
   89f0c:	10c7883a 	add	r3,r2,r3
   89f10:	2013883a 	mov	r9,r4
   89f14:	d8800a17 	ldw	r2,40(sp)
   89f18:	d9000517 	ldw	r4,20(sp)
   89f1c:	314d883a 	add	r6,r6,r5
   89f20:	3015883a 	mov	r10,r6
   89f24:	2088c03a 	cmpne	r4,r4,r2
   89f28:	00880034 	movhi	r2,8192
   89f2c:	10bfffc4 	addi	r2,r2,-1
   89f30:	d9000f15 	stw	r4,60(sp)
   89f34:	d8c01015 	stw	r3,64(sp)
   89f38:	1180162e 	bgeu	r2,r6,89f94 <__muldf3+0x28c>
   89f3c:	1811883a 	mov	r8,r3
   89f40:	101f883a 	mov	r15,r2
   89f44:	980497fa 	slli	r2,r19,31
   89f48:	9016d07a 	srli	r11,r18,1
   89f4c:	500697fa 	slli	r3,r10,31
   89f50:	480cd07a 	srli	r6,r9,1
   89f54:	500ed07a 	srli	r7,r10,1
   89f58:	12d6b03a 	or	r11,r2,r11
   89f5c:	00800044 	movi	r2,1
   89f60:	198cb03a 	or	r6,r3,r6
   89f64:	4888703a 	and	r4,r9,r2
   89f68:	9818d07a 	srli	r12,r19,1
   89f6c:	001b883a 	mov	r13,zero
   89f70:	03a00034 	movhi	r14,32768
   89f74:	3013883a 	mov	r9,r6
   89f78:	3815883a 	mov	r10,r7
   89f7c:	4091883a 	add	r8,r8,r2
   89f80:	20000226 	beq	r4,zero,89f8c <__muldf3+0x284>
   89f84:	5b64b03a 	or	r18,r11,r13
   89f88:	63a6b03a 	or	r19,r12,r14
   89f8c:	7abfed36 	bltu	r15,r10,89f44 <__muldf3+0x23c>
   89f90:	da001015 	stw	r8,64(sp)
   89f94:	00840034 	movhi	r2,4096
   89f98:	10bfffc4 	addi	r2,r2,-1
   89f9c:	12801436 	bltu	r2,r10,89ff0 <__muldf3+0x2e8>
   89fa0:	da001017 	ldw	r8,64(sp)
   89fa4:	101f883a 	mov	r15,r2
   89fa8:	4a45883a 	add	r2,r9,r9
   89fac:	124d803a 	cmpltu	r6,r2,r9
   89fb0:	5287883a 	add	r3,r10,r10
   89fb4:	9497883a 	add	r11,r18,r18
   89fb8:	5c8f803a 	cmpltu	r7,r11,r18
   89fbc:	9cd9883a 	add	r12,r19,r19
   89fc0:	01000044 	movi	r4,1
   89fc4:	30cd883a 	add	r6,r6,r3
   89fc8:	3b0f883a 	add	r7,r7,r12
   89fcc:	423fffc4 	addi	r8,r8,-1
   89fd0:	1013883a 	mov	r9,r2
   89fd4:	3015883a 	mov	r10,r6
   89fd8:	111ab03a 	or	r13,r2,r4
   89fdc:	98003016 	blt	r19,zero,8a0a0 <__muldf3+0x398>
   89fe0:	5825883a 	mov	r18,r11
   89fe4:	3827883a 	mov	r19,r7
   89fe8:	7abfef2e 	bgeu	r15,r10,89fa8 <__muldf3+0x2a0>
   89fec:	da001015 	stw	r8,64(sp)
   89ff0:	00803fc4 	movi	r2,255
   89ff4:	488e703a 	and	r7,r9,r2
   89ff8:	00802004 	movi	r2,128
   89ffc:	0007883a 	mov	r3,zero
   8a000:	0011883a 	mov	r8,zero
   8a004:	38801826 	beq	r7,r2,8a068 <__muldf3+0x360>
   8a008:	008000c4 	movi	r2,3
   8a00c:	d9000e04 	addi	r4,sp,56
   8a010:	da801215 	stw	r10,72(sp)
   8a014:	d8800e15 	stw	r2,56(sp)
   8a018:	da401115 	stw	r9,68(sp)
   8a01c:	003f6a06 	br	89dc8 <__muldf3+0xc0>
   8a020:	89802126 	beq	r17,r6,8a0a8 <__muldf3+0x3a0>
   8a024:	0009883a 	mov	r4,zero
   8a028:	5105883a 	add	r2,r10,r4
   8a02c:	128d803a 	cmpltu	r6,r2,r10
   8a030:	5d07883a 	add	r3,r11,r20
   8a034:	30cd883a 	add	r6,r6,r3
   8a038:	0021883a 	mov	r16,zero
   8a03c:	0023883a 	mov	r17,zero
   8a040:	1025883a 	mov	r18,r2
   8a044:	3027883a 	mov	r19,r6
   8a048:	32ff9e2e 	bgeu	r6,r11,89ec4 <__muldf3+0x1bc>
   8a04c:	00800044 	movi	r2,1
   8a050:	8089883a 	add	r4,r16,r2
   8a054:	240d803a 	cmpltu	r6,r4,r16
   8a058:	344d883a 	add	r6,r6,r17
   8a05c:	2021883a 	mov	r16,r4
   8a060:	3023883a 	mov	r17,r6
   8a064:	003f9806 	br	89ec8 <__muldf3+0x1c0>
   8a068:	403fe71e 	bne	r8,zero,8a008 <__muldf3+0x300>
   8a06c:	01004004 	movi	r4,256
   8a070:	4904703a 	and	r2,r9,r4
   8a074:	10c4b03a 	or	r2,r2,r3
   8a078:	103fe31e 	bne	r2,zero,8a008 <__muldf3+0x300>
   8a07c:	94c4b03a 	or	r2,r18,r19
   8a080:	103fe126 	beq	r2,zero,8a008 <__muldf3+0x300>
   8a084:	49c5883a 	add	r2,r9,r7
   8a088:	1251803a 	cmpltu	r8,r2,r9
   8a08c:	4291883a 	add	r8,r8,r10
   8a090:	013fc004 	movi	r4,-256
   8a094:	1112703a 	and	r9,r2,r4
   8a098:	4015883a 	mov	r10,r8
   8a09c:	003fda06 	br	8a008 <__muldf3+0x300>
   8a0a0:	6813883a 	mov	r9,r13
   8a0a4:	003fce06 	br	89fe0 <__muldf3+0x2d8>
   8a0a8:	143f7c36 	bltu	r2,r16,89e9c <__muldf3+0x194>
   8a0ac:	003fdd06 	br	8a024 <__muldf3+0x31c>
   8a0b0:	12bf852e 	bgeu	r2,r10,89ec8 <__muldf3+0x1c0>
   8a0b4:	003fe506 	br	8a04c <__muldf3+0x344>
   8a0b8:	00800084 	movi	r2,2
   8a0bc:	20bf351e 	bne	r4,r2,89d94 <__muldf3+0x8c>
   8a0c0:	01000274 	movhi	r4,9
   8a0c4:	2137c804 	addi	r4,r4,-8416
   8a0c8:	003f3f06 	br	89dc8 <__muldf3+0xc0>

0008a0cc <__divdf3>:
   8a0cc:	deffed04 	addi	sp,sp,-76
   8a0d0:	dcc01115 	stw	r19,68(sp)
   8a0d4:	dcc00404 	addi	r19,sp,16
   8a0d8:	2011883a 	mov	r8,r4
   8a0dc:	2813883a 	mov	r9,r5
   8a0e0:	dc000e15 	stw	r16,56(sp)
   8a0e4:	d809883a 	mov	r4,sp
   8a0e8:	980b883a 	mov	r5,r19
   8a0ec:	dc000904 	addi	r16,sp,36
   8a0f0:	dfc01215 	stw	ra,72(sp)
   8a0f4:	da400115 	stw	r9,4(sp)
   8a0f8:	d9c00315 	stw	r7,12(sp)
   8a0fc:	da000015 	stw	r8,0(sp)
   8a100:	d9800215 	stw	r6,8(sp)
   8a104:	dc801015 	stw	r18,64(sp)
   8a108:	dc400f15 	stw	r17,60(sp)
   8a10c:	008af6c0 	call	8af6c <__unpack_d>
   8a110:	d9000204 	addi	r4,sp,8
   8a114:	800b883a 	mov	r5,r16
   8a118:	008af6c0 	call	8af6c <__unpack_d>
   8a11c:	d9000417 	ldw	r4,16(sp)
   8a120:	00800044 	movi	r2,1
   8a124:	11000b2e 	bgeu	r2,r4,8a154 <__divdf3+0x88>
   8a128:	d9400917 	ldw	r5,36(sp)
   8a12c:	1140762e 	bgeu	r2,r5,8a308 <__divdf3+0x23c>
   8a130:	d8800517 	ldw	r2,20(sp)
   8a134:	d8c00a17 	ldw	r3,40(sp)
   8a138:	01800104 	movi	r6,4
   8a13c:	10c4f03a 	xor	r2,r2,r3
   8a140:	d8800515 	stw	r2,20(sp)
   8a144:	21800226 	beq	r4,r6,8a150 <__divdf3+0x84>
   8a148:	00800084 	movi	r2,2
   8a14c:	2080141e 	bne	r4,r2,8a1a0 <__divdf3+0xd4>
   8a150:	29000926 	beq	r5,r4,8a178 <__divdf3+0xac>
   8a154:	9809883a 	mov	r4,r19
   8a158:	008ac580 	call	8ac58 <__pack_d>
   8a15c:	dfc01217 	ldw	ra,72(sp)
   8a160:	dcc01117 	ldw	r19,68(sp)
   8a164:	dc801017 	ldw	r18,64(sp)
   8a168:	dc400f17 	ldw	r17,60(sp)
   8a16c:	dc000e17 	ldw	r16,56(sp)
   8a170:	dec01304 	addi	sp,sp,76
   8a174:	f800283a 	ret
   8a178:	01000274 	movhi	r4,9
   8a17c:	2137c804 	addi	r4,r4,-8416
   8a180:	008ac580 	call	8ac58 <__pack_d>
   8a184:	dfc01217 	ldw	ra,72(sp)
   8a188:	dcc01117 	ldw	r19,68(sp)
   8a18c:	dc801017 	ldw	r18,64(sp)
   8a190:	dc400f17 	ldw	r17,60(sp)
   8a194:	dc000e17 	ldw	r16,56(sp)
   8a198:	dec01304 	addi	sp,sp,76
   8a19c:	f800283a 	ret
   8a1a0:	29805b26 	beq	r5,r6,8a310 <__divdf3+0x244>
   8a1a4:	28802d26 	beq	r5,r2,8a25c <__divdf3+0x190>
   8a1a8:	d8c00617 	ldw	r3,24(sp)
   8a1ac:	d8800b17 	ldw	r2,44(sp)
   8a1b0:	d9c00817 	ldw	r7,32(sp)
   8a1b4:	dc400d17 	ldw	r17,52(sp)
   8a1b8:	188bc83a 	sub	r5,r3,r2
   8a1bc:	d9800717 	ldw	r6,28(sp)
   8a1c0:	dc000c17 	ldw	r16,48(sp)
   8a1c4:	d9400615 	stw	r5,24(sp)
   8a1c8:	3c403836 	bltu	r7,r17,8a2ac <__divdf3+0x1e0>
   8a1cc:	89c03626 	beq	r17,r7,8a2a8 <__divdf3+0x1dc>
   8a1d0:	0015883a 	mov	r10,zero
   8a1d4:	001d883a 	mov	r14,zero
   8a1d8:	02c40034 	movhi	r11,4096
   8a1dc:	001f883a 	mov	r15,zero
   8a1e0:	003f883a 	mov	ra,zero
   8a1e4:	04800f44 	movi	r18,61
   8a1e8:	00000f06 	br	8a228 <__divdf3+0x15c>
   8a1ec:	601d883a 	mov	r14,r12
   8a1f0:	681f883a 	mov	r15,r13
   8a1f4:	400d883a 	mov	r6,r8
   8a1f8:	100f883a 	mov	r7,r2
   8a1fc:	3191883a 	add	r8,r6,r6
   8a200:	5808d07a 	srli	r4,r11,1
   8a204:	4185803a 	cmpltu	r2,r8,r6
   8a208:	39d3883a 	add	r9,r7,r7
   8a20c:	28c6b03a 	or	r3,r5,r3
   8a210:	1245883a 	add	r2,r2,r9
   8a214:	1815883a 	mov	r10,r3
   8a218:	2017883a 	mov	r11,r4
   8a21c:	400d883a 	mov	r6,r8
   8a220:	100f883a 	mov	r7,r2
   8a224:	fc801726 	beq	ra,r18,8a284 <__divdf3+0x1b8>
   8a228:	580a97fa 	slli	r5,r11,31
   8a22c:	5006d07a 	srli	r3,r10,1
   8a230:	ffc00044 	addi	ra,ra,1
   8a234:	3c7ff136 	bltu	r7,r17,8a1fc <__divdf3+0x130>
   8a238:	3411c83a 	sub	r8,r6,r16
   8a23c:	3205803a 	cmpltu	r2,r6,r8
   8a240:	3c53c83a 	sub	r9,r7,r17
   8a244:	7298b03a 	or	r12,r14,r10
   8a248:	7adab03a 	or	r13,r15,r11
   8a24c:	4885c83a 	sub	r2,r9,r2
   8a250:	89ffe61e 	bne	r17,r7,8a1ec <__divdf3+0x120>
   8a254:	343fe936 	bltu	r6,r16,8a1fc <__divdf3+0x130>
   8a258:	003fe406 	br	8a1ec <__divdf3+0x120>
   8a25c:	9809883a 	mov	r4,r19
   8a260:	d9800415 	stw	r6,16(sp)
   8a264:	008ac580 	call	8ac58 <__pack_d>
   8a268:	dfc01217 	ldw	ra,72(sp)
   8a26c:	dcc01117 	ldw	r19,68(sp)
   8a270:	dc801017 	ldw	r18,64(sp)
   8a274:	dc400f17 	ldw	r17,60(sp)
   8a278:	dc000e17 	ldw	r16,56(sp)
   8a27c:	dec01304 	addi	sp,sp,76
   8a280:	f800283a 	ret
   8a284:	00803fc4 	movi	r2,255
   8a288:	7090703a 	and	r8,r14,r2
   8a28c:	00802004 	movi	r2,128
   8a290:	0007883a 	mov	r3,zero
   8a294:	0013883a 	mov	r9,zero
   8a298:	40800d26 	beq	r8,r2,8a2d0 <__divdf3+0x204>
   8a29c:	dbc00815 	stw	r15,32(sp)
   8a2a0:	db800715 	stw	r14,28(sp)
   8a2a4:	003fab06 	br	8a154 <__divdf3+0x88>
   8a2a8:	343fc92e 	bgeu	r6,r16,8a1d0 <__divdf3+0x104>
   8a2ac:	3185883a 	add	r2,r6,r6
   8a2b0:	1189803a 	cmpltu	r4,r2,r6
   8a2b4:	39c7883a 	add	r3,r7,r7
   8a2b8:	20c9883a 	add	r4,r4,r3
   8a2bc:	297fffc4 	addi	r5,r5,-1
   8a2c0:	100d883a 	mov	r6,r2
   8a2c4:	200f883a 	mov	r7,r4
   8a2c8:	d9400615 	stw	r5,24(sp)
   8a2cc:	003fc006 	br	8a1d0 <__divdf3+0x104>
   8a2d0:	483ff21e 	bne	r9,zero,8a29c <__divdf3+0x1d0>
   8a2d4:	01004004 	movi	r4,256
   8a2d8:	7104703a 	and	r2,r14,r4
   8a2dc:	10c4b03a 	or	r2,r2,r3
   8a2e0:	103fee1e 	bne	r2,zero,8a29c <__divdf3+0x1d0>
   8a2e4:	31c4b03a 	or	r2,r6,r7
   8a2e8:	103fec26 	beq	r2,zero,8a29c <__divdf3+0x1d0>
   8a2ec:	7205883a 	add	r2,r14,r8
   8a2f0:	1391803a 	cmpltu	r8,r2,r14
   8a2f4:	43d1883a 	add	r8,r8,r15
   8a2f8:	013fc004 	movi	r4,-256
   8a2fc:	111c703a 	and	r14,r2,r4
   8a300:	401f883a 	mov	r15,r8
   8a304:	003fe506 	br	8a29c <__divdf3+0x1d0>
   8a308:	8009883a 	mov	r4,r16
   8a30c:	003f9206 	br	8a158 <__divdf3+0x8c>
   8a310:	9809883a 	mov	r4,r19
   8a314:	d8000715 	stw	zero,28(sp)
   8a318:	d8000815 	stw	zero,32(sp)
   8a31c:	d8000615 	stw	zero,24(sp)
   8a320:	003f8d06 	br	8a158 <__divdf3+0x8c>

0008a324 <__eqdf2>:
   8a324:	deffef04 	addi	sp,sp,-68
   8a328:	dc400f15 	stw	r17,60(sp)
   8a32c:	dc400404 	addi	r17,sp,16
   8a330:	2005883a 	mov	r2,r4
   8a334:	2807883a 	mov	r3,r5
   8a338:	dc000e15 	stw	r16,56(sp)
   8a33c:	d809883a 	mov	r4,sp
   8a340:	880b883a 	mov	r5,r17
   8a344:	dc000904 	addi	r16,sp,36
   8a348:	d8c00115 	stw	r3,4(sp)
   8a34c:	d8800015 	stw	r2,0(sp)
   8a350:	d9800215 	stw	r6,8(sp)
   8a354:	dfc01015 	stw	ra,64(sp)
   8a358:	d9c00315 	stw	r7,12(sp)
   8a35c:	008af6c0 	call	8af6c <__unpack_d>
   8a360:	d9000204 	addi	r4,sp,8
   8a364:	800b883a 	mov	r5,r16
   8a368:	008af6c0 	call	8af6c <__unpack_d>
   8a36c:	d8800417 	ldw	r2,16(sp)
   8a370:	00c00044 	movi	r3,1
   8a374:	180d883a 	mov	r6,r3
   8a378:	1880062e 	bgeu	r3,r2,8a394 <__eqdf2+0x70>
   8a37c:	d8800917 	ldw	r2,36(sp)
   8a380:	8809883a 	mov	r4,r17
   8a384:	800b883a 	mov	r5,r16
   8a388:	1880022e 	bgeu	r3,r2,8a394 <__eqdf2+0x70>
   8a38c:	008b0a40 	call	8b0a4 <__fpcmp_parts_d>
   8a390:	100d883a 	mov	r6,r2
   8a394:	3005883a 	mov	r2,r6
   8a398:	dfc01017 	ldw	ra,64(sp)
   8a39c:	dc400f17 	ldw	r17,60(sp)
   8a3a0:	dc000e17 	ldw	r16,56(sp)
   8a3a4:	dec01104 	addi	sp,sp,68
   8a3a8:	f800283a 	ret

0008a3ac <__nedf2>:
   8a3ac:	deffef04 	addi	sp,sp,-68
   8a3b0:	dc400f15 	stw	r17,60(sp)
   8a3b4:	dc400404 	addi	r17,sp,16
   8a3b8:	2005883a 	mov	r2,r4
   8a3bc:	2807883a 	mov	r3,r5
   8a3c0:	dc000e15 	stw	r16,56(sp)
   8a3c4:	d809883a 	mov	r4,sp
   8a3c8:	880b883a 	mov	r5,r17
   8a3cc:	dc000904 	addi	r16,sp,36
   8a3d0:	d8c00115 	stw	r3,4(sp)
   8a3d4:	d8800015 	stw	r2,0(sp)
   8a3d8:	d9800215 	stw	r6,8(sp)
   8a3dc:	dfc01015 	stw	ra,64(sp)
   8a3e0:	d9c00315 	stw	r7,12(sp)
   8a3e4:	008af6c0 	call	8af6c <__unpack_d>
   8a3e8:	d9000204 	addi	r4,sp,8
   8a3ec:	800b883a 	mov	r5,r16
   8a3f0:	008af6c0 	call	8af6c <__unpack_d>
   8a3f4:	d8800417 	ldw	r2,16(sp)
   8a3f8:	00c00044 	movi	r3,1
   8a3fc:	180d883a 	mov	r6,r3
   8a400:	1880062e 	bgeu	r3,r2,8a41c <__nedf2+0x70>
   8a404:	d8800917 	ldw	r2,36(sp)
   8a408:	8809883a 	mov	r4,r17
   8a40c:	800b883a 	mov	r5,r16
   8a410:	1880022e 	bgeu	r3,r2,8a41c <__nedf2+0x70>
   8a414:	008b0a40 	call	8b0a4 <__fpcmp_parts_d>
   8a418:	100d883a 	mov	r6,r2
   8a41c:	3005883a 	mov	r2,r6
   8a420:	dfc01017 	ldw	ra,64(sp)
   8a424:	dc400f17 	ldw	r17,60(sp)
   8a428:	dc000e17 	ldw	r16,56(sp)
   8a42c:	dec01104 	addi	sp,sp,68
   8a430:	f800283a 	ret

0008a434 <__gtdf2>:
   8a434:	deffef04 	addi	sp,sp,-68
   8a438:	dc400f15 	stw	r17,60(sp)
   8a43c:	dc400404 	addi	r17,sp,16
   8a440:	2005883a 	mov	r2,r4
   8a444:	2807883a 	mov	r3,r5
   8a448:	dc000e15 	stw	r16,56(sp)
   8a44c:	d809883a 	mov	r4,sp
   8a450:	880b883a 	mov	r5,r17
   8a454:	dc000904 	addi	r16,sp,36
   8a458:	d8c00115 	stw	r3,4(sp)
   8a45c:	d8800015 	stw	r2,0(sp)
   8a460:	d9800215 	stw	r6,8(sp)
   8a464:	dfc01015 	stw	ra,64(sp)
   8a468:	d9c00315 	stw	r7,12(sp)
   8a46c:	008af6c0 	call	8af6c <__unpack_d>
   8a470:	d9000204 	addi	r4,sp,8
   8a474:	800b883a 	mov	r5,r16
   8a478:	008af6c0 	call	8af6c <__unpack_d>
   8a47c:	d8800417 	ldw	r2,16(sp)
   8a480:	00c00044 	movi	r3,1
   8a484:	01bfffc4 	movi	r6,-1
   8a488:	1880062e 	bgeu	r3,r2,8a4a4 <__gtdf2+0x70>
   8a48c:	d8800917 	ldw	r2,36(sp)
   8a490:	8809883a 	mov	r4,r17
   8a494:	800b883a 	mov	r5,r16
   8a498:	1880022e 	bgeu	r3,r2,8a4a4 <__gtdf2+0x70>
   8a49c:	008b0a40 	call	8b0a4 <__fpcmp_parts_d>
   8a4a0:	100d883a 	mov	r6,r2
   8a4a4:	3005883a 	mov	r2,r6
   8a4a8:	dfc01017 	ldw	ra,64(sp)
   8a4ac:	dc400f17 	ldw	r17,60(sp)
   8a4b0:	dc000e17 	ldw	r16,56(sp)
   8a4b4:	dec01104 	addi	sp,sp,68
   8a4b8:	f800283a 	ret

0008a4bc <__gedf2>:
   8a4bc:	deffef04 	addi	sp,sp,-68
   8a4c0:	dc400f15 	stw	r17,60(sp)
   8a4c4:	dc400404 	addi	r17,sp,16
   8a4c8:	2005883a 	mov	r2,r4
   8a4cc:	2807883a 	mov	r3,r5
   8a4d0:	dc000e15 	stw	r16,56(sp)
   8a4d4:	d809883a 	mov	r4,sp
   8a4d8:	880b883a 	mov	r5,r17
   8a4dc:	dc000904 	addi	r16,sp,36
   8a4e0:	d8c00115 	stw	r3,4(sp)
   8a4e4:	d8800015 	stw	r2,0(sp)
   8a4e8:	d9800215 	stw	r6,8(sp)
   8a4ec:	dfc01015 	stw	ra,64(sp)
   8a4f0:	d9c00315 	stw	r7,12(sp)
   8a4f4:	008af6c0 	call	8af6c <__unpack_d>
   8a4f8:	d9000204 	addi	r4,sp,8
   8a4fc:	800b883a 	mov	r5,r16
   8a500:	008af6c0 	call	8af6c <__unpack_d>
   8a504:	d8800417 	ldw	r2,16(sp)
   8a508:	00c00044 	movi	r3,1
   8a50c:	01bfffc4 	movi	r6,-1
   8a510:	1880062e 	bgeu	r3,r2,8a52c <__gedf2+0x70>
   8a514:	d8800917 	ldw	r2,36(sp)
   8a518:	8809883a 	mov	r4,r17
   8a51c:	800b883a 	mov	r5,r16
   8a520:	1880022e 	bgeu	r3,r2,8a52c <__gedf2+0x70>
   8a524:	008b0a40 	call	8b0a4 <__fpcmp_parts_d>
   8a528:	100d883a 	mov	r6,r2
   8a52c:	3005883a 	mov	r2,r6
   8a530:	dfc01017 	ldw	ra,64(sp)
   8a534:	dc400f17 	ldw	r17,60(sp)
   8a538:	dc000e17 	ldw	r16,56(sp)
   8a53c:	dec01104 	addi	sp,sp,68
   8a540:	f800283a 	ret

0008a544 <__ltdf2>:
   8a544:	deffef04 	addi	sp,sp,-68
   8a548:	dc400f15 	stw	r17,60(sp)
   8a54c:	dc400404 	addi	r17,sp,16
   8a550:	2005883a 	mov	r2,r4
   8a554:	2807883a 	mov	r3,r5
   8a558:	dc000e15 	stw	r16,56(sp)
   8a55c:	d809883a 	mov	r4,sp
   8a560:	880b883a 	mov	r5,r17
   8a564:	dc000904 	addi	r16,sp,36
   8a568:	d8c00115 	stw	r3,4(sp)
   8a56c:	d8800015 	stw	r2,0(sp)
   8a570:	d9800215 	stw	r6,8(sp)
   8a574:	dfc01015 	stw	ra,64(sp)
   8a578:	d9c00315 	stw	r7,12(sp)
   8a57c:	008af6c0 	call	8af6c <__unpack_d>
   8a580:	d9000204 	addi	r4,sp,8
   8a584:	800b883a 	mov	r5,r16
   8a588:	008af6c0 	call	8af6c <__unpack_d>
   8a58c:	d8800417 	ldw	r2,16(sp)
   8a590:	00c00044 	movi	r3,1
   8a594:	180d883a 	mov	r6,r3
   8a598:	1880062e 	bgeu	r3,r2,8a5b4 <__ltdf2+0x70>
   8a59c:	d8800917 	ldw	r2,36(sp)
   8a5a0:	8809883a 	mov	r4,r17
   8a5a4:	800b883a 	mov	r5,r16
   8a5a8:	1880022e 	bgeu	r3,r2,8a5b4 <__ltdf2+0x70>
   8a5ac:	008b0a40 	call	8b0a4 <__fpcmp_parts_d>
   8a5b0:	100d883a 	mov	r6,r2
   8a5b4:	3005883a 	mov	r2,r6
   8a5b8:	dfc01017 	ldw	ra,64(sp)
   8a5bc:	dc400f17 	ldw	r17,60(sp)
   8a5c0:	dc000e17 	ldw	r16,56(sp)
   8a5c4:	dec01104 	addi	sp,sp,68
   8a5c8:	f800283a 	ret

0008a5cc <__floatsidf>:
   8a5cc:	2006d7fa 	srli	r3,r4,31
   8a5d0:	defff604 	addi	sp,sp,-40
   8a5d4:	008000c4 	movi	r2,3
   8a5d8:	dfc00915 	stw	ra,36(sp)
   8a5dc:	dcc00815 	stw	r19,32(sp)
   8a5e0:	dc800715 	stw	r18,28(sp)
   8a5e4:	dc400615 	stw	r17,24(sp)
   8a5e8:	dc000515 	stw	r16,20(sp)
   8a5ec:	d8800015 	stw	r2,0(sp)
   8a5f0:	d8c00115 	stw	r3,4(sp)
   8a5f4:	20000f1e 	bne	r4,zero,8a634 <__floatsidf+0x68>
   8a5f8:	00800084 	movi	r2,2
   8a5fc:	d8800015 	stw	r2,0(sp)
   8a600:	d809883a 	mov	r4,sp
   8a604:	008ac580 	call	8ac58 <__pack_d>
   8a608:	1009883a 	mov	r4,r2
   8a60c:	180b883a 	mov	r5,r3
   8a610:	2005883a 	mov	r2,r4
   8a614:	2807883a 	mov	r3,r5
   8a618:	dfc00917 	ldw	ra,36(sp)
   8a61c:	dcc00817 	ldw	r19,32(sp)
   8a620:	dc800717 	ldw	r18,28(sp)
   8a624:	dc400617 	ldw	r17,24(sp)
   8a628:	dc000517 	ldw	r16,20(sp)
   8a62c:	dec00a04 	addi	sp,sp,40
   8a630:	f800283a 	ret
   8a634:	00800f04 	movi	r2,60
   8a638:	1807003a 	cmpeq	r3,r3,zero
   8a63c:	d8800215 	stw	r2,8(sp)
   8a640:	18001126 	beq	r3,zero,8a688 <__floatsidf+0xbc>
   8a644:	0027883a 	mov	r19,zero
   8a648:	2025883a 	mov	r18,r4
   8a64c:	d9000315 	stw	r4,12(sp)
   8a650:	dcc00415 	stw	r19,16(sp)
   8a654:	008abd80 	call	8abd8 <__clzsi2>
   8a658:	11000744 	addi	r4,r2,29
   8a65c:	013fe80e 	bge	zero,r4,8a600 <__floatsidf+0x34>
   8a660:	10bfff44 	addi	r2,r2,-3
   8a664:	10000c16 	blt	r2,zero,8a698 <__floatsidf+0xcc>
   8a668:	90a2983a 	sll	r17,r18,r2
   8a66c:	0021883a 	mov	r16,zero
   8a670:	d8800217 	ldw	r2,8(sp)
   8a674:	dc400415 	stw	r17,16(sp)
   8a678:	dc000315 	stw	r16,12(sp)
   8a67c:	1105c83a 	sub	r2,r2,r4
   8a680:	d8800215 	stw	r2,8(sp)
   8a684:	003fde06 	br	8a600 <__floatsidf+0x34>
   8a688:	00a00034 	movhi	r2,32768
   8a68c:	20800a26 	beq	r4,r2,8a6b8 <__floatsidf+0xec>
   8a690:	0109c83a 	sub	r4,zero,r4
   8a694:	003feb06 	br	8a644 <__floatsidf+0x78>
   8a698:	9006d07a 	srli	r3,r18,1
   8a69c:	008007c4 	movi	r2,31
   8a6a0:	1105c83a 	sub	r2,r2,r4
   8a6a4:	1886d83a 	srl	r3,r3,r2
   8a6a8:	9922983a 	sll	r17,r19,r4
   8a6ac:	9120983a 	sll	r16,r18,r4
   8a6b0:	1c62b03a 	or	r17,r3,r17
   8a6b4:	003fee06 	br	8a670 <__floatsidf+0xa4>
   8a6b8:	0009883a 	mov	r4,zero
   8a6bc:	01707834 	movhi	r5,49632
   8a6c0:	003fd306 	br	8a610 <__floatsidf+0x44>

0008a6c4 <__fixdfsi>:
   8a6c4:	defff804 	addi	sp,sp,-32
   8a6c8:	2005883a 	mov	r2,r4
   8a6cc:	2807883a 	mov	r3,r5
   8a6d0:	d809883a 	mov	r4,sp
   8a6d4:	d9400204 	addi	r5,sp,8
   8a6d8:	d8c00115 	stw	r3,4(sp)
   8a6dc:	d8800015 	stw	r2,0(sp)
   8a6e0:	dfc00715 	stw	ra,28(sp)
   8a6e4:	008af6c0 	call	8af6c <__unpack_d>
   8a6e8:	d8c00217 	ldw	r3,8(sp)
   8a6ec:	00800084 	movi	r2,2
   8a6f0:	1880051e 	bne	r3,r2,8a708 <__fixdfsi+0x44>
   8a6f4:	0007883a 	mov	r3,zero
   8a6f8:	1805883a 	mov	r2,r3
   8a6fc:	dfc00717 	ldw	ra,28(sp)
   8a700:	dec00804 	addi	sp,sp,32
   8a704:	f800283a 	ret
   8a708:	00800044 	movi	r2,1
   8a70c:	10fff92e 	bgeu	r2,r3,8a6f4 <__fixdfsi+0x30>
   8a710:	00800104 	movi	r2,4
   8a714:	18800426 	beq	r3,r2,8a728 <__fixdfsi+0x64>
   8a718:	d8c00417 	ldw	r3,16(sp)
   8a71c:	183ff516 	blt	r3,zero,8a6f4 <__fixdfsi+0x30>
   8a720:	00800784 	movi	r2,30
   8a724:	10c0080e 	bge	r2,r3,8a748 <__fixdfsi+0x84>
   8a728:	d8800317 	ldw	r2,12(sp)
   8a72c:	1000121e 	bne	r2,zero,8a778 <__fixdfsi+0xb4>
   8a730:	00e00034 	movhi	r3,32768
   8a734:	18ffffc4 	addi	r3,r3,-1
   8a738:	1805883a 	mov	r2,r3
   8a73c:	dfc00717 	ldw	ra,28(sp)
   8a740:	dec00804 	addi	sp,sp,32
   8a744:	f800283a 	ret
   8a748:	00800f04 	movi	r2,60
   8a74c:	10d1c83a 	sub	r8,r2,r3
   8a750:	40bff804 	addi	r2,r8,-32
   8a754:	d9800517 	ldw	r6,20(sp)
   8a758:	d9c00617 	ldw	r7,24(sp)
   8a75c:	10000816 	blt	r2,zero,8a780 <__fixdfsi+0xbc>
   8a760:	3888d83a 	srl	r4,r7,r2
   8a764:	d8800317 	ldw	r2,12(sp)
   8a768:	2007883a 	mov	r3,r4
   8a76c:	103fe226 	beq	r2,zero,8a6f8 <__fixdfsi+0x34>
   8a770:	0107c83a 	sub	r3,zero,r4
   8a774:	003fe006 	br	8a6f8 <__fixdfsi+0x34>
   8a778:	00e00034 	movhi	r3,32768
   8a77c:	003fde06 	br	8a6f8 <__fixdfsi+0x34>
   8a780:	39c7883a 	add	r3,r7,r7
   8a784:	008007c4 	movi	r2,31
   8a788:	1205c83a 	sub	r2,r2,r8
   8a78c:	1886983a 	sll	r3,r3,r2
   8a790:	3208d83a 	srl	r4,r6,r8
   8a794:	1908b03a 	or	r4,r3,r4
   8a798:	003ff206 	br	8a764 <__fixdfsi+0xa0>

0008a79c <__floatunsidf>:
   8a79c:	defff204 	addi	sp,sp,-56
   8a7a0:	dfc00d15 	stw	ra,52(sp)
   8a7a4:	ddc00c15 	stw	r23,48(sp)
   8a7a8:	dd800b15 	stw	r22,44(sp)
   8a7ac:	dd400a15 	stw	r21,40(sp)
   8a7b0:	dd000915 	stw	r20,36(sp)
   8a7b4:	dcc00815 	stw	r19,32(sp)
   8a7b8:	dc800715 	stw	r18,28(sp)
   8a7bc:	dc400615 	stw	r17,24(sp)
   8a7c0:	dc000515 	stw	r16,20(sp)
   8a7c4:	d8000115 	stw	zero,4(sp)
   8a7c8:	20000f1e 	bne	r4,zero,8a808 <__floatunsidf+0x6c>
   8a7cc:	00800084 	movi	r2,2
   8a7d0:	d8800015 	stw	r2,0(sp)
   8a7d4:	d809883a 	mov	r4,sp
   8a7d8:	008ac580 	call	8ac58 <__pack_d>
   8a7dc:	dfc00d17 	ldw	ra,52(sp)
   8a7e0:	ddc00c17 	ldw	r23,48(sp)
   8a7e4:	dd800b17 	ldw	r22,44(sp)
   8a7e8:	dd400a17 	ldw	r21,40(sp)
   8a7ec:	dd000917 	ldw	r20,36(sp)
   8a7f0:	dcc00817 	ldw	r19,32(sp)
   8a7f4:	dc800717 	ldw	r18,28(sp)
   8a7f8:	dc400617 	ldw	r17,24(sp)
   8a7fc:	dc000517 	ldw	r16,20(sp)
   8a800:	dec00e04 	addi	sp,sp,56
   8a804:	f800283a 	ret
   8a808:	008000c4 	movi	r2,3
   8a80c:	00c00f04 	movi	r3,60
   8a810:	002f883a 	mov	r23,zero
   8a814:	202d883a 	mov	r22,r4
   8a818:	d8800015 	stw	r2,0(sp)
   8a81c:	d8c00215 	stw	r3,8(sp)
   8a820:	d9000315 	stw	r4,12(sp)
   8a824:	ddc00415 	stw	r23,16(sp)
   8a828:	008abd80 	call	8abd8 <__clzsi2>
   8a82c:	12400744 	addi	r9,r2,29
   8a830:	48000b16 	blt	r9,zero,8a860 <__floatunsidf+0xc4>
   8a834:	483fe726 	beq	r9,zero,8a7d4 <__floatunsidf+0x38>
   8a838:	10bfff44 	addi	r2,r2,-3
   8a83c:	10002e16 	blt	r2,zero,8a8f8 <__floatunsidf+0x15c>
   8a840:	b0a2983a 	sll	r17,r22,r2
   8a844:	0021883a 	mov	r16,zero
   8a848:	d8800217 	ldw	r2,8(sp)
   8a84c:	dc400415 	stw	r17,16(sp)
   8a850:	dc000315 	stw	r16,12(sp)
   8a854:	1245c83a 	sub	r2,r2,r9
   8a858:	d8800215 	stw	r2,8(sp)
   8a85c:	003fdd06 	br	8a7d4 <__floatunsidf+0x38>
   8a860:	0255c83a 	sub	r10,zero,r9
   8a864:	51bff804 	addi	r6,r10,-32
   8a868:	30001b16 	blt	r6,zero,8a8d8 <__floatunsidf+0x13c>
   8a86c:	b9a8d83a 	srl	r20,r23,r6
   8a870:	002b883a 	mov	r21,zero
   8a874:	000f883a 	mov	r7,zero
   8a878:	01000044 	movi	r4,1
   8a87c:	0011883a 	mov	r8,zero
   8a880:	30002516 	blt	r6,zero,8a918 <__floatunsidf+0x17c>
   8a884:	21a6983a 	sll	r19,r4,r6
   8a888:	0025883a 	mov	r18,zero
   8a88c:	00bfffc4 	movi	r2,-1
   8a890:	9089883a 	add	r4,r18,r2
   8a894:	988b883a 	add	r5,r19,r2
   8a898:	248d803a 	cmpltu	r6,r4,r18
   8a89c:	314b883a 	add	r5,r6,r5
   8a8a0:	b104703a 	and	r2,r22,r4
   8a8a4:	b946703a 	and	r3,r23,r5
   8a8a8:	10c4b03a 	or	r2,r2,r3
   8a8ac:	10000226 	beq	r2,zero,8a8b8 <__floatunsidf+0x11c>
   8a8b0:	01c00044 	movi	r7,1
   8a8b4:	0011883a 	mov	r8,zero
   8a8b8:	d9000217 	ldw	r4,8(sp)
   8a8bc:	a1c4b03a 	or	r2,r20,r7
   8a8c0:	aa06b03a 	or	r3,r21,r8
   8a8c4:	2249c83a 	sub	r4,r4,r9
   8a8c8:	d8c00415 	stw	r3,16(sp)
   8a8cc:	d9000215 	stw	r4,8(sp)
   8a8d0:	d8800315 	stw	r2,12(sp)
   8a8d4:	003fbf06 	br	8a7d4 <__floatunsidf+0x38>
   8a8d8:	bdc7883a 	add	r3,r23,r23
   8a8dc:	008007c4 	movi	r2,31
   8a8e0:	1285c83a 	sub	r2,r2,r10
   8a8e4:	1886983a 	sll	r3,r3,r2
   8a8e8:	b2a8d83a 	srl	r20,r22,r10
   8a8ec:	baaad83a 	srl	r21,r23,r10
   8a8f0:	1d28b03a 	or	r20,r3,r20
   8a8f4:	003fdf06 	br	8a874 <__floatunsidf+0xd8>
   8a8f8:	b006d07a 	srli	r3,r22,1
   8a8fc:	008007c4 	movi	r2,31
   8a900:	1245c83a 	sub	r2,r2,r9
   8a904:	1886d83a 	srl	r3,r3,r2
   8a908:	ba62983a 	sll	r17,r23,r9
   8a90c:	b260983a 	sll	r16,r22,r9
   8a910:	1c62b03a 	or	r17,r3,r17
   8a914:	003fcc06 	br	8a848 <__floatunsidf+0xac>
   8a918:	2006d07a 	srli	r3,r4,1
   8a91c:	008007c4 	movi	r2,31
   8a920:	1285c83a 	sub	r2,r2,r10
   8a924:	18a6d83a 	srl	r19,r3,r2
   8a928:	22a4983a 	sll	r18,r4,r10
   8a92c:	003fd706 	br	8a88c <__floatunsidf+0xf0>

0008a930 <udivmodsi4>:
   8a930:	29001b2e 	bgeu	r5,r4,8a9a0 <udivmodsi4+0x70>
   8a934:	28001a16 	blt	r5,zero,8a9a0 <udivmodsi4+0x70>
   8a938:	00800044 	movi	r2,1
   8a93c:	0007883a 	mov	r3,zero
   8a940:	01c007c4 	movi	r7,31
   8a944:	00000306 	br	8a954 <udivmodsi4+0x24>
   8a948:	19c01326 	beq	r3,r7,8a998 <udivmodsi4+0x68>
   8a94c:	18c00044 	addi	r3,r3,1
   8a950:	28000416 	blt	r5,zero,8a964 <udivmodsi4+0x34>
   8a954:	294b883a 	add	r5,r5,r5
   8a958:	1085883a 	add	r2,r2,r2
   8a95c:	293ffa36 	bltu	r5,r4,8a948 <udivmodsi4+0x18>
   8a960:	10000d26 	beq	r2,zero,8a998 <udivmodsi4+0x68>
   8a964:	0007883a 	mov	r3,zero
   8a968:	21400236 	bltu	r4,r5,8a974 <udivmodsi4+0x44>
   8a96c:	2149c83a 	sub	r4,r4,r5
   8a970:	1886b03a 	or	r3,r3,r2
   8a974:	1004d07a 	srli	r2,r2,1
   8a978:	280ad07a 	srli	r5,r5,1
   8a97c:	103ffa1e 	bne	r2,zero,8a968 <udivmodsi4+0x38>
   8a980:	30000226 	beq	r6,zero,8a98c <udivmodsi4+0x5c>
   8a984:	2005883a 	mov	r2,r4
   8a988:	f800283a 	ret
   8a98c:	1809883a 	mov	r4,r3
   8a990:	2005883a 	mov	r2,r4
   8a994:	f800283a 	ret
   8a998:	0007883a 	mov	r3,zero
   8a99c:	003ff806 	br	8a980 <udivmodsi4+0x50>
   8a9a0:	00800044 	movi	r2,1
   8a9a4:	0007883a 	mov	r3,zero
   8a9a8:	003fef06 	br	8a968 <udivmodsi4+0x38>

0008a9ac <__divsi3>:
   8a9ac:	defffe04 	addi	sp,sp,-8
   8a9b0:	dc000015 	stw	r16,0(sp)
   8a9b4:	dfc00115 	stw	ra,4(sp)
   8a9b8:	0021883a 	mov	r16,zero
   8a9bc:	20000c16 	blt	r4,zero,8a9f0 <__divsi3+0x44>
   8a9c0:	000d883a 	mov	r6,zero
   8a9c4:	28000e16 	blt	r5,zero,8aa00 <__divsi3+0x54>
   8a9c8:	008a9300 	call	8a930 <udivmodsi4>
   8a9cc:	1007883a 	mov	r3,r2
   8a9d0:	8005003a 	cmpeq	r2,r16,zero
   8a9d4:	1000011e 	bne	r2,zero,8a9dc <__divsi3+0x30>
   8a9d8:	00c7c83a 	sub	r3,zero,r3
   8a9dc:	1805883a 	mov	r2,r3
   8a9e0:	dfc00117 	ldw	ra,4(sp)
   8a9e4:	dc000017 	ldw	r16,0(sp)
   8a9e8:	dec00204 	addi	sp,sp,8
   8a9ec:	f800283a 	ret
   8a9f0:	0109c83a 	sub	r4,zero,r4
   8a9f4:	04000044 	movi	r16,1
   8a9f8:	000d883a 	mov	r6,zero
   8a9fc:	283ff20e 	bge	r5,zero,8a9c8 <__divsi3+0x1c>
   8aa00:	014bc83a 	sub	r5,zero,r5
   8aa04:	8021003a 	cmpeq	r16,r16,zero
   8aa08:	003fef06 	br	8a9c8 <__divsi3+0x1c>

0008aa0c <__modsi3>:
   8aa0c:	deffff04 	addi	sp,sp,-4
   8aa10:	dfc00015 	stw	ra,0(sp)
   8aa14:	01800044 	movi	r6,1
   8aa18:	2807883a 	mov	r3,r5
   8aa1c:	20000416 	blt	r4,zero,8aa30 <__modsi3+0x24>
   8aa20:	28000c16 	blt	r5,zero,8aa54 <__modsi3+0x48>
   8aa24:	dfc00017 	ldw	ra,0(sp)
   8aa28:	dec00104 	addi	sp,sp,4
   8aa2c:	008a9301 	jmpi	8a930 <udivmodsi4>
   8aa30:	0109c83a 	sub	r4,zero,r4
   8aa34:	28000b16 	blt	r5,zero,8aa64 <__modsi3+0x58>
   8aa38:	180b883a 	mov	r5,r3
   8aa3c:	01800044 	movi	r6,1
   8aa40:	008a9300 	call	8a930 <udivmodsi4>
   8aa44:	0085c83a 	sub	r2,zero,r2
   8aa48:	dfc00017 	ldw	ra,0(sp)
   8aa4c:	dec00104 	addi	sp,sp,4
   8aa50:	f800283a 	ret
   8aa54:	014bc83a 	sub	r5,zero,r5
   8aa58:	dfc00017 	ldw	ra,0(sp)
   8aa5c:	dec00104 	addi	sp,sp,4
   8aa60:	008a9301 	jmpi	8a930 <udivmodsi4>
   8aa64:	0147c83a 	sub	r3,zero,r5
   8aa68:	003ff306 	br	8aa38 <__modsi3+0x2c>

0008aa6c <__udivsi3>:
   8aa6c:	000d883a 	mov	r6,zero
   8aa70:	008a9301 	jmpi	8a930 <udivmodsi4>

0008aa74 <__umodsi3>:
   8aa74:	01800044 	movi	r6,1
   8aa78:	008a9301 	jmpi	8a930 <udivmodsi4>

0008aa7c <__mulsi3>:
   8aa7c:	20000a26 	beq	r4,zero,8aaa8 <__mulsi3+0x2c>
   8aa80:	0007883a 	mov	r3,zero
   8aa84:	2080004c 	andi	r2,r4,1
   8aa88:	1005003a 	cmpeq	r2,r2,zero
   8aa8c:	2008d07a 	srli	r4,r4,1
   8aa90:	1000011e 	bne	r2,zero,8aa98 <__mulsi3+0x1c>
   8aa94:	1947883a 	add	r3,r3,r5
   8aa98:	294b883a 	add	r5,r5,r5
   8aa9c:	203ff91e 	bne	r4,zero,8aa84 <__mulsi3+0x8>
   8aaa0:	1805883a 	mov	r2,r3
   8aaa4:	f800283a 	ret
   8aaa8:	0007883a 	mov	r3,zero
   8aaac:	1805883a 	mov	r2,r3
   8aab0:	f800283a 	ret

0008aab4 <__muldi3>:
   8aab4:	defff204 	addi	sp,sp,-56
   8aab8:	df000c15 	stw	fp,48(sp)
   8aabc:	3038d43a 	srli	fp,r6,16
   8aac0:	dd000815 	stw	r20,32(sp)
   8aac4:	dc400515 	stw	r17,20(sp)
   8aac8:	2028d43a 	srli	r20,r4,16
   8aacc:	247fffcc 	andi	r17,r4,65535
   8aad0:	dc000415 	stw	r16,16(sp)
   8aad4:	343fffcc 	andi	r16,r6,65535
   8aad8:	dcc00715 	stw	r19,28(sp)
   8aadc:	d9000015 	stw	r4,0(sp)
   8aae0:	2827883a 	mov	r19,r5
   8aae4:	8809883a 	mov	r4,r17
   8aae8:	d9400115 	stw	r5,4(sp)
   8aaec:	800b883a 	mov	r5,r16
   8aaf0:	d9800215 	stw	r6,8(sp)
   8aaf4:	dfc00d15 	stw	ra,52(sp)
   8aaf8:	d9c00315 	stw	r7,12(sp)
   8aafc:	dd800a15 	stw	r22,40(sp)
   8ab00:	dd400915 	stw	r21,36(sp)
   8ab04:	302d883a 	mov	r22,r6
   8ab08:	ddc00b15 	stw	r23,44(sp)
   8ab0c:	dc800615 	stw	r18,24(sp)
   8ab10:	008aa7c0 	call	8aa7c <__mulsi3>
   8ab14:	8809883a 	mov	r4,r17
   8ab18:	e00b883a 	mov	r5,fp
   8ab1c:	102b883a 	mov	r21,r2
   8ab20:	008aa7c0 	call	8aa7c <__mulsi3>
   8ab24:	800b883a 	mov	r5,r16
   8ab28:	a009883a 	mov	r4,r20
   8ab2c:	1023883a 	mov	r17,r2
   8ab30:	008aa7c0 	call	8aa7c <__mulsi3>
   8ab34:	a009883a 	mov	r4,r20
   8ab38:	e00b883a 	mov	r5,fp
   8ab3c:	1021883a 	mov	r16,r2
   8ab40:	008aa7c0 	call	8aa7c <__mulsi3>
   8ab44:	a8ffffcc 	andi	r3,r21,65535
   8ab48:	a82ad43a 	srli	r21,r21,16
   8ab4c:	8c23883a 	add	r17,r17,r16
   8ab50:	1011883a 	mov	r8,r2
   8ab54:	ac6b883a 	add	r21,r21,r17
   8ab58:	a804943a 	slli	r2,r21,16
   8ab5c:	b009883a 	mov	r4,r22
   8ab60:	980b883a 	mov	r5,r19
   8ab64:	10c7883a 	add	r3,r2,r3
   8ab68:	a812d43a 	srli	r9,r21,16
   8ab6c:	180d883a 	mov	r6,r3
   8ab70:	ac00022e 	bgeu	r21,r16,8ab7c <__muldi3+0xc8>
   8ab74:	00800074 	movhi	r2,1
   8ab78:	4091883a 	add	r8,r8,r2
   8ab7c:	4267883a 	add	r19,r8,r9
   8ab80:	302d883a 	mov	r22,r6
   8ab84:	008aa7c0 	call	8aa7c <__mulsi3>
   8ab88:	d9400317 	ldw	r5,12(sp)
   8ab8c:	d9000017 	ldw	r4,0(sp)
   8ab90:	1023883a 	mov	r17,r2
   8ab94:	008aa7c0 	call	8aa7c <__mulsi3>
   8ab98:	14cb883a 	add	r5,r2,r19
   8ab9c:	894b883a 	add	r5,r17,r5
   8aba0:	b005883a 	mov	r2,r22
   8aba4:	2807883a 	mov	r3,r5
   8aba8:	dfc00d17 	ldw	ra,52(sp)
   8abac:	df000c17 	ldw	fp,48(sp)
   8abb0:	ddc00b17 	ldw	r23,44(sp)
   8abb4:	dd800a17 	ldw	r22,40(sp)
   8abb8:	dd400917 	ldw	r21,36(sp)
   8abbc:	dd000817 	ldw	r20,32(sp)
   8abc0:	dcc00717 	ldw	r19,28(sp)
   8abc4:	dc800617 	ldw	r18,24(sp)
   8abc8:	dc400517 	ldw	r17,20(sp)
   8abcc:	dc000417 	ldw	r16,16(sp)
   8abd0:	dec00e04 	addi	sp,sp,56
   8abd4:	f800283a 	ret

0008abd8 <__clzsi2>:
   8abd8:	00bfffd4 	movui	r2,65535
   8abdc:	11000e36 	bltu	r2,r4,8ac18 <__clzsi2+0x40>
   8abe0:	00803fc4 	movi	r2,255
   8abe4:	01400204 	movi	r5,8
   8abe8:	0007883a 	mov	r3,zero
   8abec:	11001036 	bltu	r2,r4,8ac30 <__clzsi2+0x58>
   8abf0:	000b883a 	mov	r5,zero
   8abf4:	20c6d83a 	srl	r3,r4,r3
   8abf8:	00800274 	movhi	r2,9
   8abfc:	10b7cd04 	addi	r2,r2,-8396
   8ac00:	1887883a 	add	r3,r3,r2
   8ac04:	18800003 	ldbu	r2,0(r3)
   8ac08:	00c00804 	movi	r3,32
   8ac0c:	2885883a 	add	r2,r5,r2
   8ac10:	1885c83a 	sub	r2,r3,r2
   8ac14:	f800283a 	ret
   8ac18:	01400404 	movi	r5,16
   8ac1c:	00804034 	movhi	r2,256
   8ac20:	10bfffc4 	addi	r2,r2,-1
   8ac24:	2807883a 	mov	r3,r5
   8ac28:	113ff22e 	bgeu	r2,r4,8abf4 <__clzsi2+0x1c>
   8ac2c:	01400604 	movi	r5,24
   8ac30:	2807883a 	mov	r3,r5
   8ac34:	20c6d83a 	srl	r3,r4,r3
   8ac38:	00800274 	movhi	r2,9
   8ac3c:	10b7cd04 	addi	r2,r2,-8396
   8ac40:	1887883a 	add	r3,r3,r2
   8ac44:	18800003 	ldbu	r2,0(r3)
   8ac48:	00c00804 	movi	r3,32
   8ac4c:	2885883a 	add	r2,r5,r2
   8ac50:	1885c83a 	sub	r2,r3,r2
   8ac54:	f800283a 	ret

0008ac58 <__pack_d>:
   8ac58:	20c00017 	ldw	r3,0(r4)
   8ac5c:	defffd04 	addi	sp,sp,-12
   8ac60:	dc000015 	stw	r16,0(sp)
   8ac64:	dc800215 	stw	r18,8(sp)
   8ac68:	dc400115 	stw	r17,4(sp)
   8ac6c:	00800044 	movi	r2,1
   8ac70:	22000317 	ldw	r8,12(r4)
   8ac74:	001f883a 	mov	r15,zero
   8ac78:	22400417 	ldw	r9,16(r4)
   8ac7c:	24000117 	ldw	r16,4(r4)
   8ac80:	10c0552e 	bgeu	r2,r3,8add8 <__pack_d+0x180>
   8ac84:	00800104 	movi	r2,4
   8ac88:	18804f26 	beq	r3,r2,8adc8 <__pack_d+0x170>
   8ac8c:	00800084 	movi	r2,2
   8ac90:	18800226 	beq	r3,r2,8ac9c <__pack_d+0x44>
   8ac94:	4244b03a 	or	r2,r8,r9
   8ac98:	10001a1e 	bne	r2,zero,8ad04 <__pack_d+0xac>
   8ac9c:	000d883a 	mov	r6,zero
   8aca0:	000f883a 	mov	r7,zero
   8aca4:	0011883a 	mov	r8,zero
   8aca8:	00800434 	movhi	r2,16
   8acac:	10bfffc4 	addi	r2,r2,-1
   8acb0:	301d883a 	mov	r14,r6
   8acb4:	3884703a 	and	r2,r7,r2
   8acb8:	400a953a 	slli	r5,r8,20
   8acbc:	79bffc2c 	andhi	r6,r15,65520
   8acc0:	308cb03a 	or	r6,r6,r2
   8acc4:	00e00434 	movhi	r3,32784
   8acc8:	18ffffc4 	addi	r3,r3,-1
   8accc:	800497fa 	slli	r2,r16,31
   8acd0:	30c6703a 	and	r3,r6,r3
   8acd4:	1946b03a 	or	r3,r3,r5
   8acd8:	01600034 	movhi	r5,32768
   8acdc:	297fffc4 	addi	r5,r5,-1
   8ace0:	194a703a 	and	r5,r3,r5
   8ace4:	288ab03a 	or	r5,r5,r2
   8ace8:	2807883a 	mov	r3,r5
   8acec:	7005883a 	mov	r2,r14
   8acf0:	dc800217 	ldw	r18,8(sp)
   8acf4:	dc400117 	ldw	r17,4(sp)
   8acf8:	dc000017 	ldw	r16,0(sp)
   8acfc:	dec00304 	addi	sp,sp,12
   8ad00:	f800283a 	ret
   8ad04:	21000217 	ldw	r4,8(r4)
   8ad08:	00bf0084 	movi	r2,-1022
   8ad0c:	20803f16 	blt	r4,r2,8ae0c <__pack_d+0x1b4>
   8ad10:	0080ffc4 	movi	r2,1023
   8ad14:	11002c16 	blt	r2,r4,8adc8 <__pack_d+0x170>
   8ad18:	00803fc4 	movi	r2,255
   8ad1c:	408c703a 	and	r6,r8,r2
   8ad20:	00802004 	movi	r2,128
   8ad24:	0007883a 	mov	r3,zero
   8ad28:	000f883a 	mov	r7,zero
   8ad2c:	2280ffc4 	addi	r10,r4,1023
   8ad30:	30801e26 	beq	r6,r2,8adac <__pack_d+0x154>
   8ad34:	00801fc4 	movi	r2,127
   8ad38:	4089883a 	add	r4,r8,r2
   8ad3c:	220d803a 	cmpltu	r6,r4,r8
   8ad40:	324d883a 	add	r6,r6,r9
   8ad44:	2011883a 	mov	r8,r4
   8ad48:	3013883a 	mov	r9,r6
   8ad4c:	00880034 	movhi	r2,8192
   8ad50:	10bfffc4 	addi	r2,r2,-1
   8ad54:	12400d36 	bltu	r2,r9,8ad8c <__pack_d+0x134>
   8ad58:	4804963a 	slli	r2,r9,24
   8ad5c:	400cd23a 	srli	r6,r8,8
   8ad60:	480ed23a 	srli	r7,r9,8
   8ad64:	013fffc4 	movi	r4,-1
   8ad68:	118cb03a 	or	r6,r2,r6
   8ad6c:	01400434 	movhi	r5,16
   8ad70:	297fffc4 	addi	r5,r5,-1
   8ad74:	3104703a 	and	r2,r6,r4
   8ad78:	3946703a 	and	r3,r7,r5
   8ad7c:	5201ffcc 	andi	r8,r10,2047
   8ad80:	100d883a 	mov	r6,r2
   8ad84:	180f883a 	mov	r7,r3
   8ad88:	003fc706 	br	8aca8 <__pack_d+0x50>
   8ad8c:	480897fa 	slli	r4,r9,31
   8ad90:	4004d07a 	srli	r2,r8,1
   8ad94:	4806d07a 	srli	r3,r9,1
   8ad98:	52800044 	addi	r10,r10,1
   8ad9c:	2084b03a 	or	r2,r4,r2
   8ada0:	1011883a 	mov	r8,r2
   8ada4:	1813883a 	mov	r9,r3
   8ada8:	003feb06 	br	8ad58 <__pack_d+0x100>
   8adac:	383fe11e 	bne	r7,zero,8ad34 <__pack_d+0xdc>
   8adb0:	01004004 	movi	r4,256
   8adb4:	4104703a 	and	r2,r8,r4
   8adb8:	10c4b03a 	or	r2,r2,r3
   8adbc:	103fe326 	beq	r2,zero,8ad4c <__pack_d+0xf4>
   8adc0:	3005883a 	mov	r2,r6
   8adc4:	003fdc06 	br	8ad38 <__pack_d+0xe0>
   8adc8:	000d883a 	mov	r6,zero
   8adcc:	000f883a 	mov	r7,zero
   8add0:	0201ffc4 	movi	r8,2047
   8add4:	003fb406 	br	8aca8 <__pack_d+0x50>
   8add8:	0005883a 	mov	r2,zero
   8addc:	00c00234 	movhi	r3,8
   8ade0:	408cb03a 	or	r6,r8,r2
   8ade4:	48ceb03a 	or	r7,r9,r3
   8ade8:	013fffc4 	movi	r4,-1
   8adec:	01400434 	movhi	r5,16
   8adf0:	297fffc4 	addi	r5,r5,-1
   8adf4:	3104703a 	and	r2,r6,r4
   8adf8:	3946703a 	and	r3,r7,r5
   8adfc:	100d883a 	mov	r6,r2
   8ae00:	180f883a 	mov	r7,r3
   8ae04:	0201ffc4 	movi	r8,2047
   8ae08:	003fa706 	br	8aca8 <__pack_d+0x50>
   8ae0c:	1109c83a 	sub	r4,r2,r4
   8ae10:	00800e04 	movi	r2,56
   8ae14:	11004316 	blt	r2,r4,8af24 <__pack_d+0x2cc>
   8ae18:	21fff804 	addi	r7,r4,-32
   8ae1c:	38004516 	blt	r7,zero,8af34 <__pack_d+0x2dc>
   8ae20:	49d8d83a 	srl	r12,r9,r7
   8ae24:	001b883a 	mov	r13,zero
   8ae28:	0023883a 	mov	r17,zero
   8ae2c:	01400044 	movi	r5,1
   8ae30:	0025883a 	mov	r18,zero
   8ae34:	38004716 	blt	r7,zero,8af54 <__pack_d+0x2fc>
   8ae38:	29d6983a 	sll	r11,r5,r7
   8ae3c:	0015883a 	mov	r10,zero
   8ae40:	00bfffc4 	movi	r2,-1
   8ae44:	5089883a 	add	r4,r10,r2
   8ae48:	588b883a 	add	r5,r11,r2
   8ae4c:	228d803a 	cmpltu	r6,r4,r10
   8ae50:	314b883a 	add	r5,r6,r5
   8ae54:	4104703a 	and	r2,r8,r4
   8ae58:	4946703a 	and	r3,r9,r5
   8ae5c:	10c4b03a 	or	r2,r2,r3
   8ae60:	10000226 	beq	r2,zero,8ae6c <__pack_d+0x214>
   8ae64:	04400044 	movi	r17,1
   8ae68:	0025883a 	mov	r18,zero
   8ae6c:	00803fc4 	movi	r2,255
   8ae70:	644eb03a 	or	r7,r12,r17
   8ae74:	3892703a 	and	r9,r7,r2
   8ae78:	00802004 	movi	r2,128
   8ae7c:	6c90b03a 	or	r8,r13,r18
   8ae80:	0015883a 	mov	r10,zero
   8ae84:	48801626 	beq	r9,r2,8aee0 <__pack_d+0x288>
   8ae88:	01001fc4 	movi	r4,127
   8ae8c:	3905883a 	add	r2,r7,r4
   8ae90:	11cd803a 	cmpltu	r6,r2,r7
   8ae94:	320d883a 	add	r6,r6,r8
   8ae98:	100f883a 	mov	r7,r2
   8ae9c:	00840034 	movhi	r2,4096
   8aea0:	10bfffc4 	addi	r2,r2,-1
   8aea4:	3011883a 	mov	r8,r6
   8aea8:	0007883a 	mov	r3,zero
   8aeac:	11801b36 	bltu	r2,r6,8af1c <__pack_d+0x2c4>
   8aeb0:	4004963a 	slli	r2,r8,24
   8aeb4:	3808d23a 	srli	r4,r7,8
   8aeb8:	400ad23a 	srli	r5,r8,8
   8aebc:	1813883a 	mov	r9,r3
   8aec0:	1108b03a 	or	r4,r2,r4
   8aec4:	00bfffc4 	movi	r2,-1
   8aec8:	00c00434 	movhi	r3,16
   8aecc:	18ffffc4 	addi	r3,r3,-1
   8aed0:	208c703a 	and	r6,r4,r2
   8aed4:	28ce703a 	and	r7,r5,r3
   8aed8:	4a01ffcc 	andi	r8,r9,2047
   8aedc:	003f7206 	br	8aca8 <__pack_d+0x50>
   8aee0:	503fe91e 	bne	r10,zero,8ae88 <__pack_d+0x230>
   8aee4:	01004004 	movi	r4,256
   8aee8:	3904703a 	and	r2,r7,r4
   8aeec:	0007883a 	mov	r3,zero
   8aef0:	10c4b03a 	or	r2,r2,r3
   8aef4:	10000626 	beq	r2,zero,8af10 <__pack_d+0x2b8>
   8aef8:	3a45883a 	add	r2,r7,r9
   8aefc:	11cd803a 	cmpltu	r6,r2,r7
   8af00:	320d883a 	add	r6,r6,r8
   8af04:	100f883a 	mov	r7,r2
   8af08:	3011883a 	mov	r8,r6
   8af0c:	0007883a 	mov	r3,zero
   8af10:	00840034 	movhi	r2,4096
   8af14:	10bfffc4 	addi	r2,r2,-1
   8af18:	123fe52e 	bgeu	r2,r8,8aeb0 <__pack_d+0x258>
   8af1c:	00c00044 	movi	r3,1
   8af20:	003fe306 	br	8aeb0 <__pack_d+0x258>
   8af24:	0009883a 	mov	r4,zero
   8af28:	0013883a 	mov	r9,zero
   8af2c:	000b883a 	mov	r5,zero
   8af30:	003fe406 	br	8aec4 <__pack_d+0x26c>
   8af34:	4a47883a 	add	r3,r9,r9
   8af38:	008007c4 	movi	r2,31
   8af3c:	1105c83a 	sub	r2,r2,r4
   8af40:	1886983a 	sll	r3,r3,r2
   8af44:	4118d83a 	srl	r12,r8,r4
   8af48:	491ad83a 	srl	r13,r9,r4
   8af4c:	1b18b03a 	or	r12,r3,r12
   8af50:	003fb506 	br	8ae28 <__pack_d+0x1d0>
   8af54:	2806d07a 	srli	r3,r5,1
   8af58:	008007c4 	movi	r2,31
   8af5c:	1105c83a 	sub	r2,r2,r4
   8af60:	1896d83a 	srl	r11,r3,r2
   8af64:	2914983a 	sll	r10,r5,r4
   8af68:	003fb506 	br	8ae40 <__pack_d+0x1e8>

0008af6c <__unpack_d>:
   8af6c:	20c00117 	ldw	r3,4(r4)
   8af70:	22400017 	ldw	r9,0(r4)
   8af74:	00800434 	movhi	r2,16
   8af78:	10bfffc4 	addi	r2,r2,-1
   8af7c:	1808d53a 	srli	r4,r3,20
   8af80:	180cd7fa 	srli	r6,r3,31
   8af84:	1894703a 	and	r10,r3,r2
   8af88:	2201ffcc 	andi	r8,r4,2047
   8af8c:	281b883a 	mov	r13,r5
   8af90:	4817883a 	mov	r11,r9
   8af94:	29800115 	stw	r6,4(r5)
   8af98:	5019883a 	mov	r12,r10
   8af9c:	40001e1e 	bne	r8,zero,8b018 <__unpack_d+0xac>
   8afa0:	4a84b03a 	or	r2,r9,r10
   8afa4:	10001926 	beq	r2,zero,8b00c <__unpack_d+0xa0>
   8afa8:	4804d63a 	srli	r2,r9,24
   8afac:	500c923a 	slli	r6,r10,8
   8afb0:	013f0084 	movi	r4,-1022
   8afb4:	00c40034 	movhi	r3,4096
   8afb8:	18ffffc4 	addi	r3,r3,-1
   8afbc:	118cb03a 	or	r6,r2,r6
   8afc0:	008000c4 	movi	r2,3
   8afc4:	480a923a 	slli	r5,r9,8
   8afc8:	68800015 	stw	r2,0(r13)
   8afcc:	69000215 	stw	r4,8(r13)
   8afd0:	19800b36 	bltu	r3,r6,8b000 <__unpack_d+0x94>
   8afd4:	200f883a 	mov	r7,r4
   8afd8:	1811883a 	mov	r8,r3
   8afdc:	2945883a 	add	r2,r5,r5
   8afe0:	1149803a 	cmpltu	r4,r2,r5
   8afe4:	3187883a 	add	r3,r6,r6
   8afe8:	20c9883a 	add	r4,r4,r3
   8afec:	100b883a 	mov	r5,r2
   8aff0:	200d883a 	mov	r6,r4
   8aff4:	39ffffc4 	addi	r7,r7,-1
   8aff8:	413ff82e 	bgeu	r8,r4,8afdc <__unpack_d+0x70>
   8affc:	69c00215 	stw	r7,8(r13)
   8b000:	69800415 	stw	r6,16(r13)
   8b004:	69400315 	stw	r5,12(r13)
   8b008:	f800283a 	ret
   8b00c:	00800084 	movi	r2,2
   8b010:	28800015 	stw	r2,0(r5)
   8b014:	f800283a 	ret
   8b018:	0081ffc4 	movi	r2,2047
   8b01c:	40800f26 	beq	r8,r2,8b05c <__unpack_d+0xf0>
   8b020:	480cd63a 	srli	r6,r9,24
   8b024:	5006923a 	slli	r3,r10,8
   8b028:	4804923a 	slli	r2,r9,8
   8b02c:	0009883a 	mov	r4,zero
   8b030:	30c6b03a 	or	r3,r6,r3
   8b034:	01440034 	movhi	r5,4096
   8b038:	110cb03a 	or	r6,r2,r4
   8b03c:	423f0044 	addi	r8,r8,-1023
   8b040:	194eb03a 	or	r7,r3,r5
   8b044:	008000c4 	movi	r2,3
   8b048:	69c00415 	stw	r7,16(r13)
   8b04c:	6a000215 	stw	r8,8(r13)
   8b050:	68800015 	stw	r2,0(r13)
   8b054:	69800315 	stw	r6,12(r13)
   8b058:	f800283a 	ret
   8b05c:	4a84b03a 	or	r2,r9,r10
   8b060:	1000031e 	bne	r2,zero,8b070 <__unpack_d+0x104>
   8b064:	00800104 	movi	r2,4
   8b068:	28800015 	stw	r2,0(r5)
   8b06c:	f800283a 	ret
   8b070:	0009883a 	mov	r4,zero
   8b074:	01400234 	movhi	r5,8
   8b078:	4904703a 	and	r2,r9,r4
   8b07c:	5146703a 	and	r3,r10,r5
   8b080:	10c4b03a 	or	r2,r2,r3
   8b084:	10000526 	beq	r2,zero,8b09c <__unpack_d+0x130>
   8b088:	00800044 	movi	r2,1
   8b08c:	68800015 	stw	r2,0(r13)
   8b090:	6b000415 	stw	r12,16(r13)
   8b094:	6ac00315 	stw	r11,12(r13)
   8b098:	f800283a 	ret
   8b09c:	68000015 	stw	zero,0(r13)
   8b0a0:	003ffb06 	br	8b090 <__unpack_d+0x124>

0008b0a4 <__fpcmp_parts_d>:
   8b0a4:	21800017 	ldw	r6,0(r4)
   8b0a8:	00c00044 	movi	r3,1
   8b0ac:	19800a2e 	bgeu	r3,r6,8b0d8 <__fpcmp_parts_d+0x34>
   8b0b0:	28800017 	ldw	r2,0(r5)
   8b0b4:	1880082e 	bgeu	r3,r2,8b0d8 <__fpcmp_parts_d+0x34>
   8b0b8:	00c00104 	movi	r3,4
   8b0bc:	30c02626 	beq	r6,r3,8b158 <__fpcmp_parts_d+0xb4>
   8b0c0:	10c02226 	beq	r2,r3,8b14c <__fpcmp_parts_d+0xa8>
   8b0c4:	00c00084 	movi	r3,2
   8b0c8:	30c00526 	beq	r6,r3,8b0e0 <__fpcmp_parts_d+0x3c>
   8b0cc:	10c0071e 	bne	r2,r3,8b0ec <__fpcmp_parts_d+0x48>
   8b0d0:	20800117 	ldw	r2,4(r4)
   8b0d4:	1000091e 	bne	r2,zero,8b0fc <__fpcmp_parts_d+0x58>
   8b0d8:	00800044 	movi	r2,1
   8b0dc:	f800283a 	ret
   8b0e0:	10c01a1e 	bne	r2,r3,8b14c <__fpcmp_parts_d+0xa8>
   8b0e4:	0005883a 	mov	r2,zero
   8b0e8:	f800283a 	ret
   8b0ec:	22000117 	ldw	r8,4(r4)
   8b0f0:	28800117 	ldw	r2,4(r5)
   8b0f4:	40800326 	beq	r8,r2,8b104 <__fpcmp_parts_d+0x60>
   8b0f8:	403ff726 	beq	r8,zero,8b0d8 <__fpcmp_parts_d+0x34>
   8b0fc:	00bfffc4 	movi	r2,-1
   8b100:	f800283a 	ret
   8b104:	20c00217 	ldw	r3,8(r4)
   8b108:	28800217 	ldw	r2,8(r5)
   8b10c:	10fffa16 	blt	r2,r3,8b0f8 <__fpcmp_parts_d+0x54>
   8b110:	18800916 	blt	r3,r2,8b138 <__fpcmp_parts_d+0x94>
   8b114:	21c00417 	ldw	r7,16(r4)
   8b118:	28c00417 	ldw	r3,16(r5)
   8b11c:	21800317 	ldw	r6,12(r4)
   8b120:	28800317 	ldw	r2,12(r5)
   8b124:	19fff436 	bltu	r3,r7,8b0f8 <__fpcmp_parts_d+0x54>
   8b128:	38c00526 	beq	r7,r3,8b140 <__fpcmp_parts_d+0x9c>
   8b12c:	38c00236 	bltu	r7,r3,8b138 <__fpcmp_parts_d+0x94>
   8b130:	19ffec1e 	bne	r3,r7,8b0e4 <__fpcmp_parts_d+0x40>
   8b134:	30bfeb2e 	bgeu	r6,r2,8b0e4 <__fpcmp_parts_d+0x40>
   8b138:	403fe71e 	bne	r8,zero,8b0d8 <__fpcmp_parts_d+0x34>
   8b13c:	003fef06 	br	8b0fc <__fpcmp_parts_d+0x58>
   8b140:	11bffa2e 	bgeu	r2,r6,8b12c <__fpcmp_parts_d+0x88>
   8b144:	403fe426 	beq	r8,zero,8b0d8 <__fpcmp_parts_d+0x34>
   8b148:	003fec06 	br	8b0fc <__fpcmp_parts_d+0x58>
   8b14c:	28800117 	ldw	r2,4(r5)
   8b150:	103fe11e 	bne	r2,zero,8b0d8 <__fpcmp_parts_d+0x34>
   8b154:	003fe906 	br	8b0fc <__fpcmp_parts_d+0x58>
   8b158:	11bfdd1e 	bne	r2,r6,8b0d0 <__fpcmp_parts_d+0x2c>
   8b15c:	28c00117 	ldw	r3,4(r5)
   8b160:	20800117 	ldw	r2,4(r4)
   8b164:	1885c83a 	sub	r2,r3,r2
   8b168:	f800283a 	ret

0008b16c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8b16c:	defff804 	addi	sp,sp,-32
   8b170:	dfc00715 	stw	ra,28(sp)
   8b174:	df000615 	stw	fp,24(sp)
   8b178:	df000604 	addi	fp,sp,24
   8b17c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8b180:	e0bffc17 	ldw	r2,-16(fp)
   8b184:	1004803a 	cmplt	r2,r2,zero
   8b188:	1000091e 	bne	r2,zero,8b1b0 <close+0x44>
   8b18c:	e13ffc17 	ldw	r4,-16(fp)
   8b190:	01400304 	movi	r5,12
   8b194:	008aa7c0 	call	8aa7c <__mulsi3>
   8b198:	1007883a 	mov	r3,r2
   8b19c:	00800274 	movhi	r2,9
   8b1a0:	10badc04 	addi	r2,r2,-5264
   8b1a4:	1887883a 	add	r3,r3,r2
   8b1a8:	e0ffff15 	stw	r3,-4(fp)
   8b1ac:	00000106 	br	8b1b4 <close+0x48>
   8b1b0:	e03fff15 	stw	zero,-4(fp)
   8b1b4:	e0bfff17 	ldw	r2,-4(fp)
   8b1b8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   8b1bc:	e0bffb17 	ldw	r2,-20(fp)
   8b1c0:	1005003a 	cmpeq	r2,r2,zero
   8b1c4:	10001d1e 	bne	r2,zero,8b23c <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8b1c8:	e0bffb17 	ldw	r2,-20(fp)
   8b1cc:	10800017 	ldw	r2,0(r2)
   8b1d0:	10800417 	ldw	r2,16(r2)
   8b1d4:	1005003a 	cmpeq	r2,r2,zero
   8b1d8:	1000071e 	bne	r2,zero,8b1f8 <close+0x8c>
   8b1dc:	e0bffb17 	ldw	r2,-20(fp)
   8b1e0:	10800017 	ldw	r2,0(r2)
   8b1e4:	10800417 	ldw	r2,16(r2)
   8b1e8:	e13ffb17 	ldw	r4,-20(fp)
   8b1ec:	103ee83a 	callr	r2
   8b1f0:	e0bffe15 	stw	r2,-8(fp)
   8b1f4:	00000106 	br	8b1fc <close+0x90>
   8b1f8:	e03ffe15 	stw	zero,-8(fp)
   8b1fc:	e0bffe17 	ldw	r2,-8(fp)
   8b200:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8b204:	e13ffc17 	ldw	r4,-16(fp)
   8b208:	008b9c40 	call	8b9c4 <alt_release_fd>
    if (rval < 0)
   8b20c:	e0bffa17 	ldw	r2,-24(fp)
   8b210:	1004403a 	cmpge	r2,r2,zero
   8b214:	1000071e 	bne	r2,zero,8b234 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   8b218:	008b26c0 	call	8b26c <alt_get_errno>
   8b21c:	e0fffa17 	ldw	r3,-24(fp)
   8b220:	00c7c83a 	sub	r3,zero,r3
   8b224:	10c00015 	stw	r3,0(r2)
      return -1;
   8b228:	00bfffc4 	movi	r2,-1
   8b22c:	e0bffd15 	stw	r2,-12(fp)
   8b230:	00000806 	br	8b254 <close+0xe8>
    }
    return 0;
   8b234:	e03ffd15 	stw	zero,-12(fp)
   8b238:	00000606 	br	8b254 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8b23c:	008b26c0 	call	8b26c <alt_get_errno>
   8b240:	1007883a 	mov	r3,r2
   8b244:	00801444 	movi	r2,81
   8b248:	18800015 	stw	r2,0(r3)
    return -1;
   8b24c:	00bfffc4 	movi	r2,-1
   8b250:	e0bffd15 	stw	r2,-12(fp)
   8b254:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   8b258:	e037883a 	mov	sp,fp
   8b25c:	dfc00117 	ldw	ra,4(sp)
   8b260:	df000017 	ldw	fp,0(sp)
   8b264:	dec00204 	addi	sp,sp,8
   8b268:	f800283a 	ret

0008b26c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b26c:	defffd04 	addi	sp,sp,-12
   8b270:	dfc00215 	stw	ra,8(sp)
   8b274:	df000115 	stw	fp,4(sp)
   8b278:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b27c:	00800274 	movhi	r2,9
   8b280:	10bf6504 	addi	r2,r2,-620
   8b284:	10800017 	ldw	r2,0(r2)
   8b288:	1005003a 	cmpeq	r2,r2,zero
   8b28c:	1000061e 	bne	r2,zero,8b2a8 <alt_get_errno+0x3c>
   8b290:	00800274 	movhi	r2,9
   8b294:	10bf6504 	addi	r2,r2,-620
   8b298:	10800017 	ldw	r2,0(r2)
   8b29c:	103ee83a 	callr	r2
   8b2a0:	e0bfff15 	stw	r2,-4(fp)
   8b2a4:	00000306 	br	8b2b4 <alt_get_errno+0x48>
   8b2a8:	00800274 	movhi	r2,9
   8b2ac:	1086c804 	addi	r2,r2,6944
   8b2b0:	e0bfff15 	stw	r2,-4(fp)
   8b2b4:	e0bfff17 	ldw	r2,-4(fp)
}
   8b2b8:	e037883a 	mov	sp,fp
   8b2bc:	dfc00117 	ldw	ra,4(sp)
   8b2c0:	df000017 	ldw	fp,0(sp)
   8b2c4:	dec00204 	addi	sp,sp,8
   8b2c8:	f800283a 	ret

0008b2cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8b2cc:	defffc04 	addi	sp,sp,-16
   8b2d0:	df000315 	stw	fp,12(sp)
   8b2d4:	df000304 	addi	fp,sp,12
   8b2d8:	e13ffd15 	stw	r4,-12(fp)
   8b2dc:	e17ffe15 	stw	r5,-8(fp)
   8b2e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8b2e4:	e0bfff17 	ldw	r2,-4(fp)
}
   8b2e8:	e037883a 	mov	sp,fp
   8b2ec:	df000017 	ldw	fp,0(sp)
   8b2f0:	dec00104 	addi	sp,sp,4
   8b2f4:	f800283a 	ret

0008b2f8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8b2f8:	defff904 	addi	sp,sp,-28
   8b2fc:	dfc00615 	stw	ra,24(sp)
   8b300:	df000515 	stw	fp,20(sp)
   8b304:	df000504 	addi	fp,sp,20
   8b308:	e13ffc15 	stw	r4,-16(fp)
   8b30c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b310:	e0bffc17 	ldw	r2,-16(fp)
   8b314:	1004803a 	cmplt	r2,r2,zero
   8b318:	1000091e 	bne	r2,zero,8b340 <fstat+0x48>
   8b31c:	e13ffc17 	ldw	r4,-16(fp)
   8b320:	01400304 	movi	r5,12
   8b324:	008aa7c0 	call	8aa7c <__mulsi3>
   8b328:	1007883a 	mov	r3,r2
   8b32c:	00800274 	movhi	r2,9
   8b330:	10badc04 	addi	r2,r2,-5264
   8b334:	1887883a 	add	r3,r3,r2
   8b338:	e0ffff15 	stw	r3,-4(fp)
   8b33c:	00000106 	br	8b344 <fstat+0x4c>
   8b340:	e03fff15 	stw	zero,-4(fp)
   8b344:	e0bfff17 	ldw	r2,-4(fp)
   8b348:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8b34c:	e0bffb17 	ldw	r2,-20(fp)
   8b350:	1005003a 	cmpeq	r2,r2,zero
   8b354:	1000121e 	bne	r2,zero,8b3a0 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8b358:	e0bffb17 	ldw	r2,-20(fp)
   8b35c:	10800017 	ldw	r2,0(r2)
   8b360:	10800817 	ldw	r2,32(r2)
   8b364:	1005003a 	cmpeq	r2,r2,zero
   8b368:	1000081e 	bne	r2,zero,8b38c <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   8b36c:	e0bffb17 	ldw	r2,-20(fp)
   8b370:	10800017 	ldw	r2,0(r2)
   8b374:	10800817 	ldw	r2,32(r2)
   8b378:	e13ffb17 	ldw	r4,-20(fp)
   8b37c:	e17ffd17 	ldw	r5,-12(fp)
   8b380:	103ee83a 	callr	r2
   8b384:	e0bffe15 	stw	r2,-8(fp)
   8b388:	00000b06 	br	8b3b8 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8b38c:	e0fffd17 	ldw	r3,-12(fp)
   8b390:	00880004 	movi	r2,8192
   8b394:	18800115 	stw	r2,4(r3)
      return 0;
   8b398:	e03ffe15 	stw	zero,-8(fp)
   8b39c:	00000606 	br	8b3b8 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8b3a0:	008b3d00 	call	8b3d0 <alt_get_errno>
   8b3a4:	1007883a 	mov	r3,r2
   8b3a8:	00801444 	movi	r2,81
   8b3ac:	18800015 	stw	r2,0(r3)
    return -1;
   8b3b0:	00bfffc4 	movi	r2,-1
   8b3b4:	e0bffe15 	stw	r2,-8(fp)
   8b3b8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8b3bc:	e037883a 	mov	sp,fp
   8b3c0:	dfc00117 	ldw	ra,4(sp)
   8b3c4:	df000017 	ldw	fp,0(sp)
   8b3c8:	dec00204 	addi	sp,sp,8
   8b3cc:	f800283a 	ret

0008b3d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b3d0:	defffd04 	addi	sp,sp,-12
   8b3d4:	dfc00215 	stw	ra,8(sp)
   8b3d8:	df000115 	stw	fp,4(sp)
   8b3dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b3e0:	00800274 	movhi	r2,9
   8b3e4:	10bf6504 	addi	r2,r2,-620
   8b3e8:	10800017 	ldw	r2,0(r2)
   8b3ec:	1005003a 	cmpeq	r2,r2,zero
   8b3f0:	1000061e 	bne	r2,zero,8b40c <alt_get_errno+0x3c>
   8b3f4:	00800274 	movhi	r2,9
   8b3f8:	10bf6504 	addi	r2,r2,-620
   8b3fc:	10800017 	ldw	r2,0(r2)
   8b400:	103ee83a 	callr	r2
   8b404:	e0bfff15 	stw	r2,-4(fp)
   8b408:	00000306 	br	8b418 <alt_get_errno+0x48>
   8b40c:	00800274 	movhi	r2,9
   8b410:	1086c804 	addi	r2,r2,6944
   8b414:	e0bfff15 	stw	r2,-4(fp)
   8b418:	e0bfff17 	ldw	r2,-4(fp)
}
   8b41c:	e037883a 	mov	sp,fp
   8b420:	dfc00117 	ldw	ra,4(sp)
   8b424:	df000017 	ldw	fp,0(sp)
   8b428:	dec00204 	addi	sp,sp,8
   8b42c:	f800283a 	ret

0008b430 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8b430:	deffeb04 	addi	sp,sp,-84
   8b434:	dfc01415 	stw	ra,80(sp)
   8b438:	df001315 	stw	fp,76(sp)
   8b43c:	df001304 	addi	fp,sp,76
   8b440:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b444:	e0bffd17 	ldw	r2,-12(fp)
   8b448:	1004803a 	cmplt	r2,r2,zero
   8b44c:	1000091e 	bne	r2,zero,8b474 <isatty+0x44>
   8b450:	e13ffd17 	ldw	r4,-12(fp)
   8b454:	01400304 	movi	r5,12
   8b458:	008aa7c0 	call	8aa7c <__mulsi3>
   8b45c:	1007883a 	mov	r3,r2
   8b460:	00800274 	movhi	r2,9
   8b464:	10badc04 	addi	r2,r2,-5264
   8b468:	1887883a 	add	r3,r3,r2
   8b46c:	e0ffff15 	stw	r3,-4(fp)
   8b470:	00000106 	br	8b478 <isatty+0x48>
   8b474:	e03fff15 	stw	zero,-4(fp)
   8b478:	e0bfff17 	ldw	r2,-4(fp)
   8b47c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   8b480:	e0bfed17 	ldw	r2,-76(fp)
   8b484:	1005003a 	cmpeq	r2,r2,zero
   8b488:	10000f1e 	bne	r2,zero,8b4c8 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8b48c:	e0bfed17 	ldw	r2,-76(fp)
   8b490:	10800017 	ldw	r2,0(r2)
   8b494:	10800817 	ldw	r2,32(r2)
   8b498:	1004c03a 	cmpne	r2,r2,zero
   8b49c:	1000031e 	bne	r2,zero,8b4ac <isatty+0x7c>
    {
      return 1;
   8b4a0:	00800044 	movi	r2,1
   8b4a4:	e0bffe15 	stw	r2,-8(fp)
   8b4a8:	00000c06 	br	8b4dc <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8b4ac:	e17fee04 	addi	r5,fp,-72
   8b4b0:	e13ffd17 	ldw	r4,-12(fp)
   8b4b4:	008b2f80 	call	8b2f8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8b4b8:	e0bfef17 	ldw	r2,-68(fp)
   8b4bc:	10880020 	cmpeqi	r2,r2,8192
   8b4c0:	e0bffe15 	stw	r2,-8(fp)
   8b4c4:	00000506 	br	8b4dc <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8b4c8:	008b4f40 	call	8b4f4 <alt_get_errno>
   8b4cc:	1007883a 	mov	r3,r2
   8b4d0:	00801444 	movi	r2,81
   8b4d4:	18800015 	stw	r2,0(r3)
    return 0;
   8b4d8:	e03ffe15 	stw	zero,-8(fp)
   8b4dc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8b4e0:	e037883a 	mov	sp,fp
   8b4e4:	dfc00117 	ldw	ra,4(sp)
   8b4e8:	df000017 	ldw	fp,0(sp)
   8b4ec:	dec00204 	addi	sp,sp,8
   8b4f0:	f800283a 	ret

0008b4f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b4f4:	defffd04 	addi	sp,sp,-12
   8b4f8:	dfc00215 	stw	ra,8(sp)
   8b4fc:	df000115 	stw	fp,4(sp)
   8b500:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b504:	00800274 	movhi	r2,9
   8b508:	10bf6504 	addi	r2,r2,-620
   8b50c:	10800017 	ldw	r2,0(r2)
   8b510:	1005003a 	cmpeq	r2,r2,zero
   8b514:	1000061e 	bne	r2,zero,8b530 <alt_get_errno+0x3c>
   8b518:	00800274 	movhi	r2,9
   8b51c:	10bf6504 	addi	r2,r2,-620
   8b520:	10800017 	ldw	r2,0(r2)
   8b524:	103ee83a 	callr	r2
   8b528:	e0bfff15 	stw	r2,-4(fp)
   8b52c:	00000306 	br	8b53c <alt_get_errno+0x48>
   8b530:	00800274 	movhi	r2,9
   8b534:	1086c804 	addi	r2,r2,6944
   8b538:	e0bfff15 	stw	r2,-4(fp)
   8b53c:	e0bfff17 	ldw	r2,-4(fp)
}
   8b540:	e037883a 	mov	sp,fp
   8b544:	dfc00117 	ldw	ra,4(sp)
   8b548:	df000017 	ldw	fp,0(sp)
   8b54c:	dec00204 	addi	sp,sp,8
   8b550:	f800283a 	ret

0008b554 <alt_load>:
   8b554:	defffe04 	addi	sp,sp,-8
   8b558:	dfc00115 	stw	ra,4(sp)
   8b55c:	df000015 	stw	fp,0(sp)
   8b560:	d839883a 	mov	fp,sp
   8b564:	01000274 	movhi	r4,9
   8b568:	213f6a04 	addi	r4,r4,-600
   8b56c:	01400274 	movhi	r5,9
   8b570:	29781a04 	addi	r5,r5,-8088
   8b574:	01800274 	movhi	r6,9
   8b578:	31bf6a04 	addi	r6,r6,-600
   8b57c:	008b5d40 	call	8b5d4 <alt_load_section>
   8b580:	01000234 	movhi	r4,8
   8b584:	21000804 	addi	r4,r4,32
   8b588:	01400234 	movhi	r5,8
   8b58c:	29400804 	addi	r5,r5,32
   8b590:	01800234 	movhi	r6,8
   8b594:	31806d04 	addi	r6,r6,436
   8b598:	008b5d40 	call	8b5d4 <alt_load_section>
   8b59c:	01000274 	movhi	r4,9
   8b5a0:	2136a504 	addi	r4,r4,-9580
   8b5a4:	01400274 	movhi	r5,9
   8b5a8:	2976a504 	addi	r5,r5,-9580
   8b5ac:	01800274 	movhi	r6,9
   8b5b0:	31b81a04 	addi	r6,r6,-8088
   8b5b4:	008b5d40 	call	8b5d4 <alt_load_section>
   8b5b8:	008c92c0 	call	8c92c <alt_dcache_flush_all>
   8b5bc:	008cb240 	call	8cb24 <alt_icache_flush_all>
   8b5c0:	e037883a 	mov	sp,fp
   8b5c4:	dfc00117 	ldw	ra,4(sp)
   8b5c8:	df000017 	ldw	fp,0(sp)
   8b5cc:	dec00204 	addi	sp,sp,8
   8b5d0:	f800283a 	ret

0008b5d4 <alt_load_section>:
   8b5d4:	defffc04 	addi	sp,sp,-16
   8b5d8:	df000315 	stw	fp,12(sp)
   8b5dc:	df000304 	addi	fp,sp,12
   8b5e0:	e13ffd15 	stw	r4,-12(fp)
   8b5e4:	e17ffe15 	stw	r5,-8(fp)
   8b5e8:	e1bfff15 	stw	r6,-4(fp)
   8b5ec:	e0fffe17 	ldw	r3,-8(fp)
   8b5f0:	e0bffd17 	ldw	r2,-12(fp)
   8b5f4:	18800e26 	beq	r3,r2,8b630 <alt_load_section+0x5c>
   8b5f8:	00000a06 	br	8b624 <alt_load_section+0x50>
   8b5fc:	e0bffd17 	ldw	r2,-12(fp)
   8b600:	10c00017 	ldw	r3,0(r2)
   8b604:	e0bffe17 	ldw	r2,-8(fp)
   8b608:	10c00015 	stw	r3,0(r2)
   8b60c:	e0bffe17 	ldw	r2,-8(fp)
   8b610:	10800104 	addi	r2,r2,4
   8b614:	e0bffe15 	stw	r2,-8(fp)
   8b618:	e0bffd17 	ldw	r2,-12(fp)
   8b61c:	10800104 	addi	r2,r2,4
   8b620:	e0bffd15 	stw	r2,-12(fp)
   8b624:	e0fffe17 	ldw	r3,-8(fp)
   8b628:	e0bfff17 	ldw	r2,-4(fp)
   8b62c:	18bff31e 	bne	r3,r2,8b5fc <alt_load_section+0x28>
   8b630:	e037883a 	mov	sp,fp
   8b634:	df000017 	ldw	fp,0(sp)
   8b638:	dec00104 	addi	sp,sp,4
   8b63c:	f800283a 	ret

0008b640 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8b640:	defff804 	addi	sp,sp,-32
   8b644:	dfc00715 	stw	ra,28(sp)
   8b648:	df000615 	stw	fp,24(sp)
   8b64c:	df000604 	addi	fp,sp,24
   8b650:	e13ffc15 	stw	r4,-16(fp)
   8b654:	e17ffd15 	stw	r5,-12(fp)
   8b658:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8b65c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b660:	e0bffc17 	ldw	r2,-16(fp)
   8b664:	1004803a 	cmplt	r2,r2,zero
   8b668:	1000091e 	bne	r2,zero,8b690 <lseek+0x50>
   8b66c:	e13ffc17 	ldw	r4,-16(fp)
   8b670:	01400304 	movi	r5,12
   8b674:	008aa7c0 	call	8aa7c <__mulsi3>
   8b678:	1007883a 	mov	r3,r2
   8b67c:	00800274 	movhi	r2,9
   8b680:	10badc04 	addi	r2,r2,-5264
   8b684:	1887883a 	add	r3,r3,r2
   8b688:	e0ffff15 	stw	r3,-4(fp)
   8b68c:	00000106 	br	8b694 <lseek+0x54>
   8b690:	e03fff15 	stw	zero,-4(fp)
   8b694:	e0bfff17 	ldw	r2,-4(fp)
   8b698:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   8b69c:	e0bffb17 	ldw	r2,-20(fp)
   8b6a0:	1005003a 	cmpeq	r2,r2,zero
   8b6a4:	1000111e 	bne	r2,zero,8b6ec <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8b6a8:	e0bffb17 	ldw	r2,-20(fp)
   8b6ac:	10800017 	ldw	r2,0(r2)
   8b6b0:	10800717 	ldw	r2,28(r2)
   8b6b4:	1005003a 	cmpeq	r2,r2,zero
   8b6b8:	1000091e 	bne	r2,zero,8b6e0 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8b6bc:	e0bffb17 	ldw	r2,-20(fp)
   8b6c0:	10800017 	ldw	r2,0(r2)
   8b6c4:	10800717 	ldw	r2,28(r2)
   8b6c8:	e13ffb17 	ldw	r4,-20(fp)
   8b6cc:	e17ffd17 	ldw	r5,-12(fp)
   8b6d0:	e1bffe17 	ldw	r6,-8(fp)
   8b6d4:	103ee83a 	callr	r2
   8b6d8:	e0bffa15 	stw	r2,-24(fp)
   8b6dc:	00000506 	br	8b6f4 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8b6e0:	00bfde84 	movi	r2,-134
   8b6e4:	e0bffa15 	stw	r2,-24(fp)
   8b6e8:	00000206 	br	8b6f4 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   8b6ec:	00bfebc4 	movi	r2,-81
   8b6f0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   8b6f4:	e0bffa17 	ldw	r2,-24(fp)
   8b6f8:	1004403a 	cmpge	r2,r2,zero
   8b6fc:	1000071e 	bne	r2,zero,8b71c <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   8b700:	008b7340 	call	8b734 <alt_get_errno>
   8b704:	1007883a 	mov	r3,r2
   8b708:	e0bffa17 	ldw	r2,-24(fp)
   8b70c:	0085c83a 	sub	r2,zero,r2
   8b710:	18800015 	stw	r2,0(r3)
    rc = -1;
   8b714:	00bfffc4 	movi	r2,-1
   8b718:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   8b71c:	e0bffa17 	ldw	r2,-24(fp)
}
   8b720:	e037883a 	mov	sp,fp
   8b724:	dfc00117 	ldw	ra,4(sp)
   8b728:	df000017 	ldw	fp,0(sp)
   8b72c:	dec00204 	addi	sp,sp,8
   8b730:	f800283a 	ret

0008b734 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b734:	defffd04 	addi	sp,sp,-12
   8b738:	dfc00215 	stw	ra,8(sp)
   8b73c:	df000115 	stw	fp,4(sp)
   8b740:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b744:	00800274 	movhi	r2,9
   8b748:	10bf6504 	addi	r2,r2,-620
   8b74c:	10800017 	ldw	r2,0(r2)
   8b750:	1005003a 	cmpeq	r2,r2,zero
   8b754:	1000061e 	bne	r2,zero,8b770 <alt_get_errno+0x3c>
   8b758:	00800274 	movhi	r2,9
   8b75c:	10bf6504 	addi	r2,r2,-620
   8b760:	10800017 	ldw	r2,0(r2)
   8b764:	103ee83a 	callr	r2
   8b768:	e0bfff15 	stw	r2,-4(fp)
   8b76c:	00000306 	br	8b77c <alt_get_errno+0x48>
   8b770:	00800274 	movhi	r2,9
   8b774:	1086c804 	addi	r2,r2,6944
   8b778:	e0bfff15 	stw	r2,-4(fp)
   8b77c:	e0bfff17 	ldw	r2,-4(fp)
}
   8b780:	e037883a 	mov	sp,fp
   8b784:	dfc00117 	ldw	ra,4(sp)
   8b788:	df000017 	ldw	fp,0(sp)
   8b78c:	dec00204 	addi	sp,sp,8
   8b790:	f800283a 	ret

0008b794 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8b794:	defffd04 	addi	sp,sp,-12
   8b798:	dfc00215 	stw	ra,8(sp)
   8b79c:	df000115 	stw	fp,4(sp)
   8b7a0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8b7a4:	0009883a 	mov	r4,zero
   8b7a8:	008bc7c0 	call	8bc7c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8b7ac:	008bcb00 	call	8bcb0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8b7b0:	01000274 	movhi	r4,9
   8b7b4:	21381004 	addi	r4,r4,-8128
   8b7b8:	01400274 	movhi	r5,9
   8b7bc:	29781004 	addi	r5,r5,-8128
   8b7c0:	01800274 	movhi	r6,9
   8b7c4:	31b81004 	addi	r6,r6,-8128
   8b7c8:	008cee40 	call	8cee4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8b7cc:	008ca5c0 	call	8ca5c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8b7d0:	01000274 	movhi	r4,9
   8b7d4:	2132b004 	addi	r4,r4,-13632
   8b7d8:	008d6880 	call	8d688 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8b7dc:	d1277517 	ldw	r4,-25132(gp)
   8b7e0:	d1677617 	ldw	r5,-25128(gp)
   8b7e4:	d1a77717 	ldw	r6,-25124(gp)
   8b7e8:	00812500 	call	81250 <main>
   8b7ec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8b7f0:	01000044 	movi	r4,1
   8b7f4:	008b16c0 	call	8b16c <close>
  exit (result);
   8b7f8:	e13fff17 	ldw	r4,-4(fp)
   8b7fc:	008d69c0 	call	8d69c <exit>

0008b800 <__malloc_lock>:
   8b800:	defffe04 	addi	sp,sp,-8
   8b804:	df000115 	stw	fp,4(sp)
   8b808:	df000104 	addi	fp,sp,4
   8b80c:	e13fff15 	stw	r4,-4(fp)
   8b810:	e037883a 	mov	sp,fp
   8b814:	df000017 	ldw	fp,0(sp)
   8b818:	dec00104 	addi	sp,sp,4
   8b81c:	f800283a 	ret

0008b820 <__malloc_unlock>:
   8b820:	defffe04 	addi	sp,sp,-8
   8b824:	df000115 	stw	fp,4(sp)
   8b828:	df000104 	addi	fp,sp,4
   8b82c:	e13fff15 	stw	r4,-4(fp)
   8b830:	e037883a 	mov	sp,fp
   8b834:	df000017 	ldw	fp,0(sp)
   8b838:	dec00104 	addi	sp,sp,4
   8b83c:	f800283a 	ret

0008b840 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8b840:	defff704 	addi	sp,sp,-36
   8b844:	dfc00815 	stw	ra,32(sp)
   8b848:	df000715 	stw	fp,28(sp)
   8b84c:	df000704 	addi	fp,sp,28
   8b850:	e13ffb15 	stw	r4,-20(fp)
   8b854:	e17ffc15 	stw	r5,-16(fp)
   8b858:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b85c:	e0bffb17 	ldw	r2,-20(fp)
   8b860:	1004803a 	cmplt	r2,r2,zero
   8b864:	1000091e 	bne	r2,zero,8b88c <read+0x4c>
   8b868:	e13ffb17 	ldw	r4,-20(fp)
   8b86c:	01400304 	movi	r5,12
   8b870:	008aa7c0 	call	8aa7c <__mulsi3>
   8b874:	1007883a 	mov	r3,r2
   8b878:	00800274 	movhi	r2,9
   8b87c:	10badc04 	addi	r2,r2,-5264
   8b880:	1887883a 	add	r3,r3,r2
   8b884:	e0ffff15 	stw	r3,-4(fp)
   8b888:	00000106 	br	8b890 <read+0x50>
   8b88c:	e03fff15 	stw	zero,-4(fp)
   8b890:	e0bfff17 	ldw	r2,-4(fp)
   8b894:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8b898:	e0bffa17 	ldw	r2,-24(fp)
   8b89c:	1005003a 	cmpeq	r2,r2,zero
   8b8a0:	1000241e 	bne	r2,zero,8b934 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8b8a4:	e0bffa17 	ldw	r2,-24(fp)
   8b8a8:	10800217 	ldw	r2,8(r2)
   8b8ac:	108000cc 	andi	r2,r2,3
   8b8b0:	10800060 	cmpeqi	r2,r2,1
   8b8b4:	10001a1e 	bne	r2,zero,8b920 <read+0xe0>
   8b8b8:	e0bffa17 	ldw	r2,-24(fp)
   8b8bc:	10800017 	ldw	r2,0(r2)
   8b8c0:	10800517 	ldw	r2,20(r2)
   8b8c4:	1005003a 	cmpeq	r2,r2,zero
   8b8c8:	1000151e 	bne	r2,zero,8b920 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8b8cc:	e0bffa17 	ldw	r2,-24(fp)
   8b8d0:	10800017 	ldw	r2,0(r2)
   8b8d4:	10800517 	ldw	r2,20(r2)
   8b8d8:	e17ffc17 	ldw	r5,-16(fp)
   8b8dc:	e1bffd17 	ldw	r6,-12(fp)
   8b8e0:	e13ffa17 	ldw	r4,-24(fp)
   8b8e4:	103ee83a 	callr	r2
   8b8e8:	e0bff915 	stw	r2,-28(fp)
   8b8ec:	e0bff917 	ldw	r2,-28(fp)
   8b8f0:	1004403a 	cmpge	r2,r2,zero
   8b8f4:	1000071e 	bne	r2,zero,8b914 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   8b8f8:	008b9640 	call	8b964 <alt_get_errno>
   8b8fc:	e0fff917 	ldw	r3,-28(fp)
   8b900:	00c7c83a 	sub	r3,zero,r3
   8b904:	10c00015 	stw	r3,0(r2)
          return -1;
   8b908:	00bfffc4 	movi	r2,-1
   8b90c:	e0bffe15 	stw	r2,-8(fp)
   8b910:	00000e06 	br	8b94c <read+0x10c>
        }
        return rval;
   8b914:	e0bff917 	ldw	r2,-28(fp)
   8b918:	e0bffe15 	stw	r2,-8(fp)
   8b91c:	00000b06 	br	8b94c <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8b920:	008b9640 	call	8b964 <alt_get_errno>
   8b924:	1007883a 	mov	r3,r2
   8b928:	00800344 	movi	r2,13
   8b92c:	18800015 	stw	r2,0(r3)
   8b930:	00000406 	br	8b944 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8b934:	008b9640 	call	8b964 <alt_get_errno>
   8b938:	1007883a 	mov	r3,r2
   8b93c:	00801444 	movi	r2,81
   8b940:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8b944:	00bfffc4 	movi	r2,-1
   8b948:	e0bffe15 	stw	r2,-8(fp)
   8b94c:	e0bffe17 	ldw	r2,-8(fp)
}
   8b950:	e037883a 	mov	sp,fp
   8b954:	dfc00117 	ldw	ra,4(sp)
   8b958:	df000017 	ldw	fp,0(sp)
   8b95c:	dec00204 	addi	sp,sp,8
   8b960:	f800283a 	ret

0008b964 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b964:	defffd04 	addi	sp,sp,-12
   8b968:	dfc00215 	stw	ra,8(sp)
   8b96c:	df000115 	stw	fp,4(sp)
   8b970:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b974:	00800274 	movhi	r2,9
   8b978:	10bf6504 	addi	r2,r2,-620
   8b97c:	10800017 	ldw	r2,0(r2)
   8b980:	1005003a 	cmpeq	r2,r2,zero
   8b984:	1000061e 	bne	r2,zero,8b9a0 <alt_get_errno+0x3c>
   8b988:	00800274 	movhi	r2,9
   8b98c:	10bf6504 	addi	r2,r2,-620
   8b990:	10800017 	ldw	r2,0(r2)
   8b994:	103ee83a 	callr	r2
   8b998:	e0bfff15 	stw	r2,-4(fp)
   8b99c:	00000306 	br	8b9ac <alt_get_errno+0x48>
   8b9a0:	00800274 	movhi	r2,9
   8b9a4:	1086c804 	addi	r2,r2,6944
   8b9a8:	e0bfff15 	stw	r2,-4(fp)
   8b9ac:	e0bfff17 	ldw	r2,-4(fp)
}
   8b9b0:	e037883a 	mov	sp,fp
   8b9b4:	dfc00117 	ldw	ra,4(sp)
   8b9b8:	df000017 	ldw	fp,0(sp)
   8b9bc:	dec00204 	addi	sp,sp,8
   8b9c0:	f800283a 	ret

0008b9c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8b9c4:	defffc04 	addi	sp,sp,-16
   8b9c8:	dfc00315 	stw	ra,12(sp)
   8b9cc:	df000215 	stw	fp,8(sp)
   8b9d0:	dc000115 	stw	r16,4(sp)
   8b9d4:	df000104 	addi	fp,sp,4
   8b9d8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8b9dc:	e0bfff17 	ldw	r2,-4(fp)
   8b9e0:	108000d0 	cmplti	r2,r2,3
   8b9e4:	10000f1e 	bne	r2,zero,8ba24 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   8b9e8:	e13fff17 	ldw	r4,-4(fp)
   8b9ec:	04000274 	movhi	r16,9
   8b9f0:	843adc04 	addi	r16,r16,-5264
   8b9f4:	01400304 	movi	r5,12
   8b9f8:	008aa7c0 	call	8aa7c <__mulsi3>
   8b9fc:	1405883a 	add	r2,r2,r16
   8ba00:	10800204 	addi	r2,r2,8
   8ba04:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8ba08:	e13fff17 	ldw	r4,-4(fp)
   8ba0c:	04000274 	movhi	r16,9
   8ba10:	843adc04 	addi	r16,r16,-5264
   8ba14:	01400304 	movi	r5,12
   8ba18:	008aa7c0 	call	8aa7c <__mulsi3>
   8ba1c:	1405883a 	add	r2,r2,r16
   8ba20:	10000015 	stw	zero,0(r2)
  }
}
   8ba24:	e037883a 	mov	sp,fp
   8ba28:	dfc00217 	ldw	ra,8(sp)
   8ba2c:	df000117 	ldw	fp,4(sp)
   8ba30:	dc000017 	ldw	r16,0(sp)
   8ba34:	dec00304 	addi	sp,sp,12
   8ba38:	f800283a 	ret

0008ba3c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8ba3c:	defff804 	addi	sp,sp,-32
   8ba40:	df000715 	stw	fp,28(sp)
   8ba44:	df000704 	addi	fp,sp,28
   8ba48:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ba4c:	0005303a 	rdctl	r2,status
   8ba50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ba54:	e0fffb17 	ldw	r3,-20(fp)
   8ba58:	00bfff84 	movi	r2,-2
   8ba5c:	1884703a 	and	r2,r3,r2
   8ba60:	1001703a 	wrctl	status,r2
  
  return context;
   8ba64:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8ba68:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8ba6c:	d0a01217 	ldw	r2,-32696(gp)
   8ba70:	10c000c4 	addi	r3,r2,3
   8ba74:	00bfff04 	movi	r2,-4
   8ba78:	1884703a 	and	r2,r3,r2
   8ba7c:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8ba80:	d0e01217 	ldw	r3,-32696(gp)
   8ba84:	e0bffe17 	ldw	r2,-8(fp)
   8ba88:	1887883a 	add	r3,r3,r2
   8ba8c:	00800434 	movhi	r2,16
   8ba90:	10800004 	addi	r2,r2,0
   8ba94:	10c0072e 	bgeu	r2,r3,8bab4 <sbrk+0x78>
   8ba98:	e0bffd17 	ldw	r2,-12(fp)
   8ba9c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8baa0:	e0bffa17 	ldw	r2,-24(fp)
   8baa4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8baa8:	00bfffc4 	movi	r2,-1
   8baac:	e0bfff15 	stw	r2,-4(fp)
   8bab0:	00000c06 	br	8bae4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   8bab4:	d0a01217 	ldw	r2,-32696(gp)
   8bab8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   8babc:	d0e01217 	ldw	r3,-32696(gp)
   8bac0:	e0bffe17 	ldw	r2,-8(fp)
   8bac4:	1885883a 	add	r2,r3,r2
   8bac8:	d0a01215 	stw	r2,-32696(gp)
   8bacc:	e0bffd17 	ldw	r2,-12(fp)
   8bad0:	e0bff915 	stw	r2,-28(fp)
   8bad4:	e0bff917 	ldw	r2,-28(fp)
   8bad8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8badc:	e0bffc17 	ldw	r2,-16(fp)
   8bae0:	e0bfff15 	stw	r2,-4(fp)
   8bae4:	e0bfff17 	ldw	r2,-4(fp)
} 
   8bae8:	e037883a 	mov	sp,fp
   8baec:	df000017 	ldw	fp,0(sp)
   8baf0:	dec00104 	addi	sp,sp,4
   8baf4:	f800283a 	ret

0008baf8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8baf8:	defff704 	addi	sp,sp,-36
   8bafc:	dfc00815 	stw	ra,32(sp)
   8bb00:	df000715 	stw	fp,28(sp)
   8bb04:	df000704 	addi	fp,sp,28
   8bb08:	e13ffb15 	stw	r4,-20(fp)
   8bb0c:	e17ffc15 	stw	r5,-16(fp)
   8bb10:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8bb14:	e0bffb17 	ldw	r2,-20(fp)
   8bb18:	1004803a 	cmplt	r2,r2,zero
   8bb1c:	1000091e 	bne	r2,zero,8bb44 <write+0x4c>
   8bb20:	e13ffb17 	ldw	r4,-20(fp)
   8bb24:	01400304 	movi	r5,12
   8bb28:	008aa7c0 	call	8aa7c <__mulsi3>
   8bb2c:	1007883a 	mov	r3,r2
   8bb30:	00800274 	movhi	r2,9
   8bb34:	10badc04 	addi	r2,r2,-5264
   8bb38:	1887883a 	add	r3,r3,r2
   8bb3c:	e0ffff15 	stw	r3,-4(fp)
   8bb40:	00000106 	br	8bb48 <write+0x50>
   8bb44:	e03fff15 	stw	zero,-4(fp)
   8bb48:	e0bfff17 	ldw	r2,-4(fp)
   8bb4c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8bb50:	e0bffa17 	ldw	r2,-24(fp)
   8bb54:	1005003a 	cmpeq	r2,r2,zero
   8bb58:	1000241e 	bne	r2,zero,8bbec <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8bb5c:	e0bffa17 	ldw	r2,-24(fp)
   8bb60:	10800217 	ldw	r2,8(r2)
   8bb64:	108000cc 	andi	r2,r2,3
   8bb68:	1005003a 	cmpeq	r2,r2,zero
   8bb6c:	10001a1e 	bne	r2,zero,8bbd8 <write+0xe0>
   8bb70:	e0bffa17 	ldw	r2,-24(fp)
   8bb74:	10800017 	ldw	r2,0(r2)
   8bb78:	10800617 	ldw	r2,24(r2)
   8bb7c:	1005003a 	cmpeq	r2,r2,zero
   8bb80:	1000151e 	bne	r2,zero,8bbd8 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8bb84:	e0bffa17 	ldw	r2,-24(fp)
   8bb88:	10800017 	ldw	r2,0(r2)
   8bb8c:	10800617 	ldw	r2,24(r2)
   8bb90:	e17ffc17 	ldw	r5,-16(fp)
   8bb94:	e1bffd17 	ldw	r6,-12(fp)
   8bb98:	e13ffa17 	ldw	r4,-24(fp)
   8bb9c:	103ee83a 	callr	r2
   8bba0:	e0bff915 	stw	r2,-28(fp)
   8bba4:	e0bff917 	ldw	r2,-28(fp)
   8bba8:	1004403a 	cmpge	r2,r2,zero
   8bbac:	1000071e 	bne	r2,zero,8bbcc <write+0xd4>
      {
        ALT_ERRNO = -rval;
   8bbb0:	008bc1c0 	call	8bc1c <alt_get_errno>
   8bbb4:	e0fff917 	ldw	r3,-28(fp)
   8bbb8:	00c7c83a 	sub	r3,zero,r3
   8bbbc:	10c00015 	stw	r3,0(r2)
        return -1;
   8bbc0:	00bfffc4 	movi	r2,-1
   8bbc4:	e0bffe15 	stw	r2,-8(fp)
   8bbc8:	00000e06 	br	8bc04 <write+0x10c>
      }
      return rval;
   8bbcc:	e0bff917 	ldw	r2,-28(fp)
   8bbd0:	e0bffe15 	stw	r2,-8(fp)
   8bbd4:	00000b06 	br	8bc04 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8bbd8:	008bc1c0 	call	8bc1c <alt_get_errno>
   8bbdc:	1007883a 	mov	r3,r2
   8bbe0:	00800344 	movi	r2,13
   8bbe4:	18800015 	stw	r2,0(r3)
   8bbe8:	00000406 	br	8bbfc <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8bbec:	008bc1c0 	call	8bc1c <alt_get_errno>
   8bbf0:	1007883a 	mov	r3,r2
   8bbf4:	00801444 	movi	r2,81
   8bbf8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8bbfc:	00bfffc4 	movi	r2,-1
   8bc00:	e0bffe15 	stw	r2,-8(fp)
   8bc04:	e0bffe17 	ldw	r2,-8(fp)
}
   8bc08:	e037883a 	mov	sp,fp
   8bc0c:	dfc00117 	ldw	ra,4(sp)
   8bc10:	df000017 	ldw	fp,0(sp)
   8bc14:	dec00204 	addi	sp,sp,8
   8bc18:	f800283a 	ret

0008bc1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8bc1c:	defffd04 	addi	sp,sp,-12
   8bc20:	dfc00215 	stw	ra,8(sp)
   8bc24:	df000115 	stw	fp,4(sp)
   8bc28:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8bc2c:	00800274 	movhi	r2,9
   8bc30:	10bf6504 	addi	r2,r2,-620
   8bc34:	10800017 	ldw	r2,0(r2)
   8bc38:	1005003a 	cmpeq	r2,r2,zero
   8bc3c:	1000061e 	bne	r2,zero,8bc58 <alt_get_errno+0x3c>
   8bc40:	00800274 	movhi	r2,9
   8bc44:	10bf6504 	addi	r2,r2,-620
   8bc48:	10800017 	ldw	r2,0(r2)
   8bc4c:	103ee83a 	callr	r2
   8bc50:	e0bfff15 	stw	r2,-4(fp)
   8bc54:	00000306 	br	8bc64 <alt_get_errno+0x48>
   8bc58:	00800274 	movhi	r2,9
   8bc5c:	1086c804 	addi	r2,r2,6944
   8bc60:	e0bfff15 	stw	r2,-4(fp)
   8bc64:	e0bfff17 	ldw	r2,-4(fp)
}
   8bc68:	e037883a 	mov	sp,fp
   8bc6c:	dfc00117 	ldw	ra,4(sp)
   8bc70:	df000017 	ldw	fp,0(sp)
   8bc74:	dec00204 	addi	sp,sp,8
   8bc78:	f800283a 	ret

0008bc7c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8bc7c:	defffd04 	addi	sp,sp,-12
   8bc80:	dfc00215 	stw	ra,8(sp)
   8bc84:	df000115 	stw	fp,4(sp)
   8bc88:	df000104 	addi	fp,sp,4
   8bc8c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
   8bc90:	008d3e40 	call	8d3e4 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8bc94:	00800044 	movi	r2,1
   8bc98:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8bc9c:	e037883a 	mov	sp,fp
   8bca0:	dfc00117 	ldw	ra,4(sp)
   8bca4:	df000017 	ldw	fp,0(sp)
   8bca8:	dec00204 	addi	sp,sp,8
   8bcac:	f800283a 	ret

0008bcb0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8bcb0:	defffe04 	addi	sp,sp,-8
   8bcb4:	dfc00115 	stw	ra,4(sp)
   8bcb8:	df000015 	stw	fp,0(sp)
   8bcbc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   8bcc0:	01000274 	movhi	r4,9
   8bcc4:	213b4604 	addi	r4,r4,-4840
   8bcc8:	000b883a 	mov	r5,zero
   8bccc:	000d883a 	mov	r6,zero
   8bcd0:	008be740 	call	8be74 <altera_avalon_jtag_uart_init>
   8bcd4:	01000274 	movhi	r4,9
   8bcd8:	213b3c04 	addi	r4,r4,-4880
   8bcdc:	008bcf40 	call	8bcf4 <alt_dev_reg>
}
   8bce0:	e037883a 	mov	sp,fp
   8bce4:	dfc00117 	ldw	ra,4(sp)
   8bce8:	df000017 	ldw	fp,0(sp)
   8bcec:	dec00204 	addi	sp,sp,8
   8bcf0:	f800283a 	ret

0008bcf4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8bcf4:	defffd04 	addi	sp,sp,-12
   8bcf8:	dfc00215 	stw	ra,8(sp)
   8bcfc:	df000115 	stw	fp,4(sp)
   8bd00:	df000104 	addi	fp,sp,4
   8bd04:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8bd08:	e13fff17 	ldw	r4,-4(fp)
   8bd0c:	01400274 	movhi	r5,9
   8bd10:	297f6204 	addi	r5,r5,-632
   8bd14:	008c9480 	call	8c948 <alt_dev_llist_insert>
}
   8bd18:	e037883a 	mov	sp,fp
   8bd1c:	dfc00117 	ldw	ra,4(sp)
   8bd20:	df000017 	ldw	fp,0(sp)
   8bd24:	dec00204 	addi	sp,sp,8
   8bd28:	f800283a 	ret

0008bd2c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8bd2c:	defffa04 	addi	sp,sp,-24
   8bd30:	dfc00515 	stw	ra,20(sp)
   8bd34:	df000415 	stw	fp,16(sp)
   8bd38:	df000404 	addi	fp,sp,16
   8bd3c:	e13ffd15 	stw	r4,-12(fp)
   8bd40:	e17ffe15 	stw	r5,-8(fp)
   8bd44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8bd48:	e0bffd17 	ldw	r2,-12(fp)
   8bd4c:	10800017 	ldw	r2,0(r2)
   8bd50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8bd54:	e0bffc17 	ldw	r2,-16(fp)
   8bd58:	11000a04 	addi	r4,r2,40
   8bd5c:	e0bffd17 	ldw	r2,-12(fp)
   8bd60:	11c00217 	ldw	r7,8(r2)
   8bd64:	e17ffe17 	ldw	r5,-8(fp)
   8bd68:	e1bfff17 	ldw	r6,-4(fp)
   8bd6c:	008c3740 	call	8c374 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8bd70:	e037883a 	mov	sp,fp
   8bd74:	dfc00117 	ldw	ra,4(sp)
   8bd78:	df000017 	ldw	fp,0(sp)
   8bd7c:	dec00204 	addi	sp,sp,8
   8bd80:	f800283a 	ret

0008bd84 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8bd84:	defffa04 	addi	sp,sp,-24
   8bd88:	dfc00515 	stw	ra,20(sp)
   8bd8c:	df000415 	stw	fp,16(sp)
   8bd90:	df000404 	addi	fp,sp,16
   8bd94:	e13ffd15 	stw	r4,-12(fp)
   8bd98:	e17ffe15 	stw	r5,-8(fp)
   8bd9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8bda0:	e0bffd17 	ldw	r2,-12(fp)
   8bda4:	10800017 	ldw	r2,0(r2)
   8bda8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8bdac:	e0bffc17 	ldw	r2,-16(fp)
   8bdb0:	11000a04 	addi	r4,r2,40
   8bdb4:	e0bffd17 	ldw	r2,-12(fp)
   8bdb8:	11c00217 	ldw	r7,8(r2)
   8bdbc:	e17ffe17 	ldw	r5,-8(fp)
   8bdc0:	e1bfff17 	ldw	r6,-4(fp)
   8bdc4:	008c5980 	call	8c598 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8bdc8:	e037883a 	mov	sp,fp
   8bdcc:	dfc00117 	ldw	ra,4(sp)
   8bdd0:	df000017 	ldw	fp,0(sp)
   8bdd4:	dec00204 	addi	sp,sp,8
   8bdd8:	f800283a 	ret

0008bddc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8bddc:	defffc04 	addi	sp,sp,-16
   8bde0:	dfc00315 	stw	ra,12(sp)
   8bde4:	df000215 	stw	fp,8(sp)
   8bde8:	df000204 	addi	fp,sp,8
   8bdec:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8bdf0:	e0bfff17 	ldw	r2,-4(fp)
   8bdf4:	10800017 	ldw	r2,0(r2)
   8bdf8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8bdfc:	e0bffe17 	ldw	r2,-8(fp)
   8be00:	11000a04 	addi	r4,r2,40
   8be04:	e0bfff17 	ldw	r2,-4(fp)
   8be08:	11400217 	ldw	r5,8(r2)
   8be0c:	008c20c0 	call	8c20c <altera_avalon_jtag_uart_close>
}
   8be10:	e037883a 	mov	sp,fp
   8be14:	dfc00117 	ldw	ra,4(sp)
   8be18:	df000017 	ldw	fp,0(sp)
   8be1c:	dec00204 	addi	sp,sp,8
   8be20:	f800283a 	ret

0008be24 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8be24:	defffa04 	addi	sp,sp,-24
   8be28:	dfc00515 	stw	ra,20(sp)
   8be2c:	df000415 	stw	fp,16(sp)
   8be30:	df000404 	addi	fp,sp,16
   8be34:	e13ffd15 	stw	r4,-12(fp)
   8be38:	e17ffe15 	stw	r5,-8(fp)
   8be3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8be40:	e0bffd17 	ldw	r2,-12(fp)
   8be44:	10800017 	ldw	r2,0(r2)
   8be48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8be4c:	e0bffc17 	ldw	r2,-16(fp)
   8be50:	11000a04 	addi	r4,r2,40
   8be54:	e17ffe17 	ldw	r5,-8(fp)
   8be58:	e1bfff17 	ldw	r6,-4(fp)
   8be5c:	008c2800 	call	8c280 <altera_avalon_jtag_uart_ioctl>
}
   8be60:	e037883a 	mov	sp,fp
   8be64:	dfc00117 	ldw	ra,4(sp)
   8be68:	df000017 	ldw	fp,0(sp)
   8be6c:	dec00204 	addi	sp,sp,8
   8be70:	f800283a 	ret

0008be74 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8be74:	defffa04 	addi	sp,sp,-24
   8be78:	dfc00515 	stw	ra,20(sp)
   8be7c:	df000415 	stw	fp,16(sp)
   8be80:	df000404 	addi	fp,sp,16
   8be84:	e13ffd15 	stw	r4,-12(fp)
   8be88:	e17ffe15 	stw	r5,-8(fp)
   8be8c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8be90:	e0fffd17 	ldw	r3,-12(fp)
   8be94:	00800044 	movi	r2,1
   8be98:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8be9c:	e0bffd17 	ldw	r2,-12(fp)
   8bea0:	10800017 	ldw	r2,0(r2)
   8bea4:	11000104 	addi	r4,r2,4
   8bea8:	e0bffd17 	ldw	r2,-12(fp)
   8beac:	10800817 	ldw	r2,32(r2)
   8beb0:	1007883a 	mov	r3,r2
   8beb4:	2005883a 	mov	r2,r4
   8beb8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8bebc:	e13ffe17 	ldw	r4,-8(fp)
   8bec0:	e17fff17 	ldw	r5,-4(fp)
   8bec4:	d8000015 	stw	zero,0(sp)
   8bec8:	01800274 	movhi	r6,9
   8becc:	31afcd04 	addi	r6,r6,-16588
   8bed0:	e1fffd17 	ldw	r7,-12(fp)
   8bed4:	008cb400 	call	8cb40 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8bed8:	e0bffd17 	ldw	r2,-12(fp)
   8bedc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8bee0:	e0bffd17 	ldw	r2,-12(fp)
   8bee4:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8bee8:	00800274 	movhi	r2,9
   8beec:	1086cd04 	addi	r2,r2,6964
   8bef0:	10800017 	ldw	r2,0(r2)
   8bef4:	100b883a 	mov	r5,r2
   8bef8:	01800274 	movhi	r6,9
   8befc:	31b05704 	addi	r6,r6,-16036
   8bf00:	e1fffd17 	ldw	r7,-12(fp)
   8bf04:	008c7d80 	call	8c7d8 <alt_alarm_start>
   8bf08:	1004403a 	cmpge	r2,r2,zero
   8bf0c:	1000041e 	bne	r2,zero,8bf20 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8bf10:	e0fffd17 	ldw	r3,-12(fp)
   8bf14:	00a00034 	movhi	r2,32768
   8bf18:	10bfffc4 	addi	r2,r2,-1
   8bf1c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8bf20:	e037883a 	mov	sp,fp
   8bf24:	dfc00117 	ldw	ra,4(sp)
   8bf28:	df000017 	ldw	fp,0(sp)
   8bf2c:	dec00204 	addi	sp,sp,8
   8bf30:	f800283a 	ret

0008bf34 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8bf34:	defff804 	addi	sp,sp,-32
   8bf38:	df000715 	stw	fp,28(sp)
   8bf3c:	df000704 	addi	fp,sp,28
   8bf40:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8bf44:	e0bfff17 	ldw	r2,-4(fp)
   8bf48:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   8bf4c:	e0bffe17 	ldw	r2,-8(fp)
   8bf50:	10800017 	ldw	r2,0(r2)
   8bf54:	e0bffd15 	stw	r2,-12(fp)
   8bf58:	00000006 	br	8bf5c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8bf5c:	e0bffd17 	ldw	r2,-12(fp)
   8bf60:	10800104 	addi	r2,r2,4
   8bf64:	10800037 	ldwio	r2,0(r2)
   8bf68:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8bf6c:	e0bffc17 	ldw	r2,-16(fp)
   8bf70:	1080c00c 	andi	r2,r2,768
   8bf74:	1005003a 	cmpeq	r2,r2,zero
   8bf78:	1000741e 	bne	r2,zero,8c14c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8bf7c:	e0bffc17 	ldw	r2,-16(fp)
   8bf80:	1080400c 	andi	r2,r2,256
   8bf84:	1005003a 	cmpeq	r2,r2,zero
   8bf88:	1000351e 	bne	r2,zero,8c060 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8bf8c:	00800074 	movhi	r2,1
   8bf90:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8bf94:	e0bffe17 	ldw	r2,-8(fp)
   8bf98:	10800a17 	ldw	r2,40(r2)
   8bf9c:	10800044 	addi	r2,r2,1
   8bfa0:	1081ffcc 	andi	r2,r2,2047
   8bfa4:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   8bfa8:	e0bffe17 	ldw	r2,-8(fp)
   8bfac:	10c00b17 	ldw	r3,44(r2)
   8bfb0:	e0bffa17 	ldw	r2,-24(fp)
   8bfb4:	18801626 	beq	r3,r2,8c010 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8bfb8:	e0bffd17 	ldw	r2,-12(fp)
   8bfbc:	10800037 	ldwio	r2,0(r2)
   8bfc0:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8bfc4:	e0bffb17 	ldw	r2,-20(fp)
   8bfc8:	10a0000c 	andi	r2,r2,32768
   8bfcc:	1005003a 	cmpeq	r2,r2,zero
   8bfd0:	10000f1e 	bne	r2,zero,8c010 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8bfd4:	e0bffe17 	ldw	r2,-8(fp)
   8bfd8:	10c00a17 	ldw	r3,40(r2)
   8bfdc:	e0bffb17 	ldw	r2,-20(fp)
   8bfe0:	1009883a 	mov	r4,r2
   8bfe4:	e0bffe17 	ldw	r2,-8(fp)
   8bfe8:	1885883a 	add	r2,r3,r2
   8bfec:	10800e04 	addi	r2,r2,56
   8bff0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8bff4:	e0bffe17 	ldw	r2,-8(fp)
   8bff8:	10800a17 	ldw	r2,40(r2)
   8bffc:	10800044 	addi	r2,r2,1
   8c000:	10c1ffcc 	andi	r3,r2,2047
   8c004:	e0bffe17 	ldw	r2,-8(fp)
   8c008:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8c00c:	003fe106 	br	8bf94 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8c010:	e0bffb17 	ldw	r2,-20(fp)
   8c014:	10bfffec 	andhi	r2,r2,65535
   8c018:	1005003a 	cmpeq	r2,r2,zero
   8c01c:	1000101e 	bne	r2,zero,8c060 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8c020:	e0bffe17 	ldw	r2,-8(fp)
   8c024:	10c00817 	ldw	r3,32(r2)
   8c028:	00bfff84 	movi	r2,-2
   8c02c:	1886703a 	and	r3,r3,r2
   8c030:	e0bffe17 	ldw	r2,-8(fp)
   8c034:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8c038:	e0bffd17 	ldw	r2,-12(fp)
   8c03c:	11000104 	addi	r4,r2,4
   8c040:	e0bffe17 	ldw	r2,-8(fp)
   8c044:	10800817 	ldw	r2,32(r2)
   8c048:	1007883a 	mov	r3,r2
   8c04c:	2005883a 	mov	r2,r4
   8c050:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8c054:	e0bffd17 	ldw	r2,-12(fp)
   8c058:	10800104 	addi	r2,r2,4
   8c05c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8c060:	e0bffc17 	ldw	r2,-16(fp)
   8c064:	1080800c 	andi	r2,r2,512
   8c068:	1005003a 	cmpeq	r2,r2,zero
   8c06c:	103fbb1e 	bne	r2,zero,8bf5c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8c070:	e0bffc17 	ldw	r2,-16(fp)
   8c074:	10bfffec 	andhi	r2,r2,65535
   8c078:	1004d43a 	srli	r2,r2,16
   8c07c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8c080:	00001506 	br	8c0d8 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8c084:	e13ffd17 	ldw	r4,-12(fp)
   8c088:	e0bffe17 	ldw	r2,-8(fp)
   8c08c:	10c00d17 	ldw	r3,52(r2)
   8c090:	e0bffe17 	ldw	r2,-8(fp)
   8c094:	1885883a 	add	r2,r3,r2
   8c098:	10820e04 	addi	r2,r2,2104
   8c09c:	10800003 	ldbu	r2,0(r2)
   8c0a0:	10c03fcc 	andi	r3,r2,255
   8c0a4:	18c0201c 	xori	r3,r3,128
   8c0a8:	18ffe004 	addi	r3,r3,-128
   8c0ac:	2005883a 	mov	r2,r4
   8c0b0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c0b4:	e0bffe17 	ldw	r2,-8(fp)
   8c0b8:	10800d17 	ldw	r2,52(r2)
   8c0bc:	10800044 	addi	r2,r2,1
   8c0c0:	10c1ffcc 	andi	r3,r2,2047
   8c0c4:	e0bffe17 	ldw	r2,-8(fp)
   8c0c8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8c0cc:	e0bff917 	ldw	r2,-28(fp)
   8c0d0:	10bfffc4 	addi	r2,r2,-1
   8c0d4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8c0d8:	e0bff917 	ldw	r2,-28(fp)
   8c0dc:	1005003a 	cmpeq	r2,r2,zero
   8c0e0:	1000051e 	bne	r2,zero,8c0f8 <altera_avalon_jtag_uart_irq+0x1c4>
   8c0e4:	e0bffe17 	ldw	r2,-8(fp)
   8c0e8:	10c00d17 	ldw	r3,52(r2)
   8c0ec:	e0bffe17 	ldw	r2,-8(fp)
   8c0f0:	10800c17 	ldw	r2,48(r2)
   8c0f4:	18bfe31e 	bne	r3,r2,8c084 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8c0f8:	e0bff917 	ldw	r2,-28(fp)
   8c0fc:	1005003a 	cmpeq	r2,r2,zero
   8c100:	103f961e 	bne	r2,zero,8bf5c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8c104:	e0bffe17 	ldw	r2,-8(fp)
   8c108:	10c00817 	ldw	r3,32(r2)
   8c10c:	00bfff44 	movi	r2,-3
   8c110:	1886703a 	and	r3,r3,r2
   8c114:	e0bffe17 	ldw	r2,-8(fp)
   8c118:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8c11c:	e0bffe17 	ldw	r2,-8(fp)
   8c120:	10800017 	ldw	r2,0(r2)
   8c124:	11000104 	addi	r4,r2,4
   8c128:	e0bffe17 	ldw	r2,-8(fp)
   8c12c:	10800817 	ldw	r2,32(r2)
   8c130:	1007883a 	mov	r3,r2
   8c134:	2005883a 	mov	r2,r4
   8c138:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8c13c:	e0bffd17 	ldw	r2,-12(fp)
   8c140:	10800104 	addi	r2,r2,4
   8c144:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8c148:	003f8406 	br	8bf5c <altera_avalon_jtag_uart_irq+0x28>
}
   8c14c:	e037883a 	mov	sp,fp
   8c150:	df000017 	ldw	fp,0(sp)
   8c154:	dec00104 	addi	sp,sp,4
   8c158:	f800283a 	ret

0008c15c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8c15c:	defffc04 	addi	sp,sp,-16
   8c160:	df000315 	stw	fp,12(sp)
   8c164:	df000304 	addi	fp,sp,12
   8c168:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8c16c:	e0bfff17 	ldw	r2,-4(fp)
   8c170:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8c174:	e0bffe17 	ldw	r2,-8(fp)
   8c178:	10800017 	ldw	r2,0(r2)
   8c17c:	10800104 	addi	r2,r2,4
   8c180:	10800037 	ldwio	r2,0(r2)
   8c184:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8c188:	e0bffd17 	ldw	r2,-12(fp)
   8c18c:	1081000c 	andi	r2,r2,1024
   8c190:	1005003a 	cmpeq	r2,r2,zero
   8c194:	10000c1e 	bne	r2,zero,8c1c8 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8c198:	e0bffe17 	ldw	r2,-8(fp)
   8c19c:	10800017 	ldw	r2,0(r2)
   8c1a0:	11000104 	addi	r4,r2,4
   8c1a4:	e0bffe17 	ldw	r2,-8(fp)
   8c1a8:	10800817 	ldw	r2,32(r2)
   8c1ac:	10810014 	ori	r2,r2,1024
   8c1b0:	1007883a 	mov	r3,r2
   8c1b4:	2005883a 	mov	r2,r4
   8c1b8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   8c1bc:	e0bffe17 	ldw	r2,-8(fp)
   8c1c0:	10000915 	stw	zero,36(r2)
   8c1c4:	00000a06 	br	8c1f0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8c1c8:	e0bffe17 	ldw	r2,-8(fp)
   8c1cc:	10c00917 	ldw	r3,36(r2)
   8c1d0:	00a00034 	movhi	r2,32768
   8c1d4:	10bfff04 	addi	r2,r2,-4
   8c1d8:	10c00536 	bltu	r2,r3,8c1f0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   8c1dc:	e0bffe17 	ldw	r2,-8(fp)
   8c1e0:	10800917 	ldw	r2,36(r2)
   8c1e4:	10c00044 	addi	r3,r2,1
   8c1e8:	e0bffe17 	ldw	r2,-8(fp)
   8c1ec:	10c00915 	stw	r3,36(r2)
   8c1f0:	00800274 	movhi	r2,9
   8c1f4:	1086cd04 	addi	r2,r2,6964
   8c1f8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8c1fc:	e037883a 	mov	sp,fp
   8c200:	df000017 	ldw	fp,0(sp)
   8c204:	dec00104 	addi	sp,sp,4
   8c208:	f800283a 	ret

0008c20c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8c20c:	defffc04 	addi	sp,sp,-16
   8c210:	df000315 	stw	fp,12(sp)
   8c214:	df000304 	addi	fp,sp,12
   8c218:	e13ffd15 	stw	r4,-12(fp)
   8c21c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8c220:	00000706 	br	8c240 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   8c224:	e0bffe17 	ldw	r2,-8(fp)
   8c228:	1090000c 	andi	r2,r2,16384
   8c22c:	1005003a 	cmpeq	r2,r2,zero
   8c230:	1000031e 	bne	r2,zero,8c240 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   8c234:	00bffd44 	movi	r2,-11
   8c238:	e0bfff15 	stw	r2,-4(fp)
   8c23c:	00000b06 	br	8c26c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8c240:	e0bffd17 	ldw	r2,-12(fp)
   8c244:	10c00d17 	ldw	r3,52(r2)
   8c248:	e0bffd17 	ldw	r2,-12(fp)
   8c24c:	10800c17 	ldw	r2,48(r2)
   8c250:	18800526 	beq	r3,r2,8c268 <altera_avalon_jtag_uart_close+0x5c>
   8c254:	e0bffd17 	ldw	r2,-12(fp)
   8c258:	10c00917 	ldw	r3,36(r2)
   8c25c:	e0bffd17 	ldw	r2,-12(fp)
   8c260:	10800117 	ldw	r2,4(r2)
   8c264:	18bfef36 	bltu	r3,r2,8c224 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8c268:	e03fff15 	stw	zero,-4(fp)
   8c26c:	e0bfff17 	ldw	r2,-4(fp)
}
   8c270:	e037883a 	mov	sp,fp
   8c274:	df000017 	ldw	fp,0(sp)
   8c278:	dec00104 	addi	sp,sp,4
   8c27c:	f800283a 	ret

0008c280 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8c280:	defff804 	addi	sp,sp,-32
   8c284:	df000715 	stw	fp,28(sp)
   8c288:	df000704 	addi	fp,sp,28
   8c28c:	e13ffb15 	stw	r4,-20(fp)
   8c290:	e17ffc15 	stw	r5,-16(fp)
   8c294:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   8c298:	00bff9c4 	movi	r2,-25
   8c29c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   8c2a0:	e0bffc17 	ldw	r2,-16(fp)
   8c2a4:	e0bfff15 	stw	r2,-4(fp)
   8c2a8:	e0ffff17 	ldw	r3,-4(fp)
   8c2ac:	189a8060 	cmpeqi	r2,r3,27137
   8c2b0:	1000041e 	bne	r2,zero,8c2c4 <altera_avalon_jtag_uart_ioctl+0x44>
   8c2b4:	e0ffff17 	ldw	r3,-4(fp)
   8c2b8:	189a80a0 	cmpeqi	r2,r3,27138
   8c2bc:	10001b1e 	bne	r2,zero,8c32c <altera_avalon_jtag_uart_ioctl+0xac>
   8c2c0:	00002706 	br	8c360 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8c2c4:	e0bffb17 	ldw	r2,-20(fp)
   8c2c8:	10c00117 	ldw	r3,4(r2)
   8c2cc:	00a00034 	movhi	r2,32768
   8c2d0:	10bfffc4 	addi	r2,r2,-1
   8c2d4:	18802226 	beq	r3,r2,8c360 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   8c2d8:	e0bffd17 	ldw	r2,-12(fp)
   8c2dc:	10800017 	ldw	r2,0(r2)
   8c2e0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8c2e4:	e0bff917 	ldw	r2,-28(fp)
   8c2e8:	10800090 	cmplti	r2,r2,2
   8c2ec:	1000071e 	bne	r2,zero,8c30c <altera_avalon_jtag_uart_ioctl+0x8c>
   8c2f0:	e0fff917 	ldw	r3,-28(fp)
   8c2f4:	00a00034 	movhi	r2,32768
   8c2f8:	10bfffc4 	addi	r2,r2,-1
   8c2fc:	18800326 	beq	r3,r2,8c30c <altera_avalon_jtag_uart_ioctl+0x8c>
   8c300:	e0bff917 	ldw	r2,-28(fp)
   8c304:	e0bffe15 	stw	r2,-8(fp)
   8c308:	00000306 	br	8c318 <altera_avalon_jtag_uart_ioctl+0x98>
   8c30c:	00e00034 	movhi	r3,32768
   8c310:	18ffff84 	addi	r3,r3,-2
   8c314:	e0fffe15 	stw	r3,-8(fp)
   8c318:	e0bffb17 	ldw	r2,-20(fp)
   8c31c:	e0fffe17 	ldw	r3,-8(fp)
   8c320:	10c00115 	stw	r3,4(r2)
      rc = 0;
   8c324:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   8c328:	00000d06 	br	8c360 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8c32c:	e0bffb17 	ldw	r2,-20(fp)
   8c330:	10c00117 	ldw	r3,4(r2)
   8c334:	00a00034 	movhi	r2,32768
   8c338:	10bfffc4 	addi	r2,r2,-1
   8c33c:	18800826 	beq	r3,r2,8c360 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8c340:	e13ffd17 	ldw	r4,-12(fp)
   8c344:	e0bffb17 	ldw	r2,-20(fp)
   8c348:	10c00917 	ldw	r3,36(r2)
   8c34c:	e0bffb17 	ldw	r2,-20(fp)
   8c350:	10800117 	ldw	r2,4(r2)
   8c354:	1885803a 	cmpltu	r2,r3,r2
   8c358:	20800015 	stw	r2,0(r4)
      rc = 0;
   8c35c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   8c360:	e0bffa17 	ldw	r2,-24(fp)
}
   8c364:	e037883a 	mov	sp,fp
   8c368:	df000017 	ldw	fp,0(sp)
   8c36c:	dec00104 	addi	sp,sp,4
   8c370:	f800283a 	ret

0008c374 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8c374:	defff204 	addi	sp,sp,-56
   8c378:	dfc00d15 	stw	ra,52(sp)
   8c37c:	df000c15 	stw	fp,48(sp)
   8c380:	df000c04 	addi	fp,sp,48
   8c384:	e13ffb15 	stw	r4,-20(fp)
   8c388:	e17ffc15 	stw	r5,-16(fp)
   8c38c:	e1bffd15 	stw	r6,-12(fp)
   8c390:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   8c394:	e0bffc17 	ldw	r2,-16(fp)
   8c398:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8c39c:	00004806 	br	8c4c0 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8c3a0:	e0bffb17 	ldw	r2,-20(fp)
   8c3a4:	10800a17 	ldw	r2,40(r2)
   8c3a8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8c3ac:	e0bffb17 	ldw	r2,-20(fp)
   8c3b0:	10800b17 	ldw	r2,44(r2)
   8c3b4:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   8c3b8:	e0fff717 	ldw	r3,-36(fp)
   8c3bc:	e0bff617 	ldw	r2,-40(fp)
   8c3c0:	18800536 	bltu	r3,r2,8c3d8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8c3c4:	e0bff717 	ldw	r2,-36(fp)
   8c3c8:	e0fff617 	ldw	r3,-40(fp)
   8c3cc:	10c5c83a 	sub	r2,r2,r3
   8c3d0:	e0bff815 	stw	r2,-32(fp)
   8c3d4:	00000406 	br	8c3e8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8c3d8:	00820004 	movi	r2,2048
   8c3dc:	e0fff617 	ldw	r3,-40(fp)
   8c3e0:	10c5c83a 	sub	r2,r2,r3
   8c3e4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   8c3e8:	e0bff817 	ldw	r2,-32(fp)
   8c3ec:	1005003a 	cmpeq	r2,r2,zero
   8c3f0:	10001f1e 	bne	r2,zero,8c470 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   8c3f4:	e0fffd17 	ldw	r3,-12(fp)
   8c3f8:	e0bff817 	ldw	r2,-32(fp)
   8c3fc:	1880022e 	bgeu	r3,r2,8c408 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   8c400:	e0bffd17 	ldw	r2,-12(fp)
   8c404:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8c408:	e0bffb17 	ldw	r2,-20(fp)
   8c40c:	10c00e04 	addi	r3,r2,56
   8c410:	e0bff617 	ldw	r2,-40(fp)
   8c414:	1887883a 	add	r3,r3,r2
   8c418:	e0bffa17 	ldw	r2,-24(fp)
   8c41c:	1009883a 	mov	r4,r2
   8c420:	180b883a 	mov	r5,r3
   8c424:	e1bff817 	ldw	r6,-32(fp)
   8c428:	0086b100 	call	86b10 <memcpy>
      ptr   += n;
   8c42c:	e0fff817 	ldw	r3,-32(fp)
   8c430:	e0bffa17 	ldw	r2,-24(fp)
   8c434:	10c5883a 	add	r2,r2,r3
   8c438:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   8c43c:	e0fffd17 	ldw	r3,-12(fp)
   8c440:	e0bff817 	ldw	r2,-32(fp)
   8c444:	1885c83a 	sub	r2,r3,r2
   8c448:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c44c:	e0fff617 	ldw	r3,-40(fp)
   8c450:	e0bff817 	ldw	r2,-32(fp)
   8c454:	1885883a 	add	r2,r3,r2
   8c458:	10c1ffcc 	andi	r3,r2,2047
   8c45c:	e0bffb17 	ldw	r2,-20(fp)
   8c460:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8c464:	e0bffd17 	ldw	r2,-12(fp)
   8c468:	10800048 	cmpgei	r2,r2,1
   8c46c:	103fcc1e 	bne	r2,zero,8c3a0 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   8c470:	e0fffa17 	ldw	r3,-24(fp)
   8c474:	e0bffc17 	ldw	r2,-16(fp)
   8c478:	1880141e 	bne	r3,r2,8c4cc <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8c47c:	e0bffe17 	ldw	r2,-8(fp)
   8c480:	1090000c 	andi	r2,r2,16384
   8c484:	1004c03a 	cmpne	r2,r2,zero
   8c488:	1000101e 	bne	r2,zero,8c4cc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8c48c:	e0bffb17 	ldw	r2,-20(fp)
   8c490:	10c00a17 	ldw	r3,40(r2)
   8c494:	e0bff717 	ldw	r2,-36(fp)
   8c498:	1880051e 	bne	r3,r2,8c4b0 <altera_avalon_jtag_uart_read+0x13c>
   8c49c:	e0bffb17 	ldw	r2,-20(fp)
   8c4a0:	10c00917 	ldw	r3,36(r2)
   8c4a4:	e0bffb17 	ldw	r2,-20(fp)
   8c4a8:	10800117 	ldw	r2,4(r2)
   8c4ac:	18bff736 	bltu	r3,r2,8c48c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8c4b0:	e0bffb17 	ldw	r2,-20(fp)
   8c4b4:	10c00a17 	ldw	r3,40(r2)
   8c4b8:	e0bff717 	ldw	r2,-36(fp)
   8c4bc:	18800326 	beq	r3,r2,8c4cc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8c4c0:	e0bffd17 	ldw	r2,-12(fp)
   8c4c4:	10800048 	cmpgei	r2,r2,1
   8c4c8:	103fb51e 	bne	r2,zero,8c3a0 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8c4cc:	e0fffa17 	ldw	r3,-24(fp)
   8c4d0:	e0bffc17 	ldw	r2,-16(fp)
   8c4d4:	18801926 	beq	r3,r2,8c53c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c4d8:	0005303a 	rdctl	r2,status
   8c4dc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c4e0:	e0fff517 	ldw	r3,-44(fp)
   8c4e4:	00bfff84 	movi	r2,-2
   8c4e8:	1884703a 	and	r2,r3,r2
   8c4ec:	1001703a 	wrctl	status,r2
  
  return context;
   8c4f0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8c4f4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8c4f8:	e0bffb17 	ldw	r2,-20(fp)
   8c4fc:	10800817 	ldw	r2,32(r2)
   8c500:	10c00054 	ori	r3,r2,1
   8c504:	e0bffb17 	ldw	r2,-20(fp)
   8c508:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8c50c:	e0bffb17 	ldw	r2,-20(fp)
   8c510:	10800017 	ldw	r2,0(r2)
   8c514:	11000104 	addi	r4,r2,4
   8c518:	e0bffb17 	ldw	r2,-20(fp)
   8c51c:	10800817 	ldw	r2,32(r2)
   8c520:	1007883a 	mov	r3,r2
   8c524:	2005883a 	mov	r2,r4
   8c528:	10c00035 	stwio	r3,0(r2)
   8c52c:	e0bff917 	ldw	r2,-28(fp)
   8c530:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c534:	e0bff417 	ldw	r2,-48(fp)
   8c538:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8c53c:	e0fffa17 	ldw	r3,-24(fp)
   8c540:	e0bffc17 	ldw	r2,-16(fp)
   8c544:	18800526 	beq	r3,r2,8c55c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   8c548:	e0fffa17 	ldw	r3,-24(fp)
   8c54c:	e0bffc17 	ldw	r2,-16(fp)
   8c550:	1887c83a 	sub	r3,r3,r2
   8c554:	e0ffff15 	stw	r3,-4(fp)
   8c558:	00000906 	br	8c580 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   8c55c:	e0bffe17 	ldw	r2,-8(fp)
   8c560:	1090000c 	andi	r2,r2,16384
   8c564:	1005003a 	cmpeq	r2,r2,zero
   8c568:	1000031e 	bne	r2,zero,8c578 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   8c56c:	00bffd44 	movi	r2,-11
   8c570:	e0bfff15 	stw	r2,-4(fp)
   8c574:	00000206 	br	8c580 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   8c578:	00bffec4 	movi	r2,-5
   8c57c:	e0bfff15 	stw	r2,-4(fp)
   8c580:	e0bfff17 	ldw	r2,-4(fp)
}
   8c584:	e037883a 	mov	sp,fp
   8c588:	dfc00117 	ldw	ra,4(sp)
   8c58c:	df000017 	ldw	fp,0(sp)
   8c590:	dec00204 	addi	sp,sp,8
   8c594:	f800283a 	ret

0008c598 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8c598:	defff204 	addi	sp,sp,-56
   8c59c:	dfc00d15 	stw	ra,52(sp)
   8c5a0:	df000c15 	stw	fp,48(sp)
   8c5a4:	df000c04 	addi	fp,sp,48
   8c5a8:	e13ffb15 	stw	r4,-20(fp)
   8c5ac:	e17ffc15 	stw	r5,-16(fp)
   8c5b0:	e1bffd15 	stw	r6,-12(fp)
   8c5b4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8c5b8:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8c5bc:	e0bffc17 	ldw	r2,-16(fp)
   8c5c0:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8c5c4:	00003a06 	br	8c6b0 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8c5c8:	e0bffb17 	ldw	r2,-20(fp)
   8c5cc:	10800c17 	ldw	r2,48(r2)
   8c5d0:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   8c5d4:	e0bffb17 	ldw	r2,-20(fp)
   8c5d8:	10800d17 	ldw	r2,52(r2)
   8c5dc:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   8c5e0:	e0fffa17 	ldw	r3,-24(fp)
   8c5e4:	e0bff917 	ldw	r2,-28(fp)
   8c5e8:	1880062e 	bgeu	r3,r2,8c604 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8c5ec:	e0fff917 	ldw	r3,-28(fp)
   8c5f0:	e0bffa17 	ldw	r2,-24(fp)
   8c5f4:	1885c83a 	sub	r2,r3,r2
   8c5f8:	10bfffc4 	addi	r2,r2,-1
   8c5fc:	e0bff815 	stw	r2,-32(fp)
   8c600:	00000c06 	br	8c634 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   8c604:	e0bff917 	ldw	r2,-28(fp)
   8c608:	1005003a 	cmpeq	r2,r2,zero
   8c60c:	1000051e 	bne	r2,zero,8c624 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8c610:	00820004 	movi	r2,2048
   8c614:	e0fffa17 	ldw	r3,-24(fp)
   8c618:	10c5c83a 	sub	r2,r2,r3
   8c61c:	e0bff815 	stw	r2,-32(fp)
   8c620:	00000406 	br	8c634 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8c624:	0081ffc4 	movi	r2,2047
   8c628:	e0fffa17 	ldw	r3,-24(fp)
   8c62c:	10c5c83a 	sub	r2,r2,r3
   8c630:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   8c634:	e0bff817 	ldw	r2,-32(fp)
   8c638:	1005003a 	cmpeq	r2,r2,zero
   8c63c:	10001f1e 	bne	r2,zero,8c6bc <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   8c640:	e0fffd17 	ldw	r3,-12(fp)
   8c644:	e0bff817 	ldw	r2,-32(fp)
   8c648:	1880022e 	bgeu	r3,r2,8c654 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   8c64c:	e0bffd17 	ldw	r2,-12(fp)
   8c650:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8c654:	e0bffb17 	ldw	r2,-20(fp)
   8c658:	10c20e04 	addi	r3,r2,2104
   8c65c:	e0bffa17 	ldw	r2,-24(fp)
   8c660:	1885883a 	add	r2,r3,r2
   8c664:	e0fffc17 	ldw	r3,-16(fp)
   8c668:	1009883a 	mov	r4,r2
   8c66c:	180b883a 	mov	r5,r3
   8c670:	e1bff817 	ldw	r6,-32(fp)
   8c674:	0086b100 	call	86b10 <memcpy>
      ptr   += n;
   8c678:	e0fff817 	ldw	r3,-32(fp)
   8c67c:	e0bffc17 	ldw	r2,-16(fp)
   8c680:	10c5883a 	add	r2,r2,r3
   8c684:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   8c688:	e0fffd17 	ldw	r3,-12(fp)
   8c68c:	e0bff817 	ldw	r2,-32(fp)
   8c690:	1885c83a 	sub	r2,r3,r2
   8c694:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c698:	e0fffa17 	ldw	r3,-24(fp)
   8c69c:	e0bff817 	ldw	r2,-32(fp)
   8c6a0:	1885883a 	add	r2,r3,r2
   8c6a4:	10c1ffcc 	andi	r3,r2,2047
   8c6a8:	e0bffb17 	ldw	r2,-20(fp)
   8c6ac:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8c6b0:	e0bffd17 	ldw	r2,-12(fp)
   8c6b4:	10800048 	cmpgei	r2,r2,1
   8c6b8:	103fc31e 	bne	r2,zero,8c5c8 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c6bc:	0005303a 	rdctl	r2,status
   8c6c0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c6c4:	e0fff517 	ldw	r3,-44(fp)
   8c6c8:	00bfff84 	movi	r2,-2
   8c6cc:	1884703a 	and	r2,r3,r2
   8c6d0:	1001703a 	wrctl	status,r2
  
  return context;
   8c6d4:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8c6d8:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8c6dc:	e0bffb17 	ldw	r2,-20(fp)
   8c6e0:	10800817 	ldw	r2,32(r2)
   8c6e4:	10c00094 	ori	r3,r2,2
   8c6e8:	e0bffb17 	ldw	r2,-20(fp)
   8c6ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8c6f0:	e0bffb17 	ldw	r2,-20(fp)
   8c6f4:	10800017 	ldw	r2,0(r2)
   8c6f8:	11000104 	addi	r4,r2,4
   8c6fc:	e0bffb17 	ldw	r2,-20(fp)
   8c700:	10800817 	ldw	r2,32(r2)
   8c704:	1007883a 	mov	r3,r2
   8c708:	2005883a 	mov	r2,r4
   8c70c:	10c00035 	stwio	r3,0(r2)
   8c710:	e0bff717 	ldw	r2,-36(fp)
   8c714:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c718:	e0bff417 	ldw	r2,-48(fp)
   8c71c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8c720:	e0bffd17 	ldw	r2,-12(fp)
   8c724:	10800050 	cmplti	r2,r2,1
   8c728:	1000111e 	bne	r2,zero,8c770 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   8c72c:	e0bffe17 	ldw	r2,-8(fp)
   8c730:	1090000c 	andi	r2,r2,16384
   8c734:	1004c03a 	cmpne	r2,r2,zero
   8c738:	1000101e 	bne	r2,zero,8c77c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8c73c:	e0bffb17 	ldw	r2,-20(fp)
   8c740:	10c00d17 	ldw	r3,52(r2)
   8c744:	e0bff917 	ldw	r2,-28(fp)
   8c748:	1880051e 	bne	r3,r2,8c760 <altera_avalon_jtag_uart_write+0x1c8>
   8c74c:	e0bffb17 	ldw	r2,-20(fp)
   8c750:	10c00917 	ldw	r3,36(r2)
   8c754:	e0bffb17 	ldw	r2,-20(fp)
   8c758:	10800117 	ldw	r2,4(r2)
   8c75c:	18bff736 	bltu	r3,r2,8c73c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   8c760:	e0bffb17 	ldw	r2,-20(fp)
   8c764:	10c00d17 	ldw	r3,52(r2)
   8c768:	e0bff917 	ldw	r2,-28(fp)
   8c76c:	18800326 	beq	r3,r2,8c77c <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   8c770:	e0bffd17 	ldw	r2,-12(fp)
   8c774:	10800048 	cmpgei	r2,r2,1
   8c778:	103fcd1e 	bne	r2,zero,8c6b0 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8c77c:	e0fffc17 	ldw	r3,-16(fp)
   8c780:	e0bff617 	ldw	r2,-40(fp)
   8c784:	18800526 	beq	r3,r2,8c79c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   8c788:	e0fffc17 	ldw	r3,-16(fp)
   8c78c:	e0bff617 	ldw	r2,-40(fp)
   8c790:	1887c83a 	sub	r3,r3,r2
   8c794:	e0ffff15 	stw	r3,-4(fp)
   8c798:	00000906 	br	8c7c0 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   8c79c:	e0bffe17 	ldw	r2,-8(fp)
   8c7a0:	1090000c 	andi	r2,r2,16384
   8c7a4:	1005003a 	cmpeq	r2,r2,zero
   8c7a8:	1000031e 	bne	r2,zero,8c7b8 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   8c7ac:	00bffd44 	movi	r2,-11
   8c7b0:	e0bfff15 	stw	r2,-4(fp)
   8c7b4:	00000206 	br	8c7c0 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   8c7b8:	00bffec4 	movi	r2,-5
   8c7bc:	e0bfff15 	stw	r2,-4(fp)
   8c7c0:	e0bfff17 	ldw	r2,-4(fp)
}
   8c7c4:	e037883a 	mov	sp,fp
   8c7c8:	dfc00117 	ldw	ra,4(sp)
   8c7cc:	df000017 	ldw	fp,0(sp)
   8c7d0:	dec00204 	addi	sp,sp,8
   8c7d4:	f800283a 	ret

0008c7d8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8c7d8:	defff404 	addi	sp,sp,-48
   8c7dc:	df000b15 	stw	fp,44(sp)
   8c7e0:	df000b04 	addi	fp,sp,44
   8c7e4:	e13ffb15 	stw	r4,-20(fp)
   8c7e8:	e17ffc15 	stw	r5,-16(fp)
   8c7ec:	e1bffd15 	stw	r6,-12(fp)
   8c7f0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8c7f4:	e03ff915 	stw	zero,-28(fp)
   8c7f8:	00800274 	movhi	r2,9
   8c7fc:	1086cd04 	addi	r2,r2,6964
   8c800:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   8c804:	1005003a 	cmpeq	r2,r2,zero
   8c808:	1000411e 	bne	r2,zero,8c910 <alt_alarm_start+0x138>
  {
    if (alarm)
   8c80c:	e0bffb17 	ldw	r2,-20(fp)
   8c810:	1005003a 	cmpeq	r2,r2,zero
   8c814:	10003b1e 	bne	r2,zero,8c904 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   8c818:	e0fffb17 	ldw	r3,-20(fp)
   8c81c:	e0bffd17 	ldw	r2,-12(fp)
   8c820:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   8c824:	e0fffb17 	ldw	r3,-20(fp)
   8c828:	e0bffe17 	ldw	r2,-8(fp)
   8c82c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c830:	0005303a 	rdctl	r2,status
   8c834:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c838:	e0fff817 	ldw	r3,-32(fp)
   8c83c:	00bfff84 	movi	r2,-2
   8c840:	1884703a 	and	r2,r3,r2
   8c844:	1001703a 	wrctl	status,r2
  
  return context;
   8c848:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   8c84c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8c850:	00800274 	movhi	r2,9
   8c854:	1086ce04 	addi	r2,r2,6968
   8c858:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   8c85c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   8c860:	e0fffc17 	ldw	r3,-16(fp)
   8c864:	e0bff917 	ldw	r2,-28(fp)
   8c868:	1885883a 	add	r2,r3,r2
   8c86c:	10c00044 	addi	r3,r2,1
   8c870:	e0bffb17 	ldw	r2,-20(fp)
   8c874:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8c878:	e0bffb17 	ldw	r2,-20(fp)
   8c87c:	10c00217 	ldw	r3,8(r2)
   8c880:	e0bff917 	ldw	r2,-28(fp)
   8c884:	1880042e 	bgeu	r3,r2,8c898 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   8c888:	e0fffb17 	ldw	r3,-20(fp)
   8c88c:	00800044 	movi	r2,1
   8c890:	18800405 	stb	r2,16(r3)
   8c894:	00000206 	br	8c8a0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   8c898:	e0bffb17 	ldw	r2,-20(fp)
   8c89c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8c8a0:	e0fffb17 	ldw	r3,-20(fp)
   8c8a4:	00800274 	movhi	r2,9
   8c8a8:	10bf6804 	addi	r2,r2,-608
   8c8ac:	e0bff615 	stw	r2,-40(fp)
   8c8b0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8c8b4:	e0fff717 	ldw	r3,-36(fp)
   8c8b8:	e0bff617 	ldw	r2,-40(fp)
   8c8bc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   8c8c0:	e0bff617 	ldw	r2,-40(fp)
   8c8c4:	10c00017 	ldw	r3,0(r2)
   8c8c8:	e0bff717 	ldw	r2,-36(fp)
   8c8cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8c8d0:	e0bff617 	ldw	r2,-40(fp)
   8c8d4:	10c00017 	ldw	r3,0(r2)
   8c8d8:	e0bff717 	ldw	r2,-36(fp)
   8c8dc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   8c8e0:	e0fff617 	ldw	r3,-40(fp)
   8c8e4:	e0bff717 	ldw	r2,-36(fp)
   8c8e8:	18800015 	stw	r2,0(r3)
   8c8ec:	e0bffa17 	ldw	r2,-24(fp)
   8c8f0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c8f4:	e0bff517 	ldw	r2,-44(fp)
   8c8f8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   8c8fc:	e03fff15 	stw	zero,-4(fp)
   8c900:	00000506 	br	8c918 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   8c904:	00bffa84 	movi	r2,-22
   8c908:	e0bfff15 	stw	r2,-4(fp)
   8c90c:	00000206 	br	8c918 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   8c910:	00bfde84 	movi	r2,-134
   8c914:	e0bfff15 	stw	r2,-4(fp)
   8c918:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   8c91c:	e037883a 	mov	sp,fp
   8c920:	df000017 	ldw	fp,0(sp)
   8c924:	dec00104 	addi	sp,sp,4
   8c928:	f800283a 	ret

0008c92c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8c92c:	deffff04 	addi	sp,sp,-4
   8c930:	df000015 	stw	fp,0(sp)
   8c934:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8c938:	e037883a 	mov	sp,fp
   8c93c:	df000017 	ldw	fp,0(sp)
   8c940:	dec00104 	addi	sp,sp,4
   8c944:	f800283a 	ret

0008c948 <alt_dev_llist_insert>:
   8c948:	defff904 	addi	sp,sp,-28
   8c94c:	dfc00615 	stw	ra,24(sp)
   8c950:	df000515 	stw	fp,20(sp)
   8c954:	df000504 	addi	fp,sp,20
   8c958:	e13ffd15 	stw	r4,-12(fp)
   8c95c:	e17ffe15 	stw	r5,-8(fp)
   8c960:	e0bffd17 	ldw	r2,-12(fp)
   8c964:	1005003a 	cmpeq	r2,r2,zero
   8c968:	1000041e 	bne	r2,zero,8c97c <alt_dev_llist_insert+0x34>
   8c96c:	e0bffd17 	ldw	r2,-12(fp)
   8c970:	10800217 	ldw	r2,8(r2)
   8c974:	1004c03a 	cmpne	r2,r2,zero
   8c978:	1000071e 	bne	r2,zero,8c998 <alt_dev_llist_insert+0x50>
   8c97c:	008c9fc0 	call	8c9fc <alt_get_errno>
   8c980:	1007883a 	mov	r3,r2
   8c984:	00800584 	movi	r2,22
   8c988:	18800015 	stw	r2,0(r3)
   8c98c:	00bffa84 	movi	r2,-22
   8c990:	e0bfff15 	stw	r2,-4(fp)
   8c994:	00001306 	br	8c9e4 <alt_dev_llist_insert+0x9c>
   8c998:	e0fffd17 	ldw	r3,-12(fp)
   8c99c:	e0bffe17 	ldw	r2,-8(fp)
   8c9a0:	e0bffb15 	stw	r2,-20(fp)
   8c9a4:	e0fffc15 	stw	r3,-16(fp)
   8c9a8:	e0fffc17 	ldw	r3,-16(fp)
   8c9ac:	e0bffb17 	ldw	r2,-20(fp)
   8c9b0:	18800115 	stw	r2,4(r3)
   8c9b4:	e0bffb17 	ldw	r2,-20(fp)
   8c9b8:	10c00017 	ldw	r3,0(r2)
   8c9bc:	e0bffc17 	ldw	r2,-16(fp)
   8c9c0:	10c00015 	stw	r3,0(r2)
   8c9c4:	e0bffb17 	ldw	r2,-20(fp)
   8c9c8:	10c00017 	ldw	r3,0(r2)
   8c9cc:	e0bffc17 	ldw	r2,-16(fp)
   8c9d0:	18800115 	stw	r2,4(r3)
   8c9d4:	e0fffb17 	ldw	r3,-20(fp)
   8c9d8:	e0bffc17 	ldw	r2,-16(fp)
   8c9dc:	18800015 	stw	r2,0(r3)
   8c9e0:	e03fff15 	stw	zero,-4(fp)
   8c9e4:	e0bfff17 	ldw	r2,-4(fp)
   8c9e8:	e037883a 	mov	sp,fp
   8c9ec:	dfc00117 	ldw	ra,4(sp)
   8c9f0:	df000017 	ldw	fp,0(sp)
   8c9f4:	dec00204 	addi	sp,sp,8
   8c9f8:	f800283a 	ret

0008c9fc <alt_get_errno>:
   8c9fc:	defffd04 	addi	sp,sp,-12
   8ca00:	dfc00215 	stw	ra,8(sp)
   8ca04:	df000115 	stw	fp,4(sp)
   8ca08:	df000104 	addi	fp,sp,4
   8ca0c:	00800274 	movhi	r2,9
   8ca10:	10bf6504 	addi	r2,r2,-620
   8ca14:	10800017 	ldw	r2,0(r2)
   8ca18:	1005003a 	cmpeq	r2,r2,zero
   8ca1c:	1000061e 	bne	r2,zero,8ca38 <alt_get_errno+0x3c>
   8ca20:	00800274 	movhi	r2,9
   8ca24:	10bf6504 	addi	r2,r2,-620
   8ca28:	10800017 	ldw	r2,0(r2)
   8ca2c:	103ee83a 	callr	r2
   8ca30:	e0bfff15 	stw	r2,-4(fp)
   8ca34:	00000306 	br	8ca44 <alt_get_errno+0x48>
   8ca38:	00800274 	movhi	r2,9
   8ca3c:	1086c804 	addi	r2,r2,6944
   8ca40:	e0bfff15 	stw	r2,-4(fp)
   8ca44:	e0bfff17 	ldw	r2,-4(fp)
   8ca48:	e037883a 	mov	sp,fp
   8ca4c:	dfc00117 	ldw	ra,4(sp)
   8ca50:	df000017 	ldw	fp,0(sp)
   8ca54:	dec00204 	addi	sp,sp,8
   8ca58:	f800283a 	ret

0008ca5c <_do_ctors>:
   8ca5c:	defffd04 	addi	sp,sp,-12
   8ca60:	dfc00215 	stw	ra,8(sp)
   8ca64:	df000115 	stw	fp,4(sp)
   8ca68:	df000104 	addi	fp,sp,4
   8ca6c:	00bfff04 	movi	r2,-4
   8ca70:	00c00274 	movhi	r3,9
   8ca74:	18f6a504 	addi	r3,r3,-9580
   8ca78:	1885883a 	add	r2,r3,r2
   8ca7c:	e0bfff15 	stw	r2,-4(fp)
   8ca80:	00000606 	br	8ca9c <_do_ctors+0x40>
   8ca84:	e0bfff17 	ldw	r2,-4(fp)
   8ca88:	10800017 	ldw	r2,0(r2)
   8ca8c:	103ee83a 	callr	r2
   8ca90:	e0bfff17 	ldw	r2,-4(fp)
   8ca94:	10bfff04 	addi	r2,r2,-4
   8ca98:	e0bfff15 	stw	r2,-4(fp)
   8ca9c:	e0ffff17 	ldw	r3,-4(fp)
   8caa0:	00800274 	movhi	r2,9
   8caa4:	10b6a404 	addi	r2,r2,-9584
   8caa8:	18bff62e 	bgeu	r3,r2,8ca84 <_do_ctors+0x28>
   8caac:	e037883a 	mov	sp,fp
   8cab0:	dfc00117 	ldw	ra,4(sp)
   8cab4:	df000017 	ldw	fp,0(sp)
   8cab8:	dec00204 	addi	sp,sp,8
   8cabc:	f800283a 	ret

0008cac0 <_do_dtors>:
   8cac0:	defffd04 	addi	sp,sp,-12
   8cac4:	dfc00215 	stw	ra,8(sp)
   8cac8:	df000115 	stw	fp,4(sp)
   8cacc:	df000104 	addi	fp,sp,4
   8cad0:	00bfff04 	movi	r2,-4
   8cad4:	00c00274 	movhi	r3,9
   8cad8:	18f6a504 	addi	r3,r3,-9580
   8cadc:	1885883a 	add	r2,r3,r2
   8cae0:	e0bfff15 	stw	r2,-4(fp)
   8cae4:	00000606 	br	8cb00 <_do_dtors+0x40>
   8cae8:	e0bfff17 	ldw	r2,-4(fp)
   8caec:	10800017 	ldw	r2,0(r2)
   8caf0:	103ee83a 	callr	r2
   8caf4:	e0bfff17 	ldw	r2,-4(fp)
   8caf8:	10bfff04 	addi	r2,r2,-4
   8cafc:	e0bfff15 	stw	r2,-4(fp)
   8cb00:	e0ffff17 	ldw	r3,-4(fp)
   8cb04:	00800274 	movhi	r2,9
   8cb08:	10b6a504 	addi	r2,r2,-9580
   8cb0c:	18bff62e 	bgeu	r3,r2,8cae8 <_do_dtors+0x28>
   8cb10:	e037883a 	mov	sp,fp
   8cb14:	dfc00117 	ldw	ra,4(sp)
   8cb18:	df000017 	ldw	fp,0(sp)
   8cb1c:	dec00204 	addi	sp,sp,8
   8cb20:	f800283a 	ret

0008cb24 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   8cb24:	deffff04 	addi	sp,sp,-4
   8cb28:	df000015 	stw	fp,0(sp)
   8cb2c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   8cb30:	e037883a 	mov	sp,fp
   8cb34:	df000017 	ldw	fp,0(sp)
   8cb38:	dec00104 	addi	sp,sp,4
   8cb3c:	f800283a 	ret

0008cb40 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8cb40:	defff904 	addi	sp,sp,-28
   8cb44:	dfc00615 	stw	ra,24(sp)
   8cb48:	df000515 	stw	fp,20(sp)
   8cb4c:	df000504 	addi	fp,sp,20
   8cb50:	e13ffc15 	stw	r4,-16(fp)
   8cb54:	e17ffd15 	stw	r5,-12(fp)
   8cb58:	e1bffe15 	stw	r6,-8(fp)
   8cb5c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8cb60:	e0800217 	ldw	r2,8(fp)
   8cb64:	d8800015 	stw	r2,0(sp)
   8cb68:	e13ffc17 	ldw	r4,-16(fp)
   8cb6c:	e17ffd17 	ldw	r5,-12(fp)
   8cb70:	e1bffe17 	ldw	r6,-8(fp)
   8cb74:	e1ffff17 	ldw	r7,-4(fp)
   8cb78:	008cd140 	call	8cd14 <alt_iic_isr_register>
}  
   8cb7c:	e037883a 	mov	sp,fp
   8cb80:	dfc00117 	ldw	ra,4(sp)
   8cb84:	df000017 	ldw	fp,0(sp)
   8cb88:	dec00204 	addi	sp,sp,8
   8cb8c:	f800283a 	ret

0008cb90 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8cb90:	defff904 	addi	sp,sp,-28
   8cb94:	df000615 	stw	fp,24(sp)
   8cb98:	df000604 	addi	fp,sp,24
   8cb9c:	e13ffe15 	stw	r4,-8(fp)
   8cba0:	e17fff15 	stw	r5,-4(fp)
   8cba4:	e0bfff17 	ldw	r2,-4(fp)
   8cba8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cbac:	0005303a 	rdctl	r2,status
   8cbb0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cbb4:	e0fffb17 	ldw	r3,-20(fp)
   8cbb8:	00bfff84 	movi	r2,-2
   8cbbc:	1884703a 	and	r2,r3,r2
   8cbc0:	1001703a 	wrctl	status,r2
  
  return context;
   8cbc4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8cbc8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   8cbcc:	e0fffc17 	ldw	r3,-16(fp)
   8cbd0:	00800044 	movi	r2,1
   8cbd4:	10c4983a 	sll	r2,r2,r3
   8cbd8:	1007883a 	mov	r3,r2
   8cbdc:	00800274 	movhi	r2,9
   8cbe0:	1086cc04 	addi	r2,r2,6960
   8cbe4:	10800017 	ldw	r2,0(r2)
   8cbe8:	1886b03a 	or	r3,r3,r2
   8cbec:	00800274 	movhi	r2,9
   8cbf0:	1086cc04 	addi	r2,r2,6960
   8cbf4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8cbf8:	00800274 	movhi	r2,9
   8cbfc:	1086cc04 	addi	r2,r2,6960
   8cc00:	10800017 	ldw	r2,0(r2)
   8cc04:	100170fa 	wrctl	ienable,r2
   8cc08:	e0bffd17 	ldw	r2,-12(fp)
   8cc0c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cc10:	e0bffa17 	ldw	r2,-24(fp)
   8cc14:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8cc18:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   8cc1c:	e037883a 	mov	sp,fp
   8cc20:	df000017 	ldw	fp,0(sp)
   8cc24:	dec00104 	addi	sp,sp,4
   8cc28:	f800283a 	ret

0008cc2c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8cc2c:	defff904 	addi	sp,sp,-28
   8cc30:	df000615 	stw	fp,24(sp)
   8cc34:	df000604 	addi	fp,sp,24
   8cc38:	e13ffe15 	stw	r4,-8(fp)
   8cc3c:	e17fff15 	stw	r5,-4(fp)
   8cc40:	e0bfff17 	ldw	r2,-4(fp)
   8cc44:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cc48:	0005303a 	rdctl	r2,status
   8cc4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cc50:	e0fffb17 	ldw	r3,-20(fp)
   8cc54:	00bfff84 	movi	r2,-2
   8cc58:	1884703a 	and	r2,r3,r2
   8cc5c:	1001703a 	wrctl	status,r2
  
  return context;
   8cc60:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8cc64:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   8cc68:	e0fffc17 	ldw	r3,-16(fp)
   8cc6c:	00800044 	movi	r2,1
   8cc70:	10c4983a 	sll	r2,r2,r3
   8cc74:	0084303a 	nor	r2,zero,r2
   8cc78:	1007883a 	mov	r3,r2
   8cc7c:	00800274 	movhi	r2,9
   8cc80:	1086cc04 	addi	r2,r2,6960
   8cc84:	10800017 	ldw	r2,0(r2)
   8cc88:	1886703a 	and	r3,r3,r2
   8cc8c:	00800274 	movhi	r2,9
   8cc90:	1086cc04 	addi	r2,r2,6960
   8cc94:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8cc98:	00800274 	movhi	r2,9
   8cc9c:	1086cc04 	addi	r2,r2,6960
   8cca0:	10800017 	ldw	r2,0(r2)
   8cca4:	100170fa 	wrctl	ienable,r2
   8cca8:	e0bffd17 	ldw	r2,-12(fp)
   8ccac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ccb0:	e0bffa17 	ldw	r2,-24(fp)
   8ccb4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8ccb8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   8ccbc:	e037883a 	mov	sp,fp
   8ccc0:	df000017 	ldw	fp,0(sp)
   8ccc4:	dec00104 	addi	sp,sp,4
   8ccc8:	f800283a 	ret

0008cccc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   8cccc:	defffc04 	addi	sp,sp,-16
   8ccd0:	df000315 	stw	fp,12(sp)
   8ccd4:	df000304 	addi	fp,sp,12
   8ccd8:	e13ffe15 	stw	r4,-8(fp)
   8ccdc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8cce0:	000530fa 	rdctl	r2,ienable
   8cce4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8cce8:	e0ffff17 	ldw	r3,-4(fp)
   8ccec:	00800044 	movi	r2,1
   8ccf0:	10c4983a 	sll	r2,r2,r3
   8ccf4:	1007883a 	mov	r3,r2
   8ccf8:	e0bffd17 	ldw	r2,-12(fp)
   8ccfc:	1884703a 	and	r2,r3,r2
   8cd00:	1004c03a 	cmpne	r2,r2,zero
}
   8cd04:	e037883a 	mov	sp,fp
   8cd08:	df000017 	ldw	fp,0(sp)
   8cd0c:	dec00104 	addi	sp,sp,4
   8cd10:	f800283a 	ret

0008cd14 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8cd14:	defff404 	addi	sp,sp,-48
   8cd18:	dfc00b15 	stw	ra,44(sp)
   8cd1c:	df000a15 	stw	fp,40(sp)
   8cd20:	df000a04 	addi	fp,sp,40
   8cd24:	e13ffb15 	stw	r4,-20(fp)
   8cd28:	e17ffc15 	stw	r5,-16(fp)
   8cd2c:	e1bffd15 	stw	r6,-12(fp)
   8cd30:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   8cd34:	00bffa84 	movi	r2,-22
   8cd38:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8cd3c:	e0bffc17 	ldw	r2,-16(fp)
   8cd40:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8cd44:	e0bff917 	ldw	r2,-28(fp)
   8cd48:	10800808 	cmpgei	r2,r2,32
   8cd4c:	1000291e 	bne	r2,zero,8cdf4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cd50:	0005303a 	rdctl	r2,status
   8cd54:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cd58:	e0fff717 	ldw	r3,-36(fp)
   8cd5c:	00bfff84 	movi	r2,-2
   8cd60:	1884703a 	and	r2,r3,r2
   8cd64:	1001703a 	wrctl	status,r2
  
  return context;
   8cd68:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8cd6c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   8cd70:	e0bff917 	ldw	r2,-28(fp)
   8cd74:	00c00274 	movhi	r3,9
   8cd78:	18c6d904 	addi	r3,r3,7012
   8cd7c:	100490fa 	slli	r2,r2,3
   8cd80:	10c7883a 	add	r3,r2,r3
   8cd84:	e0bffd17 	ldw	r2,-12(fp)
   8cd88:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   8cd8c:	e0bff917 	ldw	r2,-28(fp)
   8cd90:	00c00274 	movhi	r3,9
   8cd94:	18c6d904 	addi	r3,r3,7012
   8cd98:	100490fa 	slli	r2,r2,3
   8cd9c:	10c5883a 	add	r2,r2,r3
   8cda0:	10c00104 	addi	r3,r2,4
   8cda4:	e0bffe17 	ldw	r2,-8(fp)
   8cda8:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8cdac:	e0bffd17 	ldw	r2,-12(fp)
   8cdb0:	1005003a 	cmpeq	r2,r2,zero
   8cdb4:	1000051e 	bne	r2,zero,8cdcc <alt_iic_isr_register+0xb8>
   8cdb8:	e17ff917 	ldw	r5,-28(fp)
   8cdbc:	e13ffb17 	ldw	r4,-20(fp)
   8cdc0:	008cb900 	call	8cb90 <alt_ic_irq_enable>
   8cdc4:	e0bfff15 	stw	r2,-4(fp)
   8cdc8:	00000406 	br	8cddc <alt_iic_isr_register+0xc8>
   8cdcc:	e17ff917 	ldw	r5,-28(fp)
   8cdd0:	e13ffb17 	ldw	r4,-20(fp)
   8cdd4:	008cc2c0 	call	8cc2c <alt_ic_irq_disable>
   8cdd8:	e0bfff15 	stw	r2,-4(fp)
   8cddc:	e0bfff17 	ldw	r2,-4(fp)
   8cde0:	e0bffa15 	stw	r2,-24(fp)
   8cde4:	e0bff817 	ldw	r2,-32(fp)
   8cde8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cdec:	e0bff617 	ldw	r2,-40(fp)
   8cdf0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8cdf4:	e0bffa17 	ldw	r2,-24(fp)
}
   8cdf8:	e037883a 	mov	sp,fp
   8cdfc:	dfc00117 	ldw	ra,4(sp)
   8ce00:	df000017 	ldw	fp,0(sp)
   8ce04:	dec00204 	addi	sp,sp,8
   8ce08:	f800283a 	ret

0008ce0c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   8ce0c:	defff804 	addi	sp,sp,-32
   8ce10:	dfc00715 	stw	ra,28(sp)
   8ce14:	df000615 	stw	fp,24(sp)
   8ce18:	dc000515 	stw	r16,20(sp)
   8ce1c:	df000504 	addi	fp,sp,20
   8ce20:	e13ffc15 	stw	r4,-16(fp)
   8ce24:	e17ffd15 	stw	r5,-12(fp)
   8ce28:	e1bffe15 	stw	r6,-8(fp)
   8ce2c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   8ce30:	e13ffd17 	ldw	r4,-12(fp)
   8ce34:	e17ffe17 	ldw	r5,-8(fp)
   8ce38:	e1bfff17 	ldw	r6,-4(fp)
   8ce3c:	008d0540 	call	8d054 <open>
   8ce40:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   8ce44:	e0bffb17 	ldw	r2,-20(fp)
   8ce48:	1004803a 	cmplt	r2,r2,zero
   8ce4c:	10001f1e 	bne	r2,zero,8cecc <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   8ce50:	e13ffb17 	ldw	r4,-20(fp)
   8ce54:	04000274 	movhi	r16,9
   8ce58:	843adc04 	addi	r16,r16,-5264
   8ce5c:	01400304 	movi	r5,12
   8ce60:	008aa7c0 	call	8aa7c <__mulsi3>
   8ce64:	1405883a 	add	r2,r2,r16
   8ce68:	10c00017 	ldw	r3,0(r2)
   8ce6c:	e0bffc17 	ldw	r2,-16(fp)
   8ce70:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8ce74:	e13ffb17 	ldw	r4,-20(fp)
   8ce78:	04000274 	movhi	r16,9
   8ce7c:	843adc04 	addi	r16,r16,-5264
   8ce80:	01400304 	movi	r5,12
   8ce84:	008aa7c0 	call	8aa7c <__mulsi3>
   8ce88:	1405883a 	add	r2,r2,r16
   8ce8c:	10800104 	addi	r2,r2,4
   8ce90:	10c00017 	ldw	r3,0(r2)
   8ce94:	e0bffc17 	ldw	r2,-16(fp)
   8ce98:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8ce9c:	e13ffb17 	ldw	r4,-20(fp)
   8cea0:	04000274 	movhi	r16,9
   8cea4:	843adc04 	addi	r16,r16,-5264
   8cea8:	01400304 	movi	r5,12
   8ceac:	008aa7c0 	call	8aa7c <__mulsi3>
   8ceb0:	1405883a 	add	r2,r2,r16
   8ceb4:	10800204 	addi	r2,r2,8
   8ceb8:	10c00017 	ldw	r3,0(r2)
   8cebc:	e0bffc17 	ldw	r2,-16(fp)
   8cec0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   8cec4:	e13ffb17 	ldw	r4,-20(fp)
   8cec8:	008b9c40 	call	8b9c4 <alt_release_fd>
  }
} 
   8cecc:	e037883a 	mov	sp,fp
   8ced0:	dfc00217 	ldw	ra,8(sp)
   8ced4:	df000117 	ldw	fp,4(sp)
   8ced8:	dc000017 	ldw	r16,0(sp)
   8cedc:	dec00304 	addi	sp,sp,12
   8cee0:	f800283a 	ret

0008cee4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8cee4:	defffb04 	addi	sp,sp,-20
   8cee8:	dfc00415 	stw	ra,16(sp)
   8ceec:	df000315 	stw	fp,12(sp)
   8cef0:	df000304 	addi	fp,sp,12
   8cef4:	e13ffd15 	stw	r4,-12(fp)
   8cef8:	e17ffe15 	stw	r5,-8(fp)
   8cefc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8cf00:	01000274 	movhi	r4,9
   8cf04:	213adf04 	addi	r4,r4,-5252
   8cf08:	e17ffd17 	ldw	r5,-12(fp)
   8cf0c:	01800044 	movi	r6,1
   8cf10:	01c07fc4 	movi	r7,511
   8cf14:	008ce0c0 	call	8ce0c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   8cf18:	01000274 	movhi	r4,9
   8cf1c:	213adc04 	addi	r4,r4,-5264
   8cf20:	e17ffe17 	ldw	r5,-8(fp)
   8cf24:	000d883a 	mov	r6,zero
   8cf28:	01c07fc4 	movi	r7,511
   8cf2c:	008ce0c0 	call	8ce0c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   8cf30:	01000274 	movhi	r4,9
   8cf34:	213ae204 	addi	r4,r4,-5240
   8cf38:	e17fff17 	ldw	r5,-4(fp)
   8cf3c:	01800044 	movi	r6,1
   8cf40:	01c07fc4 	movi	r7,511
   8cf44:	008ce0c0 	call	8ce0c <alt_open_fd>
}  
   8cf48:	e037883a 	mov	sp,fp
   8cf4c:	dfc00117 	ldw	ra,4(sp)
   8cf50:	df000017 	ldw	fp,0(sp)
   8cf54:	dec00204 	addi	sp,sp,8
   8cf58:	f800283a 	ret

0008cf5c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8cf5c:	defffa04 	addi	sp,sp,-24
   8cf60:	dfc00515 	stw	ra,20(sp)
   8cf64:	df000415 	stw	fp,16(sp)
   8cf68:	dc000315 	stw	r16,12(sp)
   8cf6c:	df000304 	addi	fp,sp,12
   8cf70:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8cf74:	e0bffe17 	ldw	r2,-8(fp)
   8cf78:	10800217 	ldw	r2,8(r2)
   8cf7c:	10d00034 	orhi	r3,r2,16384
   8cf80:	e0bffe17 	ldw	r2,-8(fp)
   8cf84:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8cf88:	e03ffd15 	stw	zero,-12(fp)
   8cf8c:	00002306 	br	8d01c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8cf90:	e13ffd17 	ldw	r4,-12(fp)
   8cf94:	04000274 	movhi	r16,9
   8cf98:	843adc04 	addi	r16,r16,-5264
   8cf9c:	01400304 	movi	r5,12
   8cfa0:	008aa7c0 	call	8aa7c <__mulsi3>
   8cfa4:	1405883a 	add	r2,r2,r16
   8cfa8:	10c00017 	ldw	r3,0(r2)
   8cfac:	e0bffe17 	ldw	r2,-8(fp)
   8cfb0:	10800017 	ldw	r2,0(r2)
   8cfb4:	1880161e 	bne	r3,r2,8d010 <alt_file_locked+0xb4>
   8cfb8:	e13ffd17 	ldw	r4,-12(fp)
   8cfbc:	04000274 	movhi	r16,9
   8cfc0:	843adc04 	addi	r16,r16,-5264
   8cfc4:	01400304 	movi	r5,12
   8cfc8:	008aa7c0 	call	8aa7c <__mulsi3>
   8cfcc:	1405883a 	add	r2,r2,r16
   8cfd0:	10800204 	addi	r2,r2,8
   8cfd4:	10800017 	ldw	r2,0(r2)
   8cfd8:	1004403a 	cmpge	r2,r2,zero
   8cfdc:	10000c1e 	bne	r2,zero,8d010 <alt_file_locked+0xb4>
   8cfe0:	e13ffd17 	ldw	r4,-12(fp)
   8cfe4:	01400304 	movi	r5,12
   8cfe8:	008aa7c0 	call	8aa7c <__mulsi3>
   8cfec:	1007883a 	mov	r3,r2
   8cff0:	00800274 	movhi	r2,9
   8cff4:	10badc04 	addi	r2,r2,-5264
   8cff8:	1887883a 	add	r3,r3,r2
   8cffc:	e0bffe17 	ldw	r2,-8(fp)
   8d000:	18800326 	beq	r3,r2,8d010 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   8d004:	00bffcc4 	movi	r2,-13
   8d008:	e0bfff15 	stw	r2,-4(fp)
   8d00c:	00000a06 	br	8d038 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8d010:	e0bffd17 	ldw	r2,-12(fp)
   8d014:	10800044 	addi	r2,r2,1
   8d018:	e0bffd15 	stw	r2,-12(fp)
   8d01c:	00800274 	movhi	r2,9
   8d020:	10bf6404 	addi	r2,r2,-624
   8d024:	10800017 	ldw	r2,0(r2)
   8d028:	1007883a 	mov	r3,r2
   8d02c:	e0bffd17 	ldw	r2,-12(fp)
   8d030:	18bfd72e 	bgeu	r3,r2,8cf90 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   8d034:	e03fff15 	stw	zero,-4(fp)
   8d038:	e0bfff17 	ldw	r2,-4(fp)
}
   8d03c:	e037883a 	mov	sp,fp
   8d040:	dfc00217 	ldw	ra,8(sp)
   8d044:	df000117 	ldw	fp,4(sp)
   8d048:	dc000017 	ldw	r16,0(sp)
   8d04c:	dec00304 	addi	sp,sp,12
   8d050:	f800283a 	ret

0008d054 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8d054:	defff404 	addi	sp,sp,-48
   8d058:	dfc00b15 	stw	ra,44(sp)
   8d05c:	df000a15 	stw	fp,40(sp)
   8d060:	df000a04 	addi	fp,sp,40
   8d064:	e13ffb15 	stw	r4,-20(fp)
   8d068:	e17ffc15 	stw	r5,-16(fp)
   8d06c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8d070:	00bfffc4 	movi	r2,-1
   8d074:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   8d078:	00bffb44 	movi	r2,-19
   8d07c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   8d080:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8d084:	e13ffb17 	ldw	r4,-20(fp)
   8d088:	01400274 	movhi	r5,9
   8d08c:	297f6204 	addi	r5,r5,-632
   8d090:	008d4040 	call	8d404 <alt_find_dev>
   8d094:	e0bffa15 	stw	r2,-24(fp)
   8d098:	e0bffa17 	ldw	r2,-24(fp)
   8d09c:	1004c03a 	cmpne	r2,r2,zero
   8d0a0:	1000051e 	bne	r2,zero,8d0b8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8d0a4:	e13ffb17 	ldw	r4,-20(fp)
   8d0a8:	008d4980 	call	8d498 <alt_find_file>
   8d0ac:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   8d0b0:	00800044 	movi	r2,1
   8d0b4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8d0b8:	e0bffa17 	ldw	r2,-24(fp)
   8d0bc:	1005003a 	cmpeq	r2,r2,zero
   8d0c0:	1000311e 	bne	r2,zero,8d188 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   8d0c4:	e13ffa17 	ldw	r4,-24(fp)
   8d0c8:	008d5b80 	call	8d5b8 <alt_get_fd>
   8d0cc:	e0bff815 	stw	r2,-32(fp)
   8d0d0:	e0bff817 	ldw	r2,-32(fp)
   8d0d4:	1004403a 	cmpge	r2,r2,zero
   8d0d8:	1000031e 	bne	r2,zero,8d0e8 <open+0x94>
    {
      status = index;
   8d0dc:	e0bff817 	ldw	r2,-32(fp)
   8d0e0:	e0bff715 	stw	r2,-36(fp)
   8d0e4:	00002a06 	br	8d190 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   8d0e8:	e13ff817 	ldw	r4,-32(fp)
   8d0ec:	01400304 	movi	r5,12
   8d0f0:	008aa7c0 	call	8aa7c <__mulsi3>
   8d0f4:	1007883a 	mov	r3,r2
   8d0f8:	00800274 	movhi	r2,9
   8d0fc:	10badc04 	addi	r2,r2,-5264
   8d100:	1885883a 	add	r2,r3,r2
   8d104:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8d108:	e0fffc17 	ldw	r3,-16(fp)
   8d10c:	00900034 	movhi	r2,16384
   8d110:	10bfffc4 	addi	r2,r2,-1
   8d114:	1886703a 	and	r3,r3,r2
   8d118:	e0bff917 	ldw	r2,-28(fp)
   8d11c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   8d120:	e0bff617 	ldw	r2,-40(fp)
   8d124:	1004c03a 	cmpne	r2,r2,zero
   8d128:	1000061e 	bne	r2,zero,8d144 <open+0xf0>
   8d12c:	e13ff917 	ldw	r4,-28(fp)
   8d130:	008cf5c0 	call	8cf5c <alt_file_locked>
   8d134:	e0bff715 	stw	r2,-36(fp)
   8d138:	e0bff717 	ldw	r2,-36(fp)
   8d13c:	1004803a 	cmplt	r2,r2,zero
   8d140:	1000131e 	bne	r2,zero,8d190 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8d144:	e0bffa17 	ldw	r2,-24(fp)
   8d148:	10800317 	ldw	r2,12(r2)
   8d14c:	1005003a 	cmpeq	r2,r2,zero
   8d150:	1000091e 	bne	r2,zero,8d178 <open+0x124>
   8d154:	e0bffa17 	ldw	r2,-24(fp)
   8d158:	10800317 	ldw	r2,12(r2)
   8d15c:	e13ff917 	ldw	r4,-28(fp)
   8d160:	e17ffb17 	ldw	r5,-20(fp)
   8d164:	e1bffc17 	ldw	r6,-16(fp)
   8d168:	e1fffd17 	ldw	r7,-12(fp)
   8d16c:	103ee83a 	callr	r2
   8d170:	e0bfff15 	stw	r2,-4(fp)
   8d174:	00000106 	br	8d17c <open+0x128>
   8d178:	e03fff15 	stw	zero,-4(fp)
   8d17c:	e0bfff17 	ldw	r2,-4(fp)
   8d180:	e0bff715 	stw	r2,-36(fp)
   8d184:	00000206 	br	8d190 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8d188:	00bffb44 	movi	r2,-19
   8d18c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8d190:	e0bff717 	ldw	r2,-36(fp)
   8d194:	1004403a 	cmpge	r2,r2,zero
   8d198:	1000091e 	bne	r2,zero,8d1c0 <open+0x16c>
  {
    alt_release_fd (index);  
   8d19c:	e13ff817 	ldw	r4,-32(fp)
   8d1a0:	008b9c40 	call	8b9c4 <alt_release_fd>
    ALT_ERRNO = -status;
   8d1a4:	008d1e00 	call	8d1e0 <alt_get_errno>
   8d1a8:	e0fff717 	ldw	r3,-36(fp)
   8d1ac:	00c7c83a 	sub	r3,zero,r3
   8d1b0:	10c00015 	stw	r3,0(r2)
    return -1;
   8d1b4:	00bfffc4 	movi	r2,-1
   8d1b8:	e0bffe15 	stw	r2,-8(fp)
   8d1bc:	00000206 	br	8d1c8 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   8d1c0:	e0bff817 	ldw	r2,-32(fp)
   8d1c4:	e0bffe15 	stw	r2,-8(fp)
   8d1c8:	e0bffe17 	ldw	r2,-8(fp)
}
   8d1cc:	e037883a 	mov	sp,fp
   8d1d0:	dfc00117 	ldw	ra,4(sp)
   8d1d4:	df000017 	ldw	fp,0(sp)
   8d1d8:	dec00204 	addi	sp,sp,8
   8d1dc:	f800283a 	ret

0008d1e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8d1e0:	defffd04 	addi	sp,sp,-12
   8d1e4:	dfc00215 	stw	ra,8(sp)
   8d1e8:	df000115 	stw	fp,4(sp)
   8d1ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8d1f0:	00800274 	movhi	r2,9
   8d1f4:	10bf6504 	addi	r2,r2,-620
   8d1f8:	10800017 	ldw	r2,0(r2)
   8d1fc:	1005003a 	cmpeq	r2,r2,zero
   8d200:	1000061e 	bne	r2,zero,8d21c <alt_get_errno+0x3c>
   8d204:	00800274 	movhi	r2,9
   8d208:	10bf6504 	addi	r2,r2,-620
   8d20c:	10800017 	ldw	r2,0(r2)
   8d210:	103ee83a 	callr	r2
   8d214:	e0bfff15 	stw	r2,-4(fp)
   8d218:	00000306 	br	8d228 <alt_get_errno+0x48>
   8d21c:	00800274 	movhi	r2,9
   8d220:	1086c804 	addi	r2,r2,6944
   8d224:	e0bfff15 	stw	r2,-4(fp)
   8d228:	e0bfff17 	ldw	r2,-4(fp)
}
   8d22c:	e037883a 	mov	sp,fp
   8d230:	dfc00117 	ldw	ra,4(sp)
   8d234:	df000017 	ldw	fp,0(sp)
   8d238:	dec00204 	addi	sp,sp,8
   8d23c:	f800283a 	ret

0008d240 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   8d240:	defffa04 	addi	sp,sp,-24
   8d244:	df000515 	stw	fp,20(sp)
   8d248:	df000504 	addi	fp,sp,20
   8d24c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d250:	0005303a 	rdctl	r2,status
   8d254:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d258:	e0fffd17 	ldw	r3,-12(fp)
   8d25c:	00bfff84 	movi	r2,-2
   8d260:	1884703a 	and	r2,r3,r2
   8d264:	1001703a 	wrctl	status,r2
  
  return context;
   8d268:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   8d26c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   8d270:	e0bfff17 	ldw	r2,-4(fp)
   8d274:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8d278:	e0bffc17 	ldw	r2,-16(fp)
   8d27c:	10c00017 	ldw	r3,0(r2)
   8d280:	e0bffc17 	ldw	r2,-16(fp)
   8d284:	10800117 	ldw	r2,4(r2)
   8d288:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   8d28c:	e0bffc17 	ldw	r2,-16(fp)
   8d290:	10c00117 	ldw	r3,4(r2)
   8d294:	e0bffc17 	ldw	r2,-16(fp)
   8d298:	10800017 	ldw	r2,0(r2)
   8d29c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8d2a0:	e0fffc17 	ldw	r3,-16(fp)
   8d2a4:	e0bffc17 	ldw	r2,-16(fp)
   8d2a8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   8d2ac:	e0fffc17 	ldw	r3,-16(fp)
   8d2b0:	e0bffc17 	ldw	r2,-16(fp)
   8d2b4:	18800015 	stw	r2,0(r3)
   8d2b8:	e0bffe17 	ldw	r2,-8(fp)
   8d2bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d2c0:	e0bffb17 	ldw	r2,-20(fp)
   8d2c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8d2c8:	e037883a 	mov	sp,fp
   8d2cc:	df000017 	ldw	fp,0(sp)
   8d2d0:	dec00104 	addi	sp,sp,4
   8d2d4:	f800283a 	ret

0008d2d8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8d2d8:	defffb04 	addi	sp,sp,-20
   8d2dc:	dfc00415 	stw	ra,16(sp)
   8d2e0:	df000315 	stw	fp,12(sp)
   8d2e4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8d2e8:	d0a01417 	ldw	r2,-32688(gp)
   8d2ec:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8d2f0:	d0a77a17 	ldw	r2,-25112(gp)
   8d2f4:	10800044 	addi	r2,r2,1
   8d2f8:	d0a77a15 	stw	r2,-25112(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8d2fc:	00003106 	br	8d3c4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   8d300:	e0bffe17 	ldw	r2,-8(fp)
   8d304:	10800017 	ldw	r2,0(r2)
   8d308:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8d30c:	e0bffe17 	ldw	r2,-8(fp)
   8d310:	10800403 	ldbu	r2,16(r2)
   8d314:	10803fcc 	andi	r2,r2,255
   8d318:	1005003a 	cmpeq	r2,r2,zero
   8d31c:	1000051e 	bne	r2,zero,8d334 <alt_tick+0x5c>
   8d320:	d0a77a17 	ldw	r2,-25112(gp)
   8d324:	1004c03a 	cmpne	r2,r2,zero
   8d328:	1000021e 	bne	r2,zero,8d334 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   8d32c:	e0bffe17 	ldw	r2,-8(fp)
   8d330:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8d334:	e0bffe17 	ldw	r2,-8(fp)
   8d338:	10c00217 	ldw	r3,8(r2)
   8d33c:	d0a77a17 	ldw	r2,-25112(gp)
   8d340:	10c01e36 	bltu	r2,r3,8d3bc <alt_tick+0xe4>
   8d344:	e0bffe17 	ldw	r2,-8(fp)
   8d348:	10800403 	ldbu	r2,16(r2)
   8d34c:	10803fcc 	andi	r2,r2,255
   8d350:	1004c03a 	cmpne	r2,r2,zero
   8d354:	1000191e 	bne	r2,zero,8d3bc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   8d358:	e0bffe17 	ldw	r2,-8(fp)
   8d35c:	10c00317 	ldw	r3,12(r2)
   8d360:	e0bffe17 	ldw	r2,-8(fp)
   8d364:	11000517 	ldw	r4,20(r2)
   8d368:	183ee83a 	callr	r3
   8d36c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8d370:	e0bffd17 	ldw	r2,-12(fp)
   8d374:	1004c03a 	cmpne	r2,r2,zero
   8d378:	1000031e 	bne	r2,zero,8d388 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   8d37c:	e13ffe17 	ldw	r4,-8(fp)
   8d380:	008d2400 	call	8d240 <alt_alarm_stop>
   8d384:	00000d06 	br	8d3bc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   8d388:	e0bffe17 	ldw	r2,-8(fp)
   8d38c:	10c00217 	ldw	r3,8(r2)
   8d390:	e0bffd17 	ldw	r2,-12(fp)
   8d394:	1887883a 	add	r3,r3,r2
   8d398:	e0bffe17 	ldw	r2,-8(fp)
   8d39c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8d3a0:	e0bffe17 	ldw	r2,-8(fp)
   8d3a4:	10c00217 	ldw	r3,8(r2)
   8d3a8:	d0a77a17 	ldw	r2,-25112(gp)
   8d3ac:	1880032e 	bgeu	r3,r2,8d3bc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   8d3b0:	e0fffe17 	ldw	r3,-8(fp)
   8d3b4:	00800044 	movi	r2,1
   8d3b8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   8d3bc:	e0bfff17 	ldw	r2,-4(fp)
   8d3c0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8d3c4:	d0e01404 	addi	r3,gp,-32688
   8d3c8:	e0bffe17 	ldw	r2,-8(fp)
   8d3cc:	10ffcc1e 	bne	r2,r3,8d300 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   8d3d0:	e037883a 	mov	sp,fp
   8d3d4:	dfc00117 	ldw	ra,4(sp)
   8d3d8:	df000017 	ldw	fp,0(sp)
   8d3dc:	dec00204 	addi	sp,sp,8
   8d3e0:	f800283a 	ret

0008d3e4 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
   8d3e4:	deffff04 	addi	sp,sp,-4
   8d3e8:	df000015 	stw	fp,0(sp)
   8d3ec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   8d3f0:	000170fa 	wrctl	ienable,zero
}
   8d3f4:	e037883a 	mov	sp,fp
   8d3f8:	df000017 	ldw	fp,0(sp)
   8d3fc:	dec00104 	addi	sp,sp,4
   8d400:	f800283a 	ret

0008d404 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8d404:	defff904 	addi	sp,sp,-28
   8d408:	dfc00615 	stw	ra,24(sp)
   8d40c:	df000515 	stw	fp,20(sp)
   8d410:	df000504 	addi	fp,sp,20
   8d414:	e13ffd15 	stw	r4,-12(fp)
   8d418:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   8d41c:	e0bffe17 	ldw	r2,-8(fp)
   8d420:	10800017 	ldw	r2,0(r2)
   8d424:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   8d428:	e13ffd17 	ldw	r4,-12(fp)
   8d42c:	008182c0 	call	8182c <strlen>
   8d430:	10800044 	addi	r2,r2,1
   8d434:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8d438:	00000d06 	br	8d470 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8d43c:	e0bffc17 	ldw	r2,-16(fp)
   8d440:	11000217 	ldw	r4,8(r2)
   8d444:	e1bffb17 	ldw	r6,-20(fp)
   8d448:	e17ffd17 	ldw	r5,-12(fp)
   8d44c:	008d6d40 	call	8d6d4 <memcmp>
   8d450:	1004c03a 	cmpne	r2,r2,zero
   8d454:	1000031e 	bne	r2,zero,8d464 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8d458:	e0bffc17 	ldw	r2,-16(fp)
   8d45c:	e0bfff15 	stw	r2,-4(fp)
   8d460:	00000706 	br	8d480 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   8d464:	e0bffc17 	ldw	r2,-16(fp)
   8d468:	10800017 	ldw	r2,0(r2)
   8d46c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8d470:	e0fffe17 	ldw	r3,-8(fp)
   8d474:	e0bffc17 	ldw	r2,-16(fp)
   8d478:	10fff01e 	bne	r2,r3,8d43c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   8d47c:	e03fff15 	stw	zero,-4(fp)
   8d480:	e0bfff17 	ldw	r2,-4(fp)
}
   8d484:	e037883a 	mov	sp,fp
   8d488:	dfc00117 	ldw	ra,4(sp)
   8d48c:	df000017 	ldw	fp,0(sp)
   8d490:	dec00204 	addi	sp,sp,8
   8d494:	f800283a 	ret

0008d498 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8d498:	defffa04 	addi	sp,sp,-24
   8d49c:	dfc00515 	stw	ra,20(sp)
   8d4a0:	df000415 	stw	fp,16(sp)
   8d4a4:	df000404 	addi	fp,sp,16
   8d4a8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8d4ac:	00800274 	movhi	r2,9
   8d4b0:	10bf6004 	addi	r2,r2,-640
   8d4b4:	10800017 	ldw	r2,0(r2)
   8d4b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8d4bc:	00003306 	br	8d58c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   8d4c0:	e0bffd17 	ldw	r2,-12(fp)
   8d4c4:	11000217 	ldw	r4,8(r2)
   8d4c8:	008182c0 	call	8182c <strlen>
   8d4cc:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   8d4d0:	e0bffd17 	ldw	r2,-12(fp)
   8d4d4:	10c00217 	ldw	r3,8(r2)
   8d4d8:	e0bffc17 	ldw	r2,-16(fp)
   8d4dc:	1885883a 	add	r2,r3,r2
   8d4e0:	10bfffc4 	addi	r2,r2,-1
   8d4e4:	10800003 	ldbu	r2,0(r2)
   8d4e8:	10803fcc 	andi	r2,r2,255
   8d4ec:	1080201c 	xori	r2,r2,128
   8d4f0:	10bfe004 	addi	r2,r2,-128
   8d4f4:	10800bd8 	cmpnei	r2,r2,47
   8d4f8:	1000031e 	bne	r2,zero,8d508 <alt_find_file+0x70>
    {
      len -= 1;
   8d4fc:	e0bffc17 	ldw	r2,-16(fp)
   8d500:	10bfffc4 	addi	r2,r2,-1
   8d504:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8d508:	e0bffc17 	ldw	r2,-16(fp)
   8d50c:	1007883a 	mov	r3,r2
   8d510:	e0bffe17 	ldw	r2,-8(fp)
   8d514:	1885883a 	add	r2,r3,r2
   8d518:	10800003 	ldbu	r2,0(r2)
   8d51c:	10803fcc 	andi	r2,r2,255
   8d520:	1080201c 	xori	r2,r2,128
   8d524:	10bfe004 	addi	r2,r2,-128
   8d528:	10800be0 	cmpeqi	r2,r2,47
   8d52c:	10000a1e 	bne	r2,zero,8d558 <alt_find_file+0xc0>
   8d530:	e0bffc17 	ldw	r2,-16(fp)
   8d534:	1007883a 	mov	r3,r2
   8d538:	e0bffe17 	ldw	r2,-8(fp)
   8d53c:	1885883a 	add	r2,r3,r2
   8d540:	10800003 	ldbu	r2,0(r2)
   8d544:	10803fcc 	andi	r2,r2,255
   8d548:	1080201c 	xori	r2,r2,128
   8d54c:	10bfe004 	addi	r2,r2,-128
   8d550:	1004c03a 	cmpne	r2,r2,zero
   8d554:	10000a1e 	bne	r2,zero,8d580 <alt_find_file+0xe8>
   8d558:	e0bffd17 	ldw	r2,-12(fp)
   8d55c:	11000217 	ldw	r4,8(r2)
   8d560:	e1bffc17 	ldw	r6,-16(fp)
   8d564:	e17ffe17 	ldw	r5,-8(fp)
   8d568:	008d6d40 	call	8d6d4 <memcmp>
   8d56c:	1004c03a 	cmpne	r2,r2,zero
   8d570:	1000031e 	bne	r2,zero,8d580 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   8d574:	e0bffd17 	ldw	r2,-12(fp)
   8d578:	e0bfff15 	stw	r2,-4(fp)
   8d57c:	00000806 	br	8d5a0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   8d580:	e0bffd17 	ldw	r2,-12(fp)
   8d584:	10800017 	ldw	r2,0(r2)
   8d588:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8d58c:	00c00274 	movhi	r3,9
   8d590:	18ff6004 	addi	r3,r3,-640
   8d594:	e0bffd17 	ldw	r2,-12(fp)
   8d598:	10ffc91e 	bne	r2,r3,8d4c0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8d59c:	e03fff15 	stw	zero,-4(fp)
   8d5a0:	e0bfff17 	ldw	r2,-4(fp)
}
   8d5a4:	e037883a 	mov	sp,fp
   8d5a8:	dfc00117 	ldw	ra,4(sp)
   8d5ac:	df000017 	ldw	fp,0(sp)
   8d5b0:	dec00204 	addi	sp,sp,8
   8d5b4:	f800283a 	ret

0008d5b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   8d5b8:	defffa04 	addi	sp,sp,-24
   8d5bc:	dfc00515 	stw	ra,20(sp)
   8d5c0:	df000415 	stw	fp,16(sp)
   8d5c4:	dc000315 	stw	r16,12(sp)
   8d5c8:	df000304 	addi	fp,sp,12
   8d5cc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   8d5d0:	00bffa04 	movi	r2,-24
   8d5d4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8d5d8:	e03ffe15 	stw	zero,-8(fp)
   8d5dc:	00002006 	br	8d660 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   8d5e0:	e13ffe17 	ldw	r4,-8(fp)
   8d5e4:	04000274 	movhi	r16,9
   8d5e8:	843adc04 	addi	r16,r16,-5264
   8d5ec:	01400304 	movi	r5,12
   8d5f0:	008aa7c0 	call	8aa7c <__mulsi3>
   8d5f4:	1405883a 	add	r2,r2,r16
   8d5f8:	10800017 	ldw	r2,0(r2)
   8d5fc:	1004c03a 	cmpne	r2,r2,zero
   8d600:	1000141e 	bne	r2,zero,8d654 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   8d604:	e13ffe17 	ldw	r4,-8(fp)
   8d608:	04000274 	movhi	r16,9
   8d60c:	843adc04 	addi	r16,r16,-5264
   8d610:	01400304 	movi	r5,12
   8d614:	008aa7c0 	call	8aa7c <__mulsi3>
   8d618:	1407883a 	add	r3,r2,r16
   8d61c:	e0bfff17 	ldw	r2,-4(fp)
   8d620:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   8d624:	00800274 	movhi	r2,9
   8d628:	10bf6404 	addi	r2,r2,-624
   8d62c:	10c00017 	ldw	r3,0(r2)
   8d630:	e0bffe17 	ldw	r2,-8(fp)
   8d634:	1880040e 	bge	r3,r2,8d648 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   8d638:	00c00274 	movhi	r3,9
   8d63c:	18ff6404 	addi	r3,r3,-624
   8d640:	e0bffe17 	ldw	r2,-8(fp)
   8d644:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   8d648:	e0bffe17 	ldw	r2,-8(fp)
   8d64c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   8d650:	00000606 	br	8d66c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8d654:	e0bffe17 	ldw	r2,-8(fp)
   8d658:	10800044 	addi	r2,r2,1
   8d65c:	e0bffe15 	stw	r2,-8(fp)
   8d660:	e0bffe17 	ldw	r2,-8(fp)
   8d664:	10800810 	cmplti	r2,r2,32
   8d668:	103fdd1e 	bne	r2,zero,8d5e0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   8d66c:	e0bffd17 	ldw	r2,-12(fp)
}
   8d670:	e037883a 	mov	sp,fp
   8d674:	dfc00217 	ldw	ra,8(sp)
   8d678:	df000117 	ldw	fp,4(sp)
   8d67c:	dc000017 	ldw	r16,0(sp)
   8d680:	dec00304 	addi	sp,sp,12
   8d684:	f800283a 	ret

0008d688 <atexit>:
   8d688:	200b883a 	mov	r5,r4
   8d68c:	000d883a 	mov	r6,zero
   8d690:	0009883a 	mov	r4,zero
   8d694:	000f883a 	mov	r7,zero
   8d698:	008d7481 	jmpi	8d748 <__register_exitproc>

0008d69c <exit>:
   8d69c:	defffe04 	addi	sp,sp,-8
   8d6a0:	000b883a 	mov	r5,zero
   8d6a4:	dc000015 	stw	r16,0(sp)
   8d6a8:	dfc00115 	stw	ra,4(sp)
   8d6ac:	2021883a 	mov	r16,r4
   8d6b0:	008d8800 	call	8d880 <__call_exitprocs>
   8d6b4:	00800274 	movhi	r2,9
   8d6b8:	10bf5b04 	addi	r2,r2,-660
   8d6bc:	11000017 	ldw	r4,0(r2)
   8d6c0:	20800f17 	ldw	r2,60(r4)
   8d6c4:	10000126 	beq	r2,zero,8d6cc <exit+0x30>
   8d6c8:	103ee83a 	callr	r2
   8d6cc:	8009883a 	mov	r4,r16
   8d6d0:	008da700 	call	8da70 <_exit>

0008d6d4 <memcmp>:
   8d6d4:	00c000c4 	movi	r3,3
   8d6d8:	1980032e 	bgeu	r3,r6,8d6e8 <memcmp+0x14>
   8d6dc:	2144b03a 	or	r2,r4,r5
   8d6e0:	10c4703a 	and	r2,r2,r3
   8d6e4:	10000f26 	beq	r2,zero,8d724 <memcmp+0x50>
   8d6e8:	31ffffc4 	addi	r7,r6,-1
   8d6ec:	3000061e 	bne	r6,zero,8d708 <memcmp+0x34>
   8d6f0:	00000a06 	br	8d71c <memcmp+0x48>
   8d6f4:	39ffffc4 	addi	r7,r7,-1
   8d6f8:	00bfffc4 	movi	r2,-1
   8d6fc:	21000044 	addi	r4,r4,1
   8d700:	29400044 	addi	r5,r5,1
   8d704:	38800526 	beq	r7,r2,8d71c <memcmp+0x48>
   8d708:	20c00003 	ldbu	r3,0(r4)
   8d70c:	28800003 	ldbu	r2,0(r5)
   8d710:	18bff826 	beq	r3,r2,8d6f4 <memcmp+0x20>
   8d714:	1885c83a 	sub	r2,r3,r2
   8d718:	f800283a 	ret
   8d71c:	0005883a 	mov	r2,zero
   8d720:	f800283a 	ret
   8d724:	180f883a 	mov	r7,r3
   8d728:	20c00017 	ldw	r3,0(r4)
   8d72c:	28800017 	ldw	r2,0(r5)
   8d730:	18bfed1e 	bne	r3,r2,8d6e8 <memcmp+0x14>
   8d734:	31bfff04 	addi	r6,r6,-4
   8d738:	21000104 	addi	r4,r4,4
   8d73c:	29400104 	addi	r5,r5,4
   8d740:	39bff936 	bltu	r7,r6,8d728 <memcmp+0x54>
   8d744:	003fe806 	br	8d6e8 <memcmp+0x14>

0008d748 <__register_exitproc>:
   8d748:	defffa04 	addi	sp,sp,-24
   8d74c:	00800274 	movhi	r2,9
   8d750:	10bf5b04 	addi	r2,r2,-660
   8d754:	dc000015 	stw	r16,0(sp)
   8d758:	14000017 	ldw	r16,0(r2)
   8d75c:	dd000415 	stw	r20,16(sp)
   8d760:	2829883a 	mov	r20,r5
   8d764:	81405217 	ldw	r5,328(r16)
   8d768:	dcc00315 	stw	r19,12(sp)
   8d76c:	dc800215 	stw	r18,8(sp)
   8d770:	dc400115 	stw	r17,4(sp)
   8d774:	dfc00515 	stw	ra,20(sp)
   8d778:	2023883a 	mov	r17,r4
   8d77c:	3027883a 	mov	r19,r6
   8d780:	3825883a 	mov	r18,r7
   8d784:	28002526 	beq	r5,zero,8d81c <__register_exitproc+0xd4>
   8d788:	29000117 	ldw	r4,4(r5)
   8d78c:	008007c4 	movi	r2,31
   8d790:	11002716 	blt	r2,r4,8d830 <__register_exitproc+0xe8>
   8d794:	8800101e 	bne	r17,zero,8d7d8 <__register_exitproc+0x90>
   8d798:	2105883a 	add	r2,r4,r4
   8d79c:	1085883a 	add	r2,r2,r2
   8d7a0:	20c00044 	addi	r3,r4,1
   8d7a4:	1145883a 	add	r2,r2,r5
   8d7a8:	0009883a 	mov	r4,zero
   8d7ac:	15000215 	stw	r20,8(r2)
   8d7b0:	28c00115 	stw	r3,4(r5)
   8d7b4:	2005883a 	mov	r2,r4
   8d7b8:	dfc00517 	ldw	ra,20(sp)
   8d7bc:	dd000417 	ldw	r20,16(sp)
   8d7c0:	dcc00317 	ldw	r19,12(sp)
   8d7c4:	dc800217 	ldw	r18,8(sp)
   8d7c8:	dc400117 	ldw	r17,4(sp)
   8d7cc:	dc000017 	ldw	r16,0(sp)
   8d7d0:	dec00604 	addi	sp,sp,24
   8d7d4:	f800283a 	ret
   8d7d8:	29802204 	addi	r6,r5,136
   8d7dc:	00800044 	movi	r2,1
   8d7e0:	110e983a 	sll	r7,r2,r4
   8d7e4:	30c04017 	ldw	r3,256(r6)
   8d7e8:	2105883a 	add	r2,r4,r4
   8d7ec:	1085883a 	add	r2,r2,r2
   8d7f0:	1185883a 	add	r2,r2,r6
   8d7f4:	19c6b03a 	or	r3,r3,r7
   8d7f8:	14802015 	stw	r18,128(r2)
   8d7fc:	14c00015 	stw	r19,0(r2)
   8d800:	00800084 	movi	r2,2
   8d804:	30c04015 	stw	r3,256(r6)
   8d808:	88bfe31e 	bne	r17,r2,8d798 <__register_exitproc+0x50>
   8d80c:	30804117 	ldw	r2,260(r6)
   8d810:	11c4b03a 	or	r2,r2,r7
   8d814:	30804115 	stw	r2,260(r6)
   8d818:	003fdf06 	br	8d798 <__register_exitproc+0x50>
   8d81c:	00800274 	movhi	r2,9
   8d820:	10871904 	addi	r2,r2,7268
   8d824:	100b883a 	mov	r5,r2
   8d828:	80805215 	stw	r2,328(r16)
   8d82c:	003fd606 	br	8d788 <__register_exitproc+0x40>
   8d830:	00800034 	movhi	r2,0
   8d834:	10800004 	addi	r2,r2,0
   8d838:	1000021e 	bne	r2,zero,8d844 <__register_exitproc+0xfc>
   8d83c:	013fffc4 	movi	r4,-1
   8d840:	003fdc06 	br	8d7b4 <__register_exitproc+0x6c>
   8d844:	01006404 	movi	r4,400
   8d848:	103ee83a 	callr	r2
   8d84c:	1007883a 	mov	r3,r2
   8d850:	103ffa26 	beq	r2,zero,8d83c <__register_exitproc+0xf4>
   8d854:	80805217 	ldw	r2,328(r16)
   8d858:	180b883a 	mov	r5,r3
   8d85c:	18000115 	stw	zero,4(r3)
   8d860:	18800015 	stw	r2,0(r3)
   8d864:	80c05215 	stw	r3,328(r16)
   8d868:	18006215 	stw	zero,392(r3)
   8d86c:	18006315 	stw	zero,396(r3)
   8d870:	0009883a 	mov	r4,zero
   8d874:	883fc826 	beq	r17,zero,8d798 <__register_exitproc+0x50>
   8d878:	003fd706 	br	8d7d8 <__register_exitproc+0x90>

0008d87c <register_fini>:
   8d87c:	f800283a 	ret

0008d880 <__call_exitprocs>:
   8d880:	00800274 	movhi	r2,9
   8d884:	10bf5b04 	addi	r2,r2,-660
   8d888:	10800017 	ldw	r2,0(r2)
   8d88c:	defff304 	addi	sp,sp,-52
   8d890:	df000b15 	stw	fp,44(sp)
   8d894:	d8800115 	stw	r2,4(sp)
   8d898:	00800034 	movhi	r2,0
   8d89c:	10800004 	addi	r2,r2,0
   8d8a0:	1005003a 	cmpeq	r2,r2,zero
   8d8a4:	d8800215 	stw	r2,8(sp)
   8d8a8:	d8800117 	ldw	r2,4(sp)
   8d8ac:	dd400815 	stw	r21,32(sp)
   8d8b0:	dd000715 	stw	r20,28(sp)
   8d8b4:	10805204 	addi	r2,r2,328
   8d8b8:	dfc00c15 	stw	ra,48(sp)
   8d8bc:	ddc00a15 	stw	r23,40(sp)
   8d8c0:	dd800915 	stw	r22,36(sp)
   8d8c4:	dcc00615 	stw	r19,24(sp)
   8d8c8:	dc800515 	stw	r18,20(sp)
   8d8cc:	dc400415 	stw	r17,16(sp)
   8d8d0:	dc000315 	stw	r16,12(sp)
   8d8d4:	282b883a 	mov	r21,r5
   8d8d8:	2039883a 	mov	fp,r4
   8d8dc:	d8800015 	stw	r2,0(sp)
   8d8e0:	2829003a 	cmpeq	r20,r5,zero
   8d8e4:	d8800117 	ldw	r2,4(sp)
   8d8e8:	14405217 	ldw	r17,328(r2)
   8d8ec:	88001026 	beq	r17,zero,8d930 <__call_exitprocs+0xb0>
   8d8f0:	ddc00017 	ldw	r23,0(sp)
   8d8f4:	88800117 	ldw	r2,4(r17)
   8d8f8:	8c802204 	addi	r18,r17,136
   8d8fc:	143fffc4 	addi	r16,r2,-1
   8d900:	80000916 	blt	r16,zero,8d928 <__call_exitprocs+0xa8>
   8d904:	05bfffc4 	movi	r22,-1
   8d908:	a000151e 	bne	r20,zero,8d960 <__call_exitprocs+0xe0>
   8d90c:	8409883a 	add	r4,r16,r16
   8d910:	2105883a 	add	r2,r4,r4
   8d914:	1485883a 	add	r2,r2,r18
   8d918:	10c02017 	ldw	r3,128(r2)
   8d91c:	a8c01126 	beq	r21,r3,8d964 <__call_exitprocs+0xe4>
   8d920:	843fffc4 	addi	r16,r16,-1
   8d924:	85bff81e 	bne	r16,r22,8d908 <__call_exitprocs+0x88>
   8d928:	d8800217 	ldw	r2,8(sp)
   8d92c:	10003126 	beq	r2,zero,8d9f4 <__call_exitprocs+0x174>
   8d930:	dfc00c17 	ldw	ra,48(sp)
   8d934:	df000b17 	ldw	fp,44(sp)
   8d938:	ddc00a17 	ldw	r23,40(sp)
   8d93c:	dd800917 	ldw	r22,36(sp)
   8d940:	dd400817 	ldw	r21,32(sp)
   8d944:	dd000717 	ldw	r20,28(sp)
   8d948:	dcc00617 	ldw	r19,24(sp)
   8d94c:	dc800517 	ldw	r18,20(sp)
   8d950:	dc400417 	ldw	r17,16(sp)
   8d954:	dc000317 	ldw	r16,12(sp)
   8d958:	dec00d04 	addi	sp,sp,52
   8d95c:	f800283a 	ret
   8d960:	8409883a 	add	r4,r16,r16
   8d964:	88c00117 	ldw	r3,4(r17)
   8d968:	2105883a 	add	r2,r4,r4
   8d96c:	1445883a 	add	r2,r2,r17
   8d970:	18ffffc4 	addi	r3,r3,-1
   8d974:	11800217 	ldw	r6,8(r2)
   8d978:	1c001526 	beq	r3,r16,8d9d0 <__call_exitprocs+0x150>
   8d97c:	10000215 	stw	zero,8(r2)
   8d980:	303fe726 	beq	r6,zero,8d920 <__call_exitprocs+0xa0>
   8d984:	00c00044 	movi	r3,1
   8d988:	1c06983a 	sll	r3,r3,r16
   8d98c:	90804017 	ldw	r2,256(r18)
   8d990:	8cc00117 	ldw	r19,4(r17)
   8d994:	1884703a 	and	r2,r3,r2
   8d998:	10001426 	beq	r2,zero,8d9ec <__call_exitprocs+0x16c>
   8d99c:	90804117 	ldw	r2,260(r18)
   8d9a0:	1884703a 	and	r2,r3,r2
   8d9a4:	10000c1e 	bne	r2,zero,8d9d8 <__call_exitprocs+0x158>
   8d9a8:	2105883a 	add	r2,r4,r4
   8d9ac:	1485883a 	add	r2,r2,r18
   8d9b0:	11400017 	ldw	r5,0(r2)
   8d9b4:	e009883a 	mov	r4,fp
   8d9b8:	303ee83a 	callr	r6
   8d9bc:	88800117 	ldw	r2,4(r17)
   8d9c0:	98bfc81e 	bne	r19,r2,8d8e4 <__call_exitprocs+0x64>
   8d9c4:	b8800017 	ldw	r2,0(r23)
   8d9c8:	147fd526 	beq	r2,r17,8d920 <__call_exitprocs+0xa0>
   8d9cc:	003fc506 	br	8d8e4 <__call_exitprocs+0x64>
   8d9d0:	8c000115 	stw	r16,4(r17)
   8d9d4:	003fea06 	br	8d980 <__call_exitprocs+0x100>
   8d9d8:	2105883a 	add	r2,r4,r4
   8d9dc:	1485883a 	add	r2,r2,r18
   8d9e0:	11000017 	ldw	r4,0(r2)
   8d9e4:	303ee83a 	callr	r6
   8d9e8:	003ff406 	br	8d9bc <__call_exitprocs+0x13c>
   8d9ec:	303ee83a 	callr	r6
   8d9f0:	003ff206 	br	8d9bc <__call_exitprocs+0x13c>
   8d9f4:	88800117 	ldw	r2,4(r17)
   8d9f8:	1000081e 	bne	r2,zero,8da1c <__call_exitprocs+0x19c>
   8d9fc:	89000017 	ldw	r4,0(r17)
   8da00:	20000726 	beq	r4,zero,8da20 <__call_exitprocs+0x1a0>
   8da04:	b9000015 	stw	r4,0(r23)
   8da08:	8809883a 	mov	r4,r17
   8da0c:	00000000 	call	0 <__alt_mem_sram-0x80000>
   8da10:	bc400017 	ldw	r17,0(r23)
   8da14:	883fb71e 	bne	r17,zero,8d8f4 <__call_exitprocs+0x74>
   8da18:	003fc506 	br	8d930 <__call_exitprocs+0xb0>
   8da1c:	89000017 	ldw	r4,0(r17)
   8da20:	882f883a 	mov	r23,r17
   8da24:	2023883a 	mov	r17,r4
   8da28:	883fb21e 	bne	r17,zero,8d8f4 <__call_exitprocs+0x74>
   8da2c:	003fc006 	br	8d930 <__call_exitprocs+0xb0>

0008da30 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   8da30:	defffd04 	addi	sp,sp,-12
   8da34:	df000215 	stw	fp,8(sp)
   8da38:	df000204 	addi	fp,sp,8
   8da3c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   8da40:	e0bfff17 	ldw	r2,-4(fp)
   8da44:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   8da48:	e0bffe17 	ldw	r2,-8(fp)
   8da4c:	1005003a 	cmpeq	r2,r2,zero
   8da50:	1000021e 	bne	r2,zero,8da5c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   8da54:	002af070 	cmpltui	zero,zero,43969
   8da58:	00000106 	br	8da60 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   8da5c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   8da60:	e037883a 	mov	sp,fp
   8da64:	df000017 	ldw	fp,0(sp)
   8da68:	dec00104 	addi	sp,sp,4
   8da6c:	f800283a 	ret

0008da70 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   8da70:	defffd04 	addi	sp,sp,-12
   8da74:	dfc00215 	stw	ra,8(sp)
   8da78:	df000115 	stw	fp,4(sp)
   8da7c:	df000104 	addi	fp,sp,4
   8da80:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   8da84:	e13fff17 	ldw	r4,-4(fp)
   8da88:	008da300 	call	8da30 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   8da8c:	003fff06 	br	8da8c <_exit+0x1c>
   8da90:	0008d87c 	xorhi	zero,zero,9057
